component Breaker_X1_X2 = {
  var auto_reopen_wait : [0..1];
  var auto_reclose_wait : [0..1];
  var commanded_ar_non_auto : [0..1];
  var commanded_ar_auto : [0..1];
  var commanded_closed : [0..1];
  var commanded_open : [0..1];
  var lockout : [0..1];
  var ar_status : {auto,non_auto};
  var state : {open,closed};
  event state_change_close;
  event state_change_open;
  event breaker_is_closed;
  event count_as_fault;
  event check_isolator_open;
  event close;
  event simple_trip;
  event trip;
  event open;
  event IMPOSSIBLE;
  event command_cb_ar_status_NON_AUTO;
  event command_cb_ar_status_AUTO;
  event command_ar_supy_control_status_NON_AUTO;
  event command_ar_supy_control_status_AUTO;
  event command_cb_state_closed;
  event command_cb_state_open;
  event cb_ar_status_NON_AUTO;
  event cb_ar_status_AUTO;
  event ar_supy_control_status_NON_AUTO;
  event ar_supy_control_status_AUTO;
  event cb_command_fail;
  event cb_state_not_responding;
  event cb_state_abnormal;
  event cb_state_closed;
  event cb_state_open;
  transition breaker_is_closed_transition
    breaker_is_closed_transition_0 state = closed -> breaker_is_closed;
  transition check_isolator_open_transition
    check_isolator_open_transition_0 true = 1 -> IMPOSSIBLE;
    check_isolator_open_transition_1 state = open -> state := open;
  triggeredby check_isolator_open;
  transition auto_reopen_wait_timeout
    auto_reopen_wait_timeout_0 true = 1 -> auto_reopen_wait := false;
  triggeredby [0.0..1.0] auto_reopen_wait = true;
  transition auto_reclose_wait_timeout
    auto_reclose_wait_timeout_0 true = 1 -> auto_reclose_wait := false;
  triggeredby [0.0..45.0] auto_reclose_wait = true;
  transition commanded_ar_non_auto_timeout
    commanded_ar_non_auto_timeout_0 true = 1 -> commanded_ar_non_auto := false;
  triggeredby [0.0..45.0] commanded_ar_non_auto = true;
  transition commanded_ar_auto_timeout
    commanded_ar_auto_timeout_0 true = 1 -> commanded_ar_auto := false;
  triggeredby [0.0..45.0] commanded_ar_auto = true;
  transition commanded_closed_timeout
    commanded_closed_timeout_0 true = 1 -> commanded_closed := false;
  triggeredby [0.0..45.0] commanded_closed = true;
  transition commanded_open_timeout
    commanded_open_timeout_0 true = 1 -> commanded_open := false;
  triggeredby [0.0..45.0] commanded_open = true;
  transition not_responding
    not_responding_0 true = 1 -> cb_state_not_responding, count_as_fault;
  transition abnormal
    abnormal_0 true = 1 -> cb_state_abnormal, count_as_fault;
  transition ar_status_non_auto_unexplained
    ar_status_non_auto_unexplained_0 true = 1 -> ar_status := non_auto, cb_ar_status_NON_AUTO, count_as_fault;
    ar_status_non_auto_unexplained_1 true = 1 -> ar_status := non_auto, ar_supy_control_status_NON_AUTO, count_as_fault;
  transition ar_status_auto_unexplained
    ar_status_auto_unexplained_0 true = 1 -> ar_status := auto, cb_ar_status_AUTO, count_as_fault;
    ar_status_auto_unexplained_1 true = 1 -> ar_status := auto, ar_supy_control_status_AUTO, count_as_fault;
  transition ar_status_non_auto
    ar_status_non_auto_0 commanded_ar_non_auto = true -> ar_status := non_auto, cb_ar_status_NON_AUTO;
    ar_status_non_auto_1 commanded_ar_non_auto = true -> ar_status := non_auto, ar_supy_control_status_NON_AUTO;
  transition ar_status_auto
    ar_status_auto_0 commanded_ar_auto = true -> ar_status := auto, cb_ar_status_AUTO;
    ar_status_auto_1 commanded_ar_auto = true -> ar_status := auto, ar_supy_control_status_AUTO;
  transition command_ar_non_auto
    command_ar_non_auto_0 true = 1 -> commanded_ar_non_auto := true, command_cb_ar_status_NON_AUTO;
    command_ar_non_auto_1 true = 1 -> commanded_ar_non_auto := true, command_ar_supy_control_status_NON_AUTO;
  transition command_ar_auto
    command_ar_auto_0 true = 1 -> commanded_ar_auto := true, command_cb_ar_status_AUTO;
    command_ar_auto_1 true = 1 -> commanded_ar_auto := true, command_ar_supy_control_status_AUTO;
  transition command_close_fail
    command_close_fail_0 commanded_closed = true -> cb_command_fail;
  transition close_on_command
    close_on_command_0 (state = open AND commanded_closed = true) -> state := closed, cb_state_closed, state_change_close;
  transition command_close
    command_close_0 true = 1 -> commanded_closed := true, command_cb_state_closed;
  transition command_open_fail
    command_open_fail_0 commanded_open = true -> cb_command_fail;
  transition open_on_command
    open_on_command_0 (state = closed AND commanded_open = true) -> state := open, cb_state_open, state_change_open;
  transition command_open
    command_open_0 true = 1 -> commanded_open := true, command_cb_state_open;
  transition reopen
    reopen_0 (state = closed AND auto_reopen_wait = true) -> state := open, auto_reopen_wait := false, lockout := true, cb_state_open, state_change_open;
  transition reclose
    reclose_0 ((state = open AND auto_reclose_wait = true) AND lockout = false) -> state := closed, auto_reclose_wait := false, auto_reopen_wait := true, cb_state_closed, state_change_close;
  transition close_unexplained
    close_unexplained_0 state = open -> state := closed, cb_state_closed, state_change_close, count_as_fault;
  transition close1
    close1_0 state = open -> state := closed, cb_state_closed, state_change_close;
  triggeredby close;
  transition trip_unexplained
    trip_unexplained_0 (state = closed AND ar_status = auto) -> state := open, auto_reclose_wait := true, cb_state_open, state_change_open, count_as_fault;
  transition simple_trip1
    simple_trip1_0 state = open -> state := open;
    simple_trip1_1 (state = closed AND ar_status = non_auto) -> state := open, cb_state_open;
    simple_trip1_2 (state = closed AND ar_status = auto) -> state := open, auto_reclose_wait := true, cb_state_open;
  triggeredby simple_trip;
  transition trip1
    trip1_0 (state = closed AND ar_status = non_auto) -> state := open, cb_state_open, state_change_open;
    trip1_1 (state = closed AND ar_status = auto) -> state := open, auto_reclose_wait := true, cb_state_open, state_change_open;
  triggeredby trip;
  transition open_unexplained
    open_unexplained_0 state = closed -> state := open, cb_state_open, state_change_open, count_as_fault;
  transition open1
    open1_0 state = closed -> state := open, cb_state_open, state_change_open;
  triggeredby open;
}
component Breaker_X3_X4 = {
  var auto_reopen_wait : [0..1];
  var auto_reclose_wait : [0..1];
  var commanded_ar_non_auto : [0..1];
  var commanded_ar_auto : [0..1];
  var commanded_closed : [0..1];
  var commanded_open : [0..1];
  var lockout : [0..1];
  var ar_status : {auto,non_auto};
  var state : {open,closed};
  event state_change_close;
  event state_change_open;
  event breaker_is_closed;
  event count_as_fault;
  event check_isolator_open;
  event close;
  event simple_trip;
  event trip;
  event open;
  event IMPOSSIBLE;
  event command_cb_ar_status_NON_AUTO;
  event command_cb_ar_status_AUTO;
  event command_ar_supy_control_status_NON_AUTO;
  event command_ar_supy_control_status_AUTO;
  event command_cb_state_closed;
  event command_cb_state_open;
  event cb_ar_status_NON_AUTO;
  event cb_ar_status_AUTO;
  event ar_supy_control_status_NON_AUTO;
  event ar_supy_control_status_AUTO;
  event cb_command_fail;
  event cb_state_not_responding;
  event cb_state_abnormal;
  event cb_state_closed;
  event cb_state_open;
  transition breaker_is_closed_transition
    breaker_is_closed_transition_0 state = closed -> breaker_is_closed;
  transition check_isolator_open_transition
    check_isolator_open_transition_0 true = 1 -> IMPOSSIBLE;
    check_isolator_open_transition_1 state = open -> state := open;
  triggeredby check_isolator_open;
  transition auto_reopen_wait_timeout
    auto_reopen_wait_timeout_0 true = 1 -> auto_reopen_wait := false;
  triggeredby [0.0..1.0] auto_reopen_wait = true;
  transition auto_reclose_wait_timeout
    auto_reclose_wait_timeout_0 true = 1 -> auto_reclose_wait := false;
  triggeredby [0.0..45.0] auto_reclose_wait = true;
  transition commanded_ar_non_auto_timeout
    commanded_ar_non_auto_timeout_0 true = 1 -> commanded_ar_non_auto := false;
  triggeredby [0.0..45.0] commanded_ar_non_auto = true;
  transition commanded_ar_auto_timeout
    commanded_ar_auto_timeout_0 true = 1 -> commanded_ar_auto := false;
  triggeredby [0.0..45.0] commanded_ar_auto = true;
  transition commanded_closed_timeout
    commanded_closed_timeout_0 true = 1 -> commanded_closed := false;
  triggeredby [0.0..45.0] commanded_closed = true;
  transition commanded_open_timeout
    commanded_open_timeout_0 true = 1 -> commanded_open := false;
  triggeredby [0.0..45.0] commanded_open = true;
  transition not_responding
    not_responding_0 true = 1 -> cb_state_not_responding, count_as_fault;
  transition abnormal
    abnormal_0 true = 1 -> cb_state_abnormal, count_as_fault;
  transition ar_status_non_auto_unexplained
    ar_status_non_auto_unexplained_0 true = 1 -> ar_status := non_auto, cb_ar_status_NON_AUTO, count_as_fault;
    ar_status_non_auto_unexplained_1 true = 1 -> ar_status := non_auto, ar_supy_control_status_NON_AUTO, count_as_fault;
  transition ar_status_auto_unexplained
    ar_status_auto_unexplained_0 true = 1 -> ar_status := auto, cb_ar_status_AUTO, count_as_fault;
    ar_status_auto_unexplained_1 true = 1 -> ar_status := auto, ar_supy_control_status_AUTO, count_as_fault;
  transition ar_status_non_auto
    ar_status_non_auto_0 commanded_ar_non_auto = true -> ar_status := non_auto, cb_ar_status_NON_AUTO;
    ar_status_non_auto_1 commanded_ar_non_auto = true -> ar_status := non_auto, ar_supy_control_status_NON_AUTO;
  transition ar_status_auto
    ar_status_auto_0 commanded_ar_auto = true -> ar_status := auto, cb_ar_status_AUTO;
    ar_status_auto_1 commanded_ar_auto = true -> ar_status := auto, ar_supy_control_status_AUTO;
  transition command_ar_non_auto
    command_ar_non_auto_0 true = 1 -> commanded_ar_non_auto := true, command_cb_ar_status_NON_AUTO;
    command_ar_non_auto_1 true = 1 -> commanded_ar_non_auto := true, command_ar_supy_control_status_NON_AUTO;
  transition command_ar_auto
    command_ar_auto_0 true = 1 -> commanded_ar_auto := true, command_cb_ar_status_AUTO;
    command_ar_auto_1 true = 1 -> commanded_ar_auto := true, command_ar_supy_control_status_AUTO;
  transition command_close_fail
    command_close_fail_0 commanded_closed = true -> cb_command_fail;
  transition close_on_command
    close_on_command_0 (state = open AND commanded_closed = true) -> state := closed, cb_state_closed, state_change_close;
  transition command_close
    command_close_0 true = 1 -> commanded_closed := true, command_cb_state_closed;
  transition command_open_fail
    command_open_fail_0 commanded_open = true -> cb_command_fail;
  transition open_on_command
    open_on_command_0 (state = closed AND commanded_open = true) -> state := open, cb_state_open, state_change_open;
  transition command_open
    command_open_0 true = 1 -> commanded_open := true, command_cb_state_open;
  transition reopen
    reopen_0 (state = closed AND auto_reopen_wait = true) -> state := open, auto_reopen_wait := false, lockout := true, cb_state_open, state_change_open;
  transition reclose
    reclose_0 ((state = open AND auto_reclose_wait = true) AND lockout = false) -> state := closed, auto_reclose_wait := false, auto_reopen_wait := true, cb_state_closed, state_change_close;
  transition close_unexplained
    close_unexplained_0 state = open -> state := closed, cb_state_closed, state_change_close, count_as_fault;
  transition close1
    close1_0 state = open -> state := closed, cb_state_closed, state_change_close;
  triggeredby close;
  transition trip_unexplained
    trip_unexplained_0 (state = closed AND ar_status = auto) -> state := open, auto_reclose_wait := true, cb_state_open, state_change_open, count_as_fault;
  transition simple_trip1
    simple_trip1_0 state = open -> state := open;
    simple_trip1_1 (state = closed AND ar_status = non_auto) -> state := open, cb_state_open;
    simple_trip1_2 (state = closed AND ar_status = auto) -> state := open, auto_reclose_wait := true, cb_state_open;
  triggeredby simple_trip;
  transition trip1
    trip1_0 (state = closed AND ar_status = non_auto) -> state := open, cb_state_open, state_change_open;
    trip1_1 (state = closed AND ar_status = auto) -> state := open, auto_reclose_wait := true, cb_state_open, state_change_open;
  triggeredby trip;
  transition open_unexplained
    open_unexplained_0 state = closed -> state := open, cb_state_open, state_change_open, count_as_fault;
  transition open1
    open1_0 state = closed -> state := open, cb_state_open, state_change_open;
  triggeredby open;
}
component Breaker_X5_X6 = {
  var auto_reopen_wait : [0..1];
  var auto_reclose_wait : [0..1];
  var commanded_ar_non_auto : [0..1];
  var commanded_ar_auto : [0..1];
  var commanded_closed : [0..1];
  var commanded_open : [0..1];
  var lockout : [0..1];
  var ar_status : {auto,non_auto};
  var state : {open,closed};
  event state_change_close;
  event state_change_open;
  event breaker_is_closed;
  event count_as_fault;
  event check_isolator_open;
  event close;
  event simple_trip;
  event trip;
  event open;
  event IMPOSSIBLE;
  event command_cb_ar_status_NON_AUTO;
  event command_cb_ar_status_AUTO;
  event command_ar_supy_control_status_NON_AUTO;
  event command_ar_supy_control_status_AUTO;
  event command_cb_state_closed;
  event command_cb_state_open;
  event cb_ar_status_NON_AUTO;
  event cb_ar_status_AUTO;
  event ar_supy_control_status_NON_AUTO;
  event ar_supy_control_status_AUTO;
  event cb_command_fail;
  event cb_state_not_responding;
  event cb_state_abnormal;
  event cb_state_closed;
  event cb_state_open;
  transition breaker_is_closed_transition
    breaker_is_closed_transition_0 state = closed -> breaker_is_closed;
  transition check_isolator_open_transition
    check_isolator_open_transition_0 true = 1 -> IMPOSSIBLE;
    check_isolator_open_transition_1 state = open -> state := open;
  triggeredby check_isolator_open;
  transition auto_reopen_wait_timeout
    auto_reopen_wait_timeout_0 true = 1 -> auto_reopen_wait := false;
  triggeredby [0.0..1.0] auto_reopen_wait = true;
  transition auto_reclose_wait_timeout
    auto_reclose_wait_timeout_0 true = 1 -> auto_reclose_wait := false;
  triggeredby [0.0..45.0] auto_reclose_wait = true;
  transition commanded_ar_non_auto_timeout
    commanded_ar_non_auto_timeout_0 true = 1 -> commanded_ar_non_auto := false;
  triggeredby [0.0..45.0] commanded_ar_non_auto = true;
  transition commanded_ar_auto_timeout
    commanded_ar_auto_timeout_0 true = 1 -> commanded_ar_auto := false;
  triggeredby [0.0..45.0] commanded_ar_auto = true;
  transition commanded_closed_timeout
    commanded_closed_timeout_0 true = 1 -> commanded_closed := false;
  triggeredby [0.0..45.0] commanded_closed = true;
  transition commanded_open_timeout
    commanded_open_timeout_0 true = 1 -> commanded_open := false;
  triggeredby [0.0..45.0] commanded_open = true;
  transition not_responding
    not_responding_0 true = 1 -> cb_state_not_responding, count_as_fault;
  transition abnormal
    abnormal_0 true = 1 -> cb_state_abnormal, count_as_fault;
  transition ar_status_non_auto_unexplained
    ar_status_non_auto_unexplained_0 true = 1 -> ar_status := non_auto, cb_ar_status_NON_AUTO, count_as_fault;
    ar_status_non_auto_unexplained_1 true = 1 -> ar_status := non_auto, ar_supy_control_status_NON_AUTO, count_as_fault;
  transition ar_status_auto_unexplained
    ar_status_auto_unexplained_0 true = 1 -> ar_status := auto, cb_ar_status_AUTO, count_as_fault;
    ar_status_auto_unexplained_1 true = 1 -> ar_status := auto, ar_supy_control_status_AUTO, count_as_fault;
  transition ar_status_non_auto
    ar_status_non_auto_0 commanded_ar_non_auto = true -> ar_status := non_auto, cb_ar_status_NON_AUTO;
    ar_status_non_auto_1 commanded_ar_non_auto = true -> ar_status := non_auto, ar_supy_control_status_NON_AUTO;
  transition ar_status_auto
    ar_status_auto_0 commanded_ar_auto = true -> ar_status := auto, cb_ar_status_AUTO;
    ar_status_auto_1 commanded_ar_auto = true -> ar_status := auto, ar_supy_control_status_AUTO;
  transition command_ar_non_auto
    command_ar_non_auto_0 true = 1 -> commanded_ar_non_auto := true, command_cb_ar_status_NON_AUTO;
    command_ar_non_auto_1 true = 1 -> commanded_ar_non_auto := true, command_ar_supy_control_status_NON_AUTO;
  transition command_ar_auto
    command_ar_auto_0 true = 1 -> commanded_ar_auto := true, command_cb_ar_status_AUTO;
    command_ar_auto_1 true = 1 -> commanded_ar_auto := true, command_ar_supy_control_status_AUTO;
  transition command_close_fail
    command_close_fail_0 commanded_closed = true -> cb_command_fail;
  transition close_on_command
    close_on_command_0 (state = open AND commanded_closed = true) -> state := closed, cb_state_closed, state_change_close;
  transition command_close
    command_close_0 true = 1 -> commanded_closed := true, command_cb_state_closed;
  transition command_open_fail
    command_open_fail_0 commanded_open = true -> cb_command_fail;
  transition open_on_command
    open_on_command_0 (state = closed AND commanded_open = true) -> state := open, cb_state_open, state_change_open;
  transition command_open
    command_open_0 true = 1 -> commanded_open := true, command_cb_state_open;
  transition reopen
    reopen_0 (state = closed AND auto_reopen_wait = true) -> state := open, auto_reopen_wait := false, lockout := true, cb_state_open, state_change_open;
  transition reclose
    reclose_0 ((state = open AND auto_reclose_wait = true) AND lockout = false) -> state := closed, auto_reclose_wait := false, auto_reopen_wait := true, cb_state_closed, state_change_close;
  transition close_unexplained
    close_unexplained_0 state = open -> state := closed, cb_state_closed, state_change_close, count_as_fault;
  transition close1
    close1_0 state = open -> state := closed, cb_state_closed, state_change_close;
  triggeredby close;
  transition trip_unexplained
    trip_unexplained_0 (state = closed AND ar_status = auto) -> state := open, auto_reclose_wait := true, cb_state_open, state_change_open, count_as_fault;
  transition simple_trip1
    simple_trip1_0 state = open -> state := open;
    simple_trip1_1 (state = closed AND ar_status = non_auto) -> state := open, cb_state_open;
    simple_trip1_2 (state = closed AND ar_status = auto) -> state := open, auto_reclose_wait := true, cb_state_open;
  triggeredby simple_trip;
  transition trip1
    trip1_0 (state = closed AND ar_status = non_auto) -> state := open, cb_state_open, state_change_open;
    trip1_1 (state = closed AND ar_status = auto) -> state := open, auto_reclose_wait := true, cb_state_open, state_change_open;
  triggeredby trip;
  transition open_unexplained
    open_unexplained_0 state = closed -> state := open, cb_state_open, state_change_open, count_as_fault;
  transition open1
    open1_0 state = closed -> state := open, cb_state_open, state_change_open;
  triggeredby open;
}
component Breaker_X77_X78 = {
  var auto_reopen_wait : [0..1];
  var auto_reclose_wait : [0..1];
  var commanded_ar_non_auto : [0..1];
  var commanded_ar_auto : [0..1];
  var commanded_closed : [0..1];
  var commanded_open : [0..1];
  var lockout : [0..1];
  var ar_status : {auto,non_auto};
  var state : {open,closed};
  event state_change_close;
  event state_change_open;
  event breaker_is_closed;
  event count_as_fault;
  event check_isolator_open;
  event close;
  event simple_trip;
  event trip;
  event open;
  event IMPOSSIBLE;
  event command_cb_ar_status_NON_AUTO;
  event command_cb_ar_status_AUTO;
  event command_ar_supy_control_status_NON_AUTO;
  event command_ar_supy_control_status_AUTO;
  event command_cb_state_closed;
  event command_cb_state_open;
  event cb_ar_status_NON_AUTO;
  event cb_ar_status_AUTO;
  event ar_supy_control_status_NON_AUTO;
  event ar_supy_control_status_AUTO;
  event cb_command_fail;
  event cb_state_not_responding;
  event cb_state_abnormal;
  event cb_state_closed;
  event cb_state_open;
  transition breaker_is_closed_transition
    breaker_is_closed_transition_0 state = closed -> breaker_is_closed;
  transition check_isolator_open_transition
    check_isolator_open_transition_0 true = 1 -> IMPOSSIBLE;
    check_isolator_open_transition_1 state = open -> state := open;
  triggeredby check_isolator_open;
  transition auto_reopen_wait_timeout
    auto_reopen_wait_timeout_0 true = 1 -> auto_reopen_wait := false;
  triggeredby [0.0..1.0] auto_reopen_wait = true;
  transition auto_reclose_wait_timeout
    auto_reclose_wait_timeout_0 true = 1 -> auto_reclose_wait := false;
  triggeredby [0.0..45.0] auto_reclose_wait = true;
  transition commanded_ar_non_auto_timeout
    commanded_ar_non_auto_timeout_0 true = 1 -> commanded_ar_non_auto := false;
  triggeredby [0.0..45.0] commanded_ar_non_auto = true;
  transition commanded_ar_auto_timeout
    commanded_ar_auto_timeout_0 true = 1 -> commanded_ar_auto := false;
  triggeredby [0.0..45.0] commanded_ar_auto = true;
  transition commanded_closed_timeout
    commanded_closed_timeout_0 true = 1 -> commanded_closed := false;
  triggeredby [0.0..45.0] commanded_closed = true;
  transition commanded_open_timeout
    commanded_open_timeout_0 true = 1 -> commanded_open := false;
  triggeredby [0.0..45.0] commanded_open = true;
  transition not_responding
    not_responding_0 true = 1 -> cb_state_not_responding, count_as_fault;
  transition abnormal
    abnormal_0 true = 1 -> cb_state_abnormal, count_as_fault;
  transition ar_status_non_auto_unexplained
    ar_status_non_auto_unexplained_0 true = 1 -> ar_status := non_auto, cb_ar_status_NON_AUTO, count_as_fault;
    ar_status_non_auto_unexplained_1 true = 1 -> ar_status := non_auto, ar_supy_control_status_NON_AUTO, count_as_fault;
  transition ar_status_auto_unexplained
    ar_status_auto_unexplained_0 true = 1 -> ar_status := auto, cb_ar_status_AUTO, count_as_fault;
    ar_status_auto_unexplained_1 true = 1 -> ar_status := auto, ar_supy_control_status_AUTO, count_as_fault;
  transition ar_status_non_auto
    ar_status_non_auto_0 commanded_ar_non_auto = true -> ar_status := non_auto, cb_ar_status_NON_AUTO;
    ar_status_non_auto_1 commanded_ar_non_auto = true -> ar_status := non_auto, ar_supy_control_status_NON_AUTO;
  transition ar_status_auto
    ar_status_auto_0 commanded_ar_auto = true -> ar_status := auto, cb_ar_status_AUTO;
    ar_status_auto_1 commanded_ar_auto = true -> ar_status := auto, ar_supy_control_status_AUTO;
  transition command_ar_non_auto
    command_ar_non_auto_0 true = 1 -> commanded_ar_non_auto := true, command_cb_ar_status_NON_AUTO;
    command_ar_non_auto_1 true = 1 -> commanded_ar_non_auto := true, command_ar_supy_control_status_NON_AUTO;
  transition command_ar_auto
    command_ar_auto_0 true = 1 -> commanded_ar_auto := true, command_cb_ar_status_AUTO;
    command_ar_auto_1 true = 1 -> commanded_ar_auto := true, command_ar_supy_control_status_AUTO;
  transition command_close_fail
    command_close_fail_0 commanded_closed = true -> cb_command_fail;
  transition close_on_command
    close_on_command_0 (state = open AND commanded_closed = true) -> state := closed, cb_state_closed, state_change_close;
  transition command_close
    command_close_0 true = 1 -> commanded_closed := true, command_cb_state_closed;
  transition command_open_fail
    command_open_fail_0 commanded_open = true -> cb_command_fail;
  transition open_on_command
    open_on_command_0 (state = closed AND commanded_open = true) -> state := open, cb_state_open, state_change_open;
  transition command_open
    command_open_0 true = 1 -> commanded_open := true, command_cb_state_open;
  transition reopen
    reopen_0 (state = closed AND auto_reopen_wait = true) -> state := open, auto_reopen_wait := false, lockout := true, cb_state_open, state_change_open;
  transition reclose
    reclose_0 ((state = open AND auto_reclose_wait = true) AND lockout = false) -> state := closed, auto_reclose_wait := false, auto_reopen_wait := true, cb_state_closed, state_change_close;
  transition close_unexplained
    close_unexplained_0 state = open -> state := closed, cb_state_closed, state_change_close, count_as_fault;
  transition close1
    close1_0 state = open -> state := closed, cb_state_closed, state_change_close;
  triggeredby close;
  transition trip_unexplained
    trip_unexplained_0 (state = closed AND ar_status = auto) -> state := open, auto_reclose_wait := true, cb_state_open, state_change_open, count_as_fault;
  transition simple_trip1
    simple_trip1_0 state = open -> state := open;
    simple_trip1_1 (state = closed AND ar_status = non_auto) -> state := open, cb_state_open;
    simple_trip1_2 (state = closed AND ar_status = auto) -> state := open, auto_reclose_wait := true, cb_state_open;
  triggeredby simple_trip;
  transition trip1
    trip1_0 (state = closed AND ar_status = non_auto) -> state := open, cb_state_open, state_change_open;
    trip1_1 (state = closed AND ar_status = auto) -> state := open, auto_reclose_wait := true, cb_state_open, state_change_open;
  triggeredby trip;
  transition open_unexplained
    open_unexplained_0 state = closed -> state := open, cb_state_open, state_change_open, count_as_fault;
  transition open1
    open1_0 state = closed -> state := open, cb_state_open, state_change_open;
  triggeredby open;
}
component Breaker_X79_X80 = {
  var auto_reopen_wait : [0..1];
  var auto_reclose_wait : [0..1];
  var commanded_ar_non_auto : [0..1];
  var commanded_ar_auto : [0..1];
  var commanded_closed : [0..1];
  var commanded_open : [0..1];
  var lockout : [0..1];
  var ar_status : {auto,non_auto};
  var state : {open,closed};
  event state_change_close;
  event state_change_open;
  event breaker_is_closed;
  event count_as_fault;
  event check_isolator_open;
  event close;
  event simple_trip;
  event trip;
  event open;
  event IMPOSSIBLE;
  event command_cb_ar_status_NON_AUTO;
  event command_cb_ar_status_AUTO;
  event command_ar_supy_control_status_NON_AUTO;
  event command_ar_supy_control_status_AUTO;
  event command_cb_state_closed;
  event command_cb_state_open;
  event cb_ar_status_NON_AUTO;
  event cb_ar_status_AUTO;
  event ar_supy_control_status_NON_AUTO;
  event ar_supy_control_status_AUTO;
  event cb_command_fail;
  event cb_state_not_responding;
  event cb_state_abnormal;
  event cb_state_closed;
  event cb_state_open;
  transition breaker_is_closed_transition
    breaker_is_closed_transition_0 state = closed -> breaker_is_closed;
  transition check_isolator_open_transition
    check_isolator_open_transition_0 true = 1 -> IMPOSSIBLE;
    check_isolator_open_transition_1 state = open -> state := open;
  triggeredby check_isolator_open;
  transition auto_reopen_wait_timeout
    auto_reopen_wait_timeout_0 true = 1 -> auto_reopen_wait := false;
  triggeredby [0.0..1.0] auto_reopen_wait = true;
  transition auto_reclose_wait_timeout
    auto_reclose_wait_timeout_0 true = 1 -> auto_reclose_wait := false;
  triggeredby [0.0..45.0] auto_reclose_wait = true;
  transition commanded_ar_non_auto_timeout
    commanded_ar_non_auto_timeout_0 true = 1 -> commanded_ar_non_auto := false;
  triggeredby [0.0..45.0] commanded_ar_non_auto = true;
  transition commanded_ar_auto_timeout
    commanded_ar_auto_timeout_0 true = 1 -> commanded_ar_auto := false;
  triggeredby [0.0..45.0] commanded_ar_auto = true;
  transition commanded_closed_timeout
    commanded_closed_timeout_0 true = 1 -> commanded_closed := false;
  triggeredby [0.0..45.0] commanded_closed = true;
  transition commanded_open_timeout
    commanded_open_timeout_0 true = 1 -> commanded_open := false;
  triggeredby [0.0..45.0] commanded_open = true;
  transition not_responding
    not_responding_0 true = 1 -> cb_state_not_responding, count_as_fault;
  transition abnormal
    abnormal_0 true = 1 -> cb_state_abnormal, count_as_fault;
  transition ar_status_non_auto_unexplained
    ar_status_non_auto_unexplained_0 true = 1 -> ar_status := non_auto, cb_ar_status_NON_AUTO, count_as_fault;
    ar_status_non_auto_unexplained_1 true = 1 -> ar_status := non_auto, ar_supy_control_status_NON_AUTO, count_as_fault;
  transition ar_status_auto_unexplained
    ar_status_auto_unexplained_0 true = 1 -> ar_status := auto, cb_ar_status_AUTO, count_as_fault;
    ar_status_auto_unexplained_1 true = 1 -> ar_status := auto, ar_supy_control_status_AUTO, count_as_fault;
  transition ar_status_non_auto
    ar_status_non_auto_0 commanded_ar_non_auto = true -> ar_status := non_auto, cb_ar_status_NON_AUTO;
    ar_status_non_auto_1 commanded_ar_non_auto = true -> ar_status := non_auto, ar_supy_control_status_NON_AUTO;
  transition ar_status_auto
    ar_status_auto_0 commanded_ar_auto = true -> ar_status := auto, cb_ar_status_AUTO;
    ar_status_auto_1 commanded_ar_auto = true -> ar_status := auto, ar_supy_control_status_AUTO;
  transition command_ar_non_auto
    command_ar_non_auto_0 true = 1 -> commanded_ar_non_auto := true, command_cb_ar_status_NON_AUTO;
    command_ar_non_auto_1 true = 1 -> commanded_ar_non_auto := true, command_ar_supy_control_status_NON_AUTO;
  transition command_ar_auto
    command_ar_auto_0 true = 1 -> commanded_ar_auto := true, command_cb_ar_status_AUTO;
    command_ar_auto_1 true = 1 -> commanded_ar_auto := true, command_ar_supy_control_status_AUTO;
  transition command_close_fail
    command_close_fail_0 commanded_closed = true -> cb_command_fail;
  transition close_on_command
    close_on_command_0 (state = open AND commanded_closed = true) -> state := closed, cb_state_closed, state_change_close;
  transition command_close
    command_close_0 true = 1 -> commanded_closed := true, command_cb_state_closed;
  transition command_open_fail
    command_open_fail_0 commanded_open = true -> cb_command_fail;
  transition open_on_command
    open_on_command_0 (state = closed AND commanded_open = true) -> state := open, cb_state_open, state_change_open;
  transition command_open
    command_open_0 true = 1 -> commanded_open := true, command_cb_state_open;
  transition reopen
    reopen_0 (state = closed AND auto_reopen_wait = true) -> state := open, auto_reopen_wait := false, lockout := true, cb_state_open, state_change_open;
  transition reclose
    reclose_0 ((state = open AND auto_reclose_wait = true) AND lockout = false) -> state := closed, auto_reclose_wait := false, auto_reopen_wait := true, cb_state_closed, state_change_close;
  transition close_unexplained
    close_unexplained_0 state = open -> state := closed, cb_state_closed, state_change_close, count_as_fault;
  transition close1
    close1_0 state = open -> state := closed, cb_state_closed, state_change_close;
  triggeredby close;
  transition trip_unexplained
    trip_unexplained_0 (state = closed AND ar_status = auto) -> state := open, auto_reclose_wait := true, cb_state_open, state_change_open, count_as_fault;
  transition simple_trip1
    simple_trip1_0 state = open -> state := open;
    simple_trip1_1 (state = closed AND ar_status = non_auto) -> state := open, cb_state_open;
    simple_trip1_2 (state = closed AND ar_status = auto) -> state := open, auto_reclose_wait := true, cb_state_open;
  triggeredby simple_trip;
  transition trip1
    trip1_0 (state = closed AND ar_status = non_auto) -> state := open, cb_state_open, state_change_open;
    trip1_1 (state = closed AND ar_status = auto) -> state := open, auto_reclose_wait := true, cb_state_open, state_change_open;
  triggeredby trip;
  transition open_unexplained
    open_unexplained_0 state = closed -> state := open, cb_state_open, state_change_open, count_as_fault;
  transition open1
    open1_0 state = closed -> state := open, cb_state_open, state_change_open;
  triggeredby open;
}
component Breaker_X7_X8 = {
  var auto_reopen_wait : [0..1];
  var auto_reclose_wait : [0..1];
  var commanded_ar_non_auto : [0..1];
  var commanded_ar_auto : [0..1];
  var commanded_closed : [0..1];
  var commanded_open : [0..1];
  var lockout : [0..1];
  var ar_status : {auto,non_auto};
  var state : {open,closed};
  event state_change_close;
  event state_change_open;
  event breaker_is_closed;
  event count_as_fault;
  event check_isolator_open;
  event close;
  event simple_trip;
  event trip;
  event open;
  event IMPOSSIBLE;
  event command_cb_ar_status_NON_AUTO;
  event command_cb_ar_status_AUTO;
  event command_ar_supy_control_status_NON_AUTO;
  event command_ar_supy_control_status_AUTO;
  event command_cb_state_closed;
  event command_cb_state_open;
  event cb_ar_status_NON_AUTO;
  event cb_ar_status_AUTO;
  event ar_supy_control_status_NON_AUTO;
  event ar_supy_control_status_AUTO;
  event cb_command_fail;
  event cb_state_not_responding;
  event cb_state_abnormal;
  event cb_state_closed;
  event cb_state_open;
  transition breaker_is_closed_transition
    breaker_is_closed_transition_0 state = closed -> breaker_is_closed;
  transition check_isolator_open_transition
    check_isolator_open_transition_0 true = 1 -> IMPOSSIBLE;
    check_isolator_open_transition_1 state = open -> state := open;
  triggeredby check_isolator_open;
  transition auto_reopen_wait_timeout
    auto_reopen_wait_timeout_0 true = 1 -> auto_reopen_wait := false;
  triggeredby [0.0..1.0] auto_reopen_wait = true;
  transition auto_reclose_wait_timeout
    auto_reclose_wait_timeout_0 true = 1 -> auto_reclose_wait := false;
  triggeredby [0.0..45.0] auto_reclose_wait = true;
  transition commanded_ar_non_auto_timeout
    commanded_ar_non_auto_timeout_0 true = 1 -> commanded_ar_non_auto := false;
  triggeredby [0.0..45.0] commanded_ar_non_auto = true;
  transition commanded_ar_auto_timeout
    commanded_ar_auto_timeout_0 true = 1 -> commanded_ar_auto := false;
  triggeredby [0.0..45.0] commanded_ar_auto = true;
  transition commanded_closed_timeout
    commanded_closed_timeout_0 true = 1 -> commanded_closed := false;
  triggeredby [0.0..45.0] commanded_closed = true;
  transition commanded_open_timeout
    commanded_open_timeout_0 true = 1 -> commanded_open := false;
  triggeredby [0.0..45.0] commanded_open = true;
  transition not_responding
    not_responding_0 true = 1 -> cb_state_not_responding, count_as_fault;
  transition abnormal
    abnormal_0 true = 1 -> cb_state_abnormal, count_as_fault;
  transition ar_status_non_auto_unexplained
    ar_status_non_auto_unexplained_0 true = 1 -> ar_status := non_auto, cb_ar_status_NON_AUTO, count_as_fault;
    ar_status_non_auto_unexplained_1 true = 1 -> ar_status := non_auto, ar_supy_control_status_NON_AUTO, count_as_fault;
  transition ar_status_auto_unexplained
    ar_status_auto_unexplained_0 true = 1 -> ar_status := auto, cb_ar_status_AUTO, count_as_fault;
    ar_status_auto_unexplained_1 true = 1 -> ar_status := auto, ar_supy_control_status_AUTO, count_as_fault;
  transition ar_status_non_auto
    ar_status_non_auto_0 commanded_ar_non_auto = true -> ar_status := non_auto, cb_ar_status_NON_AUTO;
    ar_status_non_auto_1 commanded_ar_non_auto = true -> ar_status := non_auto, ar_supy_control_status_NON_AUTO;
  transition ar_status_auto
    ar_status_auto_0 commanded_ar_auto = true -> ar_status := auto, cb_ar_status_AUTO;
    ar_status_auto_1 commanded_ar_auto = true -> ar_status := auto, ar_supy_control_status_AUTO;
  transition command_ar_non_auto
    command_ar_non_auto_0 true = 1 -> commanded_ar_non_auto := true, command_cb_ar_status_NON_AUTO;
    command_ar_non_auto_1 true = 1 -> commanded_ar_non_auto := true, command_ar_supy_control_status_NON_AUTO;
  transition command_ar_auto
    command_ar_auto_0 true = 1 -> commanded_ar_auto := true, command_cb_ar_status_AUTO;
    command_ar_auto_1 true = 1 -> commanded_ar_auto := true, command_ar_supy_control_status_AUTO;
  transition command_close_fail
    command_close_fail_0 commanded_closed = true -> cb_command_fail;
  transition close_on_command
    close_on_command_0 (state = open AND commanded_closed = true) -> state := closed, cb_state_closed, state_change_close;
  transition command_close
    command_close_0 true = 1 -> commanded_closed := true, command_cb_state_closed;
  transition command_open_fail
    command_open_fail_0 commanded_open = true -> cb_command_fail;
  transition open_on_command
    open_on_command_0 (state = closed AND commanded_open = true) -> state := open, cb_state_open, state_change_open;
  transition command_open
    command_open_0 true = 1 -> commanded_open := true, command_cb_state_open;
  transition reopen
    reopen_0 (state = closed AND auto_reopen_wait = true) -> state := open, auto_reopen_wait := false, lockout := true, cb_state_open, state_change_open;
  transition reclose
    reclose_0 ((state = open AND auto_reclose_wait = true) AND lockout = false) -> state := closed, auto_reclose_wait := false, auto_reopen_wait := true, cb_state_closed, state_change_close;
  transition close_unexplained
    close_unexplained_0 state = open -> state := closed, cb_state_closed, state_change_close, count_as_fault;
  transition close1
    close1_0 state = open -> state := closed, cb_state_closed, state_change_close;
  triggeredby close;
  transition trip_unexplained
    trip_unexplained_0 (state = closed AND ar_status = auto) -> state := open, auto_reclose_wait := true, cb_state_open, state_change_open, count_as_fault;
  transition simple_trip1
    simple_trip1_0 state = open -> state := open;
    simple_trip1_1 (state = closed AND ar_status = non_auto) -> state := open, cb_state_open;
    simple_trip1_2 (state = closed AND ar_status = auto) -> state := open, auto_reclose_wait := true, cb_state_open;
  triggeredby simple_trip;
  transition trip1
    trip1_0 (state = closed AND ar_status = non_auto) -> state := open, cb_state_open, state_change_open;
    trip1_1 (state = closed AND ar_status = auto) -> state := open, auto_reclose_wait := true, cb_state_open, state_change_open;
  triggeredby trip;
  transition open_unexplained
    open_unexplained_0 state = closed -> state := open, cb_state_open, state_change_open, count_as_fault;
  transition open1
    open1_0 state = closed -> state := open, cb_state_open, state_change_open;
  triggeredby open;
}
component Breaker_X9_X10 = {
  var auto_reopen_wait : [0..1];
  var auto_reclose_wait : [0..1];
  var commanded_ar_non_auto : [0..1];
  var commanded_ar_auto : [0..1];
  var commanded_closed : [0..1];
  var commanded_open : [0..1];
  var lockout : [0..1];
  var ar_status : {auto,non_auto};
  var state : {open,closed};
  event state_change_close;
  event state_change_open;
  event breaker_is_closed;
  event count_as_fault;
  event check_isolator_open;
  event close;
  event simple_trip;
  event trip;
  event open;
  event IMPOSSIBLE;
  event command_cb_ar_status_NON_AUTO;
  event command_cb_ar_status_AUTO;
  event command_ar_supy_control_status_NON_AUTO;
  event command_ar_supy_control_status_AUTO;
  event command_cb_state_closed;
  event command_cb_state_open;
  event cb_ar_status_NON_AUTO;
  event cb_ar_status_AUTO;
  event ar_supy_control_status_NON_AUTO;
  event ar_supy_control_status_AUTO;
  event cb_command_fail;
  event cb_state_not_responding;
  event cb_state_abnormal;
  event cb_state_closed;
  event cb_state_open;
  transition breaker_is_closed_transition
    breaker_is_closed_transition_0 state = closed -> breaker_is_closed;
  transition check_isolator_open_transition
    check_isolator_open_transition_0 true = 1 -> IMPOSSIBLE;
    check_isolator_open_transition_1 state = open -> state := open;
  triggeredby check_isolator_open;
  transition auto_reopen_wait_timeout
    auto_reopen_wait_timeout_0 true = 1 -> auto_reopen_wait := false;
  triggeredby [0.0..1.0] auto_reopen_wait = true;
  transition auto_reclose_wait_timeout
    auto_reclose_wait_timeout_0 true = 1 -> auto_reclose_wait := false;
  triggeredby [0.0..45.0] auto_reclose_wait = true;
  transition commanded_ar_non_auto_timeout
    commanded_ar_non_auto_timeout_0 true = 1 -> commanded_ar_non_auto := false;
  triggeredby [0.0..45.0] commanded_ar_non_auto = true;
  transition commanded_ar_auto_timeout
    commanded_ar_auto_timeout_0 true = 1 -> commanded_ar_auto := false;
  triggeredby [0.0..45.0] commanded_ar_auto = true;
  transition commanded_closed_timeout
    commanded_closed_timeout_0 true = 1 -> commanded_closed := false;
  triggeredby [0.0..45.0] commanded_closed = true;
  transition commanded_open_timeout
    commanded_open_timeout_0 true = 1 -> commanded_open := false;
  triggeredby [0.0..45.0] commanded_open = true;
  transition not_responding
    not_responding_0 true = 1 -> cb_state_not_responding, count_as_fault;
  transition abnormal
    abnormal_0 true = 1 -> cb_state_abnormal, count_as_fault;
  transition ar_status_non_auto_unexplained
    ar_status_non_auto_unexplained_0 true = 1 -> ar_status := non_auto, cb_ar_status_NON_AUTO, count_as_fault;
    ar_status_non_auto_unexplained_1 true = 1 -> ar_status := non_auto, ar_supy_control_status_NON_AUTO, count_as_fault;
  transition ar_status_auto_unexplained
    ar_status_auto_unexplained_0 true = 1 -> ar_status := auto, cb_ar_status_AUTO, count_as_fault;
    ar_status_auto_unexplained_1 true = 1 -> ar_status := auto, ar_supy_control_status_AUTO, count_as_fault;
  transition ar_status_non_auto
    ar_status_non_auto_0 commanded_ar_non_auto = true -> ar_status := non_auto, cb_ar_status_NON_AUTO;
    ar_status_non_auto_1 commanded_ar_non_auto = true -> ar_status := non_auto, ar_supy_control_status_NON_AUTO;
  transition ar_status_auto
    ar_status_auto_0 commanded_ar_auto = true -> ar_status := auto, cb_ar_status_AUTO;
    ar_status_auto_1 commanded_ar_auto = true -> ar_status := auto, ar_supy_control_status_AUTO;
  transition command_ar_non_auto
    command_ar_non_auto_0 true = 1 -> commanded_ar_non_auto := true, command_cb_ar_status_NON_AUTO;
    command_ar_non_auto_1 true = 1 -> commanded_ar_non_auto := true, command_ar_supy_control_status_NON_AUTO;
  transition command_ar_auto
    command_ar_auto_0 true = 1 -> commanded_ar_auto := true, command_cb_ar_status_AUTO;
    command_ar_auto_1 true = 1 -> commanded_ar_auto := true, command_ar_supy_control_status_AUTO;
  transition command_close_fail
    command_close_fail_0 commanded_closed = true -> cb_command_fail;
  transition close_on_command
    close_on_command_0 (state = open AND commanded_closed = true) -> state := closed, cb_state_closed, state_change_close;
  transition command_close
    command_close_0 true = 1 -> commanded_closed := true, command_cb_state_closed;
  transition command_open_fail
    command_open_fail_0 commanded_open = true -> cb_command_fail;
  transition open_on_command
    open_on_command_0 (state = closed AND commanded_open = true) -> state := open, cb_state_open, state_change_open;
  transition command_open
    command_open_0 true = 1 -> commanded_open := true, command_cb_state_open;
  transition reopen
    reopen_0 (state = closed AND auto_reopen_wait = true) -> state := open, auto_reopen_wait := false, lockout := true, cb_state_open, state_change_open;
  transition reclose
    reclose_0 ((state = open AND auto_reclose_wait = true) AND lockout = false) -> state := closed, auto_reclose_wait := false, auto_reopen_wait := true, cb_state_closed, state_change_close;
  transition close_unexplained
    close_unexplained_0 state = open -> state := closed, cb_state_closed, state_change_close, count_as_fault;
  transition close1
    close1_0 state = open -> state := closed, cb_state_closed, state_change_close;
  triggeredby close;
  transition trip_unexplained
    trip_unexplained_0 (state = closed AND ar_status = auto) -> state := open, auto_reclose_wait := true, cb_state_open, state_change_open, count_as_fault;
  transition simple_trip1
    simple_trip1_0 state = open -> state := open;
    simple_trip1_1 (state = closed AND ar_status = non_auto) -> state := open, cb_state_open;
    simple_trip1_2 (state = closed AND ar_status = auto) -> state := open, auto_reclose_wait := true, cb_state_open;
  triggeredby simple_trip;
  transition trip1
    trip1_0 (state = closed AND ar_status = non_auto) -> state := open, cb_state_open, state_change_open;
    trip1_1 (state = closed AND ar_status = auto) -> state := open, auto_reclose_wait := true, cb_state_open, state_change_open;
  triggeredby trip;
  transition open_unexplained
    open_unexplained_0 state = closed -> state := open, cb_state_open, state_change_open, count_as_fault;
  transition open1
    open1_0 state = closed -> state := open, cb_state_open, state_change_open;
  triggeredby open;
}
component Breaker_X11_X12 = {
  var auto_reopen_wait : [0..1];
  var auto_reclose_wait : [0..1];
  var commanded_ar_non_auto : [0..1];
  var commanded_ar_auto : [0..1];
  var commanded_closed : [0..1];
  var commanded_open : [0..1];
  var lockout : [0..1];
  var ar_status : {auto,non_auto};
  var state : {open,closed};
  event state_change_close;
  event state_change_open;
  event breaker_is_closed;
  event count_as_fault;
  event check_isolator_open;
  event close;
  event simple_trip;
  event trip;
  event open;
  event IMPOSSIBLE;
  event command_cb_ar_status_NON_AUTO;
  event command_cb_ar_status_AUTO;
  event command_ar_supy_control_status_NON_AUTO;
  event command_ar_supy_control_status_AUTO;
  event command_cb_state_closed;
  event command_cb_state_open;
  event cb_ar_status_NON_AUTO;
  event cb_ar_status_AUTO;
  event ar_supy_control_status_NON_AUTO;
  event ar_supy_control_status_AUTO;
  event cb_command_fail;
  event cb_state_not_responding;
  event cb_state_abnormal;
  event cb_state_closed;
  event cb_state_open;
  transition breaker_is_closed_transition
    breaker_is_closed_transition_0 state = closed -> breaker_is_closed;
  transition check_isolator_open_transition
    check_isolator_open_transition_0 true = 1 -> IMPOSSIBLE;
    check_isolator_open_transition_1 state = open -> state := open;
  triggeredby check_isolator_open;
  transition auto_reopen_wait_timeout
    auto_reopen_wait_timeout_0 true = 1 -> auto_reopen_wait := false;
  triggeredby [0.0..1.0] auto_reopen_wait = true;
  transition auto_reclose_wait_timeout
    auto_reclose_wait_timeout_0 true = 1 -> auto_reclose_wait := false;
  triggeredby [0.0..45.0] auto_reclose_wait = true;
  transition commanded_ar_non_auto_timeout
    commanded_ar_non_auto_timeout_0 true = 1 -> commanded_ar_non_auto := false;
  triggeredby [0.0..45.0] commanded_ar_non_auto = true;
  transition commanded_ar_auto_timeout
    commanded_ar_auto_timeout_0 true = 1 -> commanded_ar_auto := false;
  triggeredby [0.0..45.0] commanded_ar_auto = true;
  transition commanded_closed_timeout
    commanded_closed_timeout_0 true = 1 -> commanded_closed := false;
  triggeredby [0.0..45.0] commanded_closed = true;
  transition commanded_open_timeout
    commanded_open_timeout_0 true = 1 -> commanded_open := false;
  triggeredby [0.0..45.0] commanded_open = true;
  transition not_responding
    not_responding_0 true = 1 -> cb_state_not_responding, count_as_fault;
  transition abnormal
    abnormal_0 true = 1 -> cb_state_abnormal, count_as_fault;
  transition ar_status_non_auto_unexplained
    ar_status_non_auto_unexplained_0 true = 1 -> ar_status := non_auto, cb_ar_status_NON_AUTO, count_as_fault;
    ar_status_non_auto_unexplained_1 true = 1 -> ar_status := non_auto, ar_supy_control_status_NON_AUTO, count_as_fault;
  transition ar_status_auto_unexplained
    ar_status_auto_unexplained_0 true = 1 -> ar_status := auto, cb_ar_status_AUTO, count_as_fault;
    ar_status_auto_unexplained_1 true = 1 -> ar_status := auto, ar_supy_control_status_AUTO, count_as_fault;
  transition ar_status_non_auto
    ar_status_non_auto_0 commanded_ar_non_auto = true -> ar_status := non_auto, cb_ar_status_NON_AUTO;
    ar_status_non_auto_1 commanded_ar_non_auto = true -> ar_status := non_auto, ar_supy_control_status_NON_AUTO;
  transition ar_status_auto
    ar_status_auto_0 commanded_ar_auto = true -> ar_status := auto, cb_ar_status_AUTO;
    ar_status_auto_1 commanded_ar_auto = true -> ar_status := auto, ar_supy_control_status_AUTO;
  transition command_ar_non_auto
    command_ar_non_auto_0 true = 1 -> commanded_ar_non_auto := true, command_cb_ar_status_NON_AUTO;
    command_ar_non_auto_1 true = 1 -> commanded_ar_non_auto := true, command_ar_supy_control_status_NON_AUTO;
  transition command_ar_auto
    command_ar_auto_0 true = 1 -> commanded_ar_auto := true, command_cb_ar_status_AUTO;
    command_ar_auto_1 true = 1 -> commanded_ar_auto := true, command_ar_supy_control_status_AUTO;
  transition command_close_fail
    command_close_fail_0 commanded_closed = true -> cb_command_fail;
  transition close_on_command
    close_on_command_0 (state = open AND commanded_closed = true) -> state := closed, cb_state_closed, state_change_close;
  transition command_close
    command_close_0 true = 1 -> commanded_closed := true, command_cb_state_closed;
  transition command_open_fail
    command_open_fail_0 commanded_open = true -> cb_command_fail;
  transition open_on_command
    open_on_command_0 (state = closed AND commanded_open = true) -> state := open, cb_state_open, state_change_open;
  transition command_open
    command_open_0 true = 1 -> commanded_open := true, command_cb_state_open;
  transition reopen
    reopen_0 (state = closed AND auto_reopen_wait = true) -> state := open, auto_reopen_wait := false, lockout := true, cb_state_open, state_change_open;
  transition reclose
    reclose_0 ((state = open AND auto_reclose_wait = true) AND lockout = false) -> state := closed, auto_reclose_wait := false, auto_reopen_wait := true, cb_state_closed, state_change_close;
  transition close_unexplained
    close_unexplained_0 state = open -> state := closed, cb_state_closed, state_change_close, count_as_fault;
  transition close1
    close1_0 state = open -> state := closed, cb_state_closed, state_change_close;
  triggeredby close;
  transition trip_unexplained
    trip_unexplained_0 (state = closed AND ar_status = auto) -> state := open, auto_reclose_wait := true, cb_state_open, state_change_open, count_as_fault;
  transition simple_trip1
    simple_trip1_0 state = open -> state := open;
    simple_trip1_1 (state = closed AND ar_status = non_auto) -> state := open, cb_state_open;
    simple_trip1_2 (state = closed AND ar_status = auto) -> state := open, auto_reclose_wait := true, cb_state_open;
  triggeredby simple_trip;
  transition trip1
    trip1_0 (state = closed AND ar_status = non_auto) -> state := open, cb_state_open, state_change_open;
    trip1_1 (state = closed AND ar_status = auto) -> state := open, auto_reclose_wait := true, cb_state_open, state_change_open;
  triggeredby trip;
  transition open_unexplained
    open_unexplained_0 state = closed -> state := open, cb_state_open, state_change_open, count_as_fault;
  transition open1
    open1_0 state = closed -> state := open, cb_state_open, state_change_open;
  triggeredby open;
}
component Breaker_X13_X14 = {
  var auto_reopen_wait : [0..1];
  var auto_reclose_wait : [0..1];
  var commanded_ar_non_auto : [0..1];
  var commanded_ar_auto : [0..1];
  var commanded_closed : [0..1];
  var commanded_open : [0..1];
  var lockout : [0..1];
  var ar_status : {auto,non_auto};
  var state : {open,closed};
  event state_change_close;
  event state_change_open;
  event breaker_is_closed;
  event count_as_fault;
  event check_isolator_open;
  event close;
  event simple_trip;
  event trip;
  event open;
  event IMPOSSIBLE;
  event command_cb_ar_status_NON_AUTO;
  event command_cb_ar_status_AUTO;
  event command_ar_supy_control_status_NON_AUTO;
  event command_ar_supy_control_status_AUTO;
  event command_cb_state_closed;
  event command_cb_state_open;
  event cb_ar_status_NON_AUTO;
  event cb_ar_status_AUTO;
  event ar_supy_control_status_NON_AUTO;
  event ar_supy_control_status_AUTO;
  event cb_command_fail;
  event cb_state_not_responding;
  event cb_state_abnormal;
  event cb_state_closed;
  event cb_state_open;
  transition breaker_is_closed_transition
    breaker_is_closed_transition_0 state = closed -> breaker_is_closed;
  transition check_isolator_open_transition
    check_isolator_open_transition_0 true = 1 -> IMPOSSIBLE;
    check_isolator_open_transition_1 state = open -> state := open;
  triggeredby check_isolator_open;
  transition auto_reopen_wait_timeout
    auto_reopen_wait_timeout_0 true = 1 -> auto_reopen_wait := false;
  triggeredby [0.0..1.0] auto_reopen_wait = true;
  transition auto_reclose_wait_timeout
    auto_reclose_wait_timeout_0 true = 1 -> auto_reclose_wait := false;
  triggeredby [0.0..45.0] auto_reclose_wait = true;
  transition commanded_ar_non_auto_timeout
    commanded_ar_non_auto_timeout_0 true = 1 -> commanded_ar_non_auto := false;
  triggeredby [0.0..45.0] commanded_ar_non_auto = true;
  transition commanded_ar_auto_timeout
    commanded_ar_auto_timeout_0 true = 1 -> commanded_ar_auto := false;
  triggeredby [0.0..45.0] commanded_ar_auto = true;
  transition commanded_closed_timeout
    commanded_closed_timeout_0 true = 1 -> commanded_closed := false;
  triggeredby [0.0..45.0] commanded_closed = true;
  transition commanded_open_timeout
    commanded_open_timeout_0 true = 1 -> commanded_open := false;
  triggeredby [0.0..45.0] commanded_open = true;
  transition not_responding
    not_responding_0 true = 1 -> cb_state_not_responding, count_as_fault;
  transition abnormal
    abnormal_0 true = 1 -> cb_state_abnormal, count_as_fault;
  transition ar_status_non_auto_unexplained
    ar_status_non_auto_unexplained_0 true = 1 -> ar_status := non_auto, cb_ar_status_NON_AUTO, count_as_fault;
    ar_status_non_auto_unexplained_1 true = 1 -> ar_status := non_auto, ar_supy_control_status_NON_AUTO, count_as_fault;
  transition ar_status_auto_unexplained
    ar_status_auto_unexplained_0 true = 1 -> ar_status := auto, cb_ar_status_AUTO, count_as_fault;
    ar_status_auto_unexplained_1 true = 1 -> ar_status := auto, ar_supy_control_status_AUTO, count_as_fault;
  transition ar_status_non_auto
    ar_status_non_auto_0 commanded_ar_non_auto = true -> ar_status := non_auto, cb_ar_status_NON_AUTO;
    ar_status_non_auto_1 commanded_ar_non_auto = true -> ar_status := non_auto, ar_supy_control_status_NON_AUTO;
  transition ar_status_auto
    ar_status_auto_0 commanded_ar_auto = true -> ar_status := auto, cb_ar_status_AUTO;
    ar_status_auto_1 commanded_ar_auto = true -> ar_status := auto, ar_supy_control_status_AUTO;
  transition command_ar_non_auto
    command_ar_non_auto_0 true = 1 -> commanded_ar_non_auto := true, command_cb_ar_status_NON_AUTO;
    command_ar_non_auto_1 true = 1 -> commanded_ar_non_auto := true, command_ar_supy_control_status_NON_AUTO;
  transition command_ar_auto
    command_ar_auto_0 true = 1 -> commanded_ar_auto := true, command_cb_ar_status_AUTO;
    command_ar_auto_1 true = 1 -> commanded_ar_auto := true, command_ar_supy_control_status_AUTO;
  transition command_close_fail
    command_close_fail_0 commanded_closed = true -> cb_command_fail;
  transition close_on_command
    close_on_command_0 (state = open AND commanded_closed = true) -> state := closed, cb_state_closed, state_change_close;
  transition command_close
    command_close_0 true = 1 -> commanded_closed := true, command_cb_state_closed;
  transition command_open_fail
    command_open_fail_0 commanded_open = true -> cb_command_fail;
  transition open_on_command
    open_on_command_0 (state = closed AND commanded_open = true) -> state := open, cb_state_open, state_change_open;
  transition command_open
    command_open_0 true = 1 -> commanded_open := true, command_cb_state_open;
  transition reopen
    reopen_0 (state = closed AND auto_reopen_wait = true) -> state := open, auto_reopen_wait := false, lockout := true, cb_state_open, state_change_open;
  transition reclose
    reclose_0 ((state = open AND auto_reclose_wait = true) AND lockout = false) -> state := closed, auto_reclose_wait := false, auto_reopen_wait := true, cb_state_closed, state_change_close;
  transition close_unexplained
    close_unexplained_0 state = open -> state := closed, cb_state_closed, state_change_close, count_as_fault;
  transition close1
    close1_0 state = open -> state := closed, cb_state_closed, state_change_close;
  triggeredby close;
  transition trip_unexplained
    trip_unexplained_0 (state = closed AND ar_status = auto) -> state := open, auto_reclose_wait := true, cb_state_open, state_change_open, count_as_fault;
  transition simple_trip1
    simple_trip1_0 state = open -> state := open;
    simple_trip1_1 (state = closed AND ar_status = non_auto) -> state := open, cb_state_open;
    simple_trip1_2 (state = closed AND ar_status = auto) -> state := open, auto_reclose_wait := true, cb_state_open;
  triggeredby simple_trip;
  transition trip1
    trip1_0 (state = closed AND ar_status = non_auto) -> state := open, cb_state_open, state_change_open;
    trip1_1 (state = closed AND ar_status = auto) -> state := open, auto_reclose_wait := true, cb_state_open, state_change_open;
  triggeredby trip;
  transition open_unexplained
    open_unexplained_0 state = closed -> state := open, cb_state_open, state_change_open, count_as_fault;
  transition open1
    open1_0 state = closed -> state := open, cb_state_open, state_change_open;
  triggeredby open;
}
component Breaker_X15_X16 = {
  var auto_reopen_wait : [0..1];
  var auto_reclose_wait : [0..1];
  var commanded_ar_non_auto : [0..1];
  var commanded_ar_auto : [0..1];
  var commanded_closed : [0..1];
  var commanded_open : [0..1];
  var lockout : [0..1];
  var ar_status : {auto,non_auto};
  var state : {open,closed};
  event state_change_close;
  event state_change_open;
  event breaker_is_closed;
  event count_as_fault;
  event check_isolator_open;
  event close;
  event simple_trip;
  event trip;
  event open;
  event IMPOSSIBLE;
  event command_cb_ar_status_NON_AUTO;
  event command_cb_ar_status_AUTO;
  event command_ar_supy_control_status_NON_AUTO;
  event command_ar_supy_control_status_AUTO;
  event command_cb_state_closed;
  event command_cb_state_open;
  event cb_ar_status_NON_AUTO;
  event cb_ar_status_AUTO;
  event ar_supy_control_status_NON_AUTO;
  event ar_supy_control_status_AUTO;
  event cb_command_fail;
  event cb_state_not_responding;
  event cb_state_abnormal;
  event cb_state_closed;
  event cb_state_open;
  transition breaker_is_closed_transition
    breaker_is_closed_transition_0 state = closed -> breaker_is_closed;
  transition check_isolator_open_transition
    check_isolator_open_transition_0 true = 1 -> IMPOSSIBLE;
    check_isolator_open_transition_1 state = open -> state := open;
  triggeredby check_isolator_open;
  transition auto_reopen_wait_timeout
    auto_reopen_wait_timeout_0 true = 1 -> auto_reopen_wait := false;
  triggeredby [0.0..1.0] auto_reopen_wait = true;
  transition auto_reclose_wait_timeout
    auto_reclose_wait_timeout_0 true = 1 -> auto_reclose_wait := false;
  triggeredby [0.0..45.0] auto_reclose_wait = true;
  transition commanded_ar_non_auto_timeout
    commanded_ar_non_auto_timeout_0 true = 1 -> commanded_ar_non_auto := false;
  triggeredby [0.0..45.0] commanded_ar_non_auto = true;
  transition commanded_ar_auto_timeout
    commanded_ar_auto_timeout_0 true = 1 -> commanded_ar_auto := false;
  triggeredby [0.0..45.0] commanded_ar_auto = true;
  transition commanded_closed_timeout
    commanded_closed_timeout_0 true = 1 -> commanded_closed := false;
  triggeredby [0.0..45.0] commanded_closed = true;
  transition commanded_open_timeout
    commanded_open_timeout_0 true = 1 -> commanded_open := false;
  triggeredby [0.0..45.0] commanded_open = true;
  transition not_responding
    not_responding_0 true = 1 -> cb_state_not_responding, count_as_fault;
  transition abnormal
    abnormal_0 true = 1 -> cb_state_abnormal, count_as_fault;
  transition ar_status_non_auto_unexplained
    ar_status_non_auto_unexplained_0 true = 1 -> ar_status := non_auto, cb_ar_status_NON_AUTO, count_as_fault;
    ar_status_non_auto_unexplained_1 true = 1 -> ar_status := non_auto, ar_supy_control_status_NON_AUTO, count_as_fault;
  transition ar_status_auto_unexplained
    ar_status_auto_unexplained_0 true = 1 -> ar_status := auto, cb_ar_status_AUTO, count_as_fault;
    ar_status_auto_unexplained_1 true = 1 -> ar_status := auto, ar_supy_control_status_AUTO, count_as_fault;
  transition ar_status_non_auto
    ar_status_non_auto_0 commanded_ar_non_auto = true -> ar_status := non_auto, cb_ar_status_NON_AUTO;
    ar_status_non_auto_1 commanded_ar_non_auto = true -> ar_status := non_auto, ar_supy_control_status_NON_AUTO;
  transition ar_status_auto
    ar_status_auto_0 commanded_ar_auto = true -> ar_status := auto, cb_ar_status_AUTO;
    ar_status_auto_1 commanded_ar_auto = true -> ar_status := auto, ar_supy_control_status_AUTO;
  transition command_ar_non_auto
    command_ar_non_auto_0 true = 1 -> commanded_ar_non_auto := true, command_cb_ar_status_NON_AUTO;
    command_ar_non_auto_1 true = 1 -> commanded_ar_non_auto := true, command_ar_supy_control_status_NON_AUTO;
  transition command_ar_auto
    command_ar_auto_0 true = 1 -> commanded_ar_auto := true, command_cb_ar_status_AUTO;
    command_ar_auto_1 true = 1 -> commanded_ar_auto := true, command_ar_supy_control_status_AUTO;
  transition command_close_fail
    command_close_fail_0 commanded_closed = true -> cb_command_fail;
  transition close_on_command
    close_on_command_0 (state = open AND commanded_closed = true) -> state := closed, cb_state_closed, state_change_close;
  transition command_close
    command_close_0 true = 1 -> commanded_closed := true, command_cb_state_closed;
  transition command_open_fail
    command_open_fail_0 commanded_open = true -> cb_command_fail;
  transition open_on_command
    open_on_command_0 (state = closed AND commanded_open = true) -> state := open, cb_state_open, state_change_open;
  transition command_open
    command_open_0 true = 1 -> commanded_open := true, command_cb_state_open;
  transition reopen
    reopen_0 (state = closed AND auto_reopen_wait = true) -> state := open, auto_reopen_wait := false, lockout := true, cb_state_open, state_change_open;
  transition reclose
    reclose_0 ((state = open AND auto_reclose_wait = true) AND lockout = false) -> state := closed, auto_reclose_wait := false, auto_reopen_wait := true, cb_state_closed, state_change_close;
  transition close_unexplained
    close_unexplained_0 state = open -> state := closed, cb_state_closed, state_change_close, count_as_fault;
  transition close1
    close1_0 state = open -> state := closed, cb_state_closed, state_change_close;
  triggeredby close;
  transition trip_unexplained
    trip_unexplained_0 (state = closed AND ar_status = auto) -> state := open, auto_reclose_wait := true, cb_state_open, state_change_open, count_as_fault;
  transition simple_trip1
    simple_trip1_0 state = open -> state := open;
    simple_trip1_1 (state = closed AND ar_status = non_auto) -> state := open, cb_state_open;
    simple_trip1_2 (state = closed AND ar_status = auto) -> state := open, auto_reclose_wait := true, cb_state_open;
  triggeredby simple_trip;
  transition trip1
    trip1_0 (state = closed AND ar_status = non_auto) -> state := open, cb_state_open, state_change_open;
    trip1_1 (state = closed AND ar_status = auto) -> state := open, auto_reclose_wait := true, cb_state_open, state_change_open;
  triggeredby trip;
  transition open_unexplained
    open_unexplained_0 state = closed -> state := open, cb_state_open, state_change_open, count_as_fault;
  transition open1
    open1_0 state = closed -> state := open, cb_state_open, state_change_open;
  triggeredby open;
}
component Breaker_X17_X18 = {
  var auto_reopen_wait : [0..1];
  var auto_reclose_wait : [0..1];
  var commanded_ar_non_auto : [0..1];
  var commanded_ar_auto : [0..1];
  var commanded_closed : [0..1];
  var commanded_open : [0..1];
  var lockout : [0..1];
  var ar_status : {auto,non_auto};
  var state : {open,closed};
  event state_change_close;
  event state_change_open;
  event breaker_is_closed;
  event count_as_fault;
  event check_isolator_open;
  event close;
  event simple_trip;
  event trip;
  event open;
  event IMPOSSIBLE;
  event command_cb_ar_status_NON_AUTO;
  event command_cb_ar_status_AUTO;
  event command_ar_supy_control_status_NON_AUTO;
  event command_ar_supy_control_status_AUTO;
  event command_cb_state_closed;
  event command_cb_state_open;
  event cb_ar_status_NON_AUTO;
  event cb_ar_status_AUTO;
  event ar_supy_control_status_NON_AUTO;
  event ar_supy_control_status_AUTO;
  event cb_command_fail;
  event cb_state_not_responding;
  event cb_state_abnormal;
  event cb_state_closed;
  event cb_state_open;
  transition breaker_is_closed_transition
    breaker_is_closed_transition_0 state = closed -> breaker_is_closed;
  transition check_isolator_open_transition
    check_isolator_open_transition_0 true = 1 -> IMPOSSIBLE;
    check_isolator_open_transition_1 state = open -> state := open;
  triggeredby check_isolator_open;
  transition auto_reopen_wait_timeout
    auto_reopen_wait_timeout_0 true = 1 -> auto_reopen_wait := false;
  triggeredby [0.0..1.0] auto_reopen_wait = true;
  transition auto_reclose_wait_timeout
    auto_reclose_wait_timeout_0 true = 1 -> auto_reclose_wait := false;
  triggeredby [0.0..45.0] auto_reclose_wait = true;
  transition commanded_ar_non_auto_timeout
    commanded_ar_non_auto_timeout_0 true = 1 -> commanded_ar_non_auto := false;
  triggeredby [0.0..45.0] commanded_ar_non_auto = true;
  transition commanded_ar_auto_timeout
    commanded_ar_auto_timeout_0 true = 1 -> commanded_ar_auto := false;
  triggeredby [0.0..45.0] commanded_ar_auto = true;
  transition commanded_closed_timeout
    commanded_closed_timeout_0 true = 1 -> commanded_closed := false;
  triggeredby [0.0..45.0] commanded_closed = true;
  transition commanded_open_timeout
    commanded_open_timeout_0 true = 1 -> commanded_open := false;
  triggeredby [0.0..45.0] commanded_open = true;
  transition not_responding
    not_responding_0 true = 1 -> cb_state_not_responding, count_as_fault;
  transition abnormal
    abnormal_0 true = 1 -> cb_state_abnormal, count_as_fault;
  transition ar_status_non_auto_unexplained
    ar_status_non_auto_unexplained_0 true = 1 -> ar_status := non_auto, cb_ar_status_NON_AUTO, count_as_fault;
    ar_status_non_auto_unexplained_1 true = 1 -> ar_status := non_auto, ar_supy_control_status_NON_AUTO, count_as_fault;
  transition ar_status_auto_unexplained
    ar_status_auto_unexplained_0 true = 1 -> ar_status := auto, cb_ar_status_AUTO, count_as_fault;
    ar_status_auto_unexplained_1 true = 1 -> ar_status := auto, ar_supy_control_status_AUTO, count_as_fault;
  transition ar_status_non_auto
    ar_status_non_auto_0 commanded_ar_non_auto = true -> ar_status := non_auto, cb_ar_status_NON_AUTO;
    ar_status_non_auto_1 commanded_ar_non_auto = true -> ar_status := non_auto, ar_supy_control_status_NON_AUTO;
  transition ar_status_auto
    ar_status_auto_0 commanded_ar_auto = true -> ar_status := auto, cb_ar_status_AUTO;
    ar_status_auto_1 commanded_ar_auto = true -> ar_status := auto, ar_supy_control_status_AUTO;
  transition command_ar_non_auto
    command_ar_non_auto_0 true = 1 -> commanded_ar_non_auto := true, command_cb_ar_status_NON_AUTO;
    command_ar_non_auto_1 true = 1 -> commanded_ar_non_auto := true, command_ar_supy_control_status_NON_AUTO;
  transition command_ar_auto
    command_ar_auto_0 true = 1 -> commanded_ar_auto := true, command_cb_ar_status_AUTO;
    command_ar_auto_1 true = 1 -> commanded_ar_auto := true, command_ar_supy_control_status_AUTO;
  transition command_close_fail
    command_close_fail_0 commanded_closed = true -> cb_command_fail;
  transition close_on_command
    close_on_command_0 (state = open AND commanded_closed = true) -> state := closed, cb_state_closed, state_change_close;
  transition command_close
    command_close_0 true = 1 -> commanded_closed := true, command_cb_state_closed;
  transition command_open_fail
    command_open_fail_0 commanded_open = true -> cb_command_fail;
  transition open_on_command
    open_on_command_0 (state = closed AND commanded_open = true) -> state := open, cb_state_open, state_change_open;
  transition command_open
    command_open_0 true = 1 -> commanded_open := true, command_cb_state_open;
  transition reopen
    reopen_0 (state = closed AND auto_reopen_wait = true) -> state := open, auto_reopen_wait := false, lockout := true, cb_state_open, state_change_open;
  transition reclose
    reclose_0 ((state = open AND auto_reclose_wait = true) AND lockout = false) -> state := closed, auto_reclose_wait := false, auto_reopen_wait := true, cb_state_closed, state_change_close;
  transition close_unexplained
    close_unexplained_0 state = open -> state := closed, cb_state_closed, state_change_close, count_as_fault;
  transition close1
    close1_0 state = open -> state := closed, cb_state_closed, state_change_close;
  triggeredby close;
  transition trip_unexplained
    trip_unexplained_0 (state = closed AND ar_status = auto) -> state := open, auto_reclose_wait := true, cb_state_open, state_change_open, count_as_fault;
  transition simple_trip1
    simple_trip1_0 state = open -> state := open;
    simple_trip1_1 (state = closed AND ar_status = non_auto) -> state := open, cb_state_open;
    simple_trip1_2 (state = closed AND ar_status = auto) -> state := open, auto_reclose_wait := true, cb_state_open;
  triggeredby simple_trip;
  transition trip1
    trip1_0 (state = closed AND ar_status = non_auto) -> state := open, cb_state_open, state_change_open;
    trip1_1 (state = closed AND ar_status = auto) -> state := open, auto_reclose_wait := true, cb_state_open, state_change_open;
  triggeredby trip;
  transition open_unexplained
    open_unexplained_0 state = closed -> state := open, cb_state_open, state_change_open, count_as_fault;
  transition open1
    open1_0 state = closed -> state := open, cb_state_open, state_change_open;
  triggeredby open;
}
component Breaker_X19_X20 = {
  var auto_reopen_wait : [0..1];
  var auto_reclose_wait : [0..1];
  var commanded_ar_non_auto : [0..1];
  var commanded_ar_auto : [0..1];
  var commanded_closed : [0..1];
  var commanded_open : [0..1];
  var lockout : [0..1];
  var ar_status : {auto,non_auto};
  var state : {open,closed};
  event state_change_close;
  event state_change_open;
  event breaker_is_closed;
  event count_as_fault;
  event check_isolator_open;
  event close;
  event simple_trip;
  event trip;
  event open;
  event IMPOSSIBLE;
  event command_cb_ar_status_NON_AUTO;
  event command_cb_ar_status_AUTO;
  event command_ar_supy_control_status_NON_AUTO;
  event command_ar_supy_control_status_AUTO;
  event command_cb_state_closed;
  event command_cb_state_open;
  event cb_ar_status_NON_AUTO;
  event cb_ar_status_AUTO;
  event ar_supy_control_status_NON_AUTO;
  event ar_supy_control_status_AUTO;
  event cb_command_fail;
  event cb_state_not_responding;
  event cb_state_abnormal;
  event cb_state_closed;
  event cb_state_open;
  transition breaker_is_closed_transition
    breaker_is_closed_transition_0 state = closed -> breaker_is_closed;
  transition check_isolator_open_transition
    check_isolator_open_transition_0 true = 1 -> IMPOSSIBLE;
    check_isolator_open_transition_1 state = open -> state := open;
  triggeredby check_isolator_open;
  transition auto_reopen_wait_timeout
    auto_reopen_wait_timeout_0 true = 1 -> auto_reopen_wait := false;
  triggeredby [0.0..1.0] auto_reopen_wait = true;
  transition auto_reclose_wait_timeout
    auto_reclose_wait_timeout_0 true = 1 -> auto_reclose_wait := false;
  triggeredby [0.0..45.0] auto_reclose_wait = true;
  transition commanded_ar_non_auto_timeout
    commanded_ar_non_auto_timeout_0 true = 1 -> commanded_ar_non_auto := false;
  triggeredby [0.0..45.0] commanded_ar_non_auto = true;
  transition commanded_ar_auto_timeout
    commanded_ar_auto_timeout_0 true = 1 -> commanded_ar_auto := false;
  triggeredby [0.0..45.0] commanded_ar_auto = true;
  transition commanded_closed_timeout
    commanded_closed_timeout_0 true = 1 -> commanded_closed := false;
  triggeredby [0.0..45.0] commanded_closed = true;
  transition commanded_open_timeout
    commanded_open_timeout_0 true = 1 -> commanded_open := false;
  triggeredby [0.0..45.0] commanded_open = true;
  transition not_responding
    not_responding_0 true = 1 -> cb_state_not_responding, count_as_fault;
  transition abnormal
    abnormal_0 true = 1 -> cb_state_abnormal, count_as_fault;
  transition ar_status_non_auto_unexplained
    ar_status_non_auto_unexplained_0 true = 1 -> ar_status := non_auto, cb_ar_status_NON_AUTO, count_as_fault;
    ar_status_non_auto_unexplained_1 true = 1 -> ar_status := non_auto, ar_supy_control_status_NON_AUTO, count_as_fault;
  transition ar_status_auto_unexplained
    ar_status_auto_unexplained_0 true = 1 -> ar_status := auto, cb_ar_status_AUTO, count_as_fault;
    ar_status_auto_unexplained_1 true = 1 -> ar_status := auto, ar_supy_control_status_AUTO, count_as_fault;
  transition ar_status_non_auto
    ar_status_non_auto_0 commanded_ar_non_auto = true -> ar_status := non_auto, cb_ar_status_NON_AUTO;
    ar_status_non_auto_1 commanded_ar_non_auto = true -> ar_status := non_auto, ar_supy_control_status_NON_AUTO;
  transition ar_status_auto
    ar_status_auto_0 commanded_ar_auto = true -> ar_status := auto, cb_ar_status_AUTO;
    ar_status_auto_1 commanded_ar_auto = true -> ar_status := auto, ar_supy_control_status_AUTO;
  transition command_ar_non_auto
    command_ar_non_auto_0 true = 1 -> commanded_ar_non_auto := true, command_cb_ar_status_NON_AUTO;
    command_ar_non_auto_1 true = 1 -> commanded_ar_non_auto := true, command_ar_supy_control_status_NON_AUTO;
  transition command_ar_auto
    command_ar_auto_0 true = 1 -> commanded_ar_auto := true, command_cb_ar_status_AUTO;
    command_ar_auto_1 true = 1 -> commanded_ar_auto := true, command_ar_supy_control_status_AUTO;
  transition command_close_fail
    command_close_fail_0 commanded_closed = true -> cb_command_fail;
  transition close_on_command
    close_on_command_0 (state = open AND commanded_closed = true) -> state := closed, cb_state_closed, state_change_close;
  transition command_close
    command_close_0 true = 1 -> commanded_closed := true, command_cb_state_closed;
  transition command_open_fail
    command_open_fail_0 commanded_open = true -> cb_command_fail;
  transition open_on_command
    open_on_command_0 (state = closed AND commanded_open = true) -> state := open, cb_state_open, state_change_open;
  transition command_open
    command_open_0 true = 1 -> commanded_open := true, command_cb_state_open;
  transition reopen
    reopen_0 (state = closed AND auto_reopen_wait = true) -> state := open, auto_reopen_wait := false, lockout := true, cb_state_open, state_change_open;
  transition reclose
    reclose_0 ((state = open AND auto_reclose_wait = true) AND lockout = false) -> state := closed, auto_reclose_wait := false, auto_reopen_wait := true, cb_state_closed, state_change_close;
  transition close_unexplained
    close_unexplained_0 state = open -> state := closed, cb_state_closed, state_change_close, count_as_fault;
  transition close1
    close1_0 state = open -> state := closed, cb_state_closed, state_change_close;
  triggeredby close;
  transition trip_unexplained
    trip_unexplained_0 (state = closed AND ar_status = auto) -> state := open, auto_reclose_wait := true, cb_state_open, state_change_open, count_as_fault;
  transition simple_trip1
    simple_trip1_0 state = open -> state := open;
    simple_trip1_1 (state = closed AND ar_status = non_auto) -> state := open, cb_state_open;
    simple_trip1_2 (state = closed AND ar_status = auto) -> state := open, auto_reclose_wait := true, cb_state_open;
  triggeredby simple_trip;
  transition trip1
    trip1_0 (state = closed AND ar_status = non_auto) -> state := open, cb_state_open, state_change_open;
    trip1_1 (state = closed AND ar_status = auto) -> state := open, auto_reclose_wait := true, cb_state_open, state_change_open;
  triggeredby trip;
  transition open_unexplained
    open_unexplained_0 state = closed -> state := open, cb_state_open, state_change_open, count_as_fault;
  transition open1
    open1_0 state = closed -> state := open, cb_state_open, state_change_open;
  triggeredby open;
}
component Breaker_X21_X22 = {
  var auto_reopen_wait : [0..1];
  var auto_reclose_wait : [0..1];
  var commanded_ar_non_auto : [0..1];
  var commanded_ar_auto : [0..1];
  var commanded_closed : [0..1];
  var commanded_open : [0..1];
  var lockout : [0..1];
  var ar_status : {auto,non_auto};
  var state : {open,closed};
  event state_change_close;
  event state_change_open;
  event breaker_is_closed;
  event count_as_fault;
  event check_isolator_open;
  event close;
  event simple_trip;
  event trip;
  event open;
  event IMPOSSIBLE;
  event command_cb_ar_status_NON_AUTO;
  event command_cb_ar_status_AUTO;
  event command_ar_supy_control_status_NON_AUTO;
  event command_ar_supy_control_status_AUTO;
  event command_cb_state_closed;
  event command_cb_state_open;
  event cb_ar_status_NON_AUTO;
  event cb_ar_status_AUTO;
  event ar_supy_control_status_NON_AUTO;
  event ar_supy_control_status_AUTO;
  event cb_command_fail;
  event cb_state_not_responding;
  event cb_state_abnormal;
  event cb_state_closed;
  event cb_state_open;
  transition breaker_is_closed_transition
    breaker_is_closed_transition_0 state = closed -> breaker_is_closed;
  transition check_isolator_open_transition
    check_isolator_open_transition_0 true = 1 -> IMPOSSIBLE;
    check_isolator_open_transition_1 state = open -> state := open;
  triggeredby check_isolator_open;
  transition auto_reopen_wait_timeout
    auto_reopen_wait_timeout_0 true = 1 -> auto_reopen_wait := false;
  triggeredby [0.0..1.0] auto_reopen_wait = true;
  transition auto_reclose_wait_timeout
    auto_reclose_wait_timeout_0 true = 1 -> auto_reclose_wait := false;
  triggeredby [0.0..45.0] auto_reclose_wait = true;
  transition commanded_ar_non_auto_timeout
    commanded_ar_non_auto_timeout_0 true = 1 -> commanded_ar_non_auto := false;
  triggeredby [0.0..45.0] commanded_ar_non_auto = true;
  transition commanded_ar_auto_timeout
    commanded_ar_auto_timeout_0 true = 1 -> commanded_ar_auto := false;
  triggeredby [0.0..45.0] commanded_ar_auto = true;
  transition commanded_closed_timeout
    commanded_closed_timeout_0 true = 1 -> commanded_closed := false;
  triggeredby [0.0..45.0] commanded_closed = true;
  transition commanded_open_timeout
    commanded_open_timeout_0 true = 1 -> commanded_open := false;
  triggeredby [0.0..45.0] commanded_open = true;
  transition not_responding
    not_responding_0 true = 1 -> cb_state_not_responding, count_as_fault;
  transition abnormal
    abnormal_0 true = 1 -> cb_state_abnormal, count_as_fault;
  transition ar_status_non_auto_unexplained
    ar_status_non_auto_unexplained_0 true = 1 -> ar_status := non_auto, cb_ar_status_NON_AUTO, count_as_fault;
    ar_status_non_auto_unexplained_1 true = 1 -> ar_status := non_auto, ar_supy_control_status_NON_AUTO, count_as_fault;
  transition ar_status_auto_unexplained
    ar_status_auto_unexplained_0 true = 1 -> ar_status := auto, cb_ar_status_AUTO, count_as_fault;
    ar_status_auto_unexplained_1 true = 1 -> ar_status := auto, ar_supy_control_status_AUTO, count_as_fault;
  transition ar_status_non_auto
    ar_status_non_auto_0 commanded_ar_non_auto = true -> ar_status := non_auto, cb_ar_status_NON_AUTO;
    ar_status_non_auto_1 commanded_ar_non_auto = true -> ar_status := non_auto, ar_supy_control_status_NON_AUTO;
  transition ar_status_auto
    ar_status_auto_0 commanded_ar_auto = true -> ar_status := auto, cb_ar_status_AUTO;
    ar_status_auto_1 commanded_ar_auto = true -> ar_status := auto, ar_supy_control_status_AUTO;
  transition command_ar_non_auto
    command_ar_non_auto_0 true = 1 -> commanded_ar_non_auto := true, command_cb_ar_status_NON_AUTO;
    command_ar_non_auto_1 true = 1 -> commanded_ar_non_auto := true, command_ar_supy_control_status_NON_AUTO;
  transition command_ar_auto
    command_ar_auto_0 true = 1 -> commanded_ar_auto := true, command_cb_ar_status_AUTO;
    command_ar_auto_1 true = 1 -> commanded_ar_auto := true, command_ar_supy_control_status_AUTO;
  transition command_close_fail
    command_close_fail_0 commanded_closed = true -> cb_command_fail;
  transition close_on_command
    close_on_command_0 (state = open AND commanded_closed = true) -> state := closed, cb_state_closed, state_change_close;
  transition command_close
    command_close_0 true = 1 -> commanded_closed := true, command_cb_state_closed;
  transition command_open_fail
    command_open_fail_0 commanded_open = true -> cb_command_fail;
  transition open_on_command
    open_on_command_0 (state = closed AND commanded_open = true) -> state := open, cb_state_open, state_change_open;
  transition command_open
    command_open_0 true = 1 -> commanded_open := true, command_cb_state_open;
  transition reopen
    reopen_0 (state = closed AND auto_reopen_wait = true) -> state := open, auto_reopen_wait := false, lockout := true, cb_state_open, state_change_open;
  transition reclose
    reclose_0 ((state = open AND auto_reclose_wait = true) AND lockout = false) -> state := closed, auto_reclose_wait := false, auto_reopen_wait := true, cb_state_closed, state_change_close;
  transition close_unexplained
    close_unexplained_0 state = open -> state := closed, cb_state_closed, state_change_close, count_as_fault;
  transition close1
    close1_0 state = open -> state := closed, cb_state_closed, state_change_close;
  triggeredby close;
  transition trip_unexplained
    trip_unexplained_0 (state = closed AND ar_status = auto) -> state := open, auto_reclose_wait := true, cb_state_open, state_change_open, count_as_fault;
  transition simple_trip1
    simple_trip1_0 state = open -> state := open;
    simple_trip1_1 (state = closed AND ar_status = non_auto) -> state := open, cb_state_open;
    simple_trip1_2 (state = closed AND ar_status = auto) -> state := open, auto_reclose_wait := true, cb_state_open;
  triggeredby simple_trip;
  transition trip1
    trip1_0 (state = closed AND ar_status = non_auto) -> state := open, cb_state_open, state_change_open;
    trip1_1 (state = closed AND ar_status = auto) -> state := open, auto_reclose_wait := true, cb_state_open, state_change_open;
  triggeredby trip;
  transition open_unexplained
    open_unexplained_0 state = closed -> state := open, cb_state_open, state_change_open, count_as_fault;
  transition open1
    open1_0 state = closed -> state := open, cb_state_open, state_change_open;
  triggeredby open;
}
component Breaker_X23_X24 = {
  var auto_reopen_wait : [0..1];
  var auto_reclose_wait : [0..1];
  var commanded_ar_non_auto : [0..1];
  var commanded_ar_auto : [0..1];
  var commanded_closed : [0..1];
  var commanded_open : [0..1];
  var lockout : [0..1];
  var ar_status : {auto,non_auto};
  var state : {open,closed};
  event state_change_close;
  event state_change_open;
  event breaker_is_closed;
  event count_as_fault;
  event check_isolator_open;
  event close;
  event simple_trip;
  event trip;
  event open;
  event IMPOSSIBLE;
  event command_cb_ar_status_NON_AUTO;
  event command_cb_ar_status_AUTO;
  event command_ar_supy_control_status_NON_AUTO;
  event command_ar_supy_control_status_AUTO;
  event command_cb_state_closed;
  event command_cb_state_open;
  event cb_ar_status_NON_AUTO;
  event cb_ar_status_AUTO;
  event ar_supy_control_status_NON_AUTO;
  event ar_supy_control_status_AUTO;
  event cb_command_fail;
  event cb_state_not_responding;
  event cb_state_abnormal;
  event cb_state_closed;
  event cb_state_open;
  transition breaker_is_closed_transition
    breaker_is_closed_transition_0 state = closed -> breaker_is_closed;
  transition check_isolator_open_transition
    check_isolator_open_transition_0 true = 1 -> IMPOSSIBLE;
    check_isolator_open_transition_1 state = open -> state := open;
  triggeredby check_isolator_open;
  transition auto_reopen_wait_timeout
    auto_reopen_wait_timeout_0 true = 1 -> auto_reopen_wait := false;
  triggeredby [0.0..1.0] auto_reopen_wait = true;
  transition auto_reclose_wait_timeout
    auto_reclose_wait_timeout_0 true = 1 -> auto_reclose_wait := false;
  triggeredby [0.0..45.0] auto_reclose_wait = true;
  transition commanded_ar_non_auto_timeout
    commanded_ar_non_auto_timeout_0 true = 1 -> commanded_ar_non_auto := false;
  triggeredby [0.0..45.0] commanded_ar_non_auto = true;
  transition commanded_ar_auto_timeout
    commanded_ar_auto_timeout_0 true = 1 -> commanded_ar_auto := false;
  triggeredby [0.0..45.0] commanded_ar_auto = true;
  transition commanded_closed_timeout
    commanded_closed_timeout_0 true = 1 -> commanded_closed := false;
  triggeredby [0.0..45.0] commanded_closed = true;
  transition commanded_open_timeout
    commanded_open_timeout_0 true = 1 -> commanded_open := false;
  triggeredby [0.0..45.0] commanded_open = true;
  transition not_responding
    not_responding_0 true = 1 -> cb_state_not_responding, count_as_fault;
  transition abnormal
    abnormal_0 true = 1 -> cb_state_abnormal, count_as_fault;
  transition ar_status_non_auto_unexplained
    ar_status_non_auto_unexplained_0 true = 1 -> ar_status := non_auto, cb_ar_status_NON_AUTO, count_as_fault;
    ar_status_non_auto_unexplained_1 true = 1 -> ar_status := non_auto, ar_supy_control_status_NON_AUTO, count_as_fault;
  transition ar_status_auto_unexplained
    ar_status_auto_unexplained_0 true = 1 -> ar_status := auto, cb_ar_status_AUTO, count_as_fault;
    ar_status_auto_unexplained_1 true = 1 -> ar_status := auto, ar_supy_control_status_AUTO, count_as_fault;
  transition ar_status_non_auto
    ar_status_non_auto_0 commanded_ar_non_auto = true -> ar_status := non_auto, cb_ar_status_NON_AUTO;
    ar_status_non_auto_1 commanded_ar_non_auto = true -> ar_status := non_auto, ar_supy_control_status_NON_AUTO;
  transition ar_status_auto
    ar_status_auto_0 commanded_ar_auto = true -> ar_status := auto, cb_ar_status_AUTO;
    ar_status_auto_1 commanded_ar_auto = true -> ar_status := auto, ar_supy_control_status_AUTO;
  transition command_ar_non_auto
    command_ar_non_auto_0 true = 1 -> commanded_ar_non_auto := true, command_cb_ar_status_NON_AUTO;
    command_ar_non_auto_1 true = 1 -> commanded_ar_non_auto := true, command_ar_supy_control_status_NON_AUTO;
  transition command_ar_auto
    command_ar_auto_0 true = 1 -> commanded_ar_auto := true, command_cb_ar_status_AUTO;
    command_ar_auto_1 true = 1 -> commanded_ar_auto := true, command_ar_supy_control_status_AUTO;
  transition command_close_fail
    command_close_fail_0 commanded_closed = true -> cb_command_fail;
  transition close_on_command
    close_on_command_0 (state = open AND commanded_closed = true) -> state := closed, cb_state_closed, state_change_close;
  transition command_close
    command_close_0 true = 1 -> commanded_closed := true, command_cb_state_closed;
  transition command_open_fail
    command_open_fail_0 commanded_open = true -> cb_command_fail;
  transition open_on_command
    open_on_command_0 (state = closed AND commanded_open = true) -> state := open, cb_state_open, state_change_open;
  transition command_open
    command_open_0 true = 1 -> commanded_open := true, command_cb_state_open;
  transition reopen
    reopen_0 (state = closed AND auto_reopen_wait = true) -> state := open, auto_reopen_wait := false, lockout := true, cb_state_open, state_change_open;
  transition reclose
    reclose_0 ((state = open AND auto_reclose_wait = true) AND lockout = false) -> state := closed, auto_reclose_wait := false, auto_reopen_wait := true, cb_state_closed, state_change_close;
  transition close_unexplained
    close_unexplained_0 state = open -> state := closed, cb_state_closed, state_change_close, count_as_fault;
  transition close1
    close1_0 state = open -> state := closed, cb_state_closed, state_change_close;
  triggeredby close;
  transition trip_unexplained
    trip_unexplained_0 (state = closed AND ar_status = auto) -> state := open, auto_reclose_wait := true, cb_state_open, state_change_open, count_as_fault;
  transition simple_trip1
    simple_trip1_0 state = open -> state := open;
    simple_trip1_1 (state = closed AND ar_status = non_auto) -> state := open, cb_state_open;
    simple_trip1_2 (state = closed AND ar_status = auto) -> state := open, auto_reclose_wait := true, cb_state_open;
  triggeredby simple_trip;
  transition trip1
    trip1_0 (state = closed AND ar_status = non_auto) -> state := open, cb_state_open, state_change_open;
    trip1_1 (state = closed AND ar_status = auto) -> state := open, auto_reclose_wait := true, cb_state_open, state_change_open;
  triggeredby trip;
  transition open_unexplained
    open_unexplained_0 state = closed -> state := open, cb_state_open, state_change_open, count_as_fault;
  transition open1
    open1_0 state = closed -> state := open, cb_state_open, state_change_open;
  triggeredby open;
}
component Breaker_X25_X26 = {
  var auto_reopen_wait : [0..1];
  var auto_reclose_wait : [0..1];
  var commanded_ar_non_auto : [0..1];
  var commanded_ar_auto : [0..1];
  var commanded_closed : [0..1];
  var commanded_open : [0..1];
  var lockout : [0..1];
  var ar_status : {auto,non_auto};
  var state : {open,closed};
  event state_change_close;
  event state_change_open;
  event breaker_is_closed;
  event count_as_fault;
  event check_isolator_open;
  event close;
  event simple_trip;
  event trip;
  event open;
  event IMPOSSIBLE;
  event command_cb_ar_status_NON_AUTO;
  event command_cb_ar_status_AUTO;
  event command_ar_supy_control_status_NON_AUTO;
  event command_ar_supy_control_status_AUTO;
  event command_cb_state_closed;
  event command_cb_state_open;
  event cb_ar_status_NON_AUTO;
  event cb_ar_status_AUTO;
  event ar_supy_control_status_NON_AUTO;
  event ar_supy_control_status_AUTO;
  event cb_command_fail;
  event cb_state_not_responding;
  event cb_state_abnormal;
  event cb_state_closed;
  event cb_state_open;
  transition breaker_is_closed_transition
    breaker_is_closed_transition_0 state = closed -> breaker_is_closed;
  transition check_isolator_open_transition
    check_isolator_open_transition_0 true = 1 -> IMPOSSIBLE;
    check_isolator_open_transition_1 state = open -> state := open;
  triggeredby check_isolator_open;
  transition auto_reopen_wait_timeout
    auto_reopen_wait_timeout_0 true = 1 -> auto_reopen_wait := false;
  triggeredby [0.0..1.0] auto_reopen_wait = true;
  transition auto_reclose_wait_timeout
    auto_reclose_wait_timeout_0 true = 1 -> auto_reclose_wait := false;
  triggeredby [0.0..45.0] auto_reclose_wait = true;
  transition commanded_ar_non_auto_timeout
    commanded_ar_non_auto_timeout_0 true = 1 -> commanded_ar_non_auto := false;
  triggeredby [0.0..45.0] commanded_ar_non_auto = true;
  transition commanded_ar_auto_timeout
    commanded_ar_auto_timeout_0 true = 1 -> commanded_ar_auto := false;
  triggeredby [0.0..45.0] commanded_ar_auto = true;
  transition commanded_closed_timeout
    commanded_closed_timeout_0 true = 1 -> commanded_closed := false;
  triggeredby [0.0..45.0] commanded_closed = true;
  transition commanded_open_timeout
    commanded_open_timeout_0 true = 1 -> commanded_open := false;
  triggeredby [0.0..45.0] commanded_open = true;
  transition not_responding
    not_responding_0 true = 1 -> cb_state_not_responding, count_as_fault;
  transition abnormal
    abnormal_0 true = 1 -> cb_state_abnormal, count_as_fault;
  transition ar_status_non_auto_unexplained
    ar_status_non_auto_unexplained_0 true = 1 -> ar_status := non_auto, cb_ar_status_NON_AUTO, count_as_fault;
    ar_status_non_auto_unexplained_1 true = 1 -> ar_status := non_auto, ar_supy_control_status_NON_AUTO, count_as_fault;
  transition ar_status_auto_unexplained
    ar_status_auto_unexplained_0 true = 1 -> ar_status := auto, cb_ar_status_AUTO, count_as_fault;
    ar_status_auto_unexplained_1 true = 1 -> ar_status := auto, ar_supy_control_status_AUTO, count_as_fault;
  transition ar_status_non_auto
    ar_status_non_auto_0 commanded_ar_non_auto = true -> ar_status := non_auto, cb_ar_status_NON_AUTO;
    ar_status_non_auto_1 commanded_ar_non_auto = true -> ar_status := non_auto, ar_supy_control_status_NON_AUTO;
  transition ar_status_auto
    ar_status_auto_0 commanded_ar_auto = true -> ar_status := auto, cb_ar_status_AUTO;
    ar_status_auto_1 commanded_ar_auto = true -> ar_status := auto, ar_supy_control_status_AUTO;
  transition command_ar_non_auto
    command_ar_non_auto_0 true = 1 -> commanded_ar_non_auto := true, command_cb_ar_status_NON_AUTO;
    command_ar_non_auto_1 true = 1 -> commanded_ar_non_auto := true, command_ar_supy_control_status_NON_AUTO;
  transition command_ar_auto
    command_ar_auto_0 true = 1 -> commanded_ar_auto := true, command_cb_ar_status_AUTO;
    command_ar_auto_1 true = 1 -> commanded_ar_auto := true, command_ar_supy_control_status_AUTO;
  transition command_close_fail
    command_close_fail_0 commanded_closed = true -> cb_command_fail;
  transition close_on_command
    close_on_command_0 (state = open AND commanded_closed = true) -> state := closed, cb_state_closed, state_change_close;
  transition command_close
    command_close_0 true = 1 -> commanded_closed := true, command_cb_state_closed;
  transition command_open_fail
    command_open_fail_0 commanded_open = true -> cb_command_fail;
  transition open_on_command
    open_on_command_0 (state = closed AND commanded_open = true) -> state := open, cb_state_open, state_change_open;
  transition command_open
    command_open_0 true = 1 -> commanded_open := true, command_cb_state_open;
  transition reopen
    reopen_0 (state = closed AND auto_reopen_wait = true) -> state := open, auto_reopen_wait := false, lockout := true, cb_state_open, state_change_open;
  transition reclose
    reclose_0 ((state = open AND auto_reclose_wait = true) AND lockout = false) -> state := closed, auto_reclose_wait := false, auto_reopen_wait := true, cb_state_closed, state_change_close;
  transition close_unexplained
    close_unexplained_0 state = open -> state := closed, cb_state_closed, state_change_close, count_as_fault;
  transition close1
    close1_0 state = open -> state := closed, cb_state_closed, state_change_close;
  triggeredby close;
  transition trip_unexplained
    trip_unexplained_0 (state = closed AND ar_status = auto) -> state := open, auto_reclose_wait := true, cb_state_open, state_change_open, count_as_fault;
  transition simple_trip1
    simple_trip1_0 state = open -> state := open;
    simple_trip1_1 (state = closed AND ar_status = non_auto) -> state := open, cb_state_open;
    simple_trip1_2 (state = closed AND ar_status = auto) -> state := open, auto_reclose_wait := true, cb_state_open;
  triggeredby simple_trip;
  transition trip1
    trip1_0 (state = closed AND ar_status = non_auto) -> state := open, cb_state_open, state_change_open;
    trip1_1 (state = closed AND ar_status = auto) -> state := open, auto_reclose_wait := true, cb_state_open, state_change_open;
  triggeredby trip;
  transition open_unexplained
    open_unexplained_0 state = closed -> state := open, cb_state_open, state_change_open, count_as_fault;
  transition open1
    open1_0 state = closed -> state := open, cb_state_open, state_change_open;
  triggeredby open;
}
component Breaker_X27_X28 = {
  var auto_reopen_wait : [0..1];
  var auto_reclose_wait : [0..1];
  var commanded_ar_non_auto : [0..1];
  var commanded_ar_auto : [0..1];
  var commanded_closed : [0..1];
  var commanded_open : [0..1];
  var lockout : [0..1];
  var ar_status : {auto,non_auto};
  var state : {open,closed};
  event state_change_close;
  event state_change_open;
  event breaker_is_closed;
  event count_as_fault;
  event check_isolator_open;
  event close;
  event simple_trip;
  event trip;
  event open;
  event IMPOSSIBLE;
  event command_cb_ar_status_NON_AUTO;
  event command_cb_ar_status_AUTO;
  event command_ar_supy_control_status_NON_AUTO;
  event command_ar_supy_control_status_AUTO;
  event command_cb_state_closed;
  event command_cb_state_open;
  event cb_ar_status_NON_AUTO;
  event cb_ar_status_AUTO;
  event ar_supy_control_status_NON_AUTO;
  event ar_supy_control_status_AUTO;
  event cb_command_fail;
  event cb_state_not_responding;
  event cb_state_abnormal;
  event cb_state_closed;
  event cb_state_open;
  transition breaker_is_closed_transition
    breaker_is_closed_transition_0 state = closed -> breaker_is_closed;
  transition check_isolator_open_transition
    check_isolator_open_transition_0 true = 1 -> IMPOSSIBLE;
    check_isolator_open_transition_1 state = open -> state := open;
  triggeredby check_isolator_open;
  transition auto_reopen_wait_timeout
    auto_reopen_wait_timeout_0 true = 1 -> auto_reopen_wait := false;
  triggeredby [0.0..1.0] auto_reopen_wait = true;
  transition auto_reclose_wait_timeout
    auto_reclose_wait_timeout_0 true = 1 -> auto_reclose_wait := false;
  triggeredby [0.0..45.0] auto_reclose_wait = true;
  transition commanded_ar_non_auto_timeout
    commanded_ar_non_auto_timeout_0 true = 1 -> commanded_ar_non_auto := false;
  triggeredby [0.0..45.0] commanded_ar_non_auto = true;
  transition commanded_ar_auto_timeout
    commanded_ar_auto_timeout_0 true = 1 -> commanded_ar_auto := false;
  triggeredby [0.0..45.0] commanded_ar_auto = true;
  transition commanded_closed_timeout
    commanded_closed_timeout_0 true = 1 -> commanded_closed := false;
  triggeredby [0.0..45.0] commanded_closed = true;
  transition commanded_open_timeout
    commanded_open_timeout_0 true = 1 -> commanded_open := false;
  triggeredby [0.0..45.0] commanded_open = true;
  transition not_responding
    not_responding_0 true = 1 -> cb_state_not_responding, count_as_fault;
  transition abnormal
    abnormal_0 true = 1 -> cb_state_abnormal, count_as_fault;
  transition ar_status_non_auto_unexplained
    ar_status_non_auto_unexplained_0 true = 1 -> ar_status := non_auto, cb_ar_status_NON_AUTO, count_as_fault;
    ar_status_non_auto_unexplained_1 true = 1 -> ar_status := non_auto, ar_supy_control_status_NON_AUTO, count_as_fault;
  transition ar_status_auto_unexplained
    ar_status_auto_unexplained_0 true = 1 -> ar_status := auto, cb_ar_status_AUTO, count_as_fault;
    ar_status_auto_unexplained_1 true = 1 -> ar_status := auto, ar_supy_control_status_AUTO, count_as_fault;
  transition ar_status_non_auto
    ar_status_non_auto_0 commanded_ar_non_auto = true -> ar_status := non_auto, cb_ar_status_NON_AUTO;
    ar_status_non_auto_1 commanded_ar_non_auto = true -> ar_status := non_auto, ar_supy_control_status_NON_AUTO;
  transition ar_status_auto
    ar_status_auto_0 commanded_ar_auto = true -> ar_status := auto, cb_ar_status_AUTO;
    ar_status_auto_1 commanded_ar_auto = true -> ar_status := auto, ar_supy_control_status_AUTO;
  transition command_ar_non_auto
    command_ar_non_auto_0 true = 1 -> commanded_ar_non_auto := true, command_cb_ar_status_NON_AUTO;
    command_ar_non_auto_1 true = 1 -> commanded_ar_non_auto := true, command_ar_supy_control_status_NON_AUTO;
  transition command_ar_auto
    command_ar_auto_0 true = 1 -> commanded_ar_auto := true, command_cb_ar_status_AUTO;
    command_ar_auto_1 true = 1 -> commanded_ar_auto := true, command_ar_supy_control_status_AUTO;
  transition command_close_fail
    command_close_fail_0 commanded_closed = true -> cb_command_fail;
  transition close_on_command
    close_on_command_0 (state = open AND commanded_closed = true) -> state := closed, cb_state_closed, state_change_close;
  transition command_close
    command_close_0 true = 1 -> commanded_closed := true, command_cb_state_closed;
  transition command_open_fail
    command_open_fail_0 commanded_open = true -> cb_command_fail;
  transition open_on_command
    open_on_command_0 (state = closed AND commanded_open = true) -> state := open, cb_state_open, state_change_open;
  transition command_open
    command_open_0 true = 1 -> commanded_open := true, command_cb_state_open;
  transition reopen
    reopen_0 (state = closed AND auto_reopen_wait = true) -> state := open, auto_reopen_wait := false, lockout := true, cb_state_open, state_change_open;
  transition reclose
    reclose_0 ((state = open AND auto_reclose_wait = true) AND lockout = false) -> state := closed, auto_reclose_wait := false, auto_reopen_wait := true, cb_state_closed, state_change_close;
  transition close_unexplained
    close_unexplained_0 state = open -> state := closed, cb_state_closed, state_change_close, count_as_fault;
  transition close1
    close1_0 state = open -> state := closed, cb_state_closed, state_change_close;
  triggeredby close;
  transition trip_unexplained
    trip_unexplained_0 (state = closed AND ar_status = auto) -> state := open, auto_reclose_wait := true, cb_state_open, state_change_open, count_as_fault;
  transition simple_trip1
    simple_trip1_0 state = open -> state := open;
    simple_trip1_1 (state = closed AND ar_status = non_auto) -> state := open, cb_state_open;
    simple_trip1_2 (state = closed AND ar_status = auto) -> state := open, auto_reclose_wait := true, cb_state_open;
  triggeredby simple_trip;
  transition trip1
    trip1_0 (state = closed AND ar_status = non_auto) -> state := open, cb_state_open, state_change_open;
    trip1_1 (state = closed AND ar_status = auto) -> state := open, auto_reclose_wait := true, cb_state_open, state_change_open;
  triggeredby trip;
  transition open_unexplained
    open_unexplained_0 state = closed -> state := open, cb_state_open, state_change_open, count_as_fault;
  transition open1
    open1_0 state = closed -> state := open, cb_state_open, state_change_open;
  triggeredby open;
}
component Breaker_X29_X30 = {
  var auto_reopen_wait : [0..1];
  var auto_reclose_wait : [0..1];
  var commanded_ar_non_auto : [0..1];
  var commanded_ar_auto : [0..1];
  var commanded_closed : [0..1];
  var commanded_open : [0..1];
  var lockout : [0..1];
  var ar_status : {auto,non_auto};
  var state : {open,closed};
  event state_change_close;
  event state_change_open;
  event breaker_is_closed;
  event count_as_fault;
  event check_isolator_open;
  event close;
  event simple_trip;
  event trip;
  event open;
  event IMPOSSIBLE;
  event command_cb_ar_status_NON_AUTO;
  event command_cb_ar_status_AUTO;
  event command_ar_supy_control_status_NON_AUTO;
  event command_ar_supy_control_status_AUTO;
  event command_cb_state_closed;
  event command_cb_state_open;
  event cb_ar_status_NON_AUTO;
  event cb_ar_status_AUTO;
  event ar_supy_control_status_NON_AUTO;
  event ar_supy_control_status_AUTO;
  event cb_command_fail;
  event cb_state_not_responding;
  event cb_state_abnormal;
  event cb_state_closed;
  event cb_state_open;
  transition breaker_is_closed_transition
    breaker_is_closed_transition_0 state = closed -> breaker_is_closed;
  transition check_isolator_open_transition
    check_isolator_open_transition_0 true = 1 -> IMPOSSIBLE;
    check_isolator_open_transition_1 state = open -> state := open;
  triggeredby check_isolator_open;
  transition auto_reopen_wait_timeout
    auto_reopen_wait_timeout_0 true = 1 -> auto_reopen_wait := false;
  triggeredby [0.0..1.0] auto_reopen_wait = true;
  transition auto_reclose_wait_timeout
    auto_reclose_wait_timeout_0 true = 1 -> auto_reclose_wait := false;
  triggeredby [0.0..45.0] auto_reclose_wait = true;
  transition commanded_ar_non_auto_timeout
    commanded_ar_non_auto_timeout_0 true = 1 -> commanded_ar_non_auto := false;
  triggeredby [0.0..45.0] commanded_ar_non_auto = true;
  transition commanded_ar_auto_timeout
    commanded_ar_auto_timeout_0 true = 1 -> commanded_ar_auto := false;
  triggeredby [0.0..45.0] commanded_ar_auto = true;
  transition commanded_closed_timeout
    commanded_closed_timeout_0 true = 1 -> commanded_closed := false;
  triggeredby [0.0..45.0] commanded_closed = true;
  transition commanded_open_timeout
    commanded_open_timeout_0 true = 1 -> commanded_open := false;
  triggeredby [0.0..45.0] commanded_open = true;
  transition not_responding
    not_responding_0 true = 1 -> cb_state_not_responding, count_as_fault;
  transition abnormal
    abnormal_0 true = 1 -> cb_state_abnormal, count_as_fault;
  transition ar_status_non_auto_unexplained
    ar_status_non_auto_unexplained_0 true = 1 -> ar_status := non_auto, cb_ar_status_NON_AUTO, count_as_fault;
    ar_status_non_auto_unexplained_1 true = 1 -> ar_status := non_auto, ar_supy_control_status_NON_AUTO, count_as_fault;
  transition ar_status_auto_unexplained
    ar_status_auto_unexplained_0 true = 1 -> ar_status := auto, cb_ar_status_AUTO, count_as_fault;
    ar_status_auto_unexplained_1 true = 1 -> ar_status := auto, ar_supy_control_status_AUTO, count_as_fault;
  transition ar_status_non_auto
    ar_status_non_auto_0 commanded_ar_non_auto = true -> ar_status := non_auto, cb_ar_status_NON_AUTO;
    ar_status_non_auto_1 commanded_ar_non_auto = true -> ar_status := non_auto, ar_supy_control_status_NON_AUTO;
  transition ar_status_auto
    ar_status_auto_0 commanded_ar_auto = true -> ar_status := auto, cb_ar_status_AUTO;
    ar_status_auto_1 commanded_ar_auto = true -> ar_status := auto, ar_supy_control_status_AUTO;
  transition command_ar_non_auto
    command_ar_non_auto_0 true = 1 -> commanded_ar_non_auto := true, command_cb_ar_status_NON_AUTO;
    command_ar_non_auto_1 true = 1 -> commanded_ar_non_auto := true, command_ar_supy_control_status_NON_AUTO;
  transition command_ar_auto
    command_ar_auto_0 true = 1 -> commanded_ar_auto := true, command_cb_ar_status_AUTO;
    command_ar_auto_1 true = 1 -> commanded_ar_auto := true, command_ar_supy_control_status_AUTO;
  transition command_close_fail
    command_close_fail_0 commanded_closed = true -> cb_command_fail;
  transition close_on_command
    close_on_command_0 (state = open AND commanded_closed = true) -> state := closed, cb_state_closed, state_change_close;
  transition command_close
    command_close_0 true = 1 -> commanded_closed := true, command_cb_state_closed;
  transition command_open_fail
    command_open_fail_0 commanded_open = true -> cb_command_fail;
  transition open_on_command
    open_on_command_0 (state = closed AND commanded_open = true) -> state := open, cb_state_open, state_change_open;
  transition command_open
    command_open_0 true = 1 -> commanded_open := true, command_cb_state_open;
  transition reopen
    reopen_0 (state = closed AND auto_reopen_wait = true) -> state := open, auto_reopen_wait := false, lockout := true, cb_state_open, state_change_open;
  transition reclose
    reclose_0 ((state = open AND auto_reclose_wait = true) AND lockout = false) -> state := closed, auto_reclose_wait := false, auto_reopen_wait := true, cb_state_closed, state_change_close;
  transition close_unexplained
    close_unexplained_0 state = open -> state := closed, cb_state_closed, state_change_close, count_as_fault;
  transition close1
    close1_0 state = open -> state := closed, cb_state_closed, state_change_close;
  triggeredby close;
  transition trip_unexplained
    trip_unexplained_0 (state = closed AND ar_status = auto) -> state := open, auto_reclose_wait := true, cb_state_open, state_change_open, count_as_fault;
  transition simple_trip1
    simple_trip1_0 state = open -> state := open;
    simple_trip1_1 (state = closed AND ar_status = non_auto) -> state := open, cb_state_open;
    simple_trip1_2 (state = closed AND ar_status = auto) -> state := open, auto_reclose_wait := true, cb_state_open;
  triggeredby simple_trip;
  transition trip1
    trip1_0 (state = closed AND ar_status = non_auto) -> state := open, cb_state_open, state_change_open;
    trip1_1 (state = closed AND ar_status = auto) -> state := open, auto_reclose_wait := true, cb_state_open, state_change_open;
  triggeredby trip;
  transition open_unexplained
    open_unexplained_0 state = closed -> state := open, cb_state_open, state_change_open, count_as_fault;
  transition open1
    open1_0 state = closed -> state := open, cb_state_open, state_change_open;
  triggeredby open;
}
component Breaker_X31_X32 = {
  var auto_reopen_wait : [0..1];
  var auto_reclose_wait : [0..1];
  var commanded_ar_non_auto : [0..1];
  var commanded_ar_auto : [0..1];
  var commanded_closed : [0..1];
  var commanded_open : [0..1];
  var lockout : [0..1];
  var ar_status : {auto,non_auto};
  var state : {open,closed};
  event state_change_close;
  event state_change_open;
  event breaker_is_closed;
  event count_as_fault;
  event check_isolator_open;
  event close;
  event simple_trip;
  event trip;
  event open;
  event IMPOSSIBLE;
  event command_cb_ar_status_NON_AUTO;
  event command_cb_ar_status_AUTO;
  event command_ar_supy_control_status_NON_AUTO;
  event command_ar_supy_control_status_AUTO;
  event command_cb_state_closed;
  event command_cb_state_open;
  event cb_ar_status_NON_AUTO;
  event cb_ar_status_AUTO;
  event ar_supy_control_status_NON_AUTO;
  event ar_supy_control_status_AUTO;
  event cb_command_fail;
  event cb_state_not_responding;
  event cb_state_abnormal;
  event cb_state_closed;
  event cb_state_open;
  transition breaker_is_closed_transition
    breaker_is_closed_transition_0 state = closed -> breaker_is_closed;
  transition check_isolator_open_transition
    check_isolator_open_transition_0 true = 1 -> IMPOSSIBLE;
    check_isolator_open_transition_1 state = open -> state := open;
  triggeredby check_isolator_open;
  transition auto_reopen_wait_timeout
    auto_reopen_wait_timeout_0 true = 1 -> auto_reopen_wait := false;
  triggeredby [0.0..1.0] auto_reopen_wait = true;
  transition auto_reclose_wait_timeout
    auto_reclose_wait_timeout_0 true = 1 -> auto_reclose_wait := false;
  triggeredby [0.0..45.0] auto_reclose_wait = true;
  transition commanded_ar_non_auto_timeout
    commanded_ar_non_auto_timeout_0 true = 1 -> commanded_ar_non_auto := false;
  triggeredby [0.0..45.0] commanded_ar_non_auto = true;
  transition commanded_ar_auto_timeout
    commanded_ar_auto_timeout_0 true = 1 -> commanded_ar_auto := false;
  triggeredby [0.0..45.0] commanded_ar_auto = true;
  transition commanded_closed_timeout
    commanded_closed_timeout_0 true = 1 -> commanded_closed := false;
  triggeredby [0.0..45.0] commanded_closed = true;
  transition commanded_open_timeout
    commanded_open_timeout_0 true = 1 -> commanded_open := false;
  triggeredby [0.0..45.0] commanded_open = true;
  transition not_responding
    not_responding_0 true = 1 -> cb_state_not_responding, count_as_fault;
  transition abnormal
    abnormal_0 true = 1 -> cb_state_abnormal, count_as_fault;
  transition ar_status_non_auto_unexplained
    ar_status_non_auto_unexplained_0 true = 1 -> ar_status := non_auto, cb_ar_status_NON_AUTO, count_as_fault;
    ar_status_non_auto_unexplained_1 true = 1 -> ar_status := non_auto, ar_supy_control_status_NON_AUTO, count_as_fault;
  transition ar_status_auto_unexplained
    ar_status_auto_unexplained_0 true = 1 -> ar_status := auto, cb_ar_status_AUTO, count_as_fault;
    ar_status_auto_unexplained_1 true = 1 -> ar_status := auto, ar_supy_control_status_AUTO, count_as_fault;
  transition ar_status_non_auto
    ar_status_non_auto_0 commanded_ar_non_auto = true -> ar_status := non_auto, cb_ar_status_NON_AUTO;
    ar_status_non_auto_1 commanded_ar_non_auto = true -> ar_status := non_auto, ar_supy_control_status_NON_AUTO;
  transition ar_status_auto
    ar_status_auto_0 commanded_ar_auto = true -> ar_status := auto, cb_ar_status_AUTO;
    ar_status_auto_1 commanded_ar_auto = true -> ar_status := auto, ar_supy_control_status_AUTO;
  transition command_ar_non_auto
    command_ar_non_auto_0 true = 1 -> commanded_ar_non_auto := true, command_cb_ar_status_NON_AUTO;
    command_ar_non_auto_1 true = 1 -> commanded_ar_non_auto := true, command_ar_supy_control_status_NON_AUTO;
  transition command_ar_auto
    command_ar_auto_0 true = 1 -> commanded_ar_auto := true, command_cb_ar_status_AUTO;
    command_ar_auto_1 true = 1 -> commanded_ar_auto := true, command_ar_supy_control_status_AUTO;
  transition command_close_fail
    command_close_fail_0 commanded_closed = true -> cb_command_fail;
  transition close_on_command
    close_on_command_0 (state = open AND commanded_closed = true) -> state := closed, cb_state_closed, state_change_close;
  transition command_close
    command_close_0 true = 1 -> commanded_closed := true, command_cb_state_closed;
  transition command_open_fail
    command_open_fail_0 commanded_open = true -> cb_command_fail;
  transition open_on_command
    open_on_command_0 (state = closed AND commanded_open = true) -> state := open, cb_state_open, state_change_open;
  transition command_open
    command_open_0 true = 1 -> commanded_open := true, command_cb_state_open;
  transition reopen
    reopen_0 (state = closed AND auto_reopen_wait = true) -> state := open, auto_reopen_wait := false, lockout := true, cb_state_open, state_change_open;
  transition reclose
    reclose_0 ((state = open AND auto_reclose_wait = true) AND lockout = false) -> state := closed, auto_reclose_wait := false, auto_reopen_wait := true, cb_state_closed, state_change_close;
  transition close_unexplained
    close_unexplained_0 state = open -> state := closed, cb_state_closed, state_change_close, count_as_fault;
  transition close1
    close1_0 state = open -> state := closed, cb_state_closed, state_change_close;
  triggeredby close;
  transition trip_unexplained
    trip_unexplained_0 (state = closed AND ar_status = auto) -> state := open, auto_reclose_wait := true, cb_state_open, state_change_open, count_as_fault;
  transition simple_trip1
    simple_trip1_0 state = open -> state := open;
    simple_trip1_1 (state = closed AND ar_status = non_auto) -> state := open, cb_state_open;
    simple_trip1_2 (state = closed AND ar_status = auto) -> state := open, auto_reclose_wait := true, cb_state_open;
  triggeredby simple_trip;
  transition trip1
    trip1_0 (state = closed AND ar_status = non_auto) -> state := open, cb_state_open, state_change_open;
    trip1_1 (state = closed AND ar_status = auto) -> state := open, auto_reclose_wait := true, cb_state_open, state_change_open;
  triggeredby trip;
  transition open_unexplained
    open_unexplained_0 state = closed -> state := open, cb_state_open, state_change_open, count_as_fault;
  transition open1
    open1_0 state = closed -> state := open, cb_state_open, state_change_open;
  triggeredby open;
}
component Breaker_X33_X34 = {
  var auto_reopen_wait : [0..1];
  var auto_reclose_wait : [0..1];
  var commanded_ar_non_auto : [0..1];
  var commanded_ar_auto : [0..1];
  var commanded_closed : [0..1];
  var commanded_open : [0..1];
  var lockout : [0..1];
  var ar_status : {auto,non_auto};
  var state : {open,closed};
  event state_change_close;
  event state_change_open;
  event breaker_is_closed;
  event count_as_fault;
  event check_isolator_open;
  event close;
  event simple_trip;
  event trip;
  event open;
  event IMPOSSIBLE;
  event command_cb_ar_status_NON_AUTO;
  event command_cb_ar_status_AUTO;
  event command_ar_supy_control_status_NON_AUTO;
  event command_ar_supy_control_status_AUTO;
  event command_cb_state_closed;
  event command_cb_state_open;
  event cb_ar_status_NON_AUTO;
  event cb_ar_status_AUTO;
  event ar_supy_control_status_NON_AUTO;
  event ar_supy_control_status_AUTO;
  event cb_command_fail;
  event cb_state_not_responding;
  event cb_state_abnormal;
  event cb_state_closed;
  event cb_state_open;
  transition breaker_is_closed_transition
    breaker_is_closed_transition_0 state = closed -> breaker_is_closed;
  transition check_isolator_open_transition
    check_isolator_open_transition_0 true = 1 -> IMPOSSIBLE;
    check_isolator_open_transition_1 state = open -> state := open;
  triggeredby check_isolator_open;
  transition auto_reopen_wait_timeout
    auto_reopen_wait_timeout_0 true = 1 -> auto_reopen_wait := false;
  triggeredby [0.0..1.0] auto_reopen_wait = true;
  transition auto_reclose_wait_timeout
    auto_reclose_wait_timeout_0 true = 1 -> auto_reclose_wait := false;
  triggeredby [0.0..45.0] auto_reclose_wait = true;
  transition commanded_ar_non_auto_timeout
    commanded_ar_non_auto_timeout_0 true = 1 -> commanded_ar_non_auto := false;
  triggeredby [0.0..45.0] commanded_ar_non_auto = true;
  transition commanded_ar_auto_timeout
    commanded_ar_auto_timeout_0 true = 1 -> commanded_ar_auto := false;
  triggeredby [0.0..45.0] commanded_ar_auto = true;
  transition commanded_closed_timeout
    commanded_closed_timeout_0 true = 1 -> commanded_closed := false;
  triggeredby [0.0..45.0] commanded_closed = true;
  transition commanded_open_timeout
    commanded_open_timeout_0 true = 1 -> commanded_open := false;
  triggeredby [0.0..45.0] commanded_open = true;
  transition not_responding
    not_responding_0 true = 1 -> cb_state_not_responding, count_as_fault;
  transition abnormal
    abnormal_0 true = 1 -> cb_state_abnormal, count_as_fault;
  transition ar_status_non_auto_unexplained
    ar_status_non_auto_unexplained_0 true = 1 -> ar_status := non_auto, cb_ar_status_NON_AUTO, count_as_fault;
    ar_status_non_auto_unexplained_1 true = 1 -> ar_status := non_auto, ar_supy_control_status_NON_AUTO, count_as_fault;
  transition ar_status_auto_unexplained
    ar_status_auto_unexplained_0 true = 1 -> ar_status := auto, cb_ar_status_AUTO, count_as_fault;
    ar_status_auto_unexplained_1 true = 1 -> ar_status := auto, ar_supy_control_status_AUTO, count_as_fault;
  transition ar_status_non_auto
    ar_status_non_auto_0 commanded_ar_non_auto = true -> ar_status := non_auto, cb_ar_status_NON_AUTO;
    ar_status_non_auto_1 commanded_ar_non_auto = true -> ar_status := non_auto, ar_supy_control_status_NON_AUTO;
  transition ar_status_auto
    ar_status_auto_0 commanded_ar_auto = true -> ar_status := auto, cb_ar_status_AUTO;
    ar_status_auto_1 commanded_ar_auto = true -> ar_status := auto, ar_supy_control_status_AUTO;
  transition command_ar_non_auto
    command_ar_non_auto_0 true = 1 -> commanded_ar_non_auto := true, command_cb_ar_status_NON_AUTO;
    command_ar_non_auto_1 true = 1 -> commanded_ar_non_auto := true, command_ar_supy_control_status_NON_AUTO;
  transition command_ar_auto
    command_ar_auto_0 true = 1 -> commanded_ar_auto := true, command_cb_ar_status_AUTO;
    command_ar_auto_1 true = 1 -> commanded_ar_auto := true, command_ar_supy_control_status_AUTO;
  transition command_close_fail
    command_close_fail_0 commanded_closed = true -> cb_command_fail;
  transition close_on_command
    close_on_command_0 (state = open AND commanded_closed = true) -> state := closed, cb_state_closed, state_change_close;
  transition command_close
    command_close_0 true = 1 -> commanded_closed := true, command_cb_state_closed;
  transition command_open_fail
    command_open_fail_0 commanded_open = true -> cb_command_fail;
  transition open_on_command
    open_on_command_0 (state = closed AND commanded_open = true) -> state := open, cb_state_open, state_change_open;
  transition command_open
    command_open_0 true = 1 -> commanded_open := true, command_cb_state_open;
  transition reopen
    reopen_0 (state = closed AND auto_reopen_wait = true) -> state := open, auto_reopen_wait := false, lockout := true, cb_state_open, state_change_open;
  transition reclose
    reclose_0 ((state = open AND auto_reclose_wait = true) AND lockout = false) -> state := closed, auto_reclose_wait := false, auto_reopen_wait := true, cb_state_closed, state_change_close;
  transition close_unexplained
    close_unexplained_0 state = open -> state := closed, cb_state_closed, state_change_close, count_as_fault;
  transition close1
    close1_0 state = open -> state := closed, cb_state_closed, state_change_close;
  triggeredby close;
  transition trip_unexplained
    trip_unexplained_0 (state = closed AND ar_status = auto) -> state := open, auto_reclose_wait := true, cb_state_open, state_change_open, count_as_fault;
  transition simple_trip1
    simple_trip1_0 state = open -> state := open;
    simple_trip1_1 (state = closed AND ar_status = non_auto) -> state := open, cb_state_open;
    simple_trip1_2 (state = closed AND ar_status = auto) -> state := open, auto_reclose_wait := true, cb_state_open;
  triggeredby simple_trip;
  transition trip1
    trip1_0 (state = closed AND ar_status = non_auto) -> state := open, cb_state_open, state_change_open;
    trip1_1 (state = closed AND ar_status = auto) -> state := open, auto_reclose_wait := true, cb_state_open, state_change_open;
  triggeredby trip;
  transition open_unexplained
    open_unexplained_0 state = closed -> state := open, cb_state_open, state_change_open, count_as_fault;
  transition open1
    open1_0 state = closed -> state := open, cb_state_open, state_change_open;
  triggeredby open;
}
component Breaker_X35_X36 = {
  var auto_reopen_wait : [0..1];
  var auto_reclose_wait : [0..1];
  var commanded_ar_non_auto : [0..1];
  var commanded_ar_auto : [0..1];
  var commanded_closed : [0..1];
  var commanded_open : [0..1];
  var lockout : [0..1];
  var ar_status : {auto,non_auto};
  var state : {open,closed};
  event state_change_close;
  event state_change_open;
  event breaker_is_closed;
  event count_as_fault;
  event check_isolator_open;
  event close;
  event simple_trip;
  event trip;
  event open;
  event IMPOSSIBLE;
  event command_cb_ar_status_NON_AUTO;
  event command_cb_ar_status_AUTO;
  event command_ar_supy_control_status_NON_AUTO;
  event command_ar_supy_control_status_AUTO;
  event command_cb_state_closed;
  event command_cb_state_open;
  event cb_ar_status_NON_AUTO;
  event cb_ar_status_AUTO;
  event ar_supy_control_status_NON_AUTO;
  event ar_supy_control_status_AUTO;
  event cb_command_fail;
  event cb_state_not_responding;
  event cb_state_abnormal;
  event cb_state_closed;
  event cb_state_open;
  transition breaker_is_closed_transition
    breaker_is_closed_transition_0 state = closed -> breaker_is_closed;
  transition check_isolator_open_transition
    check_isolator_open_transition_0 true = 1 -> IMPOSSIBLE;
    check_isolator_open_transition_1 state = open -> state := open;
  triggeredby check_isolator_open;
  transition auto_reopen_wait_timeout
    auto_reopen_wait_timeout_0 true = 1 -> auto_reopen_wait := false;
  triggeredby [0.0..1.0] auto_reopen_wait = true;
  transition auto_reclose_wait_timeout
    auto_reclose_wait_timeout_0 true = 1 -> auto_reclose_wait := false;
  triggeredby [0.0..45.0] auto_reclose_wait = true;
  transition commanded_ar_non_auto_timeout
    commanded_ar_non_auto_timeout_0 true = 1 -> commanded_ar_non_auto := false;
  triggeredby [0.0..45.0] commanded_ar_non_auto = true;
  transition commanded_ar_auto_timeout
    commanded_ar_auto_timeout_0 true = 1 -> commanded_ar_auto := false;
  triggeredby [0.0..45.0] commanded_ar_auto = true;
  transition commanded_closed_timeout
    commanded_closed_timeout_0 true = 1 -> commanded_closed := false;
  triggeredby [0.0..45.0] commanded_closed = true;
  transition commanded_open_timeout
    commanded_open_timeout_0 true = 1 -> commanded_open := false;
  triggeredby [0.0..45.0] commanded_open = true;
  transition not_responding
    not_responding_0 true = 1 -> cb_state_not_responding, count_as_fault;
  transition abnormal
    abnormal_0 true = 1 -> cb_state_abnormal, count_as_fault;
  transition ar_status_non_auto_unexplained
    ar_status_non_auto_unexplained_0 true = 1 -> ar_status := non_auto, cb_ar_status_NON_AUTO, count_as_fault;
    ar_status_non_auto_unexplained_1 true = 1 -> ar_status := non_auto, ar_supy_control_status_NON_AUTO, count_as_fault;
  transition ar_status_auto_unexplained
    ar_status_auto_unexplained_0 true = 1 -> ar_status := auto, cb_ar_status_AUTO, count_as_fault;
    ar_status_auto_unexplained_1 true = 1 -> ar_status := auto, ar_supy_control_status_AUTO, count_as_fault;
  transition ar_status_non_auto
    ar_status_non_auto_0 commanded_ar_non_auto = true -> ar_status := non_auto, cb_ar_status_NON_AUTO;
    ar_status_non_auto_1 commanded_ar_non_auto = true -> ar_status := non_auto, ar_supy_control_status_NON_AUTO;
  transition ar_status_auto
    ar_status_auto_0 commanded_ar_auto = true -> ar_status := auto, cb_ar_status_AUTO;
    ar_status_auto_1 commanded_ar_auto = true -> ar_status := auto, ar_supy_control_status_AUTO;
  transition command_ar_non_auto
    command_ar_non_auto_0 true = 1 -> commanded_ar_non_auto := true, command_cb_ar_status_NON_AUTO;
    command_ar_non_auto_1 true = 1 -> commanded_ar_non_auto := true, command_ar_supy_control_status_NON_AUTO;
  transition command_ar_auto
    command_ar_auto_0 true = 1 -> commanded_ar_auto := true, command_cb_ar_status_AUTO;
    command_ar_auto_1 true = 1 -> commanded_ar_auto := true, command_ar_supy_control_status_AUTO;
  transition command_close_fail
    command_close_fail_0 commanded_closed = true -> cb_command_fail;
  transition close_on_command
    close_on_command_0 (state = open AND commanded_closed = true) -> state := closed, cb_state_closed, state_change_close;
  transition command_close
    command_close_0 true = 1 -> commanded_closed := true, command_cb_state_closed;
  transition command_open_fail
    command_open_fail_0 commanded_open = true -> cb_command_fail;
  transition open_on_command
    open_on_command_0 (state = closed AND commanded_open = true) -> state := open, cb_state_open, state_change_open;
  transition command_open
    command_open_0 true = 1 -> commanded_open := true, command_cb_state_open;
  transition reopen
    reopen_0 (state = closed AND auto_reopen_wait = true) -> state := open, auto_reopen_wait := false, lockout := true, cb_state_open, state_change_open;
  transition reclose
    reclose_0 ((state = open AND auto_reclose_wait = true) AND lockout = false) -> state := closed, auto_reclose_wait := false, auto_reopen_wait := true, cb_state_closed, state_change_close;
  transition close_unexplained
    close_unexplained_0 state = open -> state := closed, cb_state_closed, state_change_close, count_as_fault;
  transition close1
    close1_0 state = open -> state := closed, cb_state_closed, state_change_close;
  triggeredby close;
  transition trip_unexplained
    trip_unexplained_0 (state = closed AND ar_status = auto) -> state := open, auto_reclose_wait := true, cb_state_open, state_change_open, count_as_fault;
  transition simple_trip1
    simple_trip1_0 state = open -> state := open;
    simple_trip1_1 (state = closed AND ar_status = non_auto) -> state := open, cb_state_open;
    simple_trip1_2 (state = closed AND ar_status = auto) -> state := open, auto_reclose_wait := true, cb_state_open;
  triggeredby simple_trip;
  transition trip1
    trip1_0 (state = closed AND ar_status = non_auto) -> state := open, cb_state_open, state_change_open;
    trip1_1 (state = closed AND ar_status = auto) -> state := open, auto_reclose_wait := true, cb_state_open, state_change_open;
  triggeredby trip;
  transition open_unexplained
    open_unexplained_0 state = closed -> state := open, cb_state_open, state_change_open, count_as_fault;
  transition open1
    open1_0 state = closed -> state := open, cb_state_open, state_change_open;
  triggeredby open;
}
component Breaker_X37_X38 = {
  var auto_reopen_wait : [0..1];
  var auto_reclose_wait : [0..1];
  var commanded_ar_non_auto : [0..1];
  var commanded_ar_auto : [0..1];
  var commanded_closed : [0..1];
  var commanded_open : [0..1];
  var lockout : [0..1];
  var ar_status : {auto,non_auto};
  var state : {open,closed};
  event state_change_close;
  event state_change_open;
  event breaker_is_closed;
  event count_as_fault;
  event check_isolator_open;
  event close;
  event simple_trip;
  event trip;
  event open;
  event IMPOSSIBLE;
  event command_cb_ar_status_NON_AUTO;
  event command_cb_ar_status_AUTO;
  event command_ar_supy_control_status_NON_AUTO;
  event command_ar_supy_control_status_AUTO;
  event command_cb_state_closed;
  event command_cb_state_open;
  event cb_ar_status_NON_AUTO;
  event cb_ar_status_AUTO;
  event ar_supy_control_status_NON_AUTO;
  event ar_supy_control_status_AUTO;
  event cb_command_fail;
  event cb_state_not_responding;
  event cb_state_abnormal;
  event cb_state_closed;
  event cb_state_open;
  transition breaker_is_closed_transition
    breaker_is_closed_transition_0 state = closed -> breaker_is_closed;
  transition check_isolator_open_transition
    check_isolator_open_transition_0 true = 1 -> IMPOSSIBLE;
    check_isolator_open_transition_1 state = open -> state := open;
  triggeredby check_isolator_open;
  transition auto_reopen_wait_timeout
    auto_reopen_wait_timeout_0 true = 1 -> auto_reopen_wait := false;
  triggeredby [0.0..1.0] auto_reopen_wait = true;
  transition auto_reclose_wait_timeout
    auto_reclose_wait_timeout_0 true = 1 -> auto_reclose_wait := false;
  triggeredby [0.0..45.0] auto_reclose_wait = true;
  transition commanded_ar_non_auto_timeout
    commanded_ar_non_auto_timeout_0 true = 1 -> commanded_ar_non_auto := false;
  triggeredby [0.0..45.0] commanded_ar_non_auto = true;
  transition commanded_ar_auto_timeout
    commanded_ar_auto_timeout_0 true = 1 -> commanded_ar_auto := false;
  triggeredby [0.0..45.0] commanded_ar_auto = true;
  transition commanded_closed_timeout
    commanded_closed_timeout_0 true = 1 -> commanded_closed := false;
  triggeredby [0.0..45.0] commanded_closed = true;
  transition commanded_open_timeout
    commanded_open_timeout_0 true = 1 -> commanded_open := false;
  triggeredby [0.0..45.0] commanded_open = true;
  transition not_responding
    not_responding_0 true = 1 -> cb_state_not_responding, count_as_fault;
  transition abnormal
    abnormal_0 true = 1 -> cb_state_abnormal, count_as_fault;
  transition ar_status_non_auto_unexplained
    ar_status_non_auto_unexplained_0 true = 1 -> ar_status := non_auto, cb_ar_status_NON_AUTO, count_as_fault;
    ar_status_non_auto_unexplained_1 true = 1 -> ar_status := non_auto, ar_supy_control_status_NON_AUTO, count_as_fault;
  transition ar_status_auto_unexplained
    ar_status_auto_unexplained_0 true = 1 -> ar_status := auto, cb_ar_status_AUTO, count_as_fault;
    ar_status_auto_unexplained_1 true = 1 -> ar_status := auto, ar_supy_control_status_AUTO, count_as_fault;
  transition ar_status_non_auto
    ar_status_non_auto_0 commanded_ar_non_auto = true -> ar_status := non_auto, cb_ar_status_NON_AUTO;
    ar_status_non_auto_1 commanded_ar_non_auto = true -> ar_status := non_auto, ar_supy_control_status_NON_AUTO;
  transition ar_status_auto
    ar_status_auto_0 commanded_ar_auto = true -> ar_status := auto, cb_ar_status_AUTO;
    ar_status_auto_1 commanded_ar_auto = true -> ar_status := auto, ar_supy_control_status_AUTO;
  transition command_ar_non_auto
    command_ar_non_auto_0 true = 1 -> commanded_ar_non_auto := true, command_cb_ar_status_NON_AUTO;
    command_ar_non_auto_1 true = 1 -> commanded_ar_non_auto := true, command_ar_supy_control_status_NON_AUTO;
  transition command_ar_auto
    command_ar_auto_0 true = 1 -> commanded_ar_auto := true, command_cb_ar_status_AUTO;
    command_ar_auto_1 true = 1 -> commanded_ar_auto := true, command_ar_supy_control_status_AUTO;
  transition command_close_fail
    command_close_fail_0 commanded_closed = true -> cb_command_fail;
  transition close_on_command
    close_on_command_0 (state = open AND commanded_closed = true) -> state := closed, cb_state_closed, state_change_close;
  transition command_close
    command_close_0 true = 1 -> commanded_closed := true, command_cb_state_closed;
  transition command_open_fail
    command_open_fail_0 commanded_open = true -> cb_command_fail;
  transition open_on_command
    open_on_command_0 (state = closed AND commanded_open = true) -> state := open, cb_state_open, state_change_open;
  transition command_open
    command_open_0 true = 1 -> commanded_open := true, command_cb_state_open;
  transition reopen
    reopen_0 (state = closed AND auto_reopen_wait = true) -> state := open, auto_reopen_wait := false, lockout := true, cb_state_open, state_change_open;
  transition reclose
    reclose_0 ((state = open AND auto_reclose_wait = true) AND lockout = false) -> state := closed, auto_reclose_wait := false, auto_reopen_wait := true, cb_state_closed, state_change_close;
  transition close_unexplained
    close_unexplained_0 state = open -> state := closed, cb_state_closed, state_change_close, count_as_fault;
  transition close1
    close1_0 state = open -> state := closed, cb_state_closed, state_change_close;
  triggeredby close;
  transition trip_unexplained
    trip_unexplained_0 (state = closed AND ar_status = auto) -> state := open, auto_reclose_wait := true, cb_state_open, state_change_open, count_as_fault;
  transition simple_trip1
    simple_trip1_0 state = open -> state := open;
    simple_trip1_1 (state = closed AND ar_status = non_auto) -> state := open, cb_state_open;
    simple_trip1_2 (state = closed AND ar_status = auto) -> state := open, auto_reclose_wait := true, cb_state_open;
  triggeredby simple_trip;
  transition trip1
    trip1_0 (state = closed AND ar_status = non_auto) -> state := open, cb_state_open, state_change_open;
    trip1_1 (state = closed AND ar_status = auto) -> state := open, auto_reclose_wait := true, cb_state_open, state_change_open;
  triggeredby trip;
  transition open_unexplained
    open_unexplained_0 state = closed -> state := open, cb_state_open, state_change_open, count_as_fault;
  transition open1
    open1_0 state = closed -> state := open, cb_state_open, state_change_open;
  triggeredby open;
}
component Breaker_X39_X40 = {
  var auto_reopen_wait : [0..1];
  var auto_reclose_wait : [0..1];
  var commanded_ar_non_auto : [0..1];
  var commanded_ar_auto : [0..1];
  var commanded_closed : [0..1];
  var commanded_open : [0..1];
  var lockout : [0..1];
  var ar_status : {auto,non_auto};
  var state : {open,closed};
  event state_change_close;
  event state_change_open;
  event breaker_is_closed;
  event count_as_fault;
  event check_isolator_open;
  event close;
  event simple_trip;
  event trip;
  event open;
  event IMPOSSIBLE;
  event command_cb_ar_status_NON_AUTO;
  event command_cb_ar_status_AUTO;
  event command_ar_supy_control_status_NON_AUTO;
  event command_ar_supy_control_status_AUTO;
  event command_cb_state_closed;
  event command_cb_state_open;
  event cb_ar_status_NON_AUTO;
  event cb_ar_status_AUTO;
  event ar_supy_control_status_NON_AUTO;
  event ar_supy_control_status_AUTO;
  event cb_command_fail;
  event cb_state_not_responding;
  event cb_state_abnormal;
  event cb_state_closed;
  event cb_state_open;
  transition breaker_is_closed_transition
    breaker_is_closed_transition_0 state = closed -> breaker_is_closed;
  transition check_isolator_open_transition
    check_isolator_open_transition_0 true = 1 -> IMPOSSIBLE;
    check_isolator_open_transition_1 state = open -> state := open;
  triggeredby check_isolator_open;
  transition auto_reopen_wait_timeout
    auto_reopen_wait_timeout_0 true = 1 -> auto_reopen_wait := false;
  triggeredby [0.0..1.0] auto_reopen_wait = true;
  transition auto_reclose_wait_timeout
    auto_reclose_wait_timeout_0 true = 1 -> auto_reclose_wait := false;
  triggeredby [0.0..45.0] auto_reclose_wait = true;
  transition commanded_ar_non_auto_timeout
    commanded_ar_non_auto_timeout_0 true = 1 -> commanded_ar_non_auto := false;
  triggeredby [0.0..45.0] commanded_ar_non_auto = true;
  transition commanded_ar_auto_timeout
    commanded_ar_auto_timeout_0 true = 1 -> commanded_ar_auto := false;
  triggeredby [0.0..45.0] commanded_ar_auto = true;
  transition commanded_closed_timeout
    commanded_closed_timeout_0 true = 1 -> commanded_closed := false;
  triggeredby [0.0..45.0] commanded_closed = true;
  transition commanded_open_timeout
    commanded_open_timeout_0 true = 1 -> commanded_open := false;
  triggeredby [0.0..45.0] commanded_open = true;
  transition not_responding
    not_responding_0 true = 1 -> cb_state_not_responding, count_as_fault;
  transition abnormal
    abnormal_0 true = 1 -> cb_state_abnormal, count_as_fault;
  transition ar_status_non_auto_unexplained
    ar_status_non_auto_unexplained_0 true = 1 -> ar_status := non_auto, cb_ar_status_NON_AUTO, count_as_fault;
    ar_status_non_auto_unexplained_1 true = 1 -> ar_status := non_auto, ar_supy_control_status_NON_AUTO, count_as_fault;
  transition ar_status_auto_unexplained
    ar_status_auto_unexplained_0 true = 1 -> ar_status := auto, cb_ar_status_AUTO, count_as_fault;
    ar_status_auto_unexplained_1 true = 1 -> ar_status := auto, ar_supy_control_status_AUTO, count_as_fault;
  transition ar_status_non_auto
    ar_status_non_auto_0 commanded_ar_non_auto = true -> ar_status := non_auto, cb_ar_status_NON_AUTO;
    ar_status_non_auto_1 commanded_ar_non_auto = true -> ar_status := non_auto, ar_supy_control_status_NON_AUTO;
  transition ar_status_auto
    ar_status_auto_0 commanded_ar_auto = true -> ar_status := auto, cb_ar_status_AUTO;
    ar_status_auto_1 commanded_ar_auto = true -> ar_status := auto, ar_supy_control_status_AUTO;
  transition command_ar_non_auto
    command_ar_non_auto_0 true = 1 -> commanded_ar_non_auto := true, command_cb_ar_status_NON_AUTO;
    command_ar_non_auto_1 true = 1 -> commanded_ar_non_auto := true, command_ar_supy_control_status_NON_AUTO;
  transition command_ar_auto
    command_ar_auto_0 true = 1 -> commanded_ar_auto := true, command_cb_ar_status_AUTO;
    command_ar_auto_1 true = 1 -> commanded_ar_auto := true, command_ar_supy_control_status_AUTO;
  transition command_close_fail
    command_close_fail_0 commanded_closed = true -> cb_command_fail;
  transition close_on_command
    close_on_command_0 (state = open AND commanded_closed = true) -> state := closed, cb_state_closed, state_change_close;
  transition command_close
    command_close_0 true = 1 -> commanded_closed := true, command_cb_state_closed;
  transition command_open_fail
    command_open_fail_0 commanded_open = true -> cb_command_fail;
  transition open_on_command
    open_on_command_0 (state = closed AND commanded_open = true) -> state := open, cb_state_open, state_change_open;
  transition command_open
    command_open_0 true = 1 -> commanded_open := true, command_cb_state_open;
  transition reopen
    reopen_0 (state = closed AND auto_reopen_wait = true) -> state := open, auto_reopen_wait := false, lockout := true, cb_state_open, state_change_open;
  transition reclose
    reclose_0 ((state = open AND auto_reclose_wait = true) AND lockout = false) -> state := closed, auto_reclose_wait := false, auto_reopen_wait := true, cb_state_closed, state_change_close;
  transition close_unexplained
    close_unexplained_0 state = open -> state := closed, cb_state_closed, state_change_close, count_as_fault;
  transition close1
    close1_0 state = open -> state := closed, cb_state_closed, state_change_close;
  triggeredby close;
  transition trip_unexplained
    trip_unexplained_0 (state = closed AND ar_status = auto) -> state := open, auto_reclose_wait := true, cb_state_open, state_change_open, count_as_fault;
  transition simple_trip1
    simple_trip1_0 state = open -> state := open;
    simple_trip1_1 (state = closed AND ar_status = non_auto) -> state := open, cb_state_open;
    simple_trip1_2 (state = closed AND ar_status = auto) -> state := open, auto_reclose_wait := true, cb_state_open;
  triggeredby simple_trip;
  transition trip1
    trip1_0 (state = closed AND ar_status = non_auto) -> state := open, cb_state_open, state_change_open;
    trip1_1 (state = closed AND ar_status = auto) -> state := open, auto_reclose_wait := true, cb_state_open, state_change_open;
  triggeredby trip;
  transition open_unexplained
    open_unexplained_0 state = closed -> state := open, cb_state_open, state_change_open, count_as_fault;
  transition open1
    open1_0 state = closed -> state := open, cb_state_open, state_change_open;
  triggeredby open;
}
component Breaker_X41_X42 = {
  var auto_reopen_wait : [0..1];
  var auto_reclose_wait : [0..1];
  var commanded_ar_non_auto : [0..1];
  var commanded_ar_auto : [0..1];
  var commanded_closed : [0..1];
  var commanded_open : [0..1];
  var lockout : [0..1];
  var ar_status : {auto,non_auto};
  var state : {open,closed};
  event state_change_close;
  event state_change_open;
  event breaker_is_closed;
  event count_as_fault;
  event check_isolator_open;
  event close;
  event simple_trip;
  event trip;
  event open;
  event IMPOSSIBLE;
  event command_cb_ar_status_NON_AUTO;
  event command_cb_ar_status_AUTO;
  event command_ar_supy_control_status_NON_AUTO;
  event command_ar_supy_control_status_AUTO;
  event command_cb_state_closed;
  event command_cb_state_open;
  event cb_ar_status_NON_AUTO;
  event cb_ar_status_AUTO;
  event ar_supy_control_status_NON_AUTO;
  event ar_supy_control_status_AUTO;
  event cb_command_fail;
  event cb_state_not_responding;
  event cb_state_abnormal;
  event cb_state_closed;
  event cb_state_open;
  transition breaker_is_closed_transition
    breaker_is_closed_transition_0 state = closed -> breaker_is_closed;
  transition check_isolator_open_transition
    check_isolator_open_transition_0 true = 1 -> IMPOSSIBLE;
    check_isolator_open_transition_1 state = open -> state := open;
  triggeredby check_isolator_open;
  transition auto_reopen_wait_timeout
    auto_reopen_wait_timeout_0 true = 1 -> auto_reopen_wait := false;
  triggeredby [0.0..1.0] auto_reopen_wait = true;
  transition auto_reclose_wait_timeout
    auto_reclose_wait_timeout_0 true = 1 -> auto_reclose_wait := false;
  triggeredby [0.0..45.0] auto_reclose_wait = true;
  transition commanded_ar_non_auto_timeout
    commanded_ar_non_auto_timeout_0 true = 1 -> commanded_ar_non_auto := false;
  triggeredby [0.0..45.0] commanded_ar_non_auto = true;
  transition commanded_ar_auto_timeout
    commanded_ar_auto_timeout_0 true = 1 -> commanded_ar_auto := false;
  triggeredby [0.0..45.0] commanded_ar_auto = true;
  transition commanded_closed_timeout
    commanded_closed_timeout_0 true = 1 -> commanded_closed := false;
  triggeredby [0.0..45.0] commanded_closed = true;
  transition commanded_open_timeout
    commanded_open_timeout_0 true = 1 -> commanded_open := false;
  triggeredby [0.0..45.0] commanded_open = true;
  transition not_responding
    not_responding_0 true = 1 -> cb_state_not_responding, count_as_fault;
  transition abnormal
    abnormal_0 true = 1 -> cb_state_abnormal, count_as_fault;
  transition ar_status_non_auto_unexplained
    ar_status_non_auto_unexplained_0 true = 1 -> ar_status := non_auto, cb_ar_status_NON_AUTO, count_as_fault;
    ar_status_non_auto_unexplained_1 true = 1 -> ar_status := non_auto, ar_supy_control_status_NON_AUTO, count_as_fault;
  transition ar_status_auto_unexplained
    ar_status_auto_unexplained_0 true = 1 -> ar_status := auto, cb_ar_status_AUTO, count_as_fault;
    ar_status_auto_unexplained_1 true = 1 -> ar_status := auto, ar_supy_control_status_AUTO, count_as_fault;
  transition ar_status_non_auto
    ar_status_non_auto_0 commanded_ar_non_auto = true -> ar_status := non_auto, cb_ar_status_NON_AUTO;
    ar_status_non_auto_1 commanded_ar_non_auto = true -> ar_status := non_auto, ar_supy_control_status_NON_AUTO;
  transition ar_status_auto
    ar_status_auto_0 commanded_ar_auto = true -> ar_status := auto, cb_ar_status_AUTO;
    ar_status_auto_1 commanded_ar_auto = true -> ar_status := auto, ar_supy_control_status_AUTO;
  transition command_ar_non_auto
    command_ar_non_auto_0 true = 1 -> commanded_ar_non_auto := true, command_cb_ar_status_NON_AUTO;
    command_ar_non_auto_1 true = 1 -> commanded_ar_non_auto := true, command_ar_supy_control_status_NON_AUTO;
  transition command_ar_auto
    command_ar_auto_0 true = 1 -> commanded_ar_auto := true, command_cb_ar_status_AUTO;
    command_ar_auto_1 true = 1 -> commanded_ar_auto := true, command_ar_supy_control_status_AUTO;
  transition command_close_fail
    command_close_fail_0 commanded_closed = true -> cb_command_fail;
  transition close_on_command
    close_on_command_0 (state = open AND commanded_closed = true) -> state := closed, cb_state_closed, state_change_close;
  transition command_close
    command_close_0 true = 1 -> commanded_closed := true, command_cb_state_closed;
  transition command_open_fail
    command_open_fail_0 commanded_open = true -> cb_command_fail;
  transition open_on_command
    open_on_command_0 (state = closed AND commanded_open = true) -> state := open, cb_state_open, state_change_open;
  transition command_open
    command_open_0 true = 1 -> commanded_open := true, command_cb_state_open;
  transition reopen
    reopen_0 (state = closed AND auto_reopen_wait = true) -> state := open, auto_reopen_wait := false, lockout := true, cb_state_open, state_change_open;
  transition reclose
    reclose_0 ((state = open AND auto_reclose_wait = true) AND lockout = false) -> state := closed, auto_reclose_wait := false, auto_reopen_wait := true, cb_state_closed, state_change_close;
  transition close_unexplained
    close_unexplained_0 state = open -> state := closed, cb_state_closed, state_change_close, count_as_fault;
  transition close1
    close1_0 state = open -> state := closed, cb_state_closed, state_change_close;
  triggeredby close;
  transition trip_unexplained
    trip_unexplained_0 (state = closed AND ar_status = auto) -> state := open, auto_reclose_wait := true, cb_state_open, state_change_open, count_as_fault;
  transition simple_trip1
    simple_trip1_0 state = open -> state := open;
    simple_trip1_1 (state = closed AND ar_status = non_auto) -> state := open, cb_state_open;
    simple_trip1_2 (state = closed AND ar_status = auto) -> state := open, auto_reclose_wait := true, cb_state_open;
  triggeredby simple_trip;
  transition trip1
    trip1_0 (state = closed AND ar_status = non_auto) -> state := open, cb_state_open, state_change_open;
    trip1_1 (state = closed AND ar_status = auto) -> state := open, auto_reclose_wait := true, cb_state_open, state_change_open;
  triggeredby trip;
  transition open_unexplained
    open_unexplained_0 state = closed -> state := open, cb_state_open, state_change_open, count_as_fault;
  transition open1
    open1_0 state = closed -> state := open, cb_state_open, state_change_open;
  triggeredby open;
}
component Breaker_X43_X44 = {
  var auto_reopen_wait : [0..1];
  var auto_reclose_wait : [0..1];
  var commanded_ar_non_auto : [0..1];
  var commanded_ar_auto : [0..1];
  var commanded_closed : [0..1];
  var commanded_open : [0..1];
  var lockout : [0..1];
  var ar_status : {auto,non_auto};
  var state : {open,closed};
  event state_change_close;
  event state_change_open;
  event breaker_is_closed;
  event count_as_fault;
  event check_isolator_open;
  event close;
  event simple_trip;
  event trip;
  event open;
  event IMPOSSIBLE;
  event command_cb_ar_status_NON_AUTO;
  event command_cb_ar_status_AUTO;
  event command_ar_supy_control_status_NON_AUTO;
  event command_ar_supy_control_status_AUTO;
  event command_cb_state_closed;
  event command_cb_state_open;
  event cb_ar_status_NON_AUTO;
  event cb_ar_status_AUTO;
  event ar_supy_control_status_NON_AUTO;
  event ar_supy_control_status_AUTO;
  event cb_command_fail;
  event cb_state_not_responding;
  event cb_state_abnormal;
  event cb_state_closed;
  event cb_state_open;
  transition breaker_is_closed_transition
    breaker_is_closed_transition_0 state = closed -> breaker_is_closed;
  transition check_isolator_open_transition
    check_isolator_open_transition_0 true = 1 -> IMPOSSIBLE;
    check_isolator_open_transition_1 state = open -> state := open;
  triggeredby check_isolator_open;
  transition auto_reopen_wait_timeout
    auto_reopen_wait_timeout_0 true = 1 -> auto_reopen_wait := false;
  triggeredby [0.0..1.0] auto_reopen_wait = true;
  transition auto_reclose_wait_timeout
    auto_reclose_wait_timeout_0 true = 1 -> auto_reclose_wait := false;
  triggeredby [0.0..45.0] auto_reclose_wait = true;
  transition commanded_ar_non_auto_timeout
    commanded_ar_non_auto_timeout_0 true = 1 -> commanded_ar_non_auto := false;
  triggeredby [0.0..45.0] commanded_ar_non_auto = true;
  transition commanded_ar_auto_timeout
    commanded_ar_auto_timeout_0 true = 1 -> commanded_ar_auto := false;
  triggeredby [0.0..45.0] commanded_ar_auto = true;
  transition commanded_closed_timeout
    commanded_closed_timeout_0 true = 1 -> commanded_closed := false;
  triggeredby [0.0..45.0] commanded_closed = true;
  transition commanded_open_timeout
    commanded_open_timeout_0 true = 1 -> commanded_open := false;
  triggeredby [0.0..45.0] commanded_open = true;
  transition not_responding
    not_responding_0 true = 1 -> cb_state_not_responding, count_as_fault;
  transition abnormal
    abnormal_0 true = 1 -> cb_state_abnormal, count_as_fault;
  transition ar_status_non_auto_unexplained
    ar_status_non_auto_unexplained_0 true = 1 -> ar_status := non_auto, cb_ar_status_NON_AUTO, count_as_fault;
    ar_status_non_auto_unexplained_1 true = 1 -> ar_status := non_auto, ar_supy_control_status_NON_AUTO, count_as_fault;
  transition ar_status_auto_unexplained
    ar_status_auto_unexplained_0 true = 1 -> ar_status := auto, cb_ar_status_AUTO, count_as_fault;
    ar_status_auto_unexplained_1 true = 1 -> ar_status := auto, ar_supy_control_status_AUTO, count_as_fault;
  transition ar_status_non_auto
    ar_status_non_auto_0 commanded_ar_non_auto = true -> ar_status := non_auto, cb_ar_status_NON_AUTO;
    ar_status_non_auto_1 commanded_ar_non_auto = true -> ar_status := non_auto, ar_supy_control_status_NON_AUTO;
  transition ar_status_auto
    ar_status_auto_0 commanded_ar_auto = true -> ar_status := auto, cb_ar_status_AUTO;
    ar_status_auto_1 commanded_ar_auto = true -> ar_status := auto, ar_supy_control_status_AUTO;
  transition command_ar_non_auto
    command_ar_non_auto_0 true = 1 -> commanded_ar_non_auto := true, command_cb_ar_status_NON_AUTO;
    command_ar_non_auto_1 true = 1 -> commanded_ar_non_auto := true, command_ar_supy_control_status_NON_AUTO;
  transition command_ar_auto
    command_ar_auto_0 true = 1 -> commanded_ar_auto := true, command_cb_ar_status_AUTO;
    command_ar_auto_1 true = 1 -> commanded_ar_auto := true, command_ar_supy_control_status_AUTO;
  transition command_close_fail
    command_close_fail_0 commanded_closed = true -> cb_command_fail;
  transition close_on_command
    close_on_command_0 (state = open AND commanded_closed = true) -> state := closed, cb_state_closed, state_change_close;
  transition command_close
    command_close_0 true = 1 -> commanded_closed := true, command_cb_state_closed;
  transition command_open_fail
    command_open_fail_0 commanded_open = true -> cb_command_fail;
  transition open_on_command
    open_on_command_0 (state = closed AND commanded_open = true) -> state := open, cb_state_open, state_change_open;
  transition command_open
    command_open_0 true = 1 -> commanded_open := true, command_cb_state_open;
  transition reopen
    reopen_0 (state = closed AND auto_reopen_wait = true) -> state := open, auto_reopen_wait := false, lockout := true, cb_state_open, state_change_open;
  transition reclose
    reclose_0 ((state = open AND auto_reclose_wait = true) AND lockout = false) -> state := closed, auto_reclose_wait := false, auto_reopen_wait := true, cb_state_closed, state_change_close;
  transition close_unexplained
    close_unexplained_0 state = open -> state := closed, cb_state_closed, state_change_close, count_as_fault;
  transition close1
    close1_0 state = open -> state := closed, cb_state_closed, state_change_close;
  triggeredby close;
  transition trip_unexplained
    trip_unexplained_0 (state = closed AND ar_status = auto) -> state := open, auto_reclose_wait := true, cb_state_open, state_change_open, count_as_fault;
  transition simple_trip1
    simple_trip1_0 state = open -> state := open;
    simple_trip1_1 (state = closed AND ar_status = non_auto) -> state := open, cb_state_open;
    simple_trip1_2 (state = closed AND ar_status = auto) -> state := open, auto_reclose_wait := true, cb_state_open;
  triggeredby simple_trip;
  transition trip1
    trip1_0 (state = closed AND ar_status = non_auto) -> state := open, cb_state_open, state_change_open;
    trip1_1 (state = closed AND ar_status = auto) -> state := open, auto_reclose_wait := true, cb_state_open, state_change_open;
  triggeredby trip;
  transition open_unexplained
    open_unexplained_0 state = closed -> state := open, cb_state_open, state_change_open, count_as_fault;
  transition open1
    open1_0 state = closed -> state := open, cb_state_open, state_change_open;
  triggeredby open;
}
component Breaker_X83_X84 = {
  var auto_reopen_wait : [0..1];
  var auto_reclose_wait : [0..1];
  var commanded_ar_non_auto : [0..1];
  var commanded_ar_auto : [0..1];
  var commanded_closed : [0..1];
  var commanded_open : [0..1];
  var lockout : [0..1];
  var ar_status : {auto,non_auto};
  var state : {open,closed};
  event state_change_close;
  event state_change_open;
  event breaker_is_closed;
  event count_as_fault;
  event check_isolator_open;
  event close;
  event simple_trip;
  event trip;
  event open;
  event IMPOSSIBLE;
  event command_cb_ar_status_NON_AUTO;
  event command_cb_ar_status_AUTO;
  event command_ar_supy_control_status_NON_AUTO;
  event command_ar_supy_control_status_AUTO;
  event command_cb_state_closed;
  event command_cb_state_open;
  event cb_ar_status_NON_AUTO;
  event cb_ar_status_AUTO;
  event ar_supy_control_status_NON_AUTO;
  event ar_supy_control_status_AUTO;
  event cb_command_fail;
  event cb_state_not_responding;
  event cb_state_abnormal;
  event cb_state_closed;
  event cb_state_open;
  transition breaker_is_closed_transition
    breaker_is_closed_transition_0 state = closed -> breaker_is_closed;
  transition check_isolator_open_transition
    check_isolator_open_transition_0 true = 1 -> IMPOSSIBLE;
    check_isolator_open_transition_1 state = open -> state := open;
  triggeredby check_isolator_open;
  transition auto_reopen_wait_timeout
    auto_reopen_wait_timeout_0 true = 1 -> auto_reopen_wait := false;
  triggeredby [0.0..1.0] auto_reopen_wait = true;
  transition auto_reclose_wait_timeout
    auto_reclose_wait_timeout_0 true = 1 -> auto_reclose_wait := false;
  triggeredby [0.0..45.0] auto_reclose_wait = true;
  transition commanded_ar_non_auto_timeout
    commanded_ar_non_auto_timeout_0 true = 1 -> commanded_ar_non_auto := false;
  triggeredby [0.0..45.0] commanded_ar_non_auto = true;
  transition commanded_ar_auto_timeout
    commanded_ar_auto_timeout_0 true = 1 -> commanded_ar_auto := false;
  triggeredby [0.0..45.0] commanded_ar_auto = true;
  transition commanded_closed_timeout
    commanded_closed_timeout_0 true = 1 -> commanded_closed := false;
  triggeredby [0.0..45.0] commanded_closed = true;
  transition commanded_open_timeout
    commanded_open_timeout_0 true = 1 -> commanded_open := false;
  triggeredby [0.0..45.0] commanded_open = true;
  transition not_responding
    not_responding_0 true = 1 -> cb_state_not_responding, count_as_fault;
  transition abnormal
    abnormal_0 true = 1 -> cb_state_abnormal, count_as_fault;
  transition ar_status_non_auto_unexplained
    ar_status_non_auto_unexplained_0 true = 1 -> ar_status := non_auto, cb_ar_status_NON_AUTO, count_as_fault;
    ar_status_non_auto_unexplained_1 true = 1 -> ar_status := non_auto, ar_supy_control_status_NON_AUTO, count_as_fault;
  transition ar_status_auto_unexplained
    ar_status_auto_unexplained_0 true = 1 -> ar_status := auto, cb_ar_status_AUTO, count_as_fault;
    ar_status_auto_unexplained_1 true = 1 -> ar_status := auto, ar_supy_control_status_AUTO, count_as_fault;
  transition ar_status_non_auto
    ar_status_non_auto_0 commanded_ar_non_auto = true -> ar_status := non_auto, cb_ar_status_NON_AUTO;
    ar_status_non_auto_1 commanded_ar_non_auto = true -> ar_status := non_auto, ar_supy_control_status_NON_AUTO;
  transition ar_status_auto
    ar_status_auto_0 commanded_ar_auto = true -> ar_status := auto, cb_ar_status_AUTO;
    ar_status_auto_1 commanded_ar_auto = true -> ar_status := auto, ar_supy_control_status_AUTO;
  transition command_ar_non_auto
    command_ar_non_auto_0 true = 1 -> commanded_ar_non_auto := true, command_cb_ar_status_NON_AUTO;
    command_ar_non_auto_1 true = 1 -> commanded_ar_non_auto := true, command_ar_supy_control_status_NON_AUTO;
  transition command_ar_auto
    command_ar_auto_0 true = 1 -> commanded_ar_auto := true, command_cb_ar_status_AUTO;
    command_ar_auto_1 true = 1 -> commanded_ar_auto := true, command_ar_supy_control_status_AUTO;
  transition command_close_fail
    command_close_fail_0 commanded_closed = true -> cb_command_fail;
  transition close_on_command
    close_on_command_0 (state = open AND commanded_closed = true) -> state := closed, cb_state_closed, state_change_close;
  transition command_close
    command_close_0 true = 1 -> commanded_closed := true, command_cb_state_closed;
  transition command_open_fail
    command_open_fail_0 commanded_open = true -> cb_command_fail;
  transition open_on_command
    open_on_command_0 (state = closed AND commanded_open = true) -> state := open, cb_state_open, state_change_open;
  transition command_open
    command_open_0 true = 1 -> commanded_open := true, command_cb_state_open;
  transition reopen
    reopen_0 (state = closed AND auto_reopen_wait = true) -> state := open, auto_reopen_wait := false, lockout := true, cb_state_open, state_change_open;
  transition reclose
    reclose_0 ((state = open AND auto_reclose_wait = true) AND lockout = false) -> state := closed, auto_reclose_wait := false, auto_reopen_wait := true, cb_state_closed, state_change_close;
  transition close_unexplained
    close_unexplained_0 state = open -> state := closed, cb_state_closed, state_change_close, count_as_fault;
  transition close1
    close1_0 state = open -> state := closed, cb_state_closed, state_change_close;
  triggeredby close;
  transition trip_unexplained
    trip_unexplained_0 (state = closed AND ar_status = auto) -> state := open, auto_reclose_wait := true, cb_state_open, state_change_open, count_as_fault;
  transition simple_trip1
    simple_trip1_0 state = open -> state := open;
    simple_trip1_1 (state = closed AND ar_status = non_auto) -> state := open, cb_state_open;
    simple_trip1_2 (state = closed AND ar_status = auto) -> state := open, auto_reclose_wait := true, cb_state_open;
  triggeredby simple_trip;
  transition trip1
    trip1_0 (state = closed AND ar_status = non_auto) -> state := open, cb_state_open, state_change_open;
    trip1_1 (state = closed AND ar_status = auto) -> state := open, auto_reclose_wait := true, cb_state_open, state_change_open;
  triggeredby trip;
  transition open_unexplained
    open_unexplained_0 state = closed -> state := open, cb_state_open, state_change_open, count_as_fault;
  transition open1
    open1_0 state = closed -> state := open, cb_state_open, state_change_open;
  triggeredby open;
}
component Breaker_X81_X82 = {
  var auto_reopen_wait : [0..1];
  var auto_reclose_wait : [0..1];
  var commanded_ar_non_auto : [0..1];
  var commanded_ar_auto : [0..1];
  var commanded_closed : [0..1];
  var commanded_open : [0..1];
  var lockout : [0..1];
  var ar_status : {auto,non_auto};
  var state : {open,closed};
  event state_change_close;
  event state_change_open;
  event breaker_is_closed;
  event count_as_fault;
  event check_isolator_open;
  event close;
  event simple_trip;
  event trip;
  event open;
  event IMPOSSIBLE;
  event command_cb_ar_status_NON_AUTO;
  event command_cb_ar_status_AUTO;
  event command_ar_supy_control_status_NON_AUTO;
  event command_ar_supy_control_status_AUTO;
  event command_cb_state_closed;
  event command_cb_state_open;
  event cb_ar_status_NON_AUTO;
  event cb_ar_status_AUTO;
  event ar_supy_control_status_NON_AUTO;
  event ar_supy_control_status_AUTO;
  event cb_command_fail;
  event cb_state_not_responding;
  event cb_state_abnormal;
  event cb_state_closed;
  event cb_state_open;
  transition breaker_is_closed_transition
    breaker_is_closed_transition_0 state = closed -> breaker_is_closed;
  transition check_isolator_open_transition
    check_isolator_open_transition_0 true = 1 -> IMPOSSIBLE;
    check_isolator_open_transition_1 state = open -> state := open;
  triggeredby check_isolator_open;
  transition auto_reopen_wait_timeout
    auto_reopen_wait_timeout_0 true = 1 -> auto_reopen_wait := false;
  triggeredby [0.0..1.0] auto_reopen_wait = true;
  transition auto_reclose_wait_timeout
    auto_reclose_wait_timeout_0 true = 1 -> auto_reclose_wait := false;
  triggeredby [0.0..45.0] auto_reclose_wait = true;
  transition commanded_ar_non_auto_timeout
    commanded_ar_non_auto_timeout_0 true = 1 -> commanded_ar_non_auto := false;
  triggeredby [0.0..45.0] commanded_ar_non_auto = true;
  transition commanded_ar_auto_timeout
    commanded_ar_auto_timeout_0 true = 1 -> commanded_ar_auto := false;
  triggeredby [0.0..45.0] commanded_ar_auto = true;
  transition commanded_closed_timeout
    commanded_closed_timeout_0 true = 1 -> commanded_closed := false;
  triggeredby [0.0..45.0] commanded_closed = true;
  transition commanded_open_timeout
    commanded_open_timeout_0 true = 1 -> commanded_open := false;
  triggeredby [0.0..45.0] commanded_open = true;
  transition not_responding
    not_responding_0 true = 1 -> cb_state_not_responding, count_as_fault;
  transition abnormal
    abnormal_0 true = 1 -> cb_state_abnormal, count_as_fault;
  transition ar_status_non_auto_unexplained
    ar_status_non_auto_unexplained_0 true = 1 -> ar_status := non_auto, cb_ar_status_NON_AUTO, count_as_fault;
    ar_status_non_auto_unexplained_1 true = 1 -> ar_status := non_auto, ar_supy_control_status_NON_AUTO, count_as_fault;
  transition ar_status_auto_unexplained
    ar_status_auto_unexplained_0 true = 1 -> ar_status := auto, cb_ar_status_AUTO, count_as_fault;
    ar_status_auto_unexplained_1 true = 1 -> ar_status := auto, ar_supy_control_status_AUTO, count_as_fault;
  transition ar_status_non_auto
    ar_status_non_auto_0 commanded_ar_non_auto = true -> ar_status := non_auto, cb_ar_status_NON_AUTO;
    ar_status_non_auto_1 commanded_ar_non_auto = true -> ar_status := non_auto, ar_supy_control_status_NON_AUTO;
  transition ar_status_auto
    ar_status_auto_0 commanded_ar_auto = true -> ar_status := auto, cb_ar_status_AUTO;
    ar_status_auto_1 commanded_ar_auto = true -> ar_status := auto, ar_supy_control_status_AUTO;
  transition command_ar_non_auto
    command_ar_non_auto_0 true = 1 -> commanded_ar_non_auto := true, command_cb_ar_status_NON_AUTO;
    command_ar_non_auto_1 true = 1 -> commanded_ar_non_auto := true, command_ar_supy_control_status_NON_AUTO;
  transition command_ar_auto
    command_ar_auto_0 true = 1 -> commanded_ar_auto := true, command_cb_ar_status_AUTO;
    command_ar_auto_1 true = 1 -> commanded_ar_auto := true, command_ar_supy_control_status_AUTO;
  transition command_close_fail
    command_close_fail_0 commanded_closed = true -> cb_command_fail;
  transition close_on_command
    close_on_command_0 (state = open AND commanded_closed = true) -> state := closed, cb_state_closed, state_change_close;
  transition command_close
    command_close_0 true = 1 -> commanded_closed := true, command_cb_state_closed;
  transition command_open_fail
    command_open_fail_0 commanded_open = true -> cb_command_fail;
  transition open_on_command
    open_on_command_0 (state = closed AND commanded_open = true) -> state := open, cb_state_open, state_change_open;
  transition command_open
    command_open_0 true = 1 -> commanded_open := true, command_cb_state_open;
  transition reopen
    reopen_0 (state = closed AND auto_reopen_wait = true) -> state := open, auto_reopen_wait := false, lockout := true, cb_state_open, state_change_open;
  transition reclose
    reclose_0 ((state = open AND auto_reclose_wait = true) AND lockout = false) -> state := closed, auto_reclose_wait := false, auto_reopen_wait := true, cb_state_closed, state_change_close;
  transition close_unexplained
    close_unexplained_0 state = open -> state := closed, cb_state_closed, state_change_close, count_as_fault;
  transition close1
    close1_0 state = open -> state := closed, cb_state_closed, state_change_close;
  triggeredby close;
  transition trip_unexplained
    trip_unexplained_0 (state = closed AND ar_status = auto) -> state := open, auto_reclose_wait := true, cb_state_open, state_change_open, count_as_fault;
  transition simple_trip1
    simple_trip1_0 state = open -> state := open;
    simple_trip1_1 (state = closed AND ar_status = non_auto) -> state := open, cb_state_open;
    simple_trip1_2 (state = closed AND ar_status = auto) -> state := open, auto_reclose_wait := true, cb_state_open;
  triggeredby simple_trip;
  transition trip1
    trip1_0 (state = closed AND ar_status = non_auto) -> state := open, cb_state_open, state_change_open;
    trip1_1 (state = closed AND ar_status = auto) -> state := open, auto_reclose_wait := true, cb_state_open, state_change_open;
  triggeredby trip;
  transition open_unexplained
    open_unexplained_0 state = closed -> state := open, cb_state_open, state_change_open, count_as_fault;
  transition open1
    open1_0 state = closed -> state := open, cb_state_open, state_change_open;
  triggeredby open;
}
component Breaker_X45_X46 = {
  var auto_reopen_wait : [0..1];
  var auto_reclose_wait : [0..1];
  var commanded_ar_non_auto : [0..1];
  var commanded_ar_auto : [0..1];
  var commanded_closed : [0..1];
  var commanded_open : [0..1];
  var lockout : [0..1];
  var ar_status : {auto,non_auto};
  var state : {open,closed};
  event state_change_close;
  event state_change_open;
  event breaker_is_closed;
  event count_as_fault;
  event check_isolator_open;
  event close;
  event simple_trip;
  event trip;
  event open;
  event IMPOSSIBLE;
  event command_cb_ar_status_NON_AUTO;
  event command_cb_ar_status_AUTO;
  event command_ar_supy_control_status_NON_AUTO;
  event command_ar_supy_control_status_AUTO;
  event command_cb_state_closed;
  event command_cb_state_open;
  event cb_ar_status_NON_AUTO;
  event cb_ar_status_AUTO;
  event ar_supy_control_status_NON_AUTO;
  event ar_supy_control_status_AUTO;
  event cb_command_fail;
  event cb_state_not_responding;
  event cb_state_abnormal;
  event cb_state_closed;
  event cb_state_open;
  transition breaker_is_closed_transition
    breaker_is_closed_transition_0 state = closed -> breaker_is_closed;
  transition check_isolator_open_transition
    check_isolator_open_transition_0 true = 1 -> IMPOSSIBLE;
    check_isolator_open_transition_1 state = open -> state := open;
  triggeredby check_isolator_open;
  transition auto_reopen_wait_timeout
    auto_reopen_wait_timeout_0 true = 1 -> auto_reopen_wait := false;
  triggeredby [0.0..1.0] auto_reopen_wait = true;
  transition auto_reclose_wait_timeout
    auto_reclose_wait_timeout_0 true = 1 -> auto_reclose_wait := false;
  triggeredby [0.0..45.0] auto_reclose_wait = true;
  transition commanded_ar_non_auto_timeout
    commanded_ar_non_auto_timeout_0 true = 1 -> commanded_ar_non_auto := false;
  triggeredby [0.0..45.0] commanded_ar_non_auto = true;
  transition commanded_ar_auto_timeout
    commanded_ar_auto_timeout_0 true = 1 -> commanded_ar_auto := false;
  triggeredby [0.0..45.0] commanded_ar_auto = true;
  transition commanded_closed_timeout
    commanded_closed_timeout_0 true = 1 -> commanded_closed := false;
  triggeredby [0.0..45.0] commanded_closed = true;
  transition commanded_open_timeout
    commanded_open_timeout_0 true = 1 -> commanded_open := false;
  triggeredby [0.0..45.0] commanded_open = true;
  transition not_responding
    not_responding_0 true = 1 -> cb_state_not_responding, count_as_fault;
  transition abnormal
    abnormal_0 true = 1 -> cb_state_abnormal, count_as_fault;
  transition ar_status_non_auto_unexplained
    ar_status_non_auto_unexplained_0 true = 1 -> ar_status := non_auto, cb_ar_status_NON_AUTO, count_as_fault;
    ar_status_non_auto_unexplained_1 true = 1 -> ar_status := non_auto, ar_supy_control_status_NON_AUTO, count_as_fault;
  transition ar_status_auto_unexplained
    ar_status_auto_unexplained_0 true = 1 -> ar_status := auto, cb_ar_status_AUTO, count_as_fault;
    ar_status_auto_unexplained_1 true = 1 -> ar_status := auto, ar_supy_control_status_AUTO, count_as_fault;
  transition ar_status_non_auto
    ar_status_non_auto_0 commanded_ar_non_auto = true -> ar_status := non_auto, cb_ar_status_NON_AUTO;
    ar_status_non_auto_1 commanded_ar_non_auto = true -> ar_status := non_auto, ar_supy_control_status_NON_AUTO;
  transition ar_status_auto
    ar_status_auto_0 commanded_ar_auto = true -> ar_status := auto, cb_ar_status_AUTO;
    ar_status_auto_1 commanded_ar_auto = true -> ar_status := auto, ar_supy_control_status_AUTO;
  transition command_ar_non_auto
    command_ar_non_auto_0 true = 1 -> commanded_ar_non_auto := true, command_cb_ar_status_NON_AUTO;
    command_ar_non_auto_1 true = 1 -> commanded_ar_non_auto := true, command_ar_supy_control_status_NON_AUTO;
  transition command_ar_auto
    command_ar_auto_0 true = 1 -> commanded_ar_auto := true, command_cb_ar_status_AUTO;
    command_ar_auto_1 true = 1 -> commanded_ar_auto := true, command_ar_supy_control_status_AUTO;
  transition command_close_fail
    command_close_fail_0 commanded_closed = true -> cb_command_fail;
  transition close_on_command
    close_on_command_0 (state = open AND commanded_closed = true) -> state := closed, cb_state_closed, state_change_close;
  transition command_close
    command_close_0 true = 1 -> commanded_closed := true, command_cb_state_closed;
  transition command_open_fail
    command_open_fail_0 commanded_open = true -> cb_command_fail;
  transition open_on_command
    open_on_command_0 (state = closed AND commanded_open = true) -> state := open, cb_state_open, state_change_open;
  transition command_open
    command_open_0 true = 1 -> commanded_open := true, command_cb_state_open;
  transition reopen
    reopen_0 (state = closed AND auto_reopen_wait = true) -> state := open, auto_reopen_wait := false, lockout := true, cb_state_open, state_change_open;
  transition reclose
    reclose_0 ((state = open AND auto_reclose_wait = true) AND lockout = false) -> state := closed, auto_reclose_wait := false, auto_reopen_wait := true, cb_state_closed, state_change_close;
  transition close_unexplained
    close_unexplained_0 state = open -> state := closed, cb_state_closed, state_change_close, count_as_fault;
  transition close1
    close1_0 state = open -> state := closed, cb_state_closed, state_change_close;
  triggeredby close;
  transition trip_unexplained
    trip_unexplained_0 (state = closed AND ar_status = auto) -> state := open, auto_reclose_wait := true, cb_state_open, state_change_open, count_as_fault;
  transition simple_trip1
    simple_trip1_0 state = open -> state := open;
    simple_trip1_1 (state = closed AND ar_status = non_auto) -> state := open, cb_state_open;
    simple_trip1_2 (state = closed AND ar_status = auto) -> state := open, auto_reclose_wait := true, cb_state_open;
  triggeredby simple_trip;
  transition trip1
    trip1_0 (state = closed AND ar_status = non_auto) -> state := open, cb_state_open, state_change_open;
    trip1_1 (state = closed AND ar_status = auto) -> state := open, auto_reclose_wait := true, cb_state_open, state_change_open;
  triggeredby trip;
  transition open_unexplained
    open_unexplained_0 state = closed -> state := open, cb_state_open, state_change_open, count_as_fault;
  transition open1
    open1_0 state = closed -> state := open, cb_state_open, state_change_open;
  triggeredby open;
}
component Breaker_X47_X48 = {
  var auto_reopen_wait : [0..1];
  var auto_reclose_wait : [0..1];
  var commanded_ar_non_auto : [0..1];
  var commanded_ar_auto : [0..1];
  var commanded_closed : [0..1];
  var commanded_open : [0..1];
  var lockout : [0..1];
  var ar_status : {auto,non_auto};
  var state : {open,closed};
  event state_change_close;
  event state_change_open;
  event breaker_is_closed;
  event count_as_fault;
  event check_isolator_open;
  event close;
  event simple_trip;
  event trip;
  event open;
  event IMPOSSIBLE;
  event command_cb_ar_status_NON_AUTO;
  event command_cb_ar_status_AUTO;
  event command_ar_supy_control_status_NON_AUTO;
  event command_ar_supy_control_status_AUTO;
  event command_cb_state_closed;
  event command_cb_state_open;
  event cb_ar_status_NON_AUTO;
  event cb_ar_status_AUTO;
  event ar_supy_control_status_NON_AUTO;
  event ar_supy_control_status_AUTO;
  event cb_command_fail;
  event cb_state_not_responding;
  event cb_state_abnormal;
  event cb_state_closed;
  event cb_state_open;
  transition breaker_is_closed_transition
    breaker_is_closed_transition_0 state = closed -> breaker_is_closed;
  transition check_isolator_open_transition
    check_isolator_open_transition_0 true = 1 -> IMPOSSIBLE;
    check_isolator_open_transition_1 state = open -> state := open;
  triggeredby check_isolator_open;
  transition auto_reopen_wait_timeout
    auto_reopen_wait_timeout_0 true = 1 -> auto_reopen_wait := false;
  triggeredby [0.0..1.0] auto_reopen_wait = true;
  transition auto_reclose_wait_timeout
    auto_reclose_wait_timeout_0 true = 1 -> auto_reclose_wait := false;
  triggeredby [0.0..45.0] auto_reclose_wait = true;
  transition commanded_ar_non_auto_timeout
    commanded_ar_non_auto_timeout_0 true = 1 -> commanded_ar_non_auto := false;
  triggeredby [0.0..45.0] commanded_ar_non_auto = true;
  transition commanded_ar_auto_timeout
    commanded_ar_auto_timeout_0 true = 1 -> commanded_ar_auto := false;
  triggeredby [0.0..45.0] commanded_ar_auto = true;
  transition commanded_closed_timeout
    commanded_closed_timeout_0 true = 1 -> commanded_closed := false;
  triggeredby [0.0..45.0] commanded_closed = true;
  transition commanded_open_timeout
    commanded_open_timeout_0 true = 1 -> commanded_open := false;
  triggeredby [0.0..45.0] commanded_open = true;
  transition not_responding
    not_responding_0 true = 1 -> cb_state_not_responding, count_as_fault;
  transition abnormal
    abnormal_0 true = 1 -> cb_state_abnormal, count_as_fault;
  transition ar_status_non_auto_unexplained
    ar_status_non_auto_unexplained_0 true = 1 -> ar_status := non_auto, cb_ar_status_NON_AUTO, count_as_fault;
    ar_status_non_auto_unexplained_1 true = 1 -> ar_status := non_auto, ar_supy_control_status_NON_AUTO, count_as_fault;
  transition ar_status_auto_unexplained
    ar_status_auto_unexplained_0 true = 1 -> ar_status := auto, cb_ar_status_AUTO, count_as_fault;
    ar_status_auto_unexplained_1 true = 1 -> ar_status := auto, ar_supy_control_status_AUTO, count_as_fault;
  transition ar_status_non_auto
    ar_status_non_auto_0 commanded_ar_non_auto = true -> ar_status := non_auto, cb_ar_status_NON_AUTO;
    ar_status_non_auto_1 commanded_ar_non_auto = true -> ar_status := non_auto, ar_supy_control_status_NON_AUTO;
  transition ar_status_auto
    ar_status_auto_0 commanded_ar_auto = true -> ar_status := auto, cb_ar_status_AUTO;
    ar_status_auto_1 commanded_ar_auto = true -> ar_status := auto, ar_supy_control_status_AUTO;
  transition command_ar_non_auto
    command_ar_non_auto_0 true = 1 -> commanded_ar_non_auto := true, command_cb_ar_status_NON_AUTO;
    command_ar_non_auto_1 true = 1 -> commanded_ar_non_auto := true, command_ar_supy_control_status_NON_AUTO;
  transition command_ar_auto
    command_ar_auto_0 true = 1 -> commanded_ar_auto := true, command_cb_ar_status_AUTO;
    command_ar_auto_1 true = 1 -> commanded_ar_auto := true, command_ar_supy_control_status_AUTO;
  transition command_close_fail
    command_close_fail_0 commanded_closed = true -> cb_command_fail;
  transition close_on_command
    close_on_command_0 (state = open AND commanded_closed = true) -> state := closed, cb_state_closed, state_change_close;
  transition command_close
    command_close_0 true = 1 -> commanded_closed := true, command_cb_state_closed;
  transition command_open_fail
    command_open_fail_0 commanded_open = true -> cb_command_fail;
  transition open_on_command
    open_on_command_0 (state = closed AND commanded_open = true) -> state := open, cb_state_open, state_change_open;
  transition command_open
    command_open_0 true = 1 -> commanded_open := true, command_cb_state_open;
  transition reopen
    reopen_0 (state = closed AND auto_reopen_wait = true) -> state := open, auto_reopen_wait := false, lockout := true, cb_state_open, state_change_open;
  transition reclose
    reclose_0 ((state = open AND auto_reclose_wait = true) AND lockout = false) -> state := closed, auto_reclose_wait := false, auto_reopen_wait := true, cb_state_closed, state_change_close;
  transition close_unexplained
    close_unexplained_0 state = open -> state := closed, cb_state_closed, state_change_close, count_as_fault;
  transition close1
    close1_0 state = open -> state := closed, cb_state_closed, state_change_close;
  triggeredby close;
  transition trip_unexplained
    trip_unexplained_0 (state = closed AND ar_status = auto) -> state := open, auto_reclose_wait := true, cb_state_open, state_change_open, count_as_fault;
  transition simple_trip1
    simple_trip1_0 state = open -> state := open;
    simple_trip1_1 (state = closed AND ar_status = non_auto) -> state := open, cb_state_open;
    simple_trip1_2 (state = closed AND ar_status = auto) -> state := open, auto_reclose_wait := true, cb_state_open;
  triggeredby simple_trip;
  transition trip1
    trip1_0 (state = closed AND ar_status = non_auto) -> state := open, cb_state_open, state_change_open;
    trip1_1 (state = closed AND ar_status = auto) -> state := open, auto_reclose_wait := true, cb_state_open, state_change_open;
  triggeredby trip;
  transition open_unexplained
    open_unexplained_0 state = closed -> state := open, cb_state_open, state_change_open, count_as_fault;
  transition open1
    open1_0 state = closed -> state := open, cb_state_open, state_change_open;
  triggeredby open;
}
component Breaker_X49_X50 = {
  var auto_reopen_wait : [0..1];
  var auto_reclose_wait : [0..1];
  var commanded_ar_non_auto : [0..1];
  var commanded_ar_auto : [0..1];
  var commanded_closed : [0..1];
  var commanded_open : [0..1];
  var lockout : [0..1];
  var ar_status : {auto,non_auto};
  var state : {open,closed};
  event state_change_close;
  event state_change_open;
  event breaker_is_closed;
  event count_as_fault;
  event check_isolator_open;
  event close;
  event simple_trip;
  event trip;
  event open;
  event IMPOSSIBLE;
  event command_cb_ar_status_NON_AUTO;
  event command_cb_ar_status_AUTO;
  event command_ar_supy_control_status_NON_AUTO;
  event command_ar_supy_control_status_AUTO;
  event command_cb_state_closed;
  event command_cb_state_open;
  event cb_ar_status_NON_AUTO;
  event cb_ar_status_AUTO;
  event ar_supy_control_status_NON_AUTO;
  event ar_supy_control_status_AUTO;
  event cb_command_fail;
  event cb_state_not_responding;
  event cb_state_abnormal;
  event cb_state_closed;
  event cb_state_open;
  transition breaker_is_closed_transition
    breaker_is_closed_transition_0 state = closed -> breaker_is_closed;
  transition check_isolator_open_transition
    check_isolator_open_transition_0 true = 1 -> IMPOSSIBLE;
    check_isolator_open_transition_1 state = open -> state := open;
  triggeredby check_isolator_open;
  transition auto_reopen_wait_timeout
    auto_reopen_wait_timeout_0 true = 1 -> auto_reopen_wait := false;
  triggeredby [0.0..1.0] auto_reopen_wait = true;
  transition auto_reclose_wait_timeout
    auto_reclose_wait_timeout_0 true = 1 -> auto_reclose_wait := false;
  triggeredby [0.0..45.0] auto_reclose_wait = true;
  transition commanded_ar_non_auto_timeout
    commanded_ar_non_auto_timeout_0 true = 1 -> commanded_ar_non_auto := false;
  triggeredby [0.0..45.0] commanded_ar_non_auto = true;
  transition commanded_ar_auto_timeout
    commanded_ar_auto_timeout_0 true = 1 -> commanded_ar_auto := false;
  triggeredby [0.0..45.0] commanded_ar_auto = true;
  transition commanded_closed_timeout
    commanded_closed_timeout_0 true = 1 -> commanded_closed := false;
  triggeredby [0.0..45.0] commanded_closed = true;
  transition commanded_open_timeout
    commanded_open_timeout_0 true = 1 -> commanded_open := false;
  triggeredby [0.0..45.0] commanded_open = true;
  transition not_responding
    not_responding_0 true = 1 -> cb_state_not_responding, count_as_fault;
  transition abnormal
    abnormal_0 true = 1 -> cb_state_abnormal, count_as_fault;
  transition ar_status_non_auto_unexplained
    ar_status_non_auto_unexplained_0 true = 1 -> ar_status := non_auto, cb_ar_status_NON_AUTO, count_as_fault;
    ar_status_non_auto_unexplained_1 true = 1 -> ar_status := non_auto, ar_supy_control_status_NON_AUTO, count_as_fault;
  transition ar_status_auto_unexplained
    ar_status_auto_unexplained_0 true = 1 -> ar_status := auto, cb_ar_status_AUTO, count_as_fault;
    ar_status_auto_unexplained_1 true = 1 -> ar_status := auto, ar_supy_control_status_AUTO, count_as_fault;
  transition ar_status_non_auto
    ar_status_non_auto_0 commanded_ar_non_auto = true -> ar_status := non_auto, cb_ar_status_NON_AUTO;
    ar_status_non_auto_1 commanded_ar_non_auto = true -> ar_status := non_auto, ar_supy_control_status_NON_AUTO;
  transition ar_status_auto
    ar_status_auto_0 commanded_ar_auto = true -> ar_status := auto, cb_ar_status_AUTO;
    ar_status_auto_1 commanded_ar_auto = true -> ar_status := auto, ar_supy_control_status_AUTO;
  transition command_ar_non_auto
    command_ar_non_auto_0 true = 1 -> commanded_ar_non_auto := true, command_cb_ar_status_NON_AUTO;
    command_ar_non_auto_1 true = 1 -> commanded_ar_non_auto := true, command_ar_supy_control_status_NON_AUTO;
  transition command_ar_auto
    command_ar_auto_0 true = 1 -> commanded_ar_auto := true, command_cb_ar_status_AUTO;
    command_ar_auto_1 true = 1 -> commanded_ar_auto := true, command_ar_supy_control_status_AUTO;
  transition command_close_fail
    command_close_fail_0 commanded_closed = true -> cb_command_fail;
  transition close_on_command
    close_on_command_0 (state = open AND commanded_closed = true) -> state := closed, cb_state_closed, state_change_close;
  transition command_close
    command_close_0 true = 1 -> commanded_closed := true, command_cb_state_closed;
  transition command_open_fail
    command_open_fail_0 commanded_open = true -> cb_command_fail;
  transition open_on_command
    open_on_command_0 (state = closed AND commanded_open = true) -> state := open, cb_state_open, state_change_open;
  transition command_open
    command_open_0 true = 1 -> commanded_open := true, command_cb_state_open;
  transition reopen
    reopen_0 (state = closed AND auto_reopen_wait = true) -> state := open, auto_reopen_wait := false, lockout := true, cb_state_open, state_change_open;
  transition reclose
    reclose_0 ((state = open AND auto_reclose_wait = true) AND lockout = false) -> state := closed, auto_reclose_wait := false, auto_reopen_wait := true, cb_state_closed, state_change_close;
  transition close_unexplained
    close_unexplained_0 state = open -> state := closed, cb_state_closed, state_change_close, count_as_fault;
  transition close1
    close1_0 state = open -> state := closed, cb_state_closed, state_change_close;
  triggeredby close;
  transition trip_unexplained
    trip_unexplained_0 (state = closed AND ar_status = auto) -> state := open, auto_reclose_wait := true, cb_state_open, state_change_open, count_as_fault;
  transition simple_trip1
    simple_trip1_0 state = open -> state := open;
    simple_trip1_1 (state = closed AND ar_status = non_auto) -> state := open, cb_state_open;
    simple_trip1_2 (state = closed AND ar_status = auto) -> state := open, auto_reclose_wait := true, cb_state_open;
  triggeredby simple_trip;
  transition trip1
    trip1_0 (state = closed AND ar_status = non_auto) -> state := open, cb_state_open, state_change_open;
    trip1_1 (state = closed AND ar_status = auto) -> state := open, auto_reclose_wait := true, cb_state_open, state_change_open;
  triggeredby trip;
  transition open_unexplained
    open_unexplained_0 state = closed -> state := open, cb_state_open, state_change_open, count_as_fault;
  transition open1
    open1_0 state = closed -> state := open, cb_state_open, state_change_open;
  triggeredby open;
}
component Breaker_X51_X52 = {
  var auto_reopen_wait : [0..1];
  var auto_reclose_wait : [0..1];
  var commanded_ar_non_auto : [0..1];
  var commanded_ar_auto : [0..1];
  var commanded_closed : [0..1];
  var commanded_open : [0..1];
  var lockout : [0..1];
  var ar_status : {auto,non_auto};
  var state : {open,closed};
  event state_change_close;
  event state_change_open;
  event breaker_is_closed;
  event count_as_fault;
  event check_isolator_open;
  event close;
  event simple_trip;
  event trip;
  event open;
  event IMPOSSIBLE;
  event command_cb_ar_status_NON_AUTO;
  event command_cb_ar_status_AUTO;
  event command_ar_supy_control_status_NON_AUTO;
  event command_ar_supy_control_status_AUTO;
  event command_cb_state_closed;
  event command_cb_state_open;
  event cb_ar_status_NON_AUTO;
  event cb_ar_status_AUTO;
  event ar_supy_control_status_NON_AUTO;
  event ar_supy_control_status_AUTO;
  event cb_command_fail;
  event cb_state_not_responding;
  event cb_state_abnormal;
  event cb_state_closed;
  event cb_state_open;
  transition breaker_is_closed_transition
    breaker_is_closed_transition_0 state = closed -> breaker_is_closed;
  transition check_isolator_open_transition
    check_isolator_open_transition_0 true = 1 -> IMPOSSIBLE;
    check_isolator_open_transition_1 state = open -> state := open;
  triggeredby check_isolator_open;
  transition auto_reopen_wait_timeout
    auto_reopen_wait_timeout_0 true = 1 -> auto_reopen_wait := false;
  triggeredby [0.0..1.0] auto_reopen_wait = true;
  transition auto_reclose_wait_timeout
    auto_reclose_wait_timeout_0 true = 1 -> auto_reclose_wait := false;
  triggeredby [0.0..45.0] auto_reclose_wait = true;
  transition commanded_ar_non_auto_timeout
    commanded_ar_non_auto_timeout_0 true = 1 -> commanded_ar_non_auto := false;
  triggeredby [0.0..45.0] commanded_ar_non_auto = true;
  transition commanded_ar_auto_timeout
    commanded_ar_auto_timeout_0 true = 1 -> commanded_ar_auto := false;
  triggeredby [0.0..45.0] commanded_ar_auto = true;
  transition commanded_closed_timeout
    commanded_closed_timeout_0 true = 1 -> commanded_closed := false;
  triggeredby [0.0..45.0] commanded_closed = true;
  transition commanded_open_timeout
    commanded_open_timeout_0 true = 1 -> commanded_open := false;
  triggeredby [0.0..45.0] commanded_open = true;
  transition not_responding
    not_responding_0 true = 1 -> cb_state_not_responding, count_as_fault;
  transition abnormal
    abnormal_0 true = 1 -> cb_state_abnormal, count_as_fault;
  transition ar_status_non_auto_unexplained
    ar_status_non_auto_unexplained_0 true = 1 -> ar_status := non_auto, cb_ar_status_NON_AUTO, count_as_fault;
    ar_status_non_auto_unexplained_1 true = 1 -> ar_status := non_auto, ar_supy_control_status_NON_AUTO, count_as_fault;
  transition ar_status_auto_unexplained
    ar_status_auto_unexplained_0 true = 1 -> ar_status := auto, cb_ar_status_AUTO, count_as_fault;
    ar_status_auto_unexplained_1 true = 1 -> ar_status := auto, ar_supy_control_status_AUTO, count_as_fault;
  transition ar_status_non_auto
    ar_status_non_auto_0 commanded_ar_non_auto = true -> ar_status := non_auto, cb_ar_status_NON_AUTO;
    ar_status_non_auto_1 commanded_ar_non_auto = true -> ar_status := non_auto, ar_supy_control_status_NON_AUTO;
  transition ar_status_auto
    ar_status_auto_0 commanded_ar_auto = true -> ar_status := auto, cb_ar_status_AUTO;
    ar_status_auto_1 commanded_ar_auto = true -> ar_status := auto, ar_supy_control_status_AUTO;
  transition command_ar_non_auto
    command_ar_non_auto_0 true = 1 -> commanded_ar_non_auto := true, command_cb_ar_status_NON_AUTO;
    command_ar_non_auto_1 true = 1 -> commanded_ar_non_auto := true, command_ar_supy_control_status_NON_AUTO;
  transition command_ar_auto
    command_ar_auto_0 true = 1 -> commanded_ar_auto := true, command_cb_ar_status_AUTO;
    command_ar_auto_1 true = 1 -> commanded_ar_auto := true, command_ar_supy_control_status_AUTO;
  transition command_close_fail
    command_close_fail_0 commanded_closed = true -> cb_command_fail;
  transition close_on_command
    close_on_command_0 (state = open AND commanded_closed = true) -> state := closed, cb_state_closed, state_change_close;
  transition command_close
    command_close_0 true = 1 -> commanded_closed := true, command_cb_state_closed;
  transition command_open_fail
    command_open_fail_0 commanded_open = true -> cb_command_fail;
  transition open_on_command
    open_on_command_0 (state = closed AND commanded_open = true) -> state := open, cb_state_open, state_change_open;
  transition command_open
    command_open_0 true = 1 -> commanded_open := true, command_cb_state_open;
  transition reopen
    reopen_0 (state = closed AND auto_reopen_wait = true) -> state := open, auto_reopen_wait := false, lockout := true, cb_state_open, state_change_open;
  transition reclose
    reclose_0 ((state = open AND auto_reclose_wait = true) AND lockout = false) -> state := closed, auto_reclose_wait := false, auto_reopen_wait := true, cb_state_closed, state_change_close;
  transition close_unexplained
    close_unexplained_0 state = open -> state := closed, cb_state_closed, state_change_close, count_as_fault;
  transition close1
    close1_0 state = open -> state := closed, cb_state_closed, state_change_close;
  triggeredby close;
  transition trip_unexplained
    trip_unexplained_0 (state = closed AND ar_status = auto) -> state := open, auto_reclose_wait := true, cb_state_open, state_change_open, count_as_fault;
  transition simple_trip1
    simple_trip1_0 state = open -> state := open;
    simple_trip1_1 (state = closed AND ar_status = non_auto) -> state := open, cb_state_open;
    simple_trip1_2 (state = closed AND ar_status = auto) -> state := open, auto_reclose_wait := true, cb_state_open;
  triggeredby simple_trip;
  transition trip1
    trip1_0 (state = closed AND ar_status = non_auto) -> state := open, cb_state_open, state_change_open;
    trip1_1 (state = closed AND ar_status = auto) -> state := open, auto_reclose_wait := true, cb_state_open, state_change_open;
  triggeredby trip;
  transition open_unexplained
    open_unexplained_0 state = closed -> state := open, cb_state_open, state_change_open, count_as_fault;
  transition open1
    open1_0 state = closed -> state := open, cb_state_open, state_change_open;
  triggeredby open;
}
component Breaker_X53_X54 = {
  var auto_reopen_wait : [0..1];
  var auto_reclose_wait : [0..1];
  var commanded_ar_non_auto : [0..1];
  var commanded_ar_auto : [0..1];
  var commanded_closed : [0..1];
  var commanded_open : [0..1];
  var lockout : [0..1];
  var ar_status : {auto,non_auto};
  var state : {open,closed};
  event state_change_close;
  event state_change_open;
  event breaker_is_closed;
  event count_as_fault;
  event check_isolator_open;
  event close;
  event simple_trip;
  event trip;
  event open;
  event IMPOSSIBLE;
  event command_cb_ar_status_NON_AUTO;
  event command_cb_ar_status_AUTO;
  event command_ar_supy_control_status_NON_AUTO;
  event command_ar_supy_control_status_AUTO;
  event command_cb_state_closed;
  event command_cb_state_open;
  event cb_ar_status_NON_AUTO;
  event cb_ar_status_AUTO;
  event ar_supy_control_status_NON_AUTO;
  event ar_supy_control_status_AUTO;
  event cb_command_fail;
  event cb_state_not_responding;
  event cb_state_abnormal;
  event cb_state_closed;
  event cb_state_open;
  transition breaker_is_closed_transition
    breaker_is_closed_transition_0 state = closed -> breaker_is_closed;
  transition check_isolator_open_transition
    check_isolator_open_transition_0 true = 1 -> IMPOSSIBLE;
    check_isolator_open_transition_1 state = open -> state := open;
  triggeredby check_isolator_open;
  transition auto_reopen_wait_timeout
    auto_reopen_wait_timeout_0 true = 1 -> auto_reopen_wait := false;
  triggeredby [0.0..1.0] auto_reopen_wait = true;
  transition auto_reclose_wait_timeout
    auto_reclose_wait_timeout_0 true = 1 -> auto_reclose_wait := false;
  triggeredby [0.0..45.0] auto_reclose_wait = true;
  transition commanded_ar_non_auto_timeout
    commanded_ar_non_auto_timeout_0 true = 1 -> commanded_ar_non_auto := false;
  triggeredby [0.0..45.0] commanded_ar_non_auto = true;
  transition commanded_ar_auto_timeout
    commanded_ar_auto_timeout_0 true = 1 -> commanded_ar_auto := false;
  triggeredby [0.0..45.0] commanded_ar_auto = true;
  transition commanded_closed_timeout
    commanded_closed_timeout_0 true = 1 -> commanded_closed := false;
  triggeredby [0.0..45.0] commanded_closed = true;
  transition commanded_open_timeout
    commanded_open_timeout_0 true = 1 -> commanded_open := false;
  triggeredby [0.0..45.0] commanded_open = true;
  transition not_responding
    not_responding_0 true = 1 -> cb_state_not_responding, count_as_fault;
  transition abnormal
    abnormal_0 true = 1 -> cb_state_abnormal, count_as_fault;
  transition ar_status_non_auto_unexplained
    ar_status_non_auto_unexplained_0 true = 1 -> ar_status := non_auto, cb_ar_status_NON_AUTO, count_as_fault;
    ar_status_non_auto_unexplained_1 true = 1 -> ar_status := non_auto, ar_supy_control_status_NON_AUTO, count_as_fault;
  transition ar_status_auto_unexplained
    ar_status_auto_unexplained_0 true = 1 -> ar_status := auto, cb_ar_status_AUTO, count_as_fault;
    ar_status_auto_unexplained_1 true = 1 -> ar_status := auto, ar_supy_control_status_AUTO, count_as_fault;
  transition ar_status_non_auto
    ar_status_non_auto_0 commanded_ar_non_auto = true -> ar_status := non_auto, cb_ar_status_NON_AUTO;
    ar_status_non_auto_1 commanded_ar_non_auto = true -> ar_status := non_auto, ar_supy_control_status_NON_AUTO;
  transition ar_status_auto
    ar_status_auto_0 commanded_ar_auto = true -> ar_status := auto, cb_ar_status_AUTO;
    ar_status_auto_1 commanded_ar_auto = true -> ar_status := auto, ar_supy_control_status_AUTO;
  transition command_ar_non_auto
    command_ar_non_auto_0 true = 1 -> commanded_ar_non_auto := true, command_cb_ar_status_NON_AUTO;
    command_ar_non_auto_1 true = 1 -> commanded_ar_non_auto := true, command_ar_supy_control_status_NON_AUTO;
  transition command_ar_auto
    command_ar_auto_0 true = 1 -> commanded_ar_auto := true, command_cb_ar_status_AUTO;
    command_ar_auto_1 true = 1 -> commanded_ar_auto := true, command_ar_supy_control_status_AUTO;
  transition command_close_fail
    command_close_fail_0 commanded_closed = true -> cb_command_fail;
  transition close_on_command
    close_on_command_0 (state = open AND commanded_closed = true) -> state := closed, cb_state_closed, state_change_close;
  transition command_close
    command_close_0 true = 1 -> commanded_closed := true, command_cb_state_closed;
  transition command_open_fail
    command_open_fail_0 commanded_open = true -> cb_command_fail;
  transition open_on_command
    open_on_command_0 (state = closed AND commanded_open = true) -> state := open, cb_state_open, state_change_open;
  transition command_open
    command_open_0 true = 1 -> commanded_open := true, command_cb_state_open;
  transition reopen
    reopen_0 (state = closed AND auto_reopen_wait = true) -> state := open, auto_reopen_wait := false, lockout := true, cb_state_open, state_change_open;
  transition reclose
    reclose_0 ((state = open AND auto_reclose_wait = true) AND lockout = false) -> state := closed, auto_reclose_wait := false, auto_reopen_wait := true, cb_state_closed, state_change_close;
  transition close_unexplained
    close_unexplained_0 state = open -> state := closed, cb_state_closed, state_change_close, count_as_fault;
  transition close1
    close1_0 state = open -> state := closed, cb_state_closed, state_change_close;
  triggeredby close;
  transition trip_unexplained
    trip_unexplained_0 (state = closed AND ar_status = auto) -> state := open, auto_reclose_wait := true, cb_state_open, state_change_open, count_as_fault;
  transition simple_trip1
    simple_trip1_0 state = open -> state := open;
    simple_trip1_1 (state = closed AND ar_status = non_auto) -> state := open, cb_state_open;
    simple_trip1_2 (state = closed AND ar_status = auto) -> state := open, auto_reclose_wait := true, cb_state_open;
  triggeredby simple_trip;
  transition trip1
    trip1_0 (state = closed AND ar_status = non_auto) -> state := open, cb_state_open, state_change_open;
    trip1_1 (state = closed AND ar_status = auto) -> state := open, auto_reclose_wait := true, cb_state_open, state_change_open;
  triggeredby trip;
  transition open_unexplained
    open_unexplained_0 state = closed -> state := open, cb_state_open, state_change_open, count_as_fault;
  transition open1
    open1_0 state = closed -> state := open, cb_state_open, state_change_open;
  triggeredby open;
}
component Breaker_X55_X56 = {
  var auto_reopen_wait : [0..1];
  var auto_reclose_wait : [0..1];
  var commanded_ar_non_auto : [0..1];
  var commanded_ar_auto : [0..1];
  var commanded_closed : [0..1];
  var commanded_open : [0..1];
  var lockout : [0..1];
  var ar_status : {auto,non_auto};
  var state : {open,closed};
  event state_change_close;
  event state_change_open;
  event breaker_is_closed;
  event count_as_fault;
  event check_isolator_open;
  event close;
  event simple_trip;
  event trip;
  event open;
  event IMPOSSIBLE;
  event command_cb_ar_status_NON_AUTO;
  event command_cb_ar_status_AUTO;
  event command_ar_supy_control_status_NON_AUTO;
  event command_ar_supy_control_status_AUTO;
  event command_cb_state_closed;
  event command_cb_state_open;
  event cb_ar_status_NON_AUTO;
  event cb_ar_status_AUTO;
  event ar_supy_control_status_NON_AUTO;
  event ar_supy_control_status_AUTO;
  event cb_command_fail;
  event cb_state_not_responding;
  event cb_state_abnormal;
  event cb_state_closed;
  event cb_state_open;
  transition breaker_is_closed_transition
    breaker_is_closed_transition_0 state = closed -> breaker_is_closed;
  transition check_isolator_open_transition
    check_isolator_open_transition_0 true = 1 -> IMPOSSIBLE;
    check_isolator_open_transition_1 state = open -> state := open;
  triggeredby check_isolator_open;
  transition auto_reopen_wait_timeout
    auto_reopen_wait_timeout_0 true = 1 -> auto_reopen_wait := false;
  triggeredby [0.0..1.0] auto_reopen_wait = true;
  transition auto_reclose_wait_timeout
    auto_reclose_wait_timeout_0 true = 1 -> auto_reclose_wait := false;
  triggeredby [0.0..45.0] auto_reclose_wait = true;
  transition commanded_ar_non_auto_timeout
    commanded_ar_non_auto_timeout_0 true = 1 -> commanded_ar_non_auto := false;
  triggeredby [0.0..45.0] commanded_ar_non_auto = true;
  transition commanded_ar_auto_timeout
    commanded_ar_auto_timeout_0 true = 1 -> commanded_ar_auto := false;
  triggeredby [0.0..45.0] commanded_ar_auto = true;
  transition commanded_closed_timeout
    commanded_closed_timeout_0 true = 1 -> commanded_closed := false;
  triggeredby [0.0..45.0] commanded_closed = true;
  transition commanded_open_timeout
    commanded_open_timeout_0 true = 1 -> commanded_open := false;
  triggeredby [0.0..45.0] commanded_open = true;
  transition not_responding
    not_responding_0 true = 1 -> cb_state_not_responding, count_as_fault;
  transition abnormal
    abnormal_0 true = 1 -> cb_state_abnormal, count_as_fault;
  transition ar_status_non_auto_unexplained
    ar_status_non_auto_unexplained_0 true = 1 -> ar_status := non_auto, cb_ar_status_NON_AUTO, count_as_fault;
    ar_status_non_auto_unexplained_1 true = 1 -> ar_status := non_auto, ar_supy_control_status_NON_AUTO, count_as_fault;
  transition ar_status_auto_unexplained
    ar_status_auto_unexplained_0 true = 1 -> ar_status := auto, cb_ar_status_AUTO, count_as_fault;
    ar_status_auto_unexplained_1 true = 1 -> ar_status := auto, ar_supy_control_status_AUTO, count_as_fault;
  transition ar_status_non_auto
    ar_status_non_auto_0 commanded_ar_non_auto = true -> ar_status := non_auto, cb_ar_status_NON_AUTO;
    ar_status_non_auto_1 commanded_ar_non_auto = true -> ar_status := non_auto, ar_supy_control_status_NON_AUTO;
  transition ar_status_auto
    ar_status_auto_0 commanded_ar_auto = true -> ar_status := auto, cb_ar_status_AUTO;
    ar_status_auto_1 commanded_ar_auto = true -> ar_status := auto, ar_supy_control_status_AUTO;
  transition command_ar_non_auto
    command_ar_non_auto_0 true = 1 -> commanded_ar_non_auto := true, command_cb_ar_status_NON_AUTO;
    command_ar_non_auto_1 true = 1 -> commanded_ar_non_auto := true, command_ar_supy_control_status_NON_AUTO;
  transition command_ar_auto
    command_ar_auto_0 true = 1 -> commanded_ar_auto := true, command_cb_ar_status_AUTO;
    command_ar_auto_1 true = 1 -> commanded_ar_auto := true, command_ar_supy_control_status_AUTO;
  transition command_close_fail
    command_close_fail_0 commanded_closed = true -> cb_command_fail;
  transition close_on_command
    close_on_command_0 (state = open AND commanded_closed = true) -> state := closed, cb_state_closed, state_change_close;
  transition command_close
    command_close_0 true = 1 -> commanded_closed := true, command_cb_state_closed;
  transition command_open_fail
    command_open_fail_0 commanded_open = true -> cb_command_fail;
  transition open_on_command
    open_on_command_0 (state = closed AND commanded_open = true) -> state := open, cb_state_open, state_change_open;
  transition command_open
    command_open_0 true = 1 -> commanded_open := true, command_cb_state_open;
  transition reopen
    reopen_0 (state = closed AND auto_reopen_wait = true) -> state := open, auto_reopen_wait := false, lockout := true, cb_state_open, state_change_open;
  transition reclose
    reclose_0 ((state = open AND auto_reclose_wait = true) AND lockout = false) -> state := closed, auto_reclose_wait := false, auto_reopen_wait := true, cb_state_closed, state_change_close;
  transition close_unexplained
    close_unexplained_0 state = open -> state := closed, cb_state_closed, state_change_close, count_as_fault;
  transition close1
    close1_0 state = open -> state := closed, cb_state_closed, state_change_close;
  triggeredby close;
  transition trip_unexplained
    trip_unexplained_0 (state = closed AND ar_status = auto) -> state := open, auto_reclose_wait := true, cb_state_open, state_change_open, count_as_fault;
  transition simple_trip1
    simple_trip1_0 state = open -> state := open;
    simple_trip1_1 (state = closed AND ar_status = non_auto) -> state := open, cb_state_open;
    simple_trip1_2 (state = closed AND ar_status = auto) -> state := open, auto_reclose_wait := true, cb_state_open;
  triggeredby simple_trip;
  transition trip1
    trip1_0 (state = closed AND ar_status = non_auto) -> state := open, cb_state_open, state_change_open;
    trip1_1 (state = closed AND ar_status = auto) -> state := open, auto_reclose_wait := true, cb_state_open, state_change_open;
  triggeredby trip;
  transition open_unexplained
    open_unexplained_0 state = closed -> state := open, cb_state_open, state_change_open, count_as_fault;
  transition open1
    open1_0 state = closed -> state := open, cb_state_open, state_change_open;
  triggeredby open;
}
component Breaker_X57_X58 = {
  var auto_reopen_wait : [0..1];
  var auto_reclose_wait : [0..1];
  var commanded_ar_non_auto : [0..1];
  var commanded_ar_auto : [0..1];
  var commanded_closed : [0..1];
  var commanded_open : [0..1];
  var lockout : [0..1];
  var ar_status : {auto,non_auto};
  var state : {open,closed};
  event state_change_close;
  event state_change_open;
  event breaker_is_closed;
  event count_as_fault;
  event check_isolator_open;
  event close;
  event simple_trip;
  event trip;
  event open;
  event IMPOSSIBLE;
  event command_cb_ar_status_NON_AUTO;
  event command_cb_ar_status_AUTO;
  event command_ar_supy_control_status_NON_AUTO;
  event command_ar_supy_control_status_AUTO;
  event command_cb_state_closed;
  event command_cb_state_open;
  event cb_ar_status_NON_AUTO;
  event cb_ar_status_AUTO;
  event ar_supy_control_status_NON_AUTO;
  event ar_supy_control_status_AUTO;
  event cb_command_fail;
  event cb_state_not_responding;
  event cb_state_abnormal;
  event cb_state_closed;
  event cb_state_open;
  transition breaker_is_closed_transition
    breaker_is_closed_transition_0 state = closed -> breaker_is_closed;
  transition check_isolator_open_transition
    check_isolator_open_transition_0 true = 1 -> IMPOSSIBLE;
    check_isolator_open_transition_1 state = open -> state := open;
  triggeredby check_isolator_open;
  transition auto_reopen_wait_timeout
    auto_reopen_wait_timeout_0 true = 1 -> auto_reopen_wait := false;
  triggeredby [0.0..1.0] auto_reopen_wait = true;
  transition auto_reclose_wait_timeout
    auto_reclose_wait_timeout_0 true = 1 -> auto_reclose_wait := false;
  triggeredby [0.0..45.0] auto_reclose_wait = true;
  transition commanded_ar_non_auto_timeout
    commanded_ar_non_auto_timeout_0 true = 1 -> commanded_ar_non_auto := false;
  triggeredby [0.0..45.0] commanded_ar_non_auto = true;
  transition commanded_ar_auto_timeout
    commanded_ar_auto_timeout_0 true = 1 -> commanded_ar_auto := false;
  triggeredby [0.0..45.0] commanded_ar_auto = true;
  transition commanded_closed_timeout
    commanded_closed_timeout_0 true = 1 -> commanded_closed := false;
  triggeredby [0.0..45.0] commanded_closed = true;
  transition commanded_open_timeout
    commanded_open_timeout_0 true = 1 -> commanded_open := false;
  triggeredby [0.0..45.0] commanded_open = true;
  transition not_responding
    not_responding_0 true = 1 -> cb_state_not_responding, count_as_fault;
  transition abnormal
    abnormal_0 true = 1 -> cb_state_abnormal, count_as_fault;
  transition ar_status_non_auto_unexplained
    ar_status_non_auto_unexplained_0 true = 1 -> ar_status := non_auto, cb_ar_status_NON_AUTO, count_as_fault;
    ar_status_non_auto_unexplained_1 true = 1 -> ar_status := non_auto, ar_supy_control_status_NON_AUTO, count_as_fault;
  transition ar_status_auto_unexplained
    ar_status_auto_unexplained_0 true = 1 -> ar_status := auto, cb_ar_status_AUTO, count_as_fault;
    ar_status_auto_unexplained_1 true = 1 -> ar_status := auto, ar_supy_control_status_AUTO, count_as_fault;
  transition ar_status_non_auto
    ar_status_non_auto_0 commanded_ar_non_auto = true -> ar_status := non_auto, cb_ar_status_NON_AUTO;
    ar_status_non_auto_1 commanded_ar_non_auto = true -> ar_status := non_auto, ar_supy_control_status_NON_AUTO;
  transition ar_status_auto
    ar_status_auto_0 commanded_ar_auto = true -> ar_status := auto, cb_ar_status_AUTO;
    ar_status_auto_1 commanded_ar_auto = true -> ar_status := auto, ar_supy_control_status_AUTO;
  transition command_ar_non_auto
    command_ar_non_auto_0 true = 1 -> commanded_ar_non_auto := true, command_cb_ar_status_NON_AUTO;
    command_ar_non_auto_1 true = 1 -> commanded_ar_non_auto := true, command_ar_supy_control_status_NON_AUTO;
  transition command_ar_auto
    command_ar_auto_0 true = 1 -> commanded_ar_auto := true, command_cb_ar_status_AUTO;
    command_ar_auto_1 true = 1 -> commanded_ar_auto := true, command_ar_supy_control_status_AUTO;
  transition command_close_fail
    command_close_fail_0 commanded_closed = true -> cb_command_fail;
  transition close_on_command
    close_on_command_0 (state = open AND commanded_closed = true) -> state := closed, cb_state_closed, state_change_close;
  transition command_close
    command_close_0 true = 1 -> commanded_closed := true, command_cb_state_closed;
  transition command_open_fail
    command_open_fail_0 commanded_open = true -> cb_command_fail;
  transition open_on_command
    open_on_command_0 (state = closed AND commanded_open = true) -> state := open, cb_state_open, state_change_open;
  transition command_open
    command_open_0 true = 1 -> commanded_open := true, command_cb_state_open;
  transition reopen
    reopen_0 (state = closed AND auto_reopen_wait = true) -> state := open, auto_reopen_wait := false, lockout := true, cb_state_open, state_change_open;
  transition reclose
    reclose_0 ((state = open AND auto_reclose_wait = true) AND lockout = false) -> state := closed, auto_reclose_wait := false, auto_reopen_wait := true, cb_state_closed, state_change_close;
  transition close_unexplained
    close_unexplained_0 state = open -> state := closed, cb_state_closed, state_change_close, count_as_fault;
  transition close1
    close1_0 state = open -> state := closed, cb_state_closed, state_change_close;
  triggeredby close;
  transition trip_unexplained
    trip_unexplained_0 (state = closed AND ar_status = auto) -> state := open, auto_reclose_wait := true, cb_state_open, state_change_open, count_as_fault;
  transition simple_trip1
    simple_trip1_0 state = open -> state := open;
    simple_trip1_1 (state = closed AND ar_status = non_auto) -> state := open, cb_state_open;
    simple_trip1_2 (state = closed AND ar_status = auto) -> state := open, auto_reclose_wait := true, cb_state_open;
  triggeredby simple_trip;
  transition trip1
    trip1_0 (state = closed AND ar_status = non_auto) -> state := open, cb_state_open, state_change_open;
    trip1_1 (state = closed AND ar_status = auto) -> state := open, auto_reclose_wait := true, cb_state_open, state_change_open;
  triggeredby trip;
  transition open_unexplained
    open_unexplained_0 state = closed -> state := open, cb_state_open, state_change_open, count_as_fault;
  transition open1
    open1_0 state = closed -> state := open, cb_state_open, state_change_open;
  triggeredby open;
}
component Breaker_X59_X60 = {
  var auto_reopen_wait : [0..1];
  var auto_reclose_wait : [0..1];
  var commanded_ar_non_auto : [0..1];
  var commanded_ar_auto : [0..1];
  var commanded_closed : [0..1];
  var commanded_open : [0..1];
  var lockout : [0..1];
  var ar_status : {auto,non_auto};
  var state : {open,closed};
  event state_change_close;
  event state_change_open;
  event breaker_is_closed;
  event count_as_fault;
  event check_isolator_open;
  event close;
  event simple_trip;
  event trip;
  event open;
  event IMPOSSIBLE;
  event command_cb_ar_status_NON_AUTO;
  event command_cb_ar_status_AUTO;
  event command_ar_supy_control_status_NON_AUTO;
  event command_ar_supy_control_status_AUTO;
  event command_cb_state_closed;
  event command_cb_state_open;
  event cb_ar_status_NON_AUTO;
  event cb_ar_status_AUTO;
  event ar_supy_control_status_NON_AUTO;
  event ar_supy_control_status_AUTO;
  event cb_command_fail;
  event cb_state_not_responding;
  event cb_state_abnormal;
  event cb_state_closed;
  event cb_state_open;
  transition breaker_is_closed_transition
    breaker_is_closed_transition_0 state = closed -> breaker_is_closed;
  transition check_isolator_open_transition
    check_isolator_open_transition_0 true = 1 -> IMPOSSIBLE;
    check_isolator_open_transition_1 state = open -> state := open;
  triggeredby check_isolator_open;
  transition auto_reopen_wait_timeout
    auto_reopen_wait_timeout_0 true = 1 -> auto_reopen_wait := false;
  triggeredby [0.0..1.0] auto_reopen_wait = true;
  transition auto_reclose_wait_timeout
    auto_reclose_wait_timeout_0 true = 1 -> auto_reclose_wait := false;
  triggeredby [0.0..45.0] auto_reclose_wait = true;
  transition commanded_ar_non_auto_timeout
    commanded_ar_non_auto_timeout_0 true = 1 -> commanded_ar_non_auto := false;
  triggeredby [0.0..45.0] commanded_ar_non_auto = true;
  transition commanded_ar_auto_timeout
    commanded_ar_auto_timeout_0 true = 1 -> commanded_ar_auto := false;
  triggeredby [0.0..45.0] commanded_ar_auto = true;
  transition commanded_closed_timeout
    commanded_closed_timeout_0 true = 1 -> commanded_closed := false;
  triggeredby [0.0..45.0] commanded_closed = true;
  transition commanded_open_timeout
    commanded_open_timeout_0 true = 1 -> commanded_open := false;
  triggeredby [0.0..45.0] commanded_open = true;
  transition not_responding
    not_responding_0 true = 1 -> cb_state_not_responding, count_as_fault;
  transition abnormal
    abnormal_0 true = 1 -> cb_state_abnormal, count_as_fault;
  transition ar_status_non_auto_unexplained
    ar_status_non_auto_unexplained_0 true = 1 -> ar_status := non_auto, cb_ar_status_NON_AUTO, count_as_fault;
    ar_status_non_auto_unexplained_1 true = 1 -> ar_status := non_auto, ar_supy_control_status_NON_AUTO, count_as_fault;
  transition ar_status_auto_unexplained
    ar_status_auto_unexplained_0 true = 1 -> ar_status := auto, cb_ar_status_AUTO, count_as_fault;
    ar_status_auto_unexplained_1 true = 1 -> ar_status := auto, ar_supy_control_status_AUTO, count_as_fault;
  transition ar_status_non_auto
    ar_status_non_auto_0 commanded_ar_non_auto = true -> ar_status := non_auto, cb_ar_status_NON_AUTO;
    ar_status_non_auto_1 commanded_ar_non_auto = true -> ar_status := non_auto, ar_supy_control_status_NON_AUTO;
  transition ar_status_auto
    ar_status_auto_0 commanded_ar_auto = true -> ar_status := auto, cb_ar_status_AUTO;
    ar_status_auto_1 commanded_ar_auto = true -> ar_status := auto, ar_supy_control_status_AUTO;
  transition command_ar_non_auto
    command_ar_non_auto_0 true = 1 -> commanded_ar_non_auto := true, command_cb_ar_status_NON_AUTO;
    command_ar_non_auto_1 true = 1 -> commanded_ar_non_auto := true, command_ar_supy_control_status_NON_AUTO;
  transition command_ar_auto
    command_ar_auto_0 true = 1 -> commanded_ar_auto := true, command_cb_ar_status_AUTO;
    command_ar_auto_1 true = 1 -> commanded_ar_auto := true, command_ar_supy_control_status_AUTO;
  transition command_close_fail
    command_close_fail_0 commanded_closed = true -> cb_command_fail;
  transition close_on_command
    close_on_command_0 (state = open AND commanded_closed = true) -> state := closed, cb_state_closed, state_change_close;
  transition command_close
    command_close_0 true = 1 -> commanded_closed := true, command_cb_state_closed;
  transition command_open_fail
    command_open_fail_0 commanded_open = true -> cb_command_fail;
  transition open_on_command
    open_on_command_0 (state = closed AND commanded_open = true) -> state := open, cb_state_open, state_change_open;
  transition command_open
    command_open_0 true = 1 -> commanded_open := true, command_cb_state_open;
  transition reopen
    reopen_0 (state = closed AND auto_reopen_wait = true) -> state := open, auto_reopen_wait := false, lockout := true, cb_state_open, state_change_open;
  transition reclose
    reclose_0 ((state = open AND auto_reclose_wait = true) AND lockout = false) -> state := closed, auto_reclose_wait := false, auto_reopen_wait := true, cb_state_closed, state_change_close;
  transition close_unexplained
    close_unexplained_0 state = open -> state := closed, cb_state_closed, state_change_close, count_as_fault;
  transition close1
    close1_0 state = open -> state := closed, cb_state_closed, state_change_close;
  triggeredby close;
  transition trip_unexplained
    trip_unexplained_0 (state = closed AND ar_status = auto) -> state := open, auto_reclose_wait := true, cb_state_open, state_change_open, count_as_fault;
  transition simple_trip1
    simple_trip1_0 state = open -> state := open;
    simple_trip1_1 (state = closed AND ar_status = non_auto) -> state := open, cb_state_open;
    simple_trip1_2 (state = closed AND ar_status = auto) -> state := open, auto_reclose_wait := true, cb_state_open;
  triggeredby simple_trip;
  transition trip1
    trip1_0 (state = closed AND ar_status = non_auto) -> state := open, cb_state_open, state_change_open;
    trip1_1 (state = closed AND ar_status = auto) -> state := open, auto_reclose_wait := true, cb_state_open, state_change_open;
  triggeredby trip;
  transition open_unexplained
    open_unexplained_0 state = closed -> state := open, cb_state_open, state_change_open, count_as_fault;
  transition open1
    open1_0 state = closed -> state := open, cb_state_open, state_change_open;
  triggeredby open;
}
component Breaker_X61_X62 = {
  var auto_reopen_wait : [0..1];
  var auto_reclose_wait : [0..1];
  var commanded_ar_non_auto : [0..1];
  var commanded_ar_auto : [0..1];
  var commanded_closed : [0..1];
  var commanded_open : [0..1];
  var lockout : [0..1];
  var ar_status : {auto,non_auto};
  var state : {open,closed};
  event state_change_close;
  event state_change_open;
  event breaker_is_closed;
  event count_as_fault;
  event check_isolator_open;
  event close;
  event simple_trip;
  event trip;
  event open;
  event IMPOSSIBLE;
  event command_cb_ar_status_NON_AUTO;
  event command_cb_ar_status_AUTO;
  event command_ar_supy_control_status_NON_AUTO;
  event command_ar_supy_control_status_AUTO;
  event command_cb_state_closed;
  event command_cb_state_open;
  event cb_ar_status_NON_AUTO;
  event cb_ar_status_AUTO;
  event ar_supy_control_status_NON_AUTO;
  event ar_supy_control_status_AUTO;
  event cb_command_fail;
  event cb_state_not_responding;
  event cb_state_abnormal;
  event cb_state_closed;
  event cb_state_open;
  transition breaker_is_closed_transition
    breaker_is_closed_transition_0 state = closed -> breaker_is_closed;
  transition check_isolator_open_transition
    check_isolator_open_transition_0 true = 1 -> IMPOSSIBLE;
    check_isolator_open_transition_1 state = open -> state := open;
  triggeredby check_isolator_open;
  transition auto_reopen_wait_timeout
    auto_reopen_wait_timeout_0 true = 1 -> auto_reopen_wait := false;
  triggeredby [0.0..1.0] auto_reopen_wait = true;
  transition auto_reclose_wait_timeout
    auto_reclose_wait_timeout_0 true = 1 -> auto_reclose_wait := false;
  triggeredby [0.0..45.0] auto_reclose_wait = true;
  transition commanded_ar_non_auto_timeout
    commanded_ar_non_auto_timeout_0 true = 1 -> commanded_ar_non_auto := false;
  triggeredby [0.0..45.0] commanded_ar_non_auto = true;
  transition commanded_ar_auto_timeout
    commanded_ar_auto_timeout_0 true = 1 -> commanded_ar_auto := false;
  triggeredby [0.0..45.0] commanded_ar_auto = true;
  transition commanded_closed_timeout
    commanded_closed_timeout_0 true = 1 -> commanded_closed := false;
  triggeredby [0.0..45.0] commanded_closed = true;
  transition commanded_open_timeout
    commanded_open_timeout_0 true = 1 -> commanded_open := false;
  triggeredby [0.0..45.0] commanded_open = true;
  transition not_responding
    not_responding_0 true = 1 -> cb_state_not_responding, count_as_fault;
  transition abnormal
    abnormal_0 true = 1 -> cb_state_abnormal, count_as_fault;
  transition ar_status_non_auto_unexplained
    ar_status_non_auto_unexplained_0 true = 1 -> ar_status := non_auto, cb_ar_status_NON_AUTO, count_as_fault;
    ar_status_non_auto_unexplained_1 true = 1 -> ar_status := non_auto, ar_supy_control_status_NON_AUTO, count_as_fault;
  transition ar_status_auto_unexplained
    ar_status_auto_unexplained_0 true = 1 -> ar_status := auto, cb_ar_status_AUTO, count_as_fault;
    ar_status_auto_unexplained_1 true = 1 -> ar_status := auto, ar_supy_control_status_AUTO, count_as_fault;
  transition ar_status_non_auto
    ar_status_non_auto_0 commanded_ar_non_auto = true -> ar_status := non_auto, cb_ar_status_NON_AUTO;
    ar_status_non_auto_1 commanded_ar_non_auto = true -> ar_status := non_auto, ar_supy_control_status_NON_AUTO;
  transition ar_status_auto
    ar_status_auto_0 commanded_ar_auto = true -> ar_status := auto, cb_ar_status_AUTO;
    ar_status_auto_1 commanded_ar_auto = true -> ar_status := auto, ar_supy_control_status_AUTO;
  transition command_ar_non_auto
    command_ar_non_auto_0 true = 1 -> commanded_ar_non_auto := true, command_cb_ar_status_NON_AUTO;
    command_ar_non_auto_1 true = 1 -> commanded_ar_non_auto := true, command_ar_supy_control_status_NON_AUTO;
  transition command_ar_auto
    command_ar_auto_0 true = 1 -> commanded_ar_auto := true, command_cb_ar_status_AUTO;
    command_ar_auto_1 true = 1 -> commanded_ar_auto := true, command_ar_supy_control_status_AUTO;
  transition command_close_fail
    command_close_fail_0 commanded_closed = true -> cb_command_fail;
  transition close_on_command
    close_on_command_0 (state = open AND commanded_closed = true) -> state := closed, cb_state_closed, state_change_close;
  transition command_close
    command_close_0 true = 1 -> commanded_closed := true, command_cb_state_closed;
  transition command_open_fail
    command_open_fail_0 commanded_open = true -> cb_command_fail;
  transition open_on_command
    open_on_command_0 (state = closed AND commanded_open = true) -> state := open, cb_state_open, state_change_open;
  transition command_open
    command_open_0 true = 1 -> commanded_open := true, command_cb_state_open;
  transition reopen
    reopen_0 (state = closed AND auto_reopen_wait = true) -> state := open, auto_reopen_wait := false, lockout := true, cb_state_open, state_change_open;
  transition reclose
    reclose_0 ((state = open AND auto_reclose_wait = true) AND lockout = false) -> state := closed, auto_reclose_wait := false, auto_reopen_wait := true, cb_state_closed, state_change_close;
  transition close_unexplained
    close_unexplained_0 state = open -> state := closed, cb_state_closed, state_change_close, count_as_fault;
  transition close1
    close1_0 state = open -> state := closed, cb_state_closed, state_change_close;
  triggeredby close;
  transition trip_unexplained
    trip_unexplained_0 (state = closed AND ar_status = auto) -> state := open, auto_reclose_wait := true, cb_state_open, state_change_open, count_as_fault;
  transition simple_trip1
    simple_trip1_0 state = open -> state := open;
    simple_trip1_1 (state = closed AND ar_status = non_auto) -> state := open, cb_state_open;
    simple_trip1_2 (state = closed AND ar_status = auto) -> state := open, auto_reclose_wait := true, cb_state_open;
  triggeredby simple_trip;
  transition trip1
    trip1_0 (state = closed AND ar_status = non_auto) -> state := open, cb_state_open, state_change_open;
    trip1_1 (state = closed AND ar_status = auto) -> state := open, auto_reclose_wait := true, cb_state_open, state_change_open;
  triggeredby trip;
  transition open_unexplained
    open_unexplained_0 state = closed -> state := open, cb_state_open, state_change_open, count_as_fault;
  transition open1
    open1_0 state = closed -> state := open, cb_state_open, state_change_open;
  triggeredby open;
}
component Breaker_X63_X64 = {
  var auto_reopen_wait : [0..1];
  var auto_reclose_wait : [0..1];
  var commanded_ar_non_auto : [0..1];
  var commanded_ar_auto : [0..1];
  var commanded_closed : [0..1];
  var commanded_open : [0..1];
  var lockout : [0..1];
  var ar_status : {auto,non_auto};
  var state : {open,closed};
  event state_change_close;
  event state_change_open;
  event breaker_is_closed;
  event count_as_fault;
  event check_isolator_open;
  event close;
  event simple_trip;
  event trip;
  event open;
  event IMPOSSIBLE;
  event command_cb_ar_status_NON_AUTO;
  event command_cb_ar_status_AUTO;
  event command_ar_supy_control_status_NON_AUTO;
  event command_ar_supy_control_status_AUTO;
  event command_cb_state_closed;
  event command_cb_state_open;
  event cb_ar_status_NON_AUTO;
  event cb_ar_status_AUTO;
  event ar_supy_control_status_NON_AUTO;
  event ar_supy_control_status_AUTO;
  event cb_command_fail;
  event cb_state_not_responding;
  event cb_state_abnormal;
  event cb_state_closed;
  event cb_state_open;
  transition breaker_is_closed_transition
    breaker_is_closed_transition_0 state = closed -> breaker_is_closed;
  transition check_isolator_open_transition
    check_isolator_open_transition_0 true = 1 -> IMPOSSIBLE;
    check_isolator_open_transition_1 state = open -> state := open;
  triggeredby check_isolator_open;
  transition auto_reopen_wait_timeout
    auto_reopen_wait_timeout_0 true = 1 -> auto_reopen_wait := false;
  triggeredby [0.0..1.0] auto_reopen_wait = true;
  transition auto_reclose_wait_timeout
    auto_reclose_wait_timeout_0 true = 1 -> auto_reclose_wait := false;
  triggeredby [0.0..45.0] auto_reclose_wait = true;
  transition commanded_ar_non_auto_timeout
    commanded_ar_non_auto_timeout_0 true = 1 -> commanded_ar_non_auto := false;
  triggeredby [0.0..45.0] commanded_ar_non_auto = true;
  transition commanded_ar_auto_timeout
    commanded_ar_auto_timeout_0 true = 1 -> commanded_ar_auto := false;
  triggeredby [0.0..45.0] commanded_ar_auto = true;
  transition commanded_closed_timeout
    commanded_closed_timeout_0 true = 1 -> commanded_closed := false;
  triggeredby [0.0..45.0] commanded_closed = true;
  transition commanded_open_timeout
    commanded_open_timeout_0 true = 1 -> commanded_open := false;
  triggeredby [0.0..45.0] commanded_open = true;
  transition not_responding
    not_responding_0 true = 1 -> cb_state_not_responding, count_as_fault;
  transition abnormal
    abnormal_0 true = 1 -> cb_state_abnormal, count_as_fault;
  transition ar_status_non_auto_unexplained
    ar_status_non_auto_unexplained_0 true = 1 -> ar_status := non_auto, cb_ar_status_NON_AUTO, count_as_fault;
    ar_status_non_auto_unexplained_1 true = 1 -> ar_status := non_auto, ar_supy_control_status_NON_AUTO, count_as_fault;
  transition ar_status_auto_unexplained
    ar_status_auto_unexplained_0 true = 1 -> ar_status := auto, cb_ar_status_AUTO, count_as_fault;
    ar_status_auto_unexplained_1 true = 1 -> ar_status := auto, ar_supy_control_status_AUTO, count_as_fault;
  transition ar_status_non_auto
    ar_status_non_auto_0 commanded_ar_non_auto = true -> ar_status := non_auto, cb_ar_status_NON_AUTO;
    ar_status_non_auto_1 commanded_ar_non_auto = true -> ar_status := non_auto, ar_supy_control_status_NON_AUTO;
  transition ar_status_auto
    ar_status_auto_0 commanded_ar_auto = true -> ar_status := auto, cb_ar_status_AUTO;
    ar_status_auto_1 commanded_ar_auto = true -> ar_status := auto, ar_supy_control_status_AUTO;
  transition command_ar_non_auto
    command_ar_non_auto_0 true = 1 -> commanded_ar_non_auto := true, command_cb_ar_status_NON_AUTO;
    command_ar_non_auto_1 true = 1 -> commanded_ar_non_auto := true, command_ar_supy_control_status_NON_AUTO;
  transition command_ar_auto
    command_ar_auto_0 true = 1 -> commanded_ar_auto := true, command_cb_ar_status_AUTO;
    command_ar_auto_1 true = 1 -> commanded_ar_auto := true, command_ar_supy_control_status_AUTO;
  transition command_close_fail
    command_close_fail_0 commanded_closed = true -> cb_command_fail;
  transition close_on_command
    close_on_command_0 (state = open AND commanded_closed = true) -> state := closed, cb_state_closed, state_change_close;
  transition command_close
    command_close_0 true = 1 -> commanded_closed := true, command_cb_state_closed;
  transition command_open_fail
    command_open_fail_0 commanded_open = true -> cb_command_fail;
  transition open_on_command
    open_on_command_0 (state = closed AND commanded_open = true) -> state := open, cb_state_open, state_change_open;
  transition command_open
    command_open_0 true = 1 -> commanded_open := true, command_cb_state_open;
  transition reopen
    reopen_0 (state = closed AND auto_reopen_wait = true) -> state := open, auto_reopen_wait := false, lockout := true, cb_state_open, state_change_open;
  transition reclose
    reclose_0 ((state = open AND auto_reclose_wait = true) AND lockout = false) -> state := closed, auto_reclose_wait := false, auto_reopen_wait := true, cb_state_closed, state_change_close;
  transition close_unexplained
    close_unexplained_0 state = open -> state := closed, cb_state_closed, state_change_close, count_as_fault;
  transition close1
    close1_0 state = open -> state := closed, cb_state_closed, state_change_close;
  triggeredby close;
  transition trip_unexplained
    trip_unexplained_0 (state = closed AND ar_status = auto) -> state := open, auto_reclose_wait := true, cb_state_open, state_change_open, count_as_fault;
  transition simple_trip1
    simple_trip1_0 state = open -> state := open;
    simple_trip1_1 (state = closed AND ar_status = non_auto) -> state := open, cb_state_open;
    simple_trip1_2 (state = closed AND ar_status = auto) -> state := open, auto_reclose_wait := true, cb_state_open;
  triggeredby simple_trip;
  transition trip1
    trip1_0 (state = closed AND ar_status = non_auto) -> state := open, cb_state_open, state_change_open;
    trip1_1 (state = closed AND ar_status = auto) -> state := open, auto_reclose_wait := true, cb_state_open, state_change_open;
  triggeredby trip;
  transition open_unexplained
    open_unexplained_0 state = closed -> state := open, cb_state_open, state_change_open, count_as_fault;
  transition open1
    open1_0 state = closed -> state := open, cb_state_open, state_change_open;
  triggeredby open;
}
component Breaker_X65_X66 = {
  var auto_reopen_wait : [0..1];
  var auto_reclose_wait : [0..1];
  var commanded_ar_non_auto : [0..1];
  var commanded_ar_auto : [0..1];
  var commanded_closed : [0..1];
  var commanded_open : [0..1];
  var lockout : [0..1];
  var ar_status : {auto,non_auto};
  var state : {open,closed};
  event state_change_close;
  event state_change_open;
  event breaker_is_closed;
  event count_as_fault;
  event check_isolator_open;
  event close;
  event simple_trip;
  event trip;
  event open;
  event IMPOSSIBLE;
  event command_cb_ar_status_NON_AUTO;
  event command_cb_ar_status_AUTO;
  event command_ar_supy_control_status_NON_AUTO;
  event command_ar_supy_control_status_AUTO;
  event command_cb_state_closed;
  event command_cb_state_open;
  event cb_ar_status_NON_AUTO;
  event cb_ar_status_AUTO;
  event ar_supy_control_status_NON_AUTO;
  event ar_supy_control_status_AUTO;
  event cb_command_fail;
  event cb_state_not_responding;
  event cb_state_abnormal;
  event cb_state_closed;
  event cb_state_open;
  transition breaker_is_closed_transition
    breaker_is_closed_transition_0 state = closed -> breaker_is_closed;
  transition check_isolator_open_transition
    check_isolator_open_transition_0 true = 1 -> IMPOSSIBLE;
    check_isolator_open_transition_1 state = open -> state := open;
  triggeredby check_isolator_open;
  transition auto_reopen_wait_timeout
    auto_reopen_wait_timeout_0 true = 1 -> auto_reopen_wait := false;
  triggeredby [0.0..1.0] auto_reopen_wait = true;
  transition auto_reclose_wait_timeout
    auto_reclose_wait_timeout_0 true = 1 -> auto_reclose_wait := false;
  triggeredby [0.0..45.0] auto_reclose_wait = true;
  transition commanded_ar_non_auto_timeout
    commanded_ar_non_auto_timeout_0 true = 1 -> commanded_ar_non_auto := false;
  triggeredby [0.0..45.0] commanded_ar_non_auto = true;
  transition commanded_ar_auto_timeout
    commanded_ar_auto_timeout_0 true = 1 -> commanded_ar_auto := false;
  triggeredby [0.0..45.0] commanded_ar_auto = true;
  transition commanded_closed_timeout
    commanded_closed_timeout_0 true = 1 -> commanded_closed := false;
  triggeredby [0.0..45.0] commanded_closed = true;
  transition commanded_open_timeout
    commanded_open_timeout_0 true = 1 -> commanded_open := false;
  triggeredby [0.0..45.0] commanded_open = true;
  transition not_responding
    not_responding_0 true = 1 -> cb_state_not_responding, count_as_fault;
  transition abnormal
    abnormal_0 true = 1 -> cb_state_abnormal, count_as_fault;
  transition ar_status_non_auto_unexplained
    ar_status_non_auto_unexplained_0 true = 1 -> ar_status := non_auto, cb_ar_status_NON_AUTO, count_as_fault;
    ar_status_non_auto_unexplained_1 true = 1 -> ar_status := non_auto, ar_supy_control_status_NON_AUTO, count_as_fault;
  transition ar_status_auto_unexplained
    ar_status_auto_unexplained_0 true = 1 -> ar_status := auto, cb_ar_status_AUTO, count_as_fault;
    ar_status_auto_unexplained_1 true = 1 -> ar_status := auto, ar_supy_control_status_AUTO, count_as_fault;
  transition ar_status_non_auto
    ar_status_non_auto_0 commanded_ar_non_auto = true -> ar_status := non_auto, cb_ar_status_NON_AUTO;
    ar_status_non_auto_1 commanded_ar_non_auto = true -> ar_status := non_auto, ar_supy_control_status_NON_AUTO;
  transition ar_status_auto
    ar_status_auto_0 commanded_ar_auto = true -> ar_status := auto, cb_ar_status_AUTO;
    ar_status_auto_1 commanded_ar_auto = true -> ar_status := auto, ar_supy_control_status_AUTO;
  transition command_ar_non_auto
    command_ar_non_auto_0 true = 1 -> commanded_ar_non_auto := true, command_cb_ar_status_NON_AUTO;
    command_ar_non_auto_1 true = 1 -> commanded_ar_non_auto := true, command_ar_supy_control_status_NON_AUTO;
  transition command_ar_auto
    command_ar_auto_0 true = 1 -> commanded_ar_auto := true, command_cb_ar_status_AUTO;
    command_ar_auto_1 true = 1 -> commanded_ar_auto := true, command_ar_supy_control_status_AUTO;
  transition command_close_fail
    command_close_fail_0 commanded_closed = true -> cb_command_fail;
  transition close_on_command
    close_on_command_0 (state = open AND commanded_closed = true) -> state := closed, cb_state_closed, state_change_close;
  transition command_close
    command_close_0 true = 1 -> commanded_closed := true, command_cb_state_closed;
  transition command_open_fail
    command_open_fail_0 commanded_open = true -> cb_command_fail;
  transition open_on_command
    open_on_command_0 (state = closed AND commanded_open = true) -> state := open, cb_state_open, state_change_open;
  transition command_open
    command_open_0 true = 1 -> commanded_open := true, command_cb_state_open;
  transition reopen
    reopen_0 (state = closed AND auto_reopen_wait = true) -> state := open, auto_reopen_wait := false, lockout := true, cb_state_open, state_change_open;
  transition reclose
    reclose_0 ((state = open AND auto_reclose_wait = true) AND lockout = false) -> state := closed, auto_reclose_wait := false, auto_reopen_wait := true, cb_state_closed, state_change_close;
  transition close_unexplained
    close_unexplained_0 state = open -> state := closed, cb_state_closed, state_change_close, count_as_fault;
  transition close1
    close1_0 state = open -> state := closed, cb_state_closed, state_change_close;
  triggeredby close;
  transition trip_unexplained
    trip_unexplained_0 (state = closed AND ar_status = auto) -> state := open, auto_reclose_wait := true, cb_state_open, state_change_open, count_as_fault;
  transition simple_trip1
    simple_trip1_0 state = open -> state := open;
    simple_trip1_1 (state = closed AND ar_status = non_auto) -> state := open, cb_state_open;
    simple_trip1_2 (state = closed AND ar_status = auto) -> state := open, auto_reclose_wait := true, cb_state_open;
  triggeredby simple_trip;
  transition trip1
    trip1_0 (state = closed AND ar_status = non_auto) -> state := open, cb_state_open, state_change_open;
    trip1_1 (state = closed AND ar_status = auto) -> state := open, auto_reclose_wait := true, cb_state_open, state_change_open;
  triggeredby trip;
  transition open_unexplained
    open_unexplained_0 state = closed -> state := open, cb_state_open, state_change_open, count_as_fault;
  transition open1
    open1_0 state = closed -> state := open, cb_state_open, state_change_open;
  triggeredby open;
}
component Breaker_X67_X68 = {
  var auto_reopen_wait : [0..1];
  var auto_reclose_wait : [0..1];
  var commanded_ar_non_auto : [0..1];
  var commanded_ar_auto : [0..1];
  var commanded_closed : [0..1];
  var commanded_open : [0..1];
  var lockout : [0..1];
  var ar_status : {auto,non_auto};
  var state : {open,closed};
  event state_change_close;
  event state_change_open;
  event breaker_is_closed;
  event count_as_fault;
  event check_isolator_open;
  event close;
  event simple_trip;
  event trip;
  event open;
  event IMPOSSIBLE;
  event command_cb_ar_status_NON_AUTO;
  event command_cb_ar_status_AUTO;
  event command_ar_supy_control_status_NON_AUTO;
  event command_ar_supy_control_status_AUTO;
  event command_cb_state_closed;
  event command_cb_state_open;
  event cb_ar_status_NON_AUTO;
  event cb_ar_status_AUTO;
  event ar_supy_control_status_NON_AUTO;
  event ar_supy_control_status_AUTO;
  event cb_command_fail;
  event cb_state_not_responding;
  event cb_state_abnormal;
  event cb_state_closed;
  event cb_state_open;
  transition breaker_is_closed_transition
    breaker_is_closed_transition_0 state = closed -> breaker_is_closed;
  transition check_isolator_open_transition
    check_isolator_open_transition_0 true = 1 -> IMPOSSIBLE;
    check_isolator_open_transition_1 state = open -> state := open;
  triggeredby check_isolator_open;
  transition auto_reopen_wait_timeout
    auto_reopen_wait_timeout_0 true = 1 -> auto_reopen_wait := false;
  triggeredby [0.0..1.0] auto_reopen_wait = true;
  transition auto_reclose_wait_timeout
    auto_reclose_wait_timeout_0 true = 1 -> auto_reclose_wait := false;
  triggeredby [0.0..45.0] auto_reclose_wait = true;
  transition commanded_ar_non_auto_timeout
    commanded_ar_non_auto_timeout_0 true = 1 -> commanded_ar_non_auto := false;
  triggeredby [0.0..45.0] commanded_ar_non_auto = true;
  transition commanded_ar_auto_timeout
    commanded_ar_auto_timeout_0 true = 1 -> commanded_ar_auto := false;
  triggeredby [0.0..45.0] commanded_ar_auto = true;
  transition commanded_closed_timeout
    commanded_closed_timeout_0 true = 1 -> commanded_closed := false;
  triggeredby [0.0..45.0] commanded_closed = true;
  transition commanded_open_timeout
    commanded_open_timeout_0 true = 1 -> commanded_open := false;
  triggeredby [0.0..45.0] commanded_open = true;
  transition not_responding
    not_responding_0 true = 1 -> cb_state_not_responding, count_as_fault;
  transition abnormal
    abnormal_0 true = 1 -> cb_state_abnormal, count_as_fault;
  transition ar_status_non_auto_unexplained
    ar_status_non_auto_unexplained_0 true = 1 -> ar_status := non_auto, cb_ar_status_NON_AUTO, count_as_fault;
    ar_status_non_auto_unexplained_1 true = 1 -> ar_status := non_auto, ar_supy_control_status_NON_AUTO, count_as_fault;
  transition ar_status_auto_unexplained
    ar_status_auto_unexplained_0 true = 1 -> ar_status := auto, cb_ar_status_AUTO, count_as_fault;
    ar_status_auto_unexplained_1 true = 1 -> ar_status := auto, ar_supy_control_status_AUTO, count_as_fault;
  transition ar_status_non_auto
    ar_status_non_auto_0 commanded_ar_non_auto = true -> ar_status := non_auto, cb_ar_status_NON_AUTO;
    ar_status_non_auto_1 commanded_ar_non_auto = true -> ar_status := non_auto, ar_supy_control_status_NON_AUTO;
  transition ar_status_auto
    ar_status_auto_0 commanded_ar_auto = true -> ar_status := auto, cb_ar_status_AUTO;
    ar_status_auto_1 commanded_ar_auto = true -> ar_status := auto, ar_supy_control_status_AUTO;
  transition command_ar_non_auto
    command_ar_non_auto_0 true = 1 -> commanded_ar_non_auto := true, command_cb_ar_status_NON_AUTO;
    command_ar_non_auto_1 true = 1 -> commanded_ar_non_auto := true, command_ar_supy_control_status_NON_AUTO;
  transition command_ar_auto
    command_ar_auto_0 true = 1 -> commanded_ar_auto := true, command_cb_ar_status_AUTO;
    command_ar_auto_1 true = 1 -> commanded_ar_auto := true, command_ar_supy_control_status_AUTO;
  transition command_close_fail
    command_close_fail_0 commanded_closed = true -> cb_command_fail;
  transition close_on_command
    close_on_command_0 (state = open AND commanded_closed = true) -> state := closed, cb_state_closed, state_change_close;
  transition command_close
    command_close_0 true = 1 -> commanded_closed := true, command_cb_state_closed;
  transition command_open_fail
    command_open_fail_0 commanded_open = true -> cb_command_fail;
  transition open_on_command
    open_on_command_0 (state = closed AND commanded_open = true) -> state := open, cb_state_open, state_change_open;
  transition command_open
    command_open_0 true = 1 -> commanded_open := true, command_cb_state_open;
  transition reopen
    reopen_0 (state = closed AND auto_reopen_wait = true) -> state := open, auto_reopen_wait := false, lockout := true, cb_state_open, state_change_open;
  transition reclose
    reclose_0 ((state = open AND auto_reclose_wait = true) AND lockout = false) -> state := closed, auto_reclose_wait := false, auto_reopen_wait := true, cb_state_closed, state_change_close;
  transition close_unexplained
    close_unexplained_0 state = open -> state := closed, cb_state_closed, state_change_close, count_as_fault;
  transition close1
    close1_0 state = open -> state := closed, cb_state_closed, state_change_close;
  triggeredby close;
  transition trip_unexplained
    trip_unexplained_0 (state = closed AND ar_status = auto) -> state := open, auto_reclose_wait := true, cb_state_open, state_change_open, count_as_fault;
  transition simple_trip1
    simple_trip1_0 state = open -> state := open;
    simple_trip1_1 (state = closed AND ar_status = non_auto) -> state := open, cb_state_open;
    simple_trip1_2 (state = closed AND ar_status = auto) -> state := open, auto_reclose_wait := true, cb_state_open;
  triggeredby simple_trip;
  transition trip1
    trip1_0 (state = closed AND ar_status = non_auto) -> state := open, cb_state_open, state_change_open;
    trip1_1 (state = closed AND ar_status = auto) -> state := open, auto_reclose_wait := true, cb_state_open, state_change_open;
  triggeredby trip;
  transition open_unexplained
    open_unexplained_0 state = closed -> state := open, cb_state_open, state_change_open, count_as_fault;
  transition open1
    open1_0 state = closed -> state := open, cb_state_open, state_change_open;
  triggeredby open;
}
component Breaker_X69_X70 = {
  var auto_reopen_wait : [0..1];
  var auto_reclose_wait : [0..1];
  var commanded_ar_non_auto : [0..1];
  var commanded_ar_auto : [0..1];
  var commanded_closed : [0..1];
  var commanded_open : [0..1];
  var lockout : [0..1];
  var ar_status : {auto,non_auto};
  var state : {open,closed};
  event state_change_close;
  event state_change_open;
  event breaker_is_closed;
  event count_as_fault;
  event check_isolator_open;
  event close;
  event simple_trip;
  event trip;
  event open;
  event IMPOSSIBLE;
  event command_cb_ar_status_NON_AUTO;
  event command_cb_ar_status_AUTO;
  event command_ar_supy_control_status_NON_AUTO;
  event command_ar_supy_control_status_AUTO;
  event command_cb_state_closed;
  event command_cb_state_open;
  event cb_ar_status_NON_AUTO;
  event cb_ar_status_AUTO;
  event ar_supy_control_status_NON_AUTO;
  event ar_supy_control_status_AUTO;
  event cb_command_fail;
  event cb_state_not_responding;
  event cb_state_abnormal;
  event cb_state_closed;
  event cb_state_open;
  transition breaker_is_closed_transition
    breaker_is_closed_transition_0 state = closed -> breaker_is_closed;
  transition check_isolator_open_transition
    check_isolator_open_transition_0 true = 1 -> IMPOSSIBLE;
    check_isolator_open_transition_1 state = open -> state := open;
  triggeredby check_isolator_open;
  transition auto_reopen_wait_timeout
    auto_reopen_wait_timeout_0 true = 1 -> auto_reopen_wait := false;
  triggeredby [0.0..1.0] auto_reopen_wait = true;
  transition auto_reclose_wait_timeout
    auto_reclose_wait_timeout_0 true = 1 -> auto_reclose_wait := false;
  triggeredby [0.0..45.0] auto_reclose_wait = true;
  transition commanded_ar_non_auto_timeout
    commanded_ar_non_auto_timeout_0 true = 1 -> commanded_ar_non_auto := false;
  triggeredby [0.0..45.0] commanded_ar_non_auto = true;
  transition commanded_ar_auto_timeout
    commanded_ar_auto_timeout_0 true = 1 -> commanded_ar_auto := false;
  triggeredby [0.0..45.0] commanded_ar_auto = true;
  transition commanded_closed_timeout
    commanded_closed_timeout_0 true = 1 -> commanded_closed := false;
  triggeredby [0.0..45.0] commanded_closed = true;
  transition commanded_open_timeout
    commanded_open_timeout_0 true = 1 -> commanded_open := false;
  triggeredby [0.0..45.0] commanded_open = true;
  transition not_responding
    not_responding_0 true = 1 -> cb_state_not_responding, count_as_fault;
  transition abnormal
    abnormal_0 true = 1 -> cb_state_abnormal, count_as_fault;
  transition ar_status_non_auto_unexplained
    ar_status_non_auto_unexplained_0 true = 1 -> ar_status := non_auto, cb_ar_status_NON_AUTO, count_as_fault;
    ar_status_non_auto_unexplained_1 true = 1 -> ar_status := non_auto, ar_supy_control_status_NON_AUTO, count_as_fault;
  transition ar_status_auto_unexplained
    ar_status_auto_unexplained_0 true = 1 -> ar_status := auto, cb_ar_status_AUTO, count_as_fault;
    ar_status_auto_unexplained_1 true = 1 -> ar_status := auto, ar_supy_control_status_AUTO, count_as_fault;
  transition ar_status_non_auto
    ar_status_non_auto_0 commanded_ar_non_auto = true -> ar_status := non_auto, cb_ar_status_NON_AUTO;
    ar_status_non_auto_1 commanded_ar_non_auto = true -> ar_status := non_auto, ar_supy_control_status_NON_AUTO;
  transition ar_status_auto
    ar_status_auto_0 commanded_ar_auto = true -> ar_status := auto, cb_ar_status_AUTO;
    ar_status_auto_1 commanded_ar_auto = true -> ar_status := auto, ar_supy_control_status_AUTO;
  transition command_ar_non_auto
    command_ar_non_auto_0 true = 1 -> commanded_ar_non_auto := true, command_cb_ar_status_NON_AUTO;
    command_ar_non_auto_1 true = 1 -> commanded_ar_non_auto := true, command_ar_supy_control_status_NON_AUTO;
  transition command_ar_auto
    command_ar_auto_0 true = 1 -> commanded_ar_auto := true, command_cb_ar_status_AUTO;
    command_ar_auto_1 true = 1 -> commanded_ar_auto := true, command_ar_supy_control_status_AUTO;
  transition command_close_fail
    command_close_fail_0 commanded_closed = true -> cb_command_fail;
  transition close_on_command
    close_on_command_0 (state = open AND commanded_closed = true) -> state := closed, cb_state_closed, state_change_close;
  transition command_close
    command_close_0 true = 1 -> commanded_closed := true, command_cb_state_closed;
  transition command_open_fail
    command_open_fail_0 commanded_open = true -> cb_command_fail;
  transition open_on_command
    open_on_command_0 (state = closed AND commanded_open = true) -> state := open, cb_state_open, state_change_open;
  transition command_open
    command_open_0 true = 1 -> commanded_open := true, command_cb_state_open;
  transition reopen
    reopen_0 (state = closed AND auto_reopen_wait = true) -> state := open, auto_reopen_wait := false, lockout := true, cb_state_open, state_change_open;
  transition reclose
    reclose_0 ((state = open AND auto_reclose_wait = true) AND lockout = false) -> state := closed, auto_reclose_wait := false, auto_reopen_wait := true, cb_state_closed, state_change_close;
  transition close_unexplained
    close_unexplained_0 state = open -> state := closed, cb_state_closed, state_change_close, count_as_fault;
  transition close1
    close1_0 state = open -> state := closed, cb_state_closed, state_change_close;
  triggeredby close;
  transition trip_unexplained
    trip_unexplained_0 (state = closed AND ar_status = auto) -> state := open, auto_reclose_wait := true, cb_state_open, state_change_open, count_as_fault;
  transition simple_trip1
    simple_trip1_0 state = open -> state := open;
    simple_trip1_1 (state = closed AND ar_status = non_auto) -> state := open, cb_state_open;
    simple_trip1_2 (state = closed AND ar_status = auto) -> state := open, auto_reclose_wait := true, cb_state_open;
  triggeredby simple_trip;
  transition trip1
    trip1_0 (state = closed AND ar_status = non_auto) -> state := open, cb_state_open, state_change_open;
    trip1_1 (state = closed AND ar_status = auto) -> state := open, auto_reclose_wait := true, cb_state_open, state_change_open;
  triggeredby trip;
  transition open_unexplained
    open_unexplained_0 state = closed -> state := open, cb_state_open, state_change_open, count_as_fault;
  transition open1
    open1_0 state = closed -> state := open, cb_state_open, state_change_open;
  triggeredby open;
}
component Breaker_X71_X72 = {
  var auto_reopen_wait : [0..1];
  var auto_reclose_wait : [0..1];
  var commanded_ar_non_auto : [0..1];
  var commanded_ar_auto : [0..1];
  var commanded_closed : [0..1];
  var commanded_open : [0..1];
  var lockout : [0..1];
  var ar_status : {auto,non_auto};
  var state : {open,closed};
  event state_change_close;
  event state_change_open;
  event breaker_is_closed;
  event count_as_fault;
  event check_isolator_open;
  event close;
  event simple_trip;
  event trip;
  event open;
  event IMPOSSIBLE;
  event command_cb_ar_status_NON_AUTO;
  event command_cb_ar_status_AUTO;
  event command_ar_supy_control_status_NON_AUTO;
  event command_ar_supy_control_status_AUTO;
  event command_cb_state_closed;
  event command_cb_state_open;
  event cb_ar_status_NON_AUTO;
  event cb_ar_status_AUTO;
  event ar_supy_control_status_NON_AUTO;
  event ar_supy_control_status_AUTO;
  event cb_command_fail;
  event cb_state_not_responding;
  event cb_state_abnormal;
  event cb_state_closed;
  event cb_state_open;
  transition breaker_is_closed_transition
    breaker_is_closed_transition_0 state = closed -> breaker_is_closed;
  transition check_isolator_open_transition
    check_isolator_open_transition_0 true = 1 -> IMPOSSIBLE;
    check_isolator_open_transition_1 state = open -> state := open;
  triggeredby check_isolator_open;
  transition auto_reopen_wait_timeout
    auto_reopen_wait_timeout_0 true = 1 -> auto_reopen_wait := false;
  triggeredby [0.0..1.0] auto_reopen_wait = true;
  transition auto_reclose_wait_timeout
    auto_reclose_wait_timeout_0 true = 1 -> auto_reclose_wait := false;
  triggeredby [0.0..45.0] auto_reclose_wait = true;
  transition commanded_ar_non_auto_timeout
    commanded_ar_non_auto_timeout_0 true = 1 -> commanded_ar_non_auto := false;
  triggeredby [0.0..45.0] commanded_ar_non_auto = true;
  transition commanded_ar_auto_timeout
    commanded_ar_auto_timeout_0 true = 1 -> commanded_ar_auto := false;
  triggeredby [0.0..45.0] commanded_ar_auto = true;
  transition commanded_closed_timeout
    commanded_closed_timeout_0 true = 1 -> commanded_closed := false;
  triggeredby [0.0..45.0] commanded_closed = true;
  transition commanded_open_timeout
    commanded_open_timeout_0 true = 1 -> commanded_open := false;
  triggeredby [0.0..45.0] commanded_open = true;
  transition not_responding
    not_responding_0 true = 1 -> cb_state_not_responding, count_as_fault;
  transition abnormal
    abnormal_0 true = 1 -> cb_state_abnormal, count_as_fault;
  transition ar_status_non_auto_unexplained
    ar_status_non_auto_unexplained_0 true = 1 -> ar_status := non_auto, cb_ar_status_NON_AUTO, count_as_fault;
    ar_status_non_auto_unexplained_1 true = 1 -> ar_status := non_auto, ar_supy_control_status_NON_AUTO, count_as_fault;
  transition ar_status_auto_unexplained
    ar_status_auto_unexplained_0 true = 1 -> ar_status := auto, cb_ar_status_AUTO, count_as_fault;
    ar_status_auto_unexplained_1 true = 1 -> ar_status := auto, ar_supy_control_status_AUTO, count_as_fault;
  transition ar_status_non_auto
    ar_status_non_auto_0 commanded_ar_non_auto = true -> ar_status := non_auto, cb_ar_status_NON_AUTO;
    ar_status_non_auto_1 commanded_ar_non_auto = true -> ar_status := non_auto, ar_supy_control_status_NON_AUTO;
  transition ar_status_auto
    ar_status_auto_0 commanded_ar_auto = true -> ar_status := auto, cb_ar_status_AUTO;
    ar_status_auto_1 commanded_ar_auto = true -> ar_status := auto, ar_supy_control_status_AUTO;
  transition command_ar_non_auto
    command_ar_non_auto_0 true = 1 -> commanded_ar_non_auto := true, command_cb_ar_status_NON_AUTO;
    command_ar_non_auto_1 true = 1 -> commanded_ar_non_auto := true, command_ar_supy_control_status_NON_AUTO;
  transition command_ar_auto
    command_ar_auto_0 true = 1 -> commanded_ar_auto := true, command_cb_ar_status_AUTO;
    command_ar_auto_1 true = 1 -> commanded_ar_auto := true, command_ar_supy_control_status_AUTO;
  transition command_close_fail
    command_close_fail_0 commanded_closed = true -> cb_command_fail;
  transition close_on_command
    close_on_command_0 (state = open AND commanded_closed = true) -> state := closed, cb_state_closed, state_change_close;
  transition command_close
    command_close_0 true = 1 -> commanded_closed := true, command_cb_state_closed;
  transition command_open_fail
    command_open_fail_0 commanded_open = true -> cb_command_fail;
  transition open_on_command
    open_on_command_0 (state = closed AND commanded_open = true) -> state := open, cb_state_open, state_change_open;
  transition command_open
    command_open_0 true = 1 -> commanded_open := true, command_cb_state_open;
  transition reopen
    reopen_0 (state = closed AND auto_reopen_wait = true) -> state := open, auto_reopen_wait := false, lockout := true, cb_state_open, state_change_open;
  transition reclose
    reclose_0 ((state = open AND auto_reclose_wait = true) AND lockout = false) -> state := closed, auto_reclose_wait := false, auto_reopen_wait := true, cb_state_closed, state_change_close;
  transition close_unexplained
    close_unexplained_0 state = open -> state := closed, cb_state_closed, state_change_close, count_as_fault;
  transition close1
    close1_0 state = open -> state := closed, cb_state_closed, state_change_close;
  triggeredby close;
  transition trip_unexplained
    trip_unexplained_0 (state = closed AND ar_status = auto) -> state := open, auto_reclose_wait := true, cb_state_open, state_change_open, count_as_fault;
  transition simple_trip1
    simple_trip1_0 state = open -> state := open;
    simple_trip1_1 (state = closed AND ar_status = non_auto) -> state := open, cb_state_open;
    simple_trip1_2 (state = closed AND ar_status = auto) -> state := open, auto_reclose_wait := true, cb_state_open;
  triggeredby simple_trip;
  transition trip1
    trip1_0 (state = closed AND ar_status = non_auto) -> state := open, cb_state_open, state_change_open;
    trip1_1 (state = closed AND ar_status = auto) -> state := open, auto_reclose_wait := true, cb_state_open, state_change_open;
  triggeredby trip;
  transition open_unexplained
    open_unexplained_0 state = closed -> state := open, cb_state_open, state_change_open, count_as_fault;
  transition open1
    open1_0 state = closed -> state := open, cb_state_open, state_change_open;
  triggeredby open;
}
component Breaker_X73_X74 = {
  var auto_reopen_wait : [0..1];
  var auto_reclose_wait : [0..1];
  var commanded_ar_non_auto : [0..1];
  var commanded_ar_auto : [0..1];
  var commanded_closed : [0..1];
  var commanded_open : [0..1];
  var lockout : [0..1];
  var ar_status : {auto,non_auto};
  var state : {open,closed};
  event state_change_close;
  event state_change_open;
  event breaker_is_closed;
  event count_as_fault;
  event check_isolator_open;
  event close;
  event simple_trip;
  event trip;
  event open;
  event IMPOSSIBLE;
  event command_cb_ar_status_NON_AUTO;
  event command_cb_ar_status_AUTO;
  event command_ar_supy_control_status_NON_AUTO;
  event command_ar_supy_control_status_AUTO;
  event command_cb_state_closed;
  event command_cb_state_open;
  event cb_ar_status_NON_AUTO;
  event cb_ar_status_AUTO;
  event ar_supy_control_status_NON_AUTO;
  event ar_supy_control_status_AUTO;
  event cb_command_fail;
  event cb_state_not_responding;
  event cb_state_abnormal;
  event cb_state_closed;
  event cb_state_open;
  transition breaker_is_closed_transition
    breaker_is_closed_transition_0 state = closed -> breaker_is_closed;
  transition check_isolator_open_transition
    check_isolator_open_transition_0 true = 1 -> IMPOSSIBLE;
    check_isolator_open_transition_1 state = open -> state := open;
  triggeredby check_isolator_open;
  transition auto_reopen_wait_timeout
    auto_reopen_wait_timeout_0 true = 1 -> auto_reopen_wait := false;
  triggeredby [0.0..1.0] auto_reopen_wait = true;
  transition auto_reclose_wait_timeout
    auto_reclose_wait_timeout_0 true = 1 -> auto_reclose_wait := false;
  triggeredby [0.0..45.0] auto_reclose_wait = true;
  transition commanded_ar_non_auto_timeout
    commanded_ar_non_auto_timeout_0 true = 1 -> commanded_ar_non_auto := false;
  triggeredby [0.0..45.0] commanded_ar_non_auto = true;
  transition commanded_ar_auto_timeout
    commanded_ar_auto_timeout_0 true = 1 -> commanded_ar_auto := false;
  triggeredby [0.0..45.0] commanded_ar_auto = true;
  transition commanded_closed_timeout
    commanded_closed_timeout_0 true = 1 -> commanded_closed := false;
  triggeredby [0.0..45.0] commanded_closed = true;
  transition commanded_open_timeout
    commanded_open_timeout_0 true = 1 -> commanded_open := false;
  triggeredby [0.0..45.0] commanded_open = true;
  transition not_responding
    not_responding_0 true = 1 -> cb_state_not_responding, count_as_fault;
  transition abnormal
    abnormal_0 true = 1 -> cb_state_abnormal, count_as_fault;
  transition ar_status_non_auto_unexplained
    ar_status_non_auto_unexplained_0 true = 1 -> ar_status := non_auto, cb_ar_status_NON_AUTO, count_as_fault;
    ar_status_non_auto_unexplained_1 true = 1 -> ar_status := non_auto, ar_supy_control_status_NON_AUTO, count_as_fault;
  transition ar_status_auto_unexplained
    ar_status_auto_unexplained_0 true = 1 -> ar_status := auto, cb_ar_status_AUTO, count_as_fault;
    ar_status_auto_unexplained_1 true = 1 -> ar_status := auto, ar_supy_control_status_AUTO, count_as_fault;
  transition ar_status_non_auto
    ar_status_non_auto_0 commanded_ar_non_auto = true -> ar_status := non_auto, cb_ar_status_NON_AUTO;
    ar_status_non_auto_1 commanded_ar_non_auto = true -> ar_status := non_auto, ar_supy_control_status_NON_AUTO;
  transition ar_status_auto
    ar_status_auto_0 commanded_ar_auto = true -> ar_status := auto, cb_ar_status_AUTO;
    ar_status_auto_1 commanded_ar_auto = true -> ar_status := auto, ar_supy_control_status_AUTO;
  transition command_ar_non_auto
    command_ar_non_auto_0 true = 1 -> commanded_ar_non_auto := true, command_cb_ar_status_NON_AUTO;
    command_ar_non_auto_1 true = 1 -> commanded_ar_non_auto := true, command_ar_supy_control_status_NON_AUTO;
  transition command_ar_auto
    command_ar_auto_0 true = 1 -> commanded_ar_auto := true, command_cb_ar_status_AUTO;
    command_ar_auto_1 true = 1 -> commanded_ar_auto := true, command_ar_supy_control_status_AUTO;
  transition command_close_fail
    command_close_fail_0 commanded_closed = true -> cb_command_fail;
  transition close_on_command
    close_on_command_0 (state = open AND commanded_closed = true) -> state := closed, cb_state_closed, state_change_close;
  transition command_close
    command_close_0 true = 1 -> commanded_closed := true, command_cb_state_closed;
  transition command_open_fail
    command_open_fail_0 commanded_open = true -> cb_command_fail;
  transition open_on_command
    open_on_command_0 (state = closed AND commanded_open = true) -> state := open, cb_state_open, state_change_open;
  transition command_open
    command_open_0 true = 1 -> commanded_open := true, command_cb_state_open;
  transition reopen
    reopen_0 (state = closed AND auto_reopen_wait = true) -> state := open, auto_reopen_wait := false, lockout := true, cb_state_open, state_change_open;
  transition reclose
    reclose_0 ((state = open AND auto_reclose_wait = true) AND lockout = false) -> state := closed, auto_reclose_wait := false, auto_reopen_wait := true, cb_state_closed, state_change_close;
  transition close_unexplained
    close_unexplained_0 state = open -> state := closed, cb_state_closed, state_change_close, count_as_fault;
  transition close1
    close1_0 state = open -> state := closed, cb_state_closed, state_change_close;
  triggeredby close;
  transition trip_unexplained
    trip_unexplained_0 (state = closed AND ar_status = auto) -> state := open, auto_reclose_wait := true, cb_state_open, state_change_open, count_as_fault;
  transition simple_trip1
    simple_trip1_0 state = open -> state := open;
    simple_trip1_1 (state = closed AND ar_status = non_auto) -> state := open, cb_state_open;
    simple_trip1_2 (state = closed AND ar_status = auto) -> state := open, auto_reclose_wait := true, cb_state_open;
  triggeredby simple_trip;
  transition trip1
    trip1_0 (state = closed AND ar_status = non_auto) -> state := open, cb_state_open, state_change_open;
    trip1_1 (state = closed AND ar_status = auto) -> state := open, auto_reclose_wait := true, cb_state_open, state_change_open;
  triggeredby trip;
  transition open_unexplained
    open_unexplained_0 state = closed -> state := open, cb_state_open, state_change_open, count_as_fault;
  transition open1
    open1_0 state = closed -> state := open, cb_state_open, state_change_open;
  triggeredby open;
}
component Breaker_X75_X76 = {
  var auto_reopen_wait : [0..1];
  var auto_reclose_wait : [0..1];
  var commanded_ar_non_auto : [0..1];
  var commanded_ar_auto : [0..1];
  var commanded_closed : [0..1];
  var commanded_open : [0..1];
  var lockout : [0..1];
  var ar_status : {auto,non_auto};
  var state : {open,closed};
  event state_change_close;
  event state_change_open;
  event breaker_is_closed;
  event count_as_fault;
  event check_isolator_open;
  event close;
  event simple_trip;
  event trip;
  event open;
  event IMPOSSIBLE;
  event command_cb_ar_status_NON_AUTO;
  event command_cb_ar_status_AUTO;
  event command_ar_supy_control_status_NON_AUTO;
  event command_ar_supy_control_status_AUTO;
  event command_cb_state_closed;
  event command_cb_state_open;
  event cb_ar_status_NON_AUTO;
  event cb_ar_status_AUTO;
  event ar_supy_control_status_NON_AUTO;
  event ar_supy_control_status_AUTO;
  event cb_command_fail;
  event cb_state_not_responding;
  event cb_state_abnormal;
  event cb_state_closed;
  event cb_state_open;
  transition breaker_is_closed_transition
    breaker_is_closed_transition_0 state = closed -> breaker_is_closed;
  transition check_isolator_open_transition
    check_isolator_open_transition_0 true = 1 -> IMPOSSIBLE;
    check_isolator_open_transition_1 state = open -> state := open;
  triggeredby check_isolator_open;
  transition auto_reopen_wait_timeout
    auto_reopen_wait_timeout_0 true = 1 -> auto_reopen_wait := false;
  triggeredby [0.0..1.0] auto_reopen_wait = true;
  transition auto_reclose_wait_timeout
    auto_reclose_wait_timeout_0 true = 1 -> auto_reclose_wait := false;
  triggeredby [0.0..45.0] auto_reclose_wait = true;
  transition commanded_ar_non_auto_timeout
    commanded_ar_non_auto_timeout_0 true = 1 -> commanded_ar_non_auto := false;
  triggeredby [0.0..45.0] commanded_ar_non_auto = true;
  transition commanded_ar_auto_timeout
    commanded_ar_auto_timeout_0 true = 1 -> commanded_ar_auto := false;
  triggeredby [0.0..45.0] commanded_ar_auto = true;
  transition commanded_closed_timeout
    commanded_closed_timeout_0 true = 1 -> commanded_closed := false;
  triggeredby [0.0..45.0] commanded_closed = true;
  transition commanded_open_timeout
    commanded_open_timeout_0 true = 1 -> commanded_open := false;
  triggeredby [0.0..45.0] commanded_open = true;
  transition not_responding
    not_responding_0 true = 1 -> cb_state_not_responding, count_as_fault;
  transition abnormal
    abnormal_0 true = 1 -> cb_state_abnormal, count_as_fault;
  transition ar_status_non_auto_unexplained
    ar_status_non_auto_unexplained_0 true = 1 -> ar_status := non_auto, cb_ar_status_NON_AUTO, count_as_fault;
    ar_status_non_auto_unexplained_1 true = 1 -> ar_status := non_auto, ar_supy_control_status_NON_AUTO, count_as_fault;
  transition ar_status_auto_unexplained
    ar_status_auto_unexplained_0 true = 1 -> ar_status := auto, cb_ar_status_AUTO, count_as_fault;
    ar_status_auto_unexplained_1 true = 1 -> ar_status := auto, ar_supy_control_status_AUTO, count_as_fault;
  transition ar_status_non_auto
    ar_status_non_auto_0 commanded_ar_non_auto = true -> ar_status := non_auto, cb_ar_status_NON_AUTO;
    ar_status_non_auto_1 commanded_ar_non_auto = true -> ar_status := non_auto, ar_supy_control_status_NON_AUTO;
  transition ar_status_auto
    ar_status_auto_0 commanded_ar_auto = true -> ar_status := auto, cb_ar_status_AUTO;
    ar_status_auto_1 commanded_ar_auto = true -> ar_status := auto, ar_supy_control_status_AUTO;
  transition command_ar_non_auto
    command_ar_non_auto_0 true = 1 -> commanded_ar_non_auto := true, command_cb_ar_status_NON_AUTO;
    command_ar_non_auto_1 true = 1 -> commanded_ar_non_auto := true, command_ar_supy_control_status_NON_AUTO;
  transition command_ar_auto
    command_ar_auto_0 true = 1 -> commanded_ar_auto := true, command_cb_ar_status_AUTO;
    command_ar_auto_1 true = 1 -> commanded_ar_auto := true, command_ar_supy_control_status_AUTO;
  transition command_close_fail
    command_close_fail_0 commanded_closed = true -> cb_command_fail;
  transition close_on_command
    close_on_command_0 (state = open AND commanded_closed = true) -> state := closed, cb_state_closed, state_change_close;
  transition command_close
    command_close_0 true = 1 -> commanded_closed := true, command_cb_state_closed;
  transition command_open_fail
    command_open_fail_0 commanded_open = true -> cb_command_fail;
  transition open_on_command
    open_on_command_0 (state = closed AND commanded_open = true) -> state := open, cb_state_open, state_change_open;
  transition command_open
    command_open_0 true = 1 -> commanded_open := true, command_cb_state_open;
  transition reopen
    reopen_0 (state = closed AND auto_reopen_wait = true) -> state := open, auto_reopen_wait := false, lockout := true, cb_state_open, state_change_open;
  transition reclose
    reclose_0 ((state = open AND auto_reclose_wait = true) AND lockout = false) -> state := closed, auto_reclose_wait := false, auto_reopen_wait := true, cb_state_closed, state_change_close;
  transition close_unexplained
    close_unexplained_0 state = open -> state := closed, cb_state_closed, state_change_close, count_as_fault;
  transition close1
    close1_0 state = open -> state := closed, cb_state_closed, state_change_close;
  triggeredby close;
  transition trip_unexplained
    trip_unexplained_0 (state = closed AND ar_status = auto) -> state := open, auto_reclose_wait := true, cb_state_open, state_change_open, count_as_fault;
  transition simple_trip1
    simple_trip1_0 state = open -> state := open;
    simple_trip1_1 (state = closed AND ar_status = non_auto) -> state := open, cb_state_open;
    simple_trip1_2 (state = closed AND ar_status = auto) -> state := open, auto_reclose_wait := true, cb_state_open;
  triggeredby simple_trip;
  transition trip1
    trip1_0 (state = closed AND ar_status = non_auto) -> state := open, cb_state_open, state_change_open;
    trip1_1 (state = closed AND ar_status = auto) -> state := open, auto_reclose_wait := true, cb_state_open, state_change_open;
  triggeredby trip;
  transition open_unexplained
    open_unexplained_0 state = closed -> state := open, cb_state_open, state_change_open, count_as_fault;
  transition open1
    open1_0 state = closed -> state := open, cb_state_open, state_change_open;
  triggeredby open;
}
component Bus_X119 = {
  var mvar : {zero,high,low,normal};
  var mw : {zero,high,low,normal};
  var voltage : {zero,high,low,normal};
  var iso_state_changed : [0..1];
  var isolated : [0..1];
  event check_generators_off;
  event check_switched_in;
  event check_switched_out;
  event count_as_fault;
  event set_isolated_false;
  event set_isolated_true;
  event mvar_zero;
  event mvar_normal;
  event mvar_high;
  event mvar_low;
  event mw_zero;
  event mw_normal;
  event mw_high;
  event mw_low;
  event voltage_zero;
  event voltage_normal;
  event voltage_high;
  event voltage_low;
  event entered_zero_zone_MVAR;
  event limit_MVAR_High;
  event limit_MVAR_High_5;
  event limit_MVAR_High_4;
  event limit_MVAR_High_3;
  event limit_MVAR_High_2;
  event limit_MVAR_High_1;
  event limit_MVAR_Low;
  event limit_MVAR_Low_5;
  event limit_MVAR_Low_4;
  event limit_MVAR_Low_3;
  event limit_MVAR_Low_2;
  event limit_MVAR_Low_1;
  event limit_MVAR_Normal;
  event entered_zero_zone_MW;
  event limit_MW_High;
  event limit_MW_High_5;
  event limit_MW_High_4;
  event limit_MW_High_3;
  event limit_MW_High_2;
  event limit_MW_High_1;
  event limit_MW_Low;
  event limit_MW_Low_5;
  event limit_MW_Low_4;
  event limit_MW_Low_3;
  event limit_MW_Low_2;
  event limit_MW_Low_1;
  event limit_MW_Normal;
  event entered_zero_zone_KV;
  event limit_KV_High;
  event limit_KV_High_5;
  event limit_KV_High_4;
  event limit_KV_High_3;
  event limit_KV_High_2;
  event limit_KV_High_1;
  event limit_KV_Low;
  event limit_KV_Low_5;
  event limit_KV_Low_4;
  event limit_KV_Low_3;
  event limit_KV_Low_2;
  event limit_KV_Low_1;
  event limit_KV_Normal;
  transition mvar_goes_to_zero
    mvar_goes_to_zero_0 true = 1 -> mvar := zero, entered_zero_zone_MVAR;
  triggeredby mvar_zero;
  transition mvar_goes_normal
    mvar_goes_normal_0 true = 1 -> mvar := normal, limit_MVAR_Normal;
  triggeredby mvar_normal;
  transition mvar_goes_high
    mvar_goes_high_0 true = 1 -> mvar := high, limit_MVAR_High;
    mvar_goes_high_1 true = 1 -> mvar := high, limit_MVAR_High_5;
    mvar_goes_high_2 true = 1 -> mvar := high, limit_MVAR_High_4;
    mvar_goes_high_3 true = 1 -> mvar := high, limit_MVAR_High_3;
    mvar_goes_high_4 true = 1 -> mvar := high, limit_MVAR_High_2;
    mvar_goes_high_5 true = 1 -> mvar := high, limit_MVAR_High_1;
  triggeredby mvar_high;
  transition mvar_goes_low
    mvar_goes_low_0 true = 1 -> mvar := low, limit_MVAR_Low;
    mvar_goes_low_1 true = 1 -> mvar := low, limit_MVAR_Low_5;
    mvar_goes_low_2 true = 1 -> mvar := low, limit_MVAR_Low_4;
    mvar_goes_low_3 true = 1 -> mvar := low, limit_MVAR_Low_3;
    mvar_goes_low_4 true = 1 -> mvar := low, limit_MVAR_Low_2;
    mvar_goes_low_5 true = 1 -> mvar := low, limit_MVAR_Low_1;
  triggeredby mvar_low;
  transition mvar_goes_to_zero_unexplained
    mvar_goes_to_zero_unexplained_0 true = 1 -> mvar := zero, entered_zero_zone_MVAR, count_as_fault;
  transition mvar_goes_normal_unexplained
    mvar_goes_normal_unexplained_0 true = 1 -> mvar := normal, limit_MVAR_Normal, count_as_fault;
  transition mvar_goes_high_unexplained
    mvar_goes_high_unexplained_0 true = 1 -> mvar := high, limit_MVAR_High, count_as_fault;
    mvar_goes_high_unexplained_1 true = 1 -> mvar := high, limit_MVAR_High_5, count_as_fault;
    mvar_goes_high_unexplained_2 true = 1 -> mvar := high, limit_MVAR_High_4, count_as_fault;
    mvar_goes_high_unexplained_3 true = 1 -> mvar := high, limit_MVAR_High_3, count_as_fault;
    mvar_goes_high_unexplained_4 true = 1 -> mvar := high, limit_MVAR_High_2, count_as_fault;
    mvar_goes_high_unexplained_5 true = 1 -> mvar := high, limit_MVAR_High_1, count_as_fault;
  transition mvar_goes_low_unexplained
    mvar_goes_low_unexplained_0 true = 1 -> mvar := low, limit_MVAR_Low, count_as_fault;
    mvar_goes_low_unexplained_1 true = 1 -> mvar := low, limit_MVAR_Low_5, count_as_fault;
    mvar_goes_low_unexplained_2 true = 1 -> mvar := low, limit_MVAR_Low_4, count_as_fault;
    mvar_goes_low_unexplained_3 true = 1 -> mvar := low, limit_MVAR_Low_3, count_as_fault;
    mvar_goes_low_unexplained_4 true = 1 -> mvar := low, limit_MVAR_Low_2, count_as_fault;
    mvar_goes_low_unexplained_5 true = 1 -> mvar := low, limit_MVAR_Low_1, count_as_fault;
  transition mw_goes_normal_when_reenergised
    mw_goes_normal_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> mw := normal, limit_MW_Normal;
  transition mw_goes_high_when_reenergised
    mw_goes_high_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High;
    mw_goes_high_when_reenergised_1 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_5;
    mw_goes_high_when_reenergised_2 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_4;
    mw_goes_high_when_reenergised_3 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_3;
    mw_goes_high_when_reenergised_4 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_2;
    mw_goes_high_when_reenergised_5 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_1;
  transition mw_goes_low_when_reenergised
    mw_goes_low_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low;
    mw_goes_low_when_reenergised_1 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_5;
    mw_goes_low_when_reenergised_2 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_4;
    mw_goes_low_when_reenergised_3 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_3;
    mw_goes_low_when_reenergised_4 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_2;
    mw_goes_low_when_reenergised_5 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_1;
  transition mw_goes_to_zero_when_isolated
    mw_goes_to_zero_when_isolated_0 (isolated = true AND iso_state_changed = true) -> mw := zero, entered_zero_zone_MW, check_generators_off;
  transition mw_goes_low_when_isolated
    mw_goes_low_when_isolated_0 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low, check_generators_off;
    mw_goes_low_when_isolated_1 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_5, check_generators_off;
    mw_goes_low_when_isolated_2 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_4, check_generators_off;
    mw_goes_low_when_isolated_3 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_3, check_generators_off;
    mw_goes_low_when_isolated_4 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_2, check_generators_off;
    mw_goes_low_when_isolated_5 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_1, check_generators_off;
  transition mw_goes_to_zero
    mw_goes_to_zero_0 true = 1 -> mw := zero, entered_zero_zone_MW;
  triggeredby mw_zero;
  transition mw_goes_normal
    mw_goes_normal_0 true = 1 -> mw := normal, limit_MW_Normal;
  triggeredby mw_normal;
  transition mw_goes_high
    mw_goes_high_0 true = 1 -> mw := high, limit_MW_High;
    mw_goes_high_1 true = 1 -> mw := high, limit_MW_High_5;
    mw_goes_high_2 true = 1 -> mw := high, limit_MW_High_4;
    mw_goes_high_3 true = 1 -> mw := high, limit_MW_High_3;
    mw_goes_high_4 true = 1 -> mw := high, limit_MW_High_2;
    mw_goes_high_5 true = 1 -> mw := high, limit_MW_High_1;
  triggeredby mw_high;
  transition mw_goes_low
    mw_goes_low_0 true = 1 -> mw := low, limit_MW_Low;
    mw_goes_low_1 true = 1 -> mw := low, limit_MW_Low_5;
    mw_goes_low_2 true = 1 -> mw := low, limit_MW_Low_4;
    mw_goes_low_3 true = 1 -> mw := low, limit_MW_Low_3;
    mw_goes_low_4 true = 1 -> mw := low, limit_MW_Low_2;
    mw_goes_low_5 true = 1 -> mw := low, limit_MW_Low_1;
  triggeredby mw_low;
  transition mw_goes_to_zero_unexplained
    mw_goes_to_zero_unexplained_0 true = 1 -> mw := zero, entered_zero_zone_MW, count_as_fault;
  transition mw_goes_normal_unexplained
    mw_goes_normal_unexplained_0 true = 1 -> mw := normal, limit_MW_Normal, count_as_fault;
  transition mw_goes_high_unexplained
    mw_goes_high_unexplained_0 true = 1 -> mw := high, limit_MW_High, count_as_fault;
    mw_goes_high_unexplained_1 true = 1 -> mw := high, limit_MW_High_5, count_as_fault;
    mw_goes_high_unexplained_2 true = 1 -> mw := high, limit_MW_High_4, count_as_fault;
    mw_goes_high_unexplained_3 true = 1 -> mw := high, limit_MW_High_3, count_as_fault;
    mw_goes_high_unexplained_4 true = 1 -> mw := high, limit_MW_High_2, count_as_fault;
    mw_goes_high_unexplained_5 true = 1 -> mw := high, limit_MW_High_1, count_as_fault;
  transition mw_goes_low_unexplained
    mw_goes_low_unexplained_0 true = 1 -> mw := low, limit_MW_Low, count_as_fault;
    mw_goes_low_unexplained_1 true = 1 -> mw := low, limit_MW_Low_5, count_as_fault;
    mw_goes_low_unexplained_2 true = 1 -> mw := low, limit_MW_Low_4, count_as_fault;
    mw_goes_low_unexplained_3 true = 1 -> mw := low, limit_MW_Low_3, count_as_fault;
    mw_goes_low_unexplained_4 true = 1 -> mw := low, limit_MW_Low_2, count_as_fault;
    mw_goes_low_unexplained_5 true = 1 -> mw := low, limit_MW_Low_1, count_as_fault;
  transition voltage_goes_normal_when_caps_in
    voltage_goes_normal_when_caps_in_0 (voltage = low AND isolated = false) -> voltage := normal, limit_KV_Normal, check_switched_in;
  transition voltage_goes_normal_when_caps_out
    voltage_goes_normal_when_caps_out_0 (voltage = high AND isolated = false) -> voltage := normal, limit_KV_Normal, check_switched_out;
  transition voltage_goes_normal_when_reenergised
    voltage_goes_normal_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> voltage := normal, limit_KV_Normal;
  transition voltage_goes_high_when_reenergised
    voltage_goes_high_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High;
    voltage_goes_high_when_reenergised_1 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_5;
    voltage_goes_high_when_reenergised_2 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_4;
    voltage_goes_high_when_reenergised_3 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_3;
    voltage_goes_high_when_reenergised_4 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_2;
    voltage_goes_high_when_reenergised_5 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_1;
  transition voltage_goes_Low_when_reenergised
    voltage_goes_Low_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low;
    voltage_goes_Low_when_reenergised_1 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_5;
    voltage_goes_Low_when_reenergised_2 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_4;
    voltage_goes_Low_when_reenergised_3 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_3;
    voltage_goes_Low_when_reenergised_4 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_2;
    voltage_goes_Low_when_reenergised_5 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_1;
  transition voltage_goes_to_zero_when_isolated
    voltage_goes_to_zero_when_isolated_0 (isolated = true AND iso_state_changed = true) -> voltage := zero, entered_zero_zone_KV, check_generators_off;
  transition voltage_goes_low_when_isolated
    voltage_goes_low_when_isolated_0 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low, check_generators_off;
    voltage_goes_low_when_isolated_1 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_5, check_generators_off;
    voltage_goes_low_when_isolated_2 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_4, check_generators_off;
    voltage_goes_low_when_isolated_3 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_3, check_generators_off;
    voltage_goes_low_when_isolated_4 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_2, check_generators_off;
    voltage_goes_low_when_isolated_5 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_1, check_generators_off;
  transition voltage_goes_to_zero
    voltage_goes_to_zero_0 true = 1 -> voltage := zero, entered_zero_zone_KV;
  triggeredby voltage_zero;
  transition voltage_goes_normal
    voltage_goes_normal_0 true = 1 -> voltage := normal, limit_KV_Normal;
  triggeredby voltage_normal;
  transition voltage_goes_high
    voltage_goes_high_0 true = 1 -> voltage := high, limit_KV_High;
    voltage_goes_high_1 true = 1 -> voltage := high, limit_KV_High_5;
    voltage_goes_high_2 true = 1 -> voltage := high, limit_KV_High_4;
    voltage_goes_high_3 true = 1 -> voltage := high, limit_KV_High_3;
    voltage_goes_high_4 true = 1 -> voltage := high, limit_KV_High_2;
    voltage_goes_high_5 true = 1 -> voltage := high, limit_KV_High_1;
  triggeredby voltage_high;
  transition voltage_goes_low
    voltage_goes_low_0 true = 1 -> voltage := low, limit_KV_Low;
    voltage_goes_low_1 true = 1 -> voltage := low, limit_KV_Low_5;
    voltage_goes_low_2 true = 1 -> voltage := low, limit_KV_Low_4;
    voltage_goes_low_3 true = 1 -> voltage := low, limit_KV_Low_3;
    voltage_goes_low_4 true = 1 -> voltage := low, limit_KV_Low_2;
    voltage_goes_low_5 true = 1 -> voltage := low, limit_KV_Low_1;
  triggeredby voltage_low;
  transition voltage_goes_to_zero_unexplained
    voltage_goes_to_zero_unexplained_0 true = 1 -> voltage := zero, entered_zero_zone_KV, count_as_fault;
  transition voltage_goes_normal_unexplained
    voltage_goes_normal_unexplained_0 true = 1 -> voltage := normal, limit_KV_Normal, count_as_fault;
  transition voltage_goes_high_unexplained
    voltage_goes_high_unexplained_0 true = 1 -> voltage := high, limit_KV_High, count_as_fault;
    voltage_goes_high_unexplained_1 true = 1 -> voltage := high, limit_KV_High_5, count_as_fault;
    voltage_goes_high_unexplained_2 true = 1 -> voltage := high, limit_KV_High_4, count_as_fault;
    voltage_goes_high_unexplained_3 true = 1 -> voltage := high, limit_KV_High_3, count_as_fault;
    voltage_goes_high_unexplained_4 true = 1 -> voltage := high, limit_KV_High_2, count_as_fault;
    voltage_goes_high_unexplained_5 true = 1 -> voltage := high, limit_KV_High_1, count_as_fault;
  transition voltage_goes_low_unexplained
    voltage_goes_low_unexplained_0 true = 1 -> voltage := low, limit_KV_Low, count_as_fault;
    voltage_goes_low_unexplained_1 true = 1 -> voltage := low, limit_KV_Low_5, count_as_fault;
    voltage_goes_low_unexplained_2 true = 1 -> voltage := low, limit_KV_Low_4, count_as_fault;
    voltage_goes_low_unexplained_3 true = 1 -> voltage := low, limit_KV_Low_3, count_as_fault;
    voltage_goes_low_unexplained_4 true = 1 -> voltage := low, limit_KV_Low_2, count_as_fault;
    voltage_goes_low_unexplained_5 true = 1 -> voltage := low, limit_KV_Low_1, count_as_fault;
  transition iso_state_changed_timeout
    iso_state_changed_timeout_0 true = 1 -> iso_state_changed := false;
  triggeredby [0.0..15.0] iso_state_changed = true;
  transition become_not_isolated
    become_not_isolated_0 true = 1 -> isolated := false, iso_state_changed := true;
  triggeredby set_isolated_false;
  transition become_isolated
    become_isolated_0 true = 1 -> isolated := true, iso_state_changed := true;
  triggeredby set_isolated_true;
}
component Bus_X101 = {
  var mvar : {zero,high,low,normal};
  var mw : {zero,high,low,normal};
  var voltage : {zero,high,low,normal};
  var iso_state_changed : [0..1];
  var isolated : [0..1];
  event check_generators_off;
  event check_switched_in;
  event check_switched_out;
  event count_as_fault;
  event set_isolated_false;
  event set_isolated_true;
  event mvar_zero;
  event mvar_normal;
  event mvar_high;
  event mvar_low;
  event mw_zero;
  event mw_normal;
  event mw_high;
  event mw_low;
  event voltage_zero;
  event voltage_normal;
  event voltage_high;
  event voltage_low;
  event entered_zero_zone_MVAR;
  event limit_MVAR_High;
  event limit_MVAR_High_5;
  event limit_MVAR_High_4;
  event limit_MVAR_High_3;
  event limit_MVAR_High_2;
  event limit_MVAR_High_1;
  event limit_MVAR_Low;
  event limit_MVAR_Low_5;
  event limit_MVAR_Low_4;
  event limit_MVAR_Low_3;
  event limit_MVAR_Low_2;
  event limit_MVAR_Low_1;
  event limit_MVAR_Normal;
  event entered_zero_zone_MW;
  event limit_MW_High;
  event limit_MW_High_5;
  event limit_MW_High_4;
  event limit_MW_High_3;
  event limit_MW_High_2;
  event limit_MW_High_1;
  event limit_MW_Low;
  event limit_MW_Low_5;
  event limit_MW_Low_4;
  event limit_MW_Low_3;
  event limit_MW_Low_2;
  event limit_MW_Low_1;
  event limit_MW_Normal;
  event entered_zero_zone_KV;
  event limit_KV_High;
  event limit_KV_High_5;
  event limit_KV_High_4;
  event limit_KV_High_3;
  event limit_KV_High_2;
  event limit_KV_High_1;
  event limit_KV_Low;
  event limit_KV_Low_5;
  event limit_KV_Low_4;
  event limit_KV_Low_3;
  event limit_KV_Low_2;
  event limit_KV_Low_1;
  event limit_KV_Normal;
  transition mvar_goes_to_zero
    mvar_goes_to_zero_0 true = 1 -> mvar := zero, entered_zero_zone_MVAR;
  triggeredby mvar_zero;
  transition mvar_goes_normal
    mvar_goes_normal_0 true = 1 -> mvar := normal, limit_MVAR_Normal;
  triggeredby mvar_normal;
  transition mvar_goes_high
    mvar_goes_high_0 true = 1 -> mvar := high, limit_MVAR_High;
    mvar_goes_high_1 true = 1 -> mvar := high, limit_MVAR_High_5;
    mvar_goes_high_2 true = 1 -> mvar := high, limit_MVAR_High_4;
    mvar_goes_high_3 true = 1 -> mvar := high, limit_MVAR_High_3;
    mvar_goes_high_4 true = 1 -> mvar := high, limit_MVAR_High_2;
    mvar_goes_high_5 true = 1 -> mvar := high, limit_MVAR_High_1;
  triggeredby mvar_high;
  transition mvar_goes_low
    mvar_goes_low_0 true = 1 -> mvar := low, limit_MVAR_Low;
    mvar_goes_low_1 true = 1 -> mvar := low, limit_MVAR_Low_5;
    mvar_goes_low_2 true = 1 -> mvar := low, limit_MVAR_Low_4;
    mvar_goes_low_3 true = 1 -> mvar := low, limit_MVAR_Low_3;
    mvar_goes_low_4 true = 1 -> mvar := low, limit_MVAR_Low_2;
    mvar_goes_low_5 true = 1 -> mvar := low, limit_MVAR_Low_1;
  triggeredby mvar_low;
  transition mvar_goes_to_zero_unexplained
    mvar_goes_to_zero_unexplained_0 true = 1 -> mvar := zero, entered_zero_zone_MVAR, count_as_fault;
  transition mvar_goes_normal_unexplained
    mvar_goes_normal_unexplained_0 true = 1 -> mvar := normal, limit_MVAR_Normal, count_as_fault;
  transition mvar_goes_high_unexplained
    mvar_goes_high_unexplained_0 true = 1 -> mvar := high, limit_MVAR_High, count_as_fault;
    mvar_goes_high_unexplained_1 true = 1 -> mvar := high, limit_MVAR_High_5, count_as_fault;
    mvar_goes_high_unexplained_2 true = 1 -> mvar := high, limit_MVAR_High_4, count_as_fault;
    mvar_goes_high_unexplained_3 true = 1 -> mvar := high, limit_MVAR_High_3, count_as_fault;
    mvar_goes_high_unexplained_4 true = 1 -> mvar := high, limit_MVAR_High_2, count_as_fault;
    mvar_goes_high_unexplained_5 true = 1 -> mvar := high, limit_MVAR_High_1, count_as_fault;
  transition mvar_goes_low_unexplained
    mvar_goes_low_unexplained_0 true = 1 -> mvar := low, limit_MVAR_Low, count_as_fault;
    mvar_goes_low_unexplained_1 true = 1 -> mvar := low, limit_MVAR_Low_5, count_as_fault;
    mvar_goes_low_unexplained_2 true = 1 -> mvar := low, limit_MVAR_Low_4, count_as_fault;
    mvar_goes_low_unexplained_3 true = 1 -> mvar := low, limit_MVAR_Low_3, count_as_fault;
    mvar_goes_low_unexplained_4 true = 1 -> mvar := low, limit_MVAR_Low_2, count_as_fault;
    mvar_goes_low_unexplained_5 true = 1 -> mvar := low, limit_MVAR_Low_1, count_as_fault;
  transition mw_goes_normal_when_reenergised
    mw_goes_normal_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> mw := normal, limit_MW_Normal;
  transition mw_goes_high_when_reenergised
    mw_goes_high_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High;
    mw_goes_high_when_reenergised_1 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_5;
    mw_goes_high_when_reenergised_2 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_4;
    mw_goes_high_when_reenergised_3 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_3;
    mw_goes_high_when_reenergised_4 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_2;
    mw_goes_high_when_reenergised_5 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_1;
  transition mw_goes_low_when_reenergised
    mw_goes_low_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low;
    mw_goes_low_when_reenergised_1 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_5;
    mw_goes_low_when_reenergised_2 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_4;
    mw_goes_low_when_reenergised_3 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_3;
    mw_goes_low_when_reenergised_4 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_2;
    mw_goes_low_when_reenergised_5 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_1;
  transition mw_goes_to_zero_when_isolated
    mw_goes_to_zero_when_isolated_0 (isolated = true AND iso_state_changed = true) -> mw := zero, entered_zero_zone_MW, check_generators_off;
  transition mw_goes_low_when_isolated
    mw_goes_low_when_isolated_0 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low, check_generators_off;
    mw_goes_low_when_isolated_1 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_5, check_generators_off;
    mw_goes_low_when_isolated_2 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_4, check_generators_off;
    mw_goes_low_when_isolated_3 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_3, check_generators_off;
    mw_goes_low_when_isolated_4 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_2, check_generators_off;
    mw_goes_low_when_isolated_5 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_1, check_generators_off;
  transition mw_goes_to_zero
    mw_goes_to_zero_0 true = 1 -> mw := zero, entered_zero_zone_MW;
  triggeredby mw_zero;
  transition mw_goes_normal
    mw_goes_normal_0 true = 1 -> mw := normal, limit_MW_Normal;
  triggeredby mw_normal;
  transition mw_goes_high
    mw_goes_high_0 true = 1 -> mw := high, limit_MW_High;
    mw_goes_high_1 true = 1 -> mw := high, limit_MW_High_5;
    mw_goes_high_2 true = 1 -> mw := high, limit_MW_High_4;
    mw_goes_high_3 true = 1 -> mw := high, limit_MW_High_3;
    mw_goes_high_4 true = 1 -> mw := high, limit_MW_High_2;
    mw_goes_high_5 true = 1 -> mw := high, limit_MW_High_1;
  triggeredby mw_high;
  transition mw_goes_low
    mw_goes_low_0 true = 1 -> mw := low, limit_MW_Low;
    mw_goes_low_1 true = 1 -> mw := low, limit_MW_Low_5;
    mw_goes_low_2 true = 1 -> mw := low, limit_MW_Low_4;
    mw_goes_low_3 true = 1 -> mw := low, limit_MW_Low_3;
    mw_goes_low_4 true = 1 -> mw := low, limit_MW_Low_2;
    mw_goes_low_5 true = 1 -> mw := low, limit_MW_Low_1;
  triggeredby mw_low;
  transition mw_goes_to_zero_unexplained
    mw_goes_to_zero_unexplained_0 true = 1 -> mw := zero, entered_zero_zone_MW, count_as_fault;
  transition mw_goes_normal_unexplained
    mw_goes_normal_unexplained_0 true = 1 -> mw := normal, limit_MW_Normal, count_as_fault;
  transition mw_goes_high_unexplained
    mw_goes_high_unexplained_0 true = 1 -> mw := high, limit_MW_High, count_as_fault;
    mw_goes_high_unexplained_1 true = 1 -> mw := high, limit_MW_High_5, count_as_fault;
    mw_goes_high_unexplained_2 true = 1 -> mw := high, limit_MW_High_4, count_as_fault;
    mw_goes_high_unexplained_3 true = 1 -> mw := high, limit_MW_High_3, count_as_fault;
    mw_goes_high_unexplained_4 true = 1 -> mw := high, limit_MW_High_2, count_as_fault;
    mw_goes_high_unexplained_5 true = 1 -> mw := high, limit_MW_High_1, count_as_fault;
  transition mw_goes_low_unexplained
    mw_goes_low_unexplained_0 true = 1 -> mw := low, limit_MW_Low, count_as_fault;
    mw_goes_low_unexplained_1 true = 1 -> mw := low, limit_MW_Low_5, count_as_fault;
    mw_goes_low_unexplained_2 true = 1 -> mw := low, limit_MW_Low_4, count_as_fault;
    mw_goes_low_unexplained_3 true = 1 -> mw := low, limit_MW_Low_3, count_as_fault;
    mw_goes_low_unexplained_4 true = 1 -> mw := low, limit_MW_Low_2, count_as_fault;
    mw_goes_low_unexplained_5 true = 1 -> mw := low, limit_MW_Low_1, count_as_fault;
  transition voltage_goes_normal_when_caps_in
    voltage_goes_normal_when_caps_in_0 (voltage = low AND isolated = false) -> voltage := normal, limit_KV_Normal, check_switched_in;
  transition voltage_goes_normal_when_caps_out
    voltage_goes_normal_when_caps_out_0 (voltage = high AND isolated = false) -> voltage := normal, limit_KV_Normal, check_switched_out;
  transition voltage_goes_normal_when_reenergised
    voltage_goes_normal_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> voltage := normal, limit_KV_Normal;
  transition voltage_goes_high_when_reenergised
    voltage_goes_high_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High;
    voltage_goes_high_when_reenergised_1 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_5;
    voltage_goes_high_when_reenergised_2 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_4;
    voltage_goes_high_when_reenergised_3 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_3;
    voltage_goes_high_when_reenergised_4 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_2;
    voltage_goes_high_when_reenergised_5 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_1;
  transition voltage_goes_Low_when_reenergised
    voltage_goes_Low_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low;
    voltage_goes_Low_when_reenergised_1 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_5;
    voltage_goes_Low_when_reenergised_2 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_4;
    voltage_goes_Low_when_reenergised_3 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_3;
    voltage_goes_Low_when_reenergised_4 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_2;
    voltage_goes_Low_when_reenergised_5 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_1;
  transition voltage_goes_to_zero_when_isolated
    voltage_goes_to_zero_when_isolated_0 (isolated = true AND iso_state_changed = true) -> voltage := zero, entered_zero_zone_KV, check_generators_off;
  transition voltage_goes_low_when_isolated
    voltage_goes_low_when_isolated_0 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low, check_generators_off;
    voltage_goes_low_when_isolated_1 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_5, check_generators_off;
    voltage_goes_low_when_isolated_2 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_4, check_generators_off;
    voltage_goes_low_when_isolated_3 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_3, check_generators_off;
    voltage_goes_low_when_isolated_4 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_2, check_generators_off;
    voltage_goes_low_when_isolated_5 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_1, check_generators_off;
  transition voltage_goes_to_zero
    voltage_goes_to_zero_0 true = 1 -> voltage := zero, entered_zero_zone_KV;
  triggeredby voltage_zero;
  transition voltage_goes_normal
    voltage_goes_normal_0 true = 1 -> voltage := normal, limit_KV_Normal;
  triggeredby voltage_normal;
  transition voltage_goes_high
    voltage_goes_high_0 true = 1 -> voltage := high, limit_KV_High;
    voltage_goes_high_1 true = 1 -> voltage := high, limit_KV_High_5;
    voltage_goes_high_2 true = 1 -> voltage := high, limit_KV_High_4;
    voltage_goes_high_3 true = 1 -> voltage := high, limit_KV_High_3;
    voltage_goes_high_4 true = 1 -> voltage := high, limit_KV_High_2;
    voltage_goes_high_5 true = 1 -> voltage := high, limit_KV_High_1;
  triggeredby voltage_high;
  transition voltage_goes_low
    voltage_goes_low_0 true = 1 -> voltage := low, limit_KV_Low;
    voltage_goes_low_1 true = 1 -> voltage := low, limit_KV_Low_5;
    voltage_goes_low_2 true = 1 -> voltage := low, limit_KV_Low_4;
    voltage_goes_low_3 true = 1 -> voltage := low, limit_KV_Low_3;
    voltage_goes_low_4 true = 1 -> voltage := low, limit_KV_Low_2;
    voltage_goes_low_5 true = 1 -> voltage := low, limit_KV_Low_1;
  triggeredby voltage_low;
  transition voltage_goes_to_zero_unexplained
    voltage_goes_to_zero_unexplained_0 true = 1 -> voltage := zero, entered_zero_zone_KV, count_as_fault;
  transition voltage_goes_normal_unexplained
    voltage_goes_normal_unexplained_0 true = 1 -> voltage := normal, limit_KV_Normal, count_as_fault;
  transition voltage_goes_high_unexplained
    voltage_goes_high_unexplained_0 true = 1 -> voltage := high, limit_KV_High, count_as_fault;
    voltage_goes_high_unexplained_1 true = 1 -> voltage := high, limit_KV_High_5, count_as_fault;
    voltage_goes_high_unexplained_2 true = 1 -> voltage := high, limit_KV_High_4, count_as_fault;
    voltage_goes_high_unexplained_3 true = 1 -> voltage := high, limit_KV_High_3, count_as_fault;
    voltage_goes_high_unexplained_4 true = 1 -> voltage := high, limit_KV_High_2, count_as_fault;
    voltage_goes_high_unexplained_5 true = 1 -> voltage := high, limit_KV_High_1, count_as_fault;
  transition voltage_goes_low_unexplained
    voltage_goes_low_unexplained_0 true = 1 -> voltage := low, limit_KV_Low, count_as_fault;
    voltage_goes_low_unexplained_1 true = 1 -> voltage := low, limit_KV_Low_5, count_as_fault;
    voltage_goes_low_unexplained_2 true = 1 -> voltage := low, limit_KV_Low_4, count_as_fault;
    voltage_goes_low_unexplained_3 true = 1 -> voltage := low, limit_KV_Low_3, count_as_fault;
    voltage_goes_low_unexplained_4 true = 1 -> voltage := low, limit_KV_Low_2, count_as_fault;
    voltage_goes_low_unexplained_5 true = 1 -> voltage := low, limit_KV_Low_1, count_as_fault;
  transition iso_state_changed_timeout
    iso_state_changed_timeout_0 true = 1 -> iso_state_changed := false;
  triggeredby [0.0..15.0] iso_state_changed = true;
  transition become_not_isolated
    become_not_isolated_0 true = 1 -> isolated := false, iso_state_changed := true;
  triggeredby set_isolated_false;
  transition become_isolated
    become_isolated_0 true = 1 -> isolated := true, iso_state_changed := true;
  triggeredby set_isolated_true;
}
component Bus_X108 = {
  var mvar : {zero,high,low,normal};
  var mw : {zero,high,low,normal};
  var voltage : {zero,high,low,normal};
  var iso_state_changed : [0..1];
  var isolated : [0..1];
  event check_generators_off;
  event check_switched_in;
  event check_switched_out;
  event count_as_fault;
  event set_isolated_false;
  event set_isolated_true;
  event mvar_zero;
  event mvar_normal;
  event mvar_high;
  event mvar_low;
  event mw_zero;
  event mw_normal;
  event mw_high;
  event mw_low;
  event voltage_zero;
  event voltage_normal;
  event voltage_high;
  event voltage_low;
  event entered_zero_zone_MVAR;
  event limit_MVAR_High;
  event limit_MVAR_High_5;
  event limit_MVAR_High_4;
  event limit_MVAR_High_3;
  event limit_MVAR_High_2;
  event limit_MVAR_High_1;
  event limit_MVAR_Low;
  event limit_MVAR_Low_5;
  event limit_MVAR_Low_4;
  event limit_MVAR_Low_3;
  event limit_MVAR_Low_2;
  event limit_MVAR_Low_1;
  event limit_MVAR_Normal;
  event entered_zero_zone_MW;
  event limit_MW_High;
  event limit_MW_High_5;
  event limit_MW_High_4;
  event limit_MW_High_3;
  event limit_MW_High_2;
  event limit_MW_High_1;
  event limit_MW_Low;
  event limit_MW_Low_5;
  event limit_MW_Low_4;
  event limit_MW_Low_3;
  event limit_MW_Low_2;
  event limit_MW_Low_1;
  event limit_MW_Normal;
  event entered_zero_zone_KV;
  event limit_KV_High;
  event limit_KV_High_5;
  event limit_KV_High_4;
  event limit_KV_High_3;
  event limit_KV_High_2;
  event limit_KV_High_1;
  event limit_KV_Low;
  event limit_KV_Low_5;
  event limit_KV_Low_4;
  event limit_KV_Low_3;
  event limit_KV_Low_2;
  event limit_KV_Low_1;
  event limit_KV_Normal;
  transition mvar_goes_to_zero
    mvar_goes_to_zero_0 true = 1 -> mvar := zero, entered_zero_zone_MVAR;
  triggeredby mvar_zero;
  transition mvar_goes_normal
    mvar_goes_normal_0 true = 1 -> mvar := normal, limit_MVAR_Normal;
  triggeredby mvar_normal;
  transition mvar_goes_high
    mvar_goes_high_0 true = 1 -> mvar := high, limit_MVAR_High;
    mvar_goes_high_1 true = 1 -> mvar := high, limit_MVAR_High_5;
    mvar_goes_high_2 true = 1 -> mvar := high, limit_MVAR_High_4;
    mvar_goes_high_3 true = 1 -> mvar := high, limit_MVAR_High_3;
    mvar_goes_high_4 true = 1 -> mvar := high, limit_MVAR_High_2;
    mvar_goes_high_5 true = 1 -> mvar := high, limit_MVAR_High_1;
  triggeredby mvar_high;
  transition mvar_goes_low
    mvar_goes_low_0 true = 1 -> mvar := low, limit_MVAR_Low;
    mvar_goes_low_1 true = 1 -> mvar := low, limit_MVAR_Low_5;
    mvar_goes_low_2 true = 1 -> mvar := low, limit_MVAR_Low_4;
    mvar_goes_low_3 true = 1 -> mvar := low, limit_MVAR_Low_3;
    mvar_goes_low_4 true = 1 -> mvar := low, limit_MVAR_Low_2;
    mvar_goes_low_5 true = 1 -> mvar := low, limit_MVAR_Low_1;
  triggeredby mvar_low;
  transition mvar_goes_to_zero_unexplained
    mvar_goes_to_zero_unexplained_0 true = 1 -> mvar := zero, entered_zero_zone_MVAR, count_as_fault;
  transition mvar_goes_normal_unexplained
    mvar_goes_normal_unexplained_0 true = 1 -> mvar := normal, limit_MVAR_Normal, count_as_fault;
  transition mvar_goes_high_unexplained
    mvar_goes_high_unexplained_0 true = 1 -> mvar := high, limit_MVAR_High, count_as_fault;
    mvar_goes_high_unexplained_1 true = 1 -> mvar := high, limit_MVAR_High_5, count_as_fault;
    mvar_goes_high_unexplained_2 true = 1 -> mvar := high, limit_MVAR_High_4, count_as_fault;
    mvar_goes_high_unexplained_3 true = 1 -> mvar := high, limit_MVAR_High_3, count_as_fault;
    mvar_goes_high_unexplained_4 true = 1 -> mvar := high, limit_MVAR_High_2, count_as_fault;
    mvar_goes_high_unexplained_5 true = 1 -> mvar := high, limit_MVAR_High_1, count_as_fault;
  transition mvar_goes_low_unexplained
    mvar_goes_low_unexplained_0 true = 1 -> mvar := low, limit_MVAR_Low, count_as_fault;
    mvar_goes_low_unexplained_1 true = 1 -> mvar := low, limit_MVAR_Low_5, count_as_fault;
    mvar_goes_low_unexplained_2 true = 1 -> mvar := low, limit_MVAR_Low_4, count_as_fault;
    mvar_goes_low_unexplained_3 true = 1 -> mvar := low, limit_MVAR_Low_3, count_as_fault;
    mvar_goes_low_unexplained_4 true = 1 -> mvar := low, limit_MVAR_Low_2, count_as_fault;
    mvar_goes_low_unexplained_5 true = 1 -> mvar := low, limit_MVAR_Low_1, count_as_fault;
  transition mw_goes_normal_when_reenergised
    mw_goes_normal_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> mw := normal, limit_MW_Normal;
  transition mw_goes_high_when_reenergised
    mw_goes_high_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High;
    mw_goes_high_when_reenergised_1 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_5;
    mw_goes_high_when_reenergised_2 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_4;
    mw_goes_high_when_reenergised_3 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_3;
    mw_goes_high_when_reenergised_4 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_2;
    mw_goes_high_when_reenergised_5 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_1;
  transition mw_goes_low_when_reenergised
    mw_goes_low_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low;
    mw_goes_low_when_reenergised_1 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_5;
    mw_goes_low_when_reenergised_2 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_4;
    mw_goes_low_when_reenergised_3 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_3;
    mw_goes_low_when_reenergised_4 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_2;
    mw_goes_low_when_reenergised_5 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_1;
  transition mw_goes_to_zero_when_isolated
    mw_goes_to_zero_when_isolated_0 (isolated = true AND iso_state_changed = true) -> mw := zero, entered_zero_zone_MW, check_generators_off;
  transition mw_goes_low_when_isolated
    mw_goes_low_when_isolated_0 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low, check_generators_off;
    mw_goes_low_when_isolated_1 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_5, check_generators_off;
    mw_goes_low_when_isolated_2 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_4, check_generators_off;
    mw_goes_low_when_isolated_3 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_3, check_generators_off;
    mw_goes_low_when_isolated_4 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_2, check_generators_off;
    mw_goes_low_when_isolated_5 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_1, check_generators_off;
  transition mw_goes_to_zero
    mw_goes_to_zero_0 true = 1 -> mw := zero, entered_zero_zone_MW;
  triggeredby mw_zero;
  transition mw_goes_normal
    mw_goes_normal_0 true = 1 -> mw := normal, limit_MW_Normal;
  triggeredby mw_normal;
  transition mw_goes_high
    mw_goes_high_0 true = 1 -> mw := high, limit_MW_High;
    mw_goes_high_1 true = 1 -> mw := high, limit_MW_High_5;
    mw_goes_high_2 true = 1 -> mw := high, limit_MW_High_4;
    mw_goes_high_3 true = 1 -> mw := high, limit_MW_High_3;
    mw_goes_high_4 true = 1 -> mw := high, limit_MW_High_2;
    mw_goes_high_5 true = 1 -> mw := high, limit_MW_High_1;
  triggeredby mw_high;
  transition mw_goes_low
    mw_goes_low_0 true = 1 -> mw := low, limit_MW_Low;
    mw_goes_low_1 true = 1 -> mw := low, limit_MW_Low_5;
    mw_goes_low_2 true = 1 -> mw := low, limit_MW_Low_4;
    mw_goes_low_3 true = 1 -> mw := low, limit_MW_Low_3;
    mw_goes_low_4 true = 1 -> mw := low, limit_MW_Low_2;
    mw_goes_low_5 true = 1 -> mw := low, limit_MW_Low_1;
  triggeredby mw_low;
  transition mw_goes_to_zero_unexplained
    mw_goes_to_zero_unexplained_0 true = 1 -> mw := zero, entered_zero_zone_MW, count_as_fault;
  transition mw_goes_normal_unexplained
    mw_goes_normal_unexplained_0 true = 1 -> mw := normal, limit_MW_Normal, count_as_fault;
  transition mw_goes_high_unexplained
    mw_goes_high_unexplained_0 true = 1 -> mw := high, limit_MW_High, count_as_fault;
    mw_goes_high_unexplained_1 true = 1 -> mw := high, limit_MW_High_5, count_as_fault;
    mw_goes_high_unexplained_2 true = 1 -> mw := high, limit_MW_High_4, count_as_fault;
    mw_goes_high_unexplained_3 true = 1 -> mw := high, limit_MW_High_3, count_as_fault;
    mw_goes_high_unexplained_4 true = 1 -> mw := high, limit_MW_High_2, count_as_fault;
    mw_goes_high_unexplained_5 true = 1 -> mw := high, limit_MW_High_1, count_as_fault;
  transition mw_goes_low_unexplained
    mw_goes_low_unexplained_0 true = 1 -> mw := low, limit_MW_Low, count_as_fault;
    mw_goes_low_unexplained_1 true = 1 -> mw := low, limit_MW_Low_5, count_as_fault;
    mw_goes_low_unexplained_2 true = 1 -> mw := low, limit_MW_Low_4, count_as_fault;
    mw_goes_low_unexplained_3 true = 1 -> mw := low, limit_MW_Low_3, count_as_fault;
    mw_goes_low_unexplained_4 true = 1 -> mw := low, limit_MW_Low_2, count_as_fault;
    mw_goes_low_unexplained_5 true = 1 -> mw := low, limit_MW_Low_1, count_as_fault;
  transition voltage_goes_normal_when_caps_in
    voltage_goes_normal_when_caps_in_0 (voltage = low AND isolated = false) -> voltage := normal, limit_KV_Normal, check_switched_in;
  transition voltage_goes_normal_when_caps_out
    voltage_goes_normal_when_caps_out_0 (voltage = high AND isolated = false) -> voltage := normal, limit_KV_Normal, check_switched_out;
  transition voltage_goes_normal_when_reenergised
    voltage_goes_normal_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> voltage := normal, limit_KV_Normal;
  transition voltage_goes_high_when_reenergised
    voltage_goes_high_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High;
    voltage_goes_high_when_reenergised_1 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_5;
    voltage_goes_high_when_reenergised_2 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_4;
    voltage_goes_high_when_reenergised_3 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_3;
    voltage_goes_high_when_reenergised_4 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_2;
    voltage_goes_high_when_reenergised_5 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_1;
  transition voltage_goes_Low_when_reenergised
    voltage_goes_Low_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low;
    voltage_goes_Low_when_reenergised_1 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_5;
    voltage_goes_Low_when_reenergised_2 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_4;
    voltage_goes_Low_when_reenergised_3 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_3;
    voltage_goes_Low_when_reenergised_4 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_2;
    voltage_goes_Low_when_reenergised_5 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_1;
  transition voltage_goes_to_zero_when_isolated
    voltage_goes_to_zero_when_isolated_0 (isolated = true AND iso_state_changed = true) -> voltage := zero, entered_zero_zone_KV, check_generators_off;
  transition voltage_goes_low_when_isolated
    voltage_goes_low_when_isolated_0 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low, check_generators_off;
    voltage_goes_low_when_isolated_1 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_5, check_generators_off;
    voltage_goes_low_when_isolated_2 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_4, check_generators_off;
    voltage_goes_low_when_isolated_3 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_3, check_generators_off;
    voltage_goes_low_when_isolated_4 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_2, check_generators_off;
    voltage_goes_low_when_isolated_5 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_1, check_generators_off;
  transition voltage_goes_to_zero
    voltage_goes_to_zero_0 true = 1 -> voltage := zero, entered_zero_zone_KV;
  triggeredby voltage_zero;
  transition voltage_goes_normal
    voltage_goes_normal_0 true = 1 -> voltage := normal, limit_KV_Normal;
  triggeredby voltage_normal;
  transition voltage_goes_high
    voltage_goes_high_0 true = 1 -> voltage := high, limit_KV_High;
    voltage_goes_high_1 true = 1 -> voltage := high, limit_KV_High_5;
    voltage_goes_high_2 true = 1 -> voltage := high, limit_KV_High_4;
    voltage_goes_high_3 true = 1 -> voltage := high, limit_KV_High_3;
    voltage_goes_high_4 true = 1 -> voltage := high, limit_KV_High_2;
    voltage_goes_high_5 true = 1 -> voltage := high, limit_KV_High_1;
  triggeredby voltage_high;
  transition voltage_goes_low
    voltage_goes_low_0 true = 1 -> voltage := low, limit_KV_Low;
    voltage_goes_low_1 true = 1 -> voltage := low, limit_KV_Low_5;
    voltage_goes_low_2 true = 1 -> voltage := low, limit_KV_Low_4;
    voltage_goes_low_3 true = 1 -> voltage := low, limit_KV_Low_3;
    voltage_goes_low_4 true = 1 -> voltage := low, limit_KV_Low_2;
    voltage_goes_low_5 true = 1 -> voltage := low, limit_KV_Low_1;
  triggeredby voltage_low;
  transition voltage_goes_to_zero_unexplained
    voltage_goes_to_zero_unexplained_0 true = 1 -> voltage := zero, entered_zero_zone_KV, count_as_fault;
  transition voltage_goes_normal_unexplained
    voltage_goes_normal_unexplained_0 true = 1 -> voltage := normal, limit_KV_Normal, count_as_fault;
  transition voltage_goes_high_unexplained
    voltage_goes_high_unexplained_0 true = 1 -> voltage := high, limit_KV_High, count_as_fault;
    voltage_goes_high_unexplained_1 true = 1 -> voltage := high, limit_KV_High_5, count_as_fault;
    voltage_goes_high_unexplained_2 true = 1 -> voltage := high, limit_KV_High_4, count_as_fault;
    voltage_goes_high_unexplained_3 true = 1 -> voltage := high, limit_KV_High_3, count_as_fault;
    voltage_goes_high_unexplained_4 true = 1 -> voltage := high, limit_KV_High_2, count_as_fault;
    voltage_goes_high_unexplained_5 true = 1 -> voltage := high, limit_KV_High_1, count_as_fault;
  transition voltage_goes_low_unexplained
    voltage_goes_low_unexplained_0 true = 1 -> voltage := low, limit_KV_Low, count_as_fault;
    voltage_goes_low_unexplained_1 true = 1 -> voltage := low, limit_KV_Low_5, count_as_fault;
    voltage_goes_low_unexplained_2 true = 1 -> voltage := low, limit_KV_Low_4, count_as_fault;
    voltage_goes_low_unexplained_3 true = 1 -> voltage := low, limit_KV_Low_3, count_as_fault;
    voltage_goes_low_unexplained_4 true = 1 -> voltage := low, limit_KV_Low_2, count_as_fault;
    voltage_goes_low_unexplained_5 true = 1 -> voltage := low, limit_KV_Low_1, count_as_fault;
  transition iso_state_changed_timeout
    iso_state_changed_timeout_0 true = 1 -> iso_state_changed := false;
  triggeredby [0.0..15.0] iso_state_changed = true;
  transition become_not_isolated
    become_not_isolated_0 true = 1 -> isolated := false, iso_state_changed := true;
  triggeredby set_isolated_false;
  transition become_isolated
    become_isolated_0 true = 1 -> isolated := true, iso_state_changed := true;
  triggeredby set_isolated_true;
}
component Bus_X118 = {
  var mvar : {zero,high,low,normal};
  var mw : {zero,high,low,normal};
  var voltage : {zero,high,low,normal};
  var iso_state_changed : [0..1];
  var isolated : [0..1];
  event check_generators_off;
  event check_switched_in;
  event check_switched_out;
  event count_as_fault;
  event set_isolated_false;
  event set_isolated_true;
  event mvar_zero;
  event mvar_normal;
  event mvar_high;
  event mvar_low;
  event mw_zero;
  event mw_normal;
  event mw_high;
  event mw_low;
  event voltage_zero;
  event voltage_normal;
  event voltage_high;
  event voltage_low;
  event entered_zero_zone_MVAR;
  event limit_MVAR_High;
  event limit_MVAR_High_5;
  event limit_MVAR_High_4;
  event limit_MVAR_High_3;
  event limit_MVAR_High_2;
  event limit_MVAR_High_1;
  event limit_MVAR_Low;
  event limit_MVAR_Low_5;
  event limit_MVAR_Low_4;
  event limit_MVAR_Low_3;
  event limit_MVAR_Low_2;
  event limit_MVAR_Low_1;
  event limit_MVAR_Normal;
  event entered_zero_zone_MW;
  event limit_MW_High;
  event limit_MW_High_5;
  event limit_MW_High_4;
  event limit_MW_High_3;
  event limit_MW_High_2;
  event limit_MW_High_1;
  event limit_MW_Low;
  event limit_MW_Low_5;
  event limit_MW_Low_4;
  event limit_MW_Low_3;
  event limit_MW_Low_2;
  event limit_MW_Low_1;
  event limit_MW_Normal;
  event entered_zero_zone_KV;
  event limit_KV_High;
  event limit_KV_High_5;
  event limit_KV_High_4;
  event limit_KV_High_3;
  event limit_KV_High_2;
  event limit_KV_High_1;
  event limit_KV_Low;
  event limit_KV_Low_5;
  event limit_KV_Low_4;
  event limit_KV_Low_3;
  event limit_KV_Low_2;
  event limit_KV_Low_1;
  event limit_KV_Normal;
  transition mvar_goes_to_zero
    mvar_goes_to_zero_0 true = 1 -> mvar := zero, entered_zero_zone_MVAR;
  triggeredby mvar_zero;
  transition mvar_goes_normal
    mvar_goes_normal_0 true = 1 -> mvar := normal, limit_MVAR_Normal;
  triggeredby mvar_normal;
  transition mvar_goes_high
    mvar_goes_high_0 true = 1 -> mvar := high, limit_MVAR_High;
    mvar_goes_high_1 true = 1 -> mvar := high, limit_MVAR_High_5;
    mvar_goes_high_2 true = 1 -> mvar := high, limit_MVAR_High_4;
    mvar_goes_high_3 true = 1 -> mvar := high, limit_MVAR_High_3;
    mvar_goes_high_4 true = 1 -> mvar := high, limit_MVAR_High_2;
    mvar_goes_high_5 true = 1 -> mvar := high, limit_MVAR_High_1;
  triggeredby mvar_high;
  transition mvar_goes_low
    mvar_goes_low_0 true = 1 -> mvar := low, limit_MVAR_Low;
    mvar_goes_low_1 true = 1 -> mvar := low, limit_MVAR_Low_5;
    mvar_goes_low_2 true = 1 -> mvar := low, limit_MVAR_Low_4;
    mvar_goes_low_3 true = 1 -> mvar := low, limit_MVAR_Low_3;
    mvar_goes_low_4 true = 1 -> mvar := low, limit_MVAR_Low_2;
    mvar_goes_low_5 true = 1 -> mvar := low, limit_MVAR_Low_1;
  triggeredby mvar_low;
  transition mvar_goes_to_zero_unexplained
    mvar_goes_to_zero_unexplained_0 true = 1 -> mvar := zero, entered_zero_zone_MVAR, count_as_fault;
  transition mvar_goes_normal_unexplained
    mvar_goes_normal_unexplained_0 true = 1 -> mvar := normal, limit_MVAR_Normal, count_as_fault;
  transition mvar_goes_high_unexplained
    mvar_goes_high_unexplained_0 true = 1 -> mvar := high, limit_MVAR_High, count_as_fault;
    mvar_goes_high_unexplained_1 true = 1 -> mvar := high, limit_MVAR_High_5, count_as_fault;
    mvar_goes_high_unexplained_2 true = 1 -> mvar := high, limit_MVAR_High_4, count_as_fault;
    mvar_goes_high_unexplained_3 true = 1 -> mvar := high, limit_MVAR_High_3, count_as_fault;
    mvar_goes_high_unexplained_4 true = 1 -> mvar := high, limit_MVAR_High_2, count_as_fault;
    mvar_goes_high_unexplained_5 true = 1 -> mvar := high, limit_MVAR_High_1, count_as_fault;
  transition mvar_goes_low_unexplained
    mvar_goes_low_unexplained_0 true = 1 -> mvar := low, limit_MVAR_Low, count_as_fault;
    mvar_goes_low_unexplained_1 true = 1 -> mvar := low, limit_MVAR_Low_5, count_as_fault;
    mvar_goes_low_unexplained_2 true = 1 -> mvar := low, limit_MVAR_Low_4, count_as_fault;
    mvar_goes_low_unexplained_3 true = 1 -> mvar := low, limit_MVAR_Low_3, count_as_fault;
    mvar_goes_low_unexplained_4 true = 1 -> mvar := low, limit_MVAR_Low_2, count_as_fault;
    mvar_goes_low_unexplained_5 true = 1 -> mvar := low, limit_MVAR_Low_1, count_as_fault;
  transition mw_goes_normal_when_reenergised
    mw_goes_normal_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> mw := normal, limit_MW_Normal;
  transition mw_goes_high_when_reenergised
    mw_goes_high_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High;
    mw_goes_high_when_reenergised_1 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_5;
    mw_goes_high_when_reenergised_2 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_4;
    mw_goes_high_when_reenergised_3 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_3;
    mw_goes_high_when_reenergised_4 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_2;
    mw_goes_high_when_reenergised_5 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_1;
  transition mw_goes_low_when_reenergised
    mw_goes_low_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low;
    mw_goes_low_when_reenergised_1 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_5;
    mw_goes_low_when_reenergised_2 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_4;
    mw_goes_low_when_reenergised_3 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_3;
    mw_goes_low_when_reenergised_4 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_2;
    mw_goes_low_when_reenergised_5 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_1;
  transition mw_goes_to_zero_when_isolated
    mw_goes_to_zero_when_isolated_0 (isolated = true AND iso_state_changed = true) -> mw := zero, entered_zero_zone_MW, check_generators_off;
  transition mw_goes_low_when_isolated
    mw_goes_low_when_isolated_0 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low, check_generators_off;
    mw_goes_low_when_isolated_1 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_5, check_generators_off;
    mw_goes_low_when_isolated_2 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_4, check_generators_off;
    mw_goes_low_when_isolated_3 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_3, check_generators_off;
    mw_goes_low_when_isolated_4 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_2, check_generators_off;
    mw_goes_low_when_isolated_5 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_1, check_generators_off;
  transition mw_goes_to_zero
    mw_goes_to_zero_0 true = 1 -> mw := zero, entered_zero_zone_MW;
  triggeredby mw_zero;
  transition mw_goes_normal
    mw_goes_normal_0 true = 1 -> mw := normal, limit_MW_Normal;
  triggeredby mw_normal;
  transition mw_goes_high
    mw_goes_high_0 true = 1 -> mw := high, limit_MW_High;
    mw_goes_high_1 true = 1 -> mw := high, limit_MW_High_5;
    mw_goes_high_2 true = 1 -> mw := high, limit_MW_High_4;
    mw_goes_high_3 true = 1 -> mw := high, limit_MW_High_3;
    mw_goes_high_4 true = 1 -> mw := high, limit_MW_High_2;
    mw_goes_high_5 true = 1 -> mw := high, limit_MW_High_1;
  triggeredby mw_high;
  transition mw_goes_low
    mw_goes_low_0 true = 1 -> mw := low, limit_MW_Low;
    mw_goes_low_1 true = 1 -> mw := low, limit_MW_Low_5;
    mw_goes_low_2 true = 1 -> mw := low, limit_MW_Low_4;
    mw_goes_low_3 true = 1 -> mw := low, limit_MW_Low_3;
    mw_goes_low_4 true = 1 -> mw := low, limit_MW_Low_2;
    mw_goes_low_5 true = 1 -> mw := low, limit_MW_Low_1;
  triggeredby mw_low;
  transition mw_goes_to_zero_unexplained
    mw_goes_to_zero_unexplained_0 true = 1 -> mw := zero, entered_zero_zone_MW, count_as_fault;
  transition mw_goes_normal_unexplained
    mw_goes_normal_unexplained_0 true = 1 -> mw := normal, limit_MW_Normal, count_as_fault;
  transition mw_goes_high_unexplained
    mw_goes_high_unexplained_0 true = 1 -> mw := high, limit_MW_High, count_as_fault;
    mw_goes_high_unexplained_1 true = 1 -> mw := high, limit_MW_High_5, count_as_fault;
    mw_goes_high_unexplained_2 true = 1 -> mw := high, limit_MW_High_4, count_as_fault;
    mw_goes_high_unexplained_3 true = 1 -> mw := high, limit_MW_High_3, count_as_fault;
    mw_goes_high_unexplained_4 true = 1 -> mw := high, limit_MW_High_2, count_as_fault;
    mw_goes_high_unexplained_5 true = 1 -> mw := high, limit_MW_High_1, count_as_fault;
  transition mw_goes_low_unexplained
    mw_goes_low_unexplained_0 true = 1 -> mw := low, limit_MW_Low, count_as_fault;
    mw_goes_low_unexplained_1 true = 1 -> mw := low, limit_MW_Low_5, count_as_fault;
    mw_goes_low_unexplained_2 true = 1 -> mw := low, limit_MW_Low_4, count_as_fault;
    mw_goes_low_unexplained_3 true = 1 -> mw := low, limit_MW_Low_3, count_as_fault;
    mw_goes_low_unexplained_4 true = 1 -> mw := low, limit_MW_Low_2, count_as_fault;
    mw_goes_low_unexplained_5 true = 1 -> mw := low, limit_MW_Low_1, count_as_fault;
  transition voltage_goes_normal_when_caps_in
    voltage_goes_normal_when_caps_in_0 (voltage = low AND isolated = false) -> voltage := normal, limit_KV_Normal, check_switched_in;
  transition voltage_goes_normal_when_caps_out
    voltage_goes_normal_when_caps_out_0 (voltage = high AND isolated = false) -> voltage := normal, limit_KV_Normal, check_switched_out;
  transition voltage_goes_normal_when_reenergised
    voltage_goes_normal_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> voltage := normal, limit_KV_Normal;
  transition voltage_goes_high_when_reenergised
    voltage_goes_high_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High;
    voltage_goes_high_when_reenergised_1 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_5;
    voltage_goes_high_when_reenergised_2 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_4;
    voltage_goes_high_when_reenergised_3 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_3;
    voltage_goes_high_when_reenergised_4 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_2;
    voltage_goes_high_when_reenergised_5 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_1;
  transition voltage_goes_Low_when_reenergised
    voltage_goes_Low_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low;
    voltage_goes_Low_when_reenergised_1 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_5;
    voltage_goes_Low_when_reenergised_2 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_4;
    voltage_goes_Low_when_reenergised_3 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_3;
    voltage_goes_Low_when_reenergised_4 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_2;
    voltage_goes_Low_when_reenergised_5 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_1;
  transition voltage_goes_to_zero_when_isolated
    voltage_goes_to_zero_when_isolated_0 (isolated = true AND iso_state_changed = true) -> voltage := zero, entered_zero_zone_KV, check_generators_off;
  transition voltage_goes_low_when_isolated
    voltage_goes_low_when_isolated_0 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low, check_generators_off;
    voltage_goes_low_when_isolated_1 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_5, check_generators_off;
    voltage_goes_low_when_isolated_2 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_4, check_generators_off;
    voltage_goes_low_when_isolated_3 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_3, check_generators_off;
    voltage_goes_low_when_isolated_4 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_2, check_generators_off;
    voltage_goes_low_when_isolated_5 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_1, check_generators_off;
  transition voltage_goes_to_zero
    voltage_goes_to_zero_0 true = 1 -> voltage := zero, entered_zero_zone_KV;
  triggeredby voltage_zero;
  transition voltage_goes_normal
    voltage_goes_normal_0 true = 1 -> voltage := normal, limit_KV_Normal;
  triggeredby voltage_normal;
  transition voltage_goes_high
    voltage_goes_high_0 true = 1 -> voltage := high, limit_KV_High;
    voltage_goes_high_1 true = 1 -> voltage := high, limit_KV_High_5;
    voltage_goes_high_2 true = 1 -> voltage := high, limit_KV_High_4;
    voltage_goes_high_3 true = 1 -> voltage := high, limit_KV_High_3;
    voltage_goes_high_4 true = 1 -> voltage := high, limit_KV_High_2;
    voltage_goes_high_5 true = 1 -> voltage := high, limit_KV_High_1;
  triggeredby voltage_high;
  transition voltage_goes_low
    voltage_goes_low_0 true = 1 -> voltage := low, limit_KV_Low;
    voltage_goes_low_1 true = 1 -> voltage := low, limit_KV_Low_5;
    voltage_goes_low_2 true = 1 -> voltage := low, limit_KV_Low_4;
    voltage_goes_low_3 true = 1 -> voltage := low, limit_KV_Low_3;
    voltage_goes_low_4 true = 1 -> voltage := low, limit_KV_Low_2;
    voltage_goes_low_5 true = 1 -> voltage := low, limit_KV_Low_1;
  triggeredby voltage_low;
  transition voltage_goes_to_zero_unexplained
    voltage_goes_to_zero_unexplained_0 true = 1 -> voltage := zero, entered_zero_zone_KV, count_as_fault;
  transition voltage_goes_normal_unexplained
    voltage_goes_normal_unexplained_0 true = 1 -> voltage := normal, limit_KV_Normal, count_as_fault;
  transition voltage_goes_high_unexplained
    voltage_goes_high_unexplained_0 true = 1 -> voltage := high, limit_KV_High, count_as_fault;
    voltage_goes_high_unexplained_1 true = 1 -> voltage := high, limit_KV_High_5, count_as_fault;
    voltage_goes_high_unexplained_2 true = 1 -> voltage := high, limit_KV_High_4, count_as_fault;
    voltage_goes_high_unexplained_3 true = 1 -> voltage := high, limit_KV_High_3, count_as_fault;
    voltage_goes_high_unexplained_4 true = 1 -> voltage := high, limit_KV_High_2, count_as_fault;
    voltage_goes_high_unexplained_5 true = 1 -> voltage := high, limit_KV_High_1, count_as_fault;
  transition voltage_goes_low_unexplained
    voltage_goes_low_unexplained_0 true = 1 -> voltage := low, limit_KV_Low, count_as_fault;
    voltage_goes_low_unexplained_1 true = 1 -> voltage := low, limit_KV_Low_5, count_as_fault;
    voltage_goes_low_unexplained_2 true = 1 -> voltage := low, limit_KV_Low_4, count_as_fault;
    voltage_goes_low_unexplained_3 true = 1 -> voltage := low, limit_KV_Low_3, count_as_fault;
    voltage_goes_low_unexplained_4 true = 1 -> voltage := low, limit_KV_Low_2, count_as_fault;
    voltage_goes_low_unexplained_5 true = 1 -> voltage := low, limit_KV_Low_1, count_as_fault;
  transition iso_state_changed_timeout
    iso_state_changed_timeout_0 true = 1 -> iso_state_changed := false;
  triggeredby [0.0..15.0] iso_state_changed = true;
  transition become_not_isolated
    become_not_isolated_0 true = 1 -> isolated := false, iso_state_changed := true;
  triggeredby set_isolated_false;
  transition become_isolated
    become_isolated_0 true = 1 -> isolated := true, iso_state_changed := true;
  triggeredby set_isolated_true;
}
component Bus_X115 = {
  var mvar : {zero,high,low,normal};
  var mw : {zero,high,low,normal};
  var voltage : {zero,high,low,normal};
  var iso_state_changed : [0..1];
  var isolated : [0..1];
  event check_generators_off;
  event check_switched_in;
  event check_switched_out;
  event count_as_fault;
  event set_isolated_false;
  event set_isolated_true;
  event mvar_zero;
  event mvar_normal;
  event mvar_high;
  event mvar_low;
  event mw_zero;
  event mw_normal;
  event mw_high;
  event mw_low;
  event voltage_zero;
  event voltage_normal;
  event voltage_high;
  event voltage_low;
  event entered_zero_zone_MVAR;
  event limit_MVAR_High;
  event limit_MVAR_High_5;
  event limit_MVAR_High_4;
  event limit_MVAR_High_3;
  event limit_MVAR_High_2;
  event limit_MVAR_High_1;
  event limit_MVAR_Low;
  event limit_MVAR_Low_5;
  event limit_MVAR_Low_4;
  event limit_MVAR_Low_3;
  event limit_MVAR_Low_2;
  event limit_MVAR_Low_1;
  event limit_MVAR_Normal;
  event entered_zero_zone_MW;
  event limit_MW_High;
  event limit_MW_High_5;
  event limit_MW_High_4;
  event limit_MW_High_3;
  event limit_MW_High_2;
  event limit_MW_High_1;
  event limit_MW_Low;
  event limit_MW_Low_5;
  event limit_MW_Low_4;
  event limit_MW_Low_3;
  event limit_MW_Low_2;
  event limit_MW_Low_1;
  event limit_MW_Normal;
  event entered_zero_zone_KV;
  event limit_KV_High;
  event limit_KV_High_5;
  event limit_KV_High_4;
  event limit_KV_High_3;
  event limit_KV_High_2;
  event limit_KV_High_1;
  event limit_KV_Low;
  event limit_KV_Low_5;
  event limit_KV_Low_4;
  event limit_KV_Low_3;
  event limit_KV_Low_2;
  event limit_KV_Low_1;
  event limit_KV_Normal;
  transition mvar_goes_to_zero
    mvar_goes_to_zero_0 true = 1 -> mvar := zero, entered_zero_zone_MVAR;
  triggeredby mvar_zero;
  transition mvar_goes_normal
    mvar_goes_normal_0 true = 1 -> mvar := normal, limit_MVAR_Normal;
  triggeredby mvar_normal;
  transition mvar_goes_high
    mvar_goes_high_0 true = 1 -> mvar := high, limit_MVAR_High;
    mvar_goes_high_1 true = 1 -> mvar := high, limit_MVAR_High_5;
    mvar_goes_high_2 true = 1 -> mvar := high, limit_MVAR_High_4;
    mvar_goes_high_3 true = 1 -> mvar := high, limit_MVAR_High_3;
    mvar_goes_high_4 true = 1 -> mvar := high, limit_MVAR_High_2;
    mvar_goes_high_5 true = 1 -> mvar := high, limit_MVAR_High_1;
  triggeredby mvar_high;
  transition mvar_goes_low
    mvar_goes_low_0 true = 1 -> mvar := low, limit_MVAR_Low;
    mvar_goes_low_1 true = 1 -> mvar := low, limit_MVAR_Low_5;
    mvar_goes_low_2 true = 1 -> mvar := low, limit_MVAR_Low_4;
    mvar_goes_low_3 true = 1 -> mvar := low, limit_MVAR_Low_3;
    mvar_goes_low_4 true = 1 -> mvar := low, limit_MVAR_Low_2;
    mvar_goes_low_5 true = 1 -> mvar := low, limit_MVAR_Low_1;
  triggeredby mvar_low;
  transition mvar_goes_to_zero_unexplained
    mvar_goes_to_zero_unexplained_0 true = 1 -> mvar := zero, entered_zero_zone_MVAR, count_as_fault;
  transition mvar_goes_normal_unexplained
    mvar_goes_normal_unexplained_0 true = 1 -> mvar := normal, limit_MVAR_Normal, count_as_fault;
  transition mvar_goes_high_unexplained
    mvar_goes_high_unexplained_0 true = 1 -> mvar := high, limit_MVAR_High, count_as_fault;
    mvar_goes_high_unexplained_1 true = 1 -> mvar := high, limit_MVAR_High_5, count_as_fault;
    mvar_goes_high_unexplained_2 true = 1 -> mvar := high, limit_MVAR_High_4, count_as_fault;
    mvar_goes_high_unexplained_3 true = 1 -> mvar := high, limit_MVAR_High_3, count_as_fault;
    mvar_goes_high_unexplained_4 true = 1 -> mvar := high, limit_MVAR_High_2, count_as_fault;
    mvar_goes_high_unexplained_5 true = 1 -> mvar := high, limit_MVAR_High_1, count_as_fault;
  transition mvar_goes_low_unexplained
    mvar_goes_low_unexplained_0 true = 1 -> mvar := low, limit_MVAR_Low, count_as_fault;
    mvar_goes_low_unexplained_1 true = 1 -> mvar := low, limit_MVAR_Low_5, count_as_fault;
    mvar_goes_low_unexplained_2 true = 1 -> mvar := low, limit_MVAR_Low_4, count_as_fault;
    mvar_goes_low_unexplained_3 true = 1 -> mvar := low, limit_MVAR_Low_3, count_as_fault;
    mvar_goes_low_unexplained_4 true = 1 -> mvar := low, limit_MVAR_Low_2, count_as_fault;
    mvar_goes_low_unexplained_5 true = 1 -> mvar := low, limit_MVAR_Low_1, count_as_fault;
  transition mw_goes_normal_when_reenergised
    mw_goes_normal_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> mw := normal, limit_MW_Normal;
  transition mw_goes_high_when_reenergised
    mw_goes_high_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High;
    mw_goes_high_when_reenergised_1 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_5;
    mw_goes_high_when_reenergised_2 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_4;
    mw_goes_high_when_reenergised_3 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_3;
    mw_goes_high_when_reenergised_4 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_2;
    mw_goes_high_when_reenergised_5 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_1;
  transition mw_goes_low_when_reenergised
    mw_goes_low_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low;
    mw_goes_low_when_reenergised_1 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_5;
    mw_goes_low_when_reenergised_2 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_4;
    mw_goes_low_when_reenergised_3 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_3;
    mw_goes_low_when_reenergised_4 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_2;
    mw_goes_low_when_reenergised_5 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_1;
  transition mw_goes_to_zero_when_isolated
    mw_goes_to_zero_when_isolated_0 (isolated = true AND iso_state_changed = true) -> mw := zero, entered_zero_zone_MW, check_generators_off;
  transition mw_goes_low_when_isolated
    mw_goes_low_when_isolated_0 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low, check_generators_off;
    mw_goes_low_when_isolated_1 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_5, check_generators_off;
    mw_goes_low_when_isolated_2 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_4, check_generators_off;
    mw_goes_low_when_isolated_3 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_3, check_generators_off;
    mw_goes_low_when_isolated_4 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_2, check_generators_off;
    mw_goes_low_when_isolated_5 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_1, check_generators_off;
  transition mw_goes_to_zero
    mw_goes_to_zero_0 true = 1 -> mw := zero, entered_zero_zone_MW;
  triggeredby mw_zero;
  transition mw_goes_normal
    mw_goes_normal_0 true = 1 -> mw := normal, limit_MW_Normal;
  triggeredby mw_normal;
  transition mw_goes_high
    mw_goes_high_0 true = 1 -> mw := high, limit_MW_High;
    mw_goes_high_1 true = 1 -> mw := high, limit_MW_High_5;
    mw_goes_high_2 true = 1 -> mw := high, limit_MW_High_4;
    mw_goes_high_3 true = 1 -> mw := high, limit_MW_High_3;
    mw_goes_high_4 true = 1 -> mw := high, limit_MW_High_2;
    mw_goes_high_5 true = 1 -> mw := high, limit_MW_High_1;
  triggeredby mw_high;
  transition mw_goes_low
    mw_goes_low_0 true = 1 -> mw := low, limit_MW_Low;
    mw_goes_low_1 true = 1 -> mw := low, limit_MW_Low_5;
    mw_goes_low_2 true = 1 -> mw := low, limit_MW_Low_4;
    mw_goes_low_3 true = 1 -> mw := low, limit_MW_Low_3;
    mw_goes_low_4 true = 1 -> mw := low, limit_MW_Low_2;
    mw_goes_low_5 true = 1 -> mw := low, limit_MW_Low_1;
  triggeredby mw_low;
  transition mw_goes_to_zero_unexplained
    mw_goes_to_zero_unexplained_0 true = 1 -> mw := zero, entered_zero_zone_MW, count_as_fault;
  transition mw_goes_normal_unexplained
    mw_goes_normal_unexplained_0 true = 1 -> mw := normal, limit_MW_Normal, count_as_fault;
  transition mw_goes_high_unexplained
    mw_goes_high_unexplained_0 true = 1 -> mw := high, limit_MW_High, count_as_fault;
    mw_goes_high_unexplained_1 true = 1 -> mw := high, limit_MW_High_5, count_as_fault;
    mw_goes_high_unexplained_2 true = 1 -> mw := high, limit_MW_High_4, count_as_fault;
    mw_goes_high_unexplained_3 true = 1 -> mw := high, limit_MW_High_3, count_as_fault;
    mw_goes_high_unexplained_4 true = 1 -> mw := high, limit_MW_High_2, count_as_fault;
    mw_goes_high_unexplained_5 true = 1 -> mw := high, limit_MW_High_1, count_as_fault;
  transition mw_goes_low_unexplained
    mw_goes_low_unexplained_0 true = 1 -> mw := low, limit_MW_Low, count_as_fault;
    mw_goes_low_unexplained_1 true = 1 -> mw := low, limit_MW_Low_5, count_as_fault;
    mw_goes_low_unexplained_2 true = 1 -> mw := low, limit_MW_Low_4, count_as_fault;
    mw_goes_low_unexplained_3 true = 1 -> mw := low, limit_MW_Low_3, count_as_fault;
    mw_goes_low_unexplained_4 true = 1 -> mw := low, limit_MW_Low_2, count_as_fault;
    mw_goes_low_unexplained_5 true = 1 -> mw := low, limit_MW_Low_1, count_as_fault;
  transition voltage_goes_normal_when_caps_in
    voltage_goes_normal_when_caps_in_0 (voltage = low AND isolated = false) -> voltage := normal, limit_KV_Normal, check_switched_in;
  transition voltage_goes_normal_when_caps_out
    voltage_goes_normal_when_caps_out_0 (voltage = high AND isolated = false) -> voltage := normal, limit_KV_Normal, check_switched_out;
  transition voltage_goes_normal_when_reenergised
    voltage_goes_normal_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> voltage := normal, limit_KV_Normal;
  transition voltage_goes_high_when_reenergised
    voltage_goes_high_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High;
    voltage_goes_high_when_reenergised_1 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_5;
    voltage_goes_high_when_reenergised_2 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_4;
    voltage_goes_high_when_reenergised_3 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_3;
    voltage_goes_high_when_reenergised_4 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_2;
    voltage_goes_high_when_reenergised_5 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_1;
  transition voltage_goes_Low_when_reenergised
    voltage_goes_Low_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low;
    voltage_goes_Low_when_reenergised_1 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_5;
    voltage_goes_Low_when_reenergised_2 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_4;
    voltage_goes_Low_when_reenergised_3 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_3;
    voltage_goes_Low_when_reenergised_4 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_2;
    voltage_goes_Low_when_reenergised_5 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_1;
  transition voltage_goes_to_zero_when_isolated
    voltage_goes_to_zero_when_isolated_0 (isolated = true AND iso_state_changed = true) -> voltage := zero, entered_zero_zone_KV, check_generators_off;
  transition voltage_goes_low_when_isolated
    voltage_goes_low_when_isolated_0 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low, check_generators_off;
    voltage_goes_low_when_isolated_1 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_5, check_generators_off;
    voltage_goes_low_when_isolated_2 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_4, check_generators_off;
    voltage_goes_low_when_isolated_3 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_3, check_generators_off;
    voltage_goes_low_when_isolated_4 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_2, check_generators_off;
    voltage_goes_low_when_isolated_5 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_1, check_generators_off;
  transition voltage_goes_to_zero
    voltage_goes_to_zero_0 true = 1 -> voltage := zero, entered_zero_zone_KV;
  triggeredby voltage_zero;
  transition voltage_goes_normal
    voltage_goes_normal_0 true = 1 -> voltage := normal, limit_KV_Normal;
  triggeredby voltage_normal;
  transition voltage_goes_high
    voltage_goes_high_0 true = 1 -> voltage := high, limit_KV_High;
    voltage_goes_high_1 true = 1 -> voltage := high, limit_KV_High_5;
    voltage_goes_high_2 true = 1 -> voltage := high, limit_KV_High_4;
    voltage_goes_high_3 true = 1 -> voltage := high, limit_KV_High_3;
    voltage_goes_high_4 true = 1 -> voltage := high, limit_KV_High_2;
    voltage_goes_high_5 true = 1 -> voltage := high, limit_KV_High_1;
  triggeredby voltage_high;
  transition voltage_goes_low
    voltage_goes_low_0 true = 1 -> voltage := low, limit_KV_Low;
    voltage_goes_low_1 true = 1 -> voltage := low, limit_KV_Low_5;
    voltage_goes_low_2 true = 1 -> voltage := low, limit_KV_Low_4;
    voltage_goes_low_3 true = 1 -> voltage := low, limit_KV_Low_3;
    voltage_goes_low_4 true = 1 -> voltage := low, limit_KV_Low_2;
    voltage_goes_low_5 true = 1 -> voltage := low, limit_KV_Low_1;
  triggeredby voltage_low;
  transition voltage_goes_to_zero_unexplained
    voltage_goes_to_zero_unexplained_0 true = 1 -> voltage := zero, entered_zero_zone_KV, count_as_fault;
  transition voltage_goes_normal_unexplained
    voltage_goes_normal_unexplained_0 true = 1 -> voltage := normal, limit_KV_Normal, count_as_fault;
  transition voltage_goes_high_unexplained
    voltage_goes_high_unexplained_0 true = 1 -> voltage := high, limit_KV_High, count_as_fault;
    voltage_goes_high_unexplained_1 true = 1 -> voltage := high, limit_KV_High_5, count_as_fault;
    voltage_goes_high_unexplained_2 true = 1 -> voltage := high, limit_KV_High_4, count_as_fault;
    voltage_goes_high_unexplained_3 true = 1 -> voltage := high, limit_KV_High_3, count_as_fault;
    voltage_goes_high_unexplained_4 true = 1 -> voltage := high, limit_KV_High_2, count_as_fault;
    voltage_goes_high_unexplained_5 true = 1 -> voltage := high, limit_KV_High_1, count_as_fault;
  transition voltage_goes_low_unexplained
    voltage_goes_low_unexplained_0 true = 1 -> voltage := low, limit_KV_Low, count_as_fault;
    voltage_goes_low_unexplained_1 true = 1 -> voltage := low, limit_KV_Low_5, count_as_fault;
    voltage_goes_low_unexplained_2 true = 1 -> voltage := low, limit_KV_Low_4, count_as_fault;
    voltage_goes_low_unexplained_3 true = 1 -> voltage := low, limit_KV_Low_3, count_as_fault;
    voltage_goes_low_unexplained_4 true = 1 -> voltage := low, limit_KV_Low_2, count_as_fault;
    voltage_goes_low_unexplained_5 true = 1 -> voltage := low, limit_KV_Low_1, count_as_fault;
  transition iso_state_changed_timeout
    iso_state_changed_timeout_0 true = 1 -> iso_state_changed := false;
  triggeredby [0.0..15.0] iso_state_changed = true;
  transition become_not_isolated
    become_not_isolated_0 true = 1 -> isolated := false, iso_state_changed := true;
  triggeredby set_isolated_false;
  transition become_isolated
    become_isolated_0 true = 1 -> isolated := true, iso_state_changed := true;
  triggeredby set_isolated_true;
}
component Bus_X113 = {
  var mvar : {zero,high,low,normal};
  var mw : {zero,high,low,normal};
  var voltage : {zero,high,low,normal};
  var iso_state_changed : [0..1];
  var isolated : [0..1];
  event check_generators_off;
  event check_switched_in;
  event check_switched_out;
  event count_as_fault;
  event set_isolated_false;
  event set_isolated_true;
  event mvar_zero;
  event mvar_normal;
  event mvar_high;
  event mvar_low;
  event mw_zero;
  event mw_normal;
  event mw_high;
  event mw_low;
  event voltage_zero;
  event voltage_normal;
  event voltage_high;
  event voltage_low;
  event entered_zero_zone_MVAR;
  event limit_MVAR_High;
  event limit_MVAR_High_5;
  event limit_MVAR_High_4;
  event limit_MVAR_High_3;
  event limit_MVAR_High_2;
  event limit_MVAR_High_1;
  event limit_MVAR_Low;
  event limit_MVAR_Low_5;
  event limit_MVAR_Low_4;
  event limit_MVAR_Low_3;
  event limit_MVAR_Low_2;
  event limit_MVAR_Low_1;
  event limit_MVAR_Normal;
  event entered_zero_zone_MW;
  event limit_MW_High;
  event limit_MW_High_5;
  event limit_MW_High_4;
  event limit_MW_High_3;
  event limit_MW_High_2;
  event limit_MW_High_1;
  event limit_MW_Low;
  event limit_MW_Low_5;
  event limit_MW_Low_4;
  event limit_MW_Low_3;
  event limit_MW_Low_2;
  event limit_MW_Low_1;
  event limit_MW_Normal;
  event entered_zero_zone_KV;
  event limit_KV_High;
  event limit_KV_High_5;
  event limit_KV_High_4;
  event limit_KV_High_3;
  event limit_KV_High_2;
  event limit_KV_High_1;
  event limit_KV_Low;
  event limit_KV_Low_5;
  event limit_KV_Low_4;
  event limit_KV_Low_3;
  event limit_KV_Low_2;
  event limit_KV_Low_1;
  event limit_KV_Normal;
  transition mvar_goes_to_zero
    mvar_goes_to_zero_0 true = 1 -> mvar := zero, entered_zero_zone_MVAR;
  triggeredby mvar_zero;
  transition mvar_goes_normal
    mvar_goes_normal_0 true = 1 -> mvar := normal, limit_MVAR_Normal;
  triggeredby mvar_normal;
  transition mvar_goes_high
    mvar_goes_high_0 true = 1 -> mvar := high, limit_MVAR_High;
    mvar_goes_high_1 true = 1 -> mvar := high, limit_MVAR_High_5;
    mvar_goes_high_2 true = 1 -> mvar := high, limit_MVAR_High_4;
    mvar_goes_high_3 true = 1 -> mvar := high, limit_MVAR_High_3;
    mvar_goes_high_4 true = 1 -> mvar := high, limit_MVAR_High_2;
    mvar_goes_high_5 true = 1 -> mvar := high, limit_MVAR_High_1;
  triggeredby mvar_high;
  transition mvar_goes_low
    mvar_goes_low_0 true = 1 -> mvar := low, limit_MVAR_Low;
    mvar_goes_low_1 true = 1 -> mvar := low, limit_MVAR_Low_5;
    mvar_goes_low_2 true = 1 -> mvar := low, limit_MVAR_Low_4;
    mvar_goes_low_3 true = 1 -> mvar := low, limit_MVAR_Low_3;
    mvar_goes_low_4 true = 1 -> mvar := low, limit_MVAR_Low_2;
    mvar_goes_low_5 true = 1 -> mvar := low, limit_MVAR_Low_1;
  triggeredby mvar_low;
  transition mvar_goes_to_zero_unexplained
    mvar_goes_to_zero_unexplained_0 true = 1 -> mvar := zero, entered_zero_zone_MVAR, count_as_fault;
  transition mvar_goes_normal_unexplained
    mvar_goes_normal_unexplained_0 true = 1 -> mvar := normal, limit_MVAR_Normal, count_as_fault;
  transition mvar_goes_high_unexplained
    mvar_goes_high_unexplained_0 true = 1 -> mvar := high, limit_MVAR_High, count_as_fault;
    mvar_goes_high_unexplained_1 true = 1 -> mvar := high, limit_MVAR_High_5, count_as_fault;
    mvar_goes_high_unexplained_2 true = 1 -> mvar := high, limit_MVAR_High_4, count_as_fault;
    mvar_goes_high_unexplained_3 true = 1 -> mvar := high, limit_MVAR_High_3, count_as_fault;
    mvar_goes_high_unexplained_4 true = 1 -> mvar := high, limit_MVAR_High_2, count_as_fault;
    mvar_goes_high_unexplained_5 true = 1 -> mvar := high, limit_MVAR_High_1, count_as_fault;
  transition mvar_goes_low_unexplained
    mvar_goes_low_unexplained_0 true = 1 -> mvar := low, limit_MVAR_Low, count_as_fault;
    mvar_goes_low_unexplained_1 true = 1 -> mvar := low, limit_MVAR_Low_5, count_as_fault;
    mvar_goes_low_unexplained_2 true = 1 -> mvar := low, limit_MVAR_Low_4, count_as_fault;
    mvar_goes_low_unexplained_3 true = 1 -> mvar := low, limit_MVAR_Low_3, count_as_fault;
    mvar_goes_low_unexplained_4 true = 1 -> mvar := low, limit_MVAR_Low_2, count_as_fault;
    mvar_goes_low_unexplained_5 true = 1 -> mvar := low, limit_MVAR_Low_1, count_as_fault;
  transition mw_goes_normal_when_reenergised
    mw_goes_normal_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> mw := normal, limit_MW_Normal;
  transition mw_goes_high_when_reenergised
    mw_goes_high_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High;
    mw_goes_high_when_reenergised_1 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_5;
    mw_goes_high_when_reenergised_2 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_4;
    mw_goes_high_when_reenergised_3 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_3;
    mw_goes_high_when_reenergised_4 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_2;
    mw_goes_high_when_reenergised_5 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_1;
  transition mw_goes_low_when_reenergised
    mw_goes_low_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low;
    mw_goes_low_when_reenergised_1 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_5;
    mw_goes_low_when_reenergised_2 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_4;
    mw_goes_low_when_reenergised_3 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_3;
    mw_goes_low_when_reenergised_4 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_2;
    mw_goes_low_when_reenergised_5 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_1;
  transition mw_goes_to_zero_when_isolated
    mw_goes_to_zero_when_isolated_0 (isolated = true AND iso_state_changed = true) -> mw := zero, entered_zero_zone_MW, check_generators_off;
  transition mw_goes_low_when_isolated
    mw_goes_low_when_isolated_0 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low, check_generators_off;
    mw_goes_low_when_isolated_1 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_5, check_generators_off;
    mw_goes_low_when_isolated_2 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_4, check_generators_off;
    mw_goes_low_when_isolated_3 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_3, check_generators_off;
    mw_goes_low_when_isolated_4 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_2, check_generators_off;
    mw_goes_low_when_isolated_5 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_1, check_generators_off;
  transition mw_goes_to_zero
    mw_goes_to_zero_0 true = 1 -> mw := zero, entered_zero_zone_MW;
  triggeredby mw_zero;
  transition mw_goes_normal
    mw_goes_normal_0 true = 1 -> mw := normal, limit_MW_Normal;
  triggeredby mw_normal;
  transition mw_goes_high
    mw_goes_high_0 true = 1 -> mw := high, limit_MW_High;
    mw_goes_high_1 true = 1 -> mw := high, limit_MW_High_5;
    mw_goes_high_2 true = 1 -> mw := high, limit_MW_High_4;
    mw_goes_high_3 true = 1 -> mw := high, limit_MW_High_3;
    mw_goes_high_4 true = 1 -> mw := high, limit_MW_High_2;
    mw_goes_high_5 true = 1 -> mw := high, limit_MW_High_1;
  triggeredby mw_high;
  transition mw_goes_low
    mw_goes_low_0 true = 1 -> mw := low, limit_MW_Low;
    mw_goes_low_1 true = 1 -> mw := low, limit_MW_Low_5;
    mw_goes_low_2 true = 1 -> mw := low, limit_MW_Low_4;
    mw_goes_low_3 true = 1 -> mw := low, limit_MW_Low_3;
    mw_goes_low_4 true = 1 -> mw := low, limit_MW_Low_2;
    mw_goes_low_5 true = 1 -> mw := low, limit_MW_Low_1;
  triggeredby mw_low;
  transition mw_goes_to_zero_unexplained
    mw_goes_to_zero_unexplained_0 true = 1 -> mw := zero, entered_zero_zone_MW, count_as_fault;
  transition mw_goes_normal_unexplained
    mw_goes_normal_unexplained_0 true = 1 -> mw := normal, limit_MW_Normal, count_as_fault;
  transition mw_goes_high_unexplained
    mw_goes_high_unexplained_0 true = 1 -> mw := high, limit_MW_High, count_as_fault;
    mw_goes_high_unexplained_1 true = 1 -> mw := high, limit_MW_High_5, count_as_fault;
    mw_goes_high_unexplained_2 true = 1 -> mw := high, limit_MW_High_4, count_as_fault;
    mw_goes_high_unexplained_3 true = 1 -> mw := high, limit_MW_High_3, count_as_fault;
    mw_goes_high_unexplained_4 true = 1 -> mw := high, limit_MW_High_2, count_as_fault;
    mw_goes_high_unexplained_5 true = 1 -> mw := high, limit_MW_High_1, count_as_fault;
  transition mw_goes_low_unexplained
    mw_goes_low_unexplained_0 true = 1 -> mw := low, limit_MW_Low, count_as_fault;
    mw_goes_low_unexplained_1 true = 1 -> mw := low, limit_MW_Low_5, count_as_fault;
    mw_goes_low_unexplained_2 true = 1 -> mw := low, limit_MW_Low_4, count_as_fault;
    mw_goes_low_unexplained_3 true = 1 -> mw := low, limit_MW_Low_3, count_as_fault;
    mw_goes_low_unexplained_4 true = 1 -> mw := low, limit_MW_Low_2, count_as_fault;
    mw_goes_low_unexplained_5 true = 1 -> mw := low, limit_MW_Low_1, count_as_fault;
  transition voltage_goes_normal_when_caps_in
    voltage_goes_normal_when_caps_in_0 (voltage = low AND isolated = false) -> voltage := normal, limit_KV_Normal, check_switched_in;
  transition voltage_goes_normal_when_caps_out
    voltage_goes_normal_when_caps_out_0 (voltage = high AND isolated = false) -> voltage := normal, limit_KV_Normal, check_switched_out;
  transition voltage_goes_normal_when_reenergised
    voltage_goes_normal_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> voltage := normal, limit_KV_Normal;
  transition voltage_goes_high_when_reenergised
    voltage_goes_high_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High;
    voltage_goes_high_when_reenergised_1 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_5;
    voltage_goes_high_when_reenergised_2 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_4;
    voltage_goes_high_when_reenergised_3 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_3;
    voltage_goes_high_when_reenergised_4 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_2;
    voltage_goes_high_when_reenergised_5 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_1;
  transition voltage_goes_Low_when_reenergised
    voltage_goes_Low_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low;
    voltage_goes_Low_when_reenergised_1 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_5;
    voltage_goes_Low_when_reenergised_2 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_4;
    voltage_goes_Low_when_reenergised_3 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_3;
    voltage_goes_Low_when_reenergised_4 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_2;
    voltage_goes_Low_when_reenergised_5 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_1;
  transition voltage_goes_to_zero_when_isolated
    voltage_goes_to_zero_when_isolated_0 (isolated = true AND iso_state_changed = true) -> voltage := zero, entered_zero_zone_KV, check_generators_off;
  transition voltage_goes_low_when_isolated
    voltage_goes_low_when_isolated_0 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low, check_generators_off;
    voltage_goes_low_when_isolated_1 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_5, check_generators_off;
    voltage_goes_low_when_isolated_2 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_4, check_generators_off;
    voltage_goes_low_when_isolated_3 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_3, check_generators_off;
    voltage_goes_low_when_isolated_4 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_2, check_generators_off;
    voltage_goes_low_when_isolated_5 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_1, check_generators_off;
  transition voltage_goes_to_zero
    voltage_goes_to_zero_0 true = 1 -> voltage := zero, entered_zero_zone_KV;
  triggeredby voltage_zero;
  transition voltage_goes_normal
    voltage_goes_normal_0 true = 1 -> voltage := normal, limit_KV_Normal;
  triggeredby voltage_normal;
  transition voltage_goes_high
    voltage_goes_high_0 true = 1 -> voltage := high, limit_KV_High;
    voltage_goes_high_1 true = 1 -> voltage := high, limit_KV_High_5;
    voltage_goes_high_2 true = 1 -> voltage := high, limit_KV_High_4;
    voltage_goes_high_3 true = 1 -> voltage := high, limit_KV_High_3;
    voltage_goes_high_4 true = 1 -> voltage := high, limit_KV_High_2;
    voltage_goes_high_5 true = 1 -> voltage := high, limit_KV_High_1;
  triggeredby voltage_high;
  transition voltage_goes_low
    voltage_goes_low_0 true = 1 -> voltage := low, limit_KV_Low;
    voltage_goes_low_1 true = 1 -> voltage := low, limit_KV_Low_5;
    voltage_goes_low_2 true = 1 -> voltage := low, limit_KV_Low_4;
    voltage_goes_low_3 true = 1 -> voltage := low, limit_KV_Low_3;
    voltage_goes_low_4 true = 1 -> voltage := low, limit_KV_Low_2;
    voltage_goes_low_5 true = 1 -> voltage := low, limit_KV_Low_1;
  triggeredby voltage_low;
  transition voltage_goes_to_zero_unexplained
    voltage_goes_to_zero_unexplained_0 true = 1 -> voltage := zero, entered_zero_zone_KV, count_as_fault;
  transition voltage_goes_normal_unexplained
    voltage_goes_normal_unexplained_0 true = 1 -> voltage := normal, limit_KV_Normal, count_as_fault;
  transition voltage_goes_high_unexplained
    voltage_goes_high_unexplained_0 true = 1 -> voltage := high, limit_KV_High, count_as_fault;
    voltage_goes_high_unexplained_1 true = 1 -> voltage := high, limit_KV_High_5, count_as_fault;
    voltage_goes_high_unexplained_2 true = 1 -> voltage := high, limit_KV_High_4, count_as_fault;
    voltage_goes_high_unexplained_3 true = 1 -> voltage := high, limit_KV_High_3, count_as_fault;
    voltage_goes_high_unexplained_4 true = 1 -> voltage := high, limit_KV_High_2, count_as_fault;
    voltage_goes_high_unexplained_5 true = 1 -> voltage := high, limit_KV_High_1, count_as_fault;
  transition voltage_goes_low_unexplained
    voltage_goes_low_unexplained_0 true = 1 -> voltage := low, limit_KV_Low, count_as_fault;
    voltage_goes_low_unexplained_1 true = 1 -> voltage := low, limit_KV_Low_5, count_as_fault;
    voltage_goes_low_unexplained_2 true = 1 -> voltage := low, limit_KV_Low_4, count_as_fault;
    voltage_goes_low_unexplained_3 true = 1 -> voltage := low, limit_KV_Low_3, count_as_fault;
    voltage_goes_low_unexplained_4 true = 1 -> voltage := low, limit_KV_Low_2, count_as_fault;
    voltage_goes_low_unexplained_5 true = 1 -> voltage := low, limit_KV_Low_1, count_as_fault;
  transition iso_state_changed_timeout
    iso_state_changed_timeout_0 true = 1 -> iso_state_changed := false;
  triggeredby [0.0..15.0] iso_state_changed = true;
  transition become_not_isolated
    become_not_isolated_0 true = 1 -> isolated := false, iso_state_changed := true;
  triggeredby set_isolated_false;
  transition become_isolated
    become_isolated_0 true = 1 -> isolated := true, iso_state_changed := true;
  triggeredby set_isolated_true;
}
component Bus_X120 = {
  var mvar : {zero,high,low,normal};
  var mw : {zero,high,low,normal};
  var voltage : {zero,high,low,normal};
  var iso_state_changed : [0..1];
  var isolated : [0..1];
  event check_generators_off;
  event check_switched_in;
  event check_switched_out;
  event count_as_fault;
  event set_isolated_false;
  event set_isolated_true;
  event mvar_zero;
  event mvar_normal;
  event mvar_high;
  event mvar_low;
  event mw_zero;
  event mw_normal;
  event mw_high;
  event mw_low;
  event voltage_zero;
  event voltage_normal;
  event voltage_high;
  event voltage_low;
  event entered_zero_zone_MVAR;
  event limit_MVAR_High;
  event limit_MVAR_High_5;
  event limit_MVAR_High_4;
  event limit_MVAR_High_3;
  event limit_MVAR_High_2;
  event limit_MVAR_High_1;
  event limit_MVAR_Low;
  event limit_MVAR_Low_5;
  event limit_MVAR_Low_4;
  event limit_MVAR_Low_3;
  event limit_MVAR_Low_2;
  event limit_MVAR_Low_1;
  event limit_MVAR_Normal;
  event entered_zero_zone_MW;
  event limit_MW_High;
  event limit_MW_High_5;
  event limit_MW_High_4;
  event limit_MW_High_3;
  event limit_MW_High_2;
  event limit_MW_High_1;
  event limit_MW_Low;
  event limit_MW_Low_5;
  event limit_MW_Low_4;
  event limit_MW_Low_3;
  event limit_MW_Low_2;
  event limit_MW_Low_1;
  event limit_MW_Normal;
  event entered_zero_zone_KV;
  event limit_KV_High;
  event limit_KV_High_5;
  event limit_KV_High_4;
  event limit_KV_High_3;
  event limit_KV_High_2;
  event limit_KV_High_1;
  event limit_KV_Low;
  event limit_KV_Low_5;
  event limit_KV_Low_4;
  event limit_KV_Low_3;
  event limit_KV_Low_2;
  event limit_KV_Low_1;
  event limit_KV_Normal;
  transition mvar_goes_to_zero
    mvar_goes_to_zero_0 true = 1 -> mvar := zero, entered_zero_zone_MVAR;
  triggeredby mvar_zero;
  transition mvar_goes_normal
    mvar_goes_normal_0 true = 1 -> mvar := normal, limit_MVAR_Normal;
  triggeredby mvar_normal;
  transition mvar_goes_high
    mvar_goes_high_0 true = 1 -> mvar := high, limit_MVAR_High;
    mvar_goes_high_1 true = 1 -> mvar := high, limit_MVAR_High_5;
    mvar_goes_high_2 true = 1 -> mvar := high, limit_MVAR_High_4;
    mvar_goes_high_3 true = 1 -> mvar := high, limit_MVAR_High_3;
    mvar_goes_high_4 true = 1 -> mvar := high, limit_MVAR_High_2;
    mvar_goes_high_5 true = 1 -> mvar := high, limit_MVAR_High_1;
  triggeredby mvar_high;
  transition mvar_goes_low
    mvar_goes_low_0 true = 1 -> mvar := low, limit_MVAR_Low;
    mvar_goes_low_1 true = 1 -> mvar := low, limit_MVAR_Low_5;
    mvar_goes_low_2 true = 1 -> mvar := low, limit_MVAR_Low_4;
    mvar_goes_low_3 true = 1 -> mvar := low, limit_MVAR_Low_3;
    mvar_goes_low_4 true = 1 -> mvar := low, limit_MVAR_Low_2;
    mvar_goes_low_5 true = 1 -> mvar := low, limit_MVAR_Low_1;
  triggeredby mvar_low;
  transition mvar_goes_to_zero_unexplained
    mvar_goes_to_zero_unexplained_0 true = 1 -> mvar := zero, entered_zero_zone_MVAR, count_as_fault;
  transition mvar_goes_normal_unexplained
    mvar_goes_normal_unexplained_0 true = 1 -> mvar := normal, limit_MVAR_Normal, count_as_fault;
  transition mvar_goes_high_unexplained
    mvar_goes_high_unexplained_0 true = 1 -> mvar := high, limit_MVAR_High, count_as_fault;
    mvar_goes_high_unexplained_1 true = 1 -> mvar := high, limit_MVAR_High_5, count_as_fault;
    mvar_goes_high_unexplained_2 true = 1 -> mvar := high, limit_MVAR_High_4, count_as_fault;
    mvar_goes_high_unexplained_3 true = 1 -> mvar := high, limit_MVAR_High_3, count_as_fault;
    mvar_goes_high_unexplained_4 true = 1 -> mvar := high, limit_MVAR_High_2, count_as_fault;
    mvar_goes_high_unexplained_5 true = 1 -> mvar := high, limit_MVAR_High_1, count_as_fault;
  transition mvar_goes_low_unexplained
    mvar_goes_low_unexplained_0 true = 1 -> mvar := low, limit_MVAR_Low, count_as_fault;
    mvar_goes_low_unexplained_1 true = 1 -> mvar := low, limit_MVAR_Low_5, count_as_fault;
    mvar_goes_low_unexplained_2 true = 1 -> mvar := low, limit_MVAR_Low_4, count_as_fault;
    mvar_goes_low_unexplained_3 true = 1 -> mvar := low, limit_MVAR_Low_3, count_as_fault;
    mvar_goes_low_unexplained_4 true = 1 -> mvar := low, limit_MVAR_Low_2, count_as_fault;
    mvar_goes_low_unexplained_5 true = 1 -> mvar := low, limit_MVAR_Low_1, count_as_fault;
  transition mw_goes_normal_when_reenergised
    mw_goes_normal_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> mw := normal, limit_MW_Normal;
  transition mw_goes_high_when_reenergised
    mw_goes_high_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High;
    mw_goes_high_when_reenergised_1 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_5;
    mw_goes_high_when_reenergised_2 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_4;
    mw_goes_high_when_reenergised_3 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_3;
    mw_goes_high_when_reenergised_4 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_2;
    mw_goes_high_when_reenergised_5 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_1;
  transition mw_goes_low_when_reenergised
    mw_goes_low_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low;
    mw_goes_low_when_reenergised_1 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_5;
    mw_goes_low_when_reenergised_2 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_4;
    mw_goes_low_when_reenergised_3 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_3;
    mw_goes_low_when_reenergised_4 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_2;
    mw_goes_low_when_reenergised_5 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_1;
  transition mw_goes_to_zero_when_isolated
    mw_goes_to_zero_when_isolated_0 (isolated = true AND iso_state_changed = true) -> mw := zero, entered_zero_zone_MW, check_generators_off;
  transition mw_goes_low_when_isolated
    mw_goes_low_when_isolated_0 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low, check_generators_off;
    mw_goes_low_when_isolated_1 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_5, check_generators_off;
    mw_goes_low_when_isolated_2 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_4, check_generators_off;
    mw_goes_low_when_isolated_3 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_3, check_generators_off;
    mw_goes_low_when_isolated_4 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_2, check_generators_off;
    mw_goes_low_when_isolated_5 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_1, check_generators_off;
  transition mw_goes_to_zero
    mw_goes_to_zero_0 true = 1 -> mw := zero, entered_zero_zone_MW;
  triggeredby mw_zero;
  transition mw_goes_normal
    mw_goes_normal_0 true = 1 -> mw := normal, limit_MW_Normal;
  triggeredby mw_normal;
  transition mw_goes_high
    mw_goes_high_0 true = 1 -> mw := high, limit_MW_High;
    mw_goes_high_1 true = 1 -> mw := high, limit_MW_High_5;
    mw_goes_high_2 true = 1 -> mw := high, limit_MW_High_4;
    mw_goes_high_3 true = 1 -> mw := high, limit_MW_High_3;
    mw_goes_high_4 true = 1 -> mw := high, limit_MW_High_2;
    mw_goes_high_5 true = 1 -> mw := high, limit_MW_High_1;
  triggeredby mw_high;
  transition mw_goes_low
    mw_goes_low_0 true = 1 -> mw := low, limit_MW_Low;
    mw_goes_low_1 true = 1 -> mw := low, limit_MW_Low_5;
    mw_goes_low_2 true = 1 -> mw := low, limit_MW_Low_4;
    mw_goes_low_3 true = 1 -> mw := low, limit_MW_Low_3;
    mw_goes_low_4 true = 1 -> mw := low, limit_MW_Low_2;
    mw_goes_low_5 true = 1 -> mw := low, limit_MW_Low_1;
  triggeredby mw_low;
  transition mw_goes_to_zero_unexplained
    mw_goes_to_zero_unexplained_0 true = 1 -> mw := zero, entered_zero_zone_MW, count_as_fault;
  transition mw_goes_normal_unexplained
    mw_goes_normal_unexplained_0 true = 1 -> mw := normal, limit_MW_Normal, count_as_fault;
  transition mw_goes_high_unexplained
    mw_goes_high_unexplained_0 true = 1 -> mw := high, limit_MW_High, count_as_fault;
    mw_goes_high_unexplained_1 true = 1 -> mw := high, limit_MW_High_5, count_as_fault;
    mw_goes_high_unexplained_2 true = 1 -> mw := high, limit_MW_High_4, count_as_fault;
    mw_goes_high_unexplained_3 true = 1 -> mw := high, limit_MW_High_3, count_as_fault;
    mw_goes_high_unexplained_4 true = 1 -> mw := high, limit_MW_High_2, count_as_fault;
    mw_goes_high_unexplained_5 true = 1 -> mw := high, limit_MW_High_1, count_as_fault;
  transition mw_goes_low_unexplained
    mw_goes_low_unexplained_0 true = 1 -> mw := low, limit_MW_Low, count_as_fault;
    mw_goes_low_unexplained_1 true = 1 -> mw := low, limit_MW_Low_5, count_as_fault;
    mw_goes_low_unexplained_2 true = 1 -> mw := low, limit_MW_Low_4, count_as_fault;
    mw_goes_low_unexplained_3 true = 1 -> mw := low, limit_MW_Low_3, count_as_fault;
    mw_goes_low_unexplained_4 true = 1 -> mw := low, limit_MW_Low_2, count_as_fault;
    mw_goes_low_unexplained_5 true = 1 -> mw := low, limit_MW_Low_1, count_as_fault;
  transition voltage_goes_normal_when_caps_in
    voltage_goes_normal_when_caps_in_0 (voltage = low AND isolated = false) -> voltage := normal, limit_KV_Normal, check_switched_in;
  transition voltage_goes_normal_when_caps_out
    voltage_goes_normal_when_caps_out_0 (voltage = high AND isolated = false) -> voltage := normal, limit_KV_Normal, check_switched_out;
  transition voltage_goes_normal_when_reenergised
    voltage_goes_normal_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> voltage := normal, limit_KV_Normal;
  transition voltage_goes_high_when_reenergised
    voltage_goes_high_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High;
    voltage_goes_high_when_reenergised_1 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_5;
    voltage_goes_high_when_reenergised_2 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_4;
    voltage_goes_high_when_reenergised_3 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_3;
    voltage_goes_high_when_reenergised_4 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_2;
    voltage_goes_high_when_reenergised_5 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_1;
  transition voltage_goes_Low_when_reenergised
    voltage_goes_Low_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low;
    voltage_goes_Low_when_reenergised_1 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_5;
    voltage_goes_Low_when_reenergised_2 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_4;
    voltage_goes_Low_when_reenergised_3 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_3;
    voltage_goes_Low_when_reenergised_4 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_2;
    voltage_goes_Low_when_reenergised_5 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_1;
  transition voltage_goes_to_zero_when_isolated
    voltage_goes_to_zero_when_isolated_0 (isolated = true AND iso_state_changed = true) -> voltage := zero, entered_zero_zone_KV, check_generators_off;
  transition voltage_goes_low_when_isolated
    voltage_goes_low_when_isolated_0 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low, check_generators_off;
    voltage_goes_low_when_isolated_1 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_5, check_generators_off;
    voltage_goes_low_when_isolated_2 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_4, check_generators_off;
    voltage_goes_low_when_isolated_3 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_3, check_generators_off;
    voltage_goes_low_when_isolated_4 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_2, check_generators_off;
    voltage_goes_low_when_isolated_5 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_1, check_generators_off;
  transition voltage_goes_to_zero
    voltage_goes_to_zero_0 true = 1 -> voltage := zero, entered_zero_zone_KV;
  triggeredby voltage_zero;
  transition voltage_goes_normal
    voltage_goes_normal_0 true = 1 -> voltage := normal, limit_KV_Normal;
  triggeredby voltage_normal;
  transition voltage_goes_high
    voltage_goes_high_0 true = 1 -> voltage := high, limit_KV_High;
    voltage_goes_high_1 true = 1 -> voltage := high, limit_KV_High_5;
    voltage_goes_high_2 true = 1 -> voltage := high, limit_KV_High_4;
    voltage_goes_high_3 true = 1 -> voltage := high, limit_KV_High_3;
    voltage_goes_high_4 true = 1 -> voltage := high, limit_KV_High_2;
    voltage_goes_high_5 true = 1 -> voltage := high, limit_KV_High_1;
  triggeredby voltage_high;
  transition voltage_goes_low
    voltage_goes_low_0 true = 1 -> voltage := low, limit_KV_Low;
    voltage_goes_low_1 true = 1 -> voltage := low, limit_KV_Low_5;
    voltage_goes_low_2 true = 1 -> voltage := low, limit_KV_Low_4;
    voltage_goes_low_3 true = 1 -> voltage := low, limit_KV_Low_3;
    voltage_goes_low_4 true = 1 -> voltage := low, limit_KV_Low_2;
    voltage_goes_low_5 true = 1 -> voltage := low, limit_KV_Low_1;
  triggeredby voltage_low;
  transition voltage_goes_to_zero_unexplained
    voltage_goes_to_zero_unexplained_0 true = 1 -> voltage := zero, entered_zero_zone_KV, count_as_fault;
  transition voltage_goes_normal_unexplained
    voltage_goes_normal_unexplained_0 true = 1 -> voltage := normal, limit_KV_Normal, count_as_fault;
  transition voltage_goes_high_unexplained
    voltage_goes_high_unexplained_0 true = 1 -> voltage := high, limit_KV_High, count_as_fault;
    voltage_goes_high_unexplained_1 true = 1 -> voltage := high, limit_KV_High_5, count_as_fault;
    voltage_goes_high_unexplained_2 true = 1 -> voltage := high, limit_KV_High_4, count_as_fault;
    voltage_goes_high_unexplained_3 true = 1 -> voltage := high, limit_KV_High_3, count_as_fault;
    voltage_goes_high_unexplained_4 true = 1 -> voltage := high, limit_KV_High_2, count_as_fault;
    voltage_goes_high_unexplained_5 true = 1 -> voltage := high, limit_KV_High_1, count_as_fault;
  transition voltage_goes_low_unexplained
    voltage_goes_low_unexplained_0 true = 1 -> voltage := low, limit_KV_Low, count_as_fault;
    voltage_goes_low_unexplained_1 true = 1 -> voltage := low, limit_KV_Low_5, count_as_fault;
    voltage_goes_low_unexplained_2 true = 1 -> voltage := low, limit_KV_Low_4, count_as_fault;
    voltage_goes_low_unexplained_3 true = 1 -> voltage := low, limit_KV_Low_3, count_as_fault;
    voltage_goes_low_unexplained_4 true = 1 -> voltage := low, limit_KV_Low_2, count_as_fault;
    voltage_goes_low_unexplained_5 true = 1 -> voltage := low, limit_KV_Low_1, count_as_fault;
  transition iso_state_changed_timeout
    iso_state_changed_timeout_0 true = 1 -> iso_state_changed := false;
  triggeredby [0.0..15.0] iso_state_changed = true;
  transition become_not_isolated
    become_not_isolated_0 true = 1 -> isolated := false, iso_state_changed := true;
  triggeredby set_isolated_false;
  transition become_isolated
    become_isolated_0 true = 1 -> isolated := true, iso_state_changed := true;
  triggeredby set_isolated_true;
}
component Bus_X85 = {
  var mvar : {zero,high,low,normal};
  var mw : {zero,high,low,normal};
  var voltage : {zero,high,low,normal};
  var iso_state_changed : [0..1];
  var isolated : [0..1];
  event check_generators_off;
  event check_switched_in;
  event check_switched_out;
  event count_as_fault;
  event set_isolated_false;
  event set_isolated_true;
  event mvar_zero;
  event mvar_normal;
  event mvar_high;
  event mvar_low;
  event mw_zero;
  event mw_normal;
  event mw_high;
  event mw_low;
  event voltage_zero;
  event voltage_normal;
  event voltage_high;
  event voltage_low;
  event entered_zero_zone_MVAR;
  event limit_MVAR_High;
  event limit_MVAR_High_5;
  event limit_MVAR_High_4;
  event limit_MVAR_High_3;
  event limit_MVAR_High_2;
  event limit_MVAR_High_1;
  event limit_MVAR_Low;
  event limit_MVAR_Low_5;
  event limit_MVAR_Low_4;
  event limit_MVAR_Low_3;
  event limit_MVAR_Low_2;
  event limit_MVAR_Low_1;
  event limit_MVAR_Normal;
  event entered_zero_zone_MW;
  event limit_MW_High;
  event limit_MW_High_5;
  event limit_MW_High_4;
  event limit_MW_High_3;
  event limit_MW_High_2;
  event limit_MW_High_1;
  event limit_MW_Low;
  event limit_MW_Low_5;
  event limit_MW_Low_4;
  event limit_MW_Low_3;
  event limit_MW_Low_2;
  event limit_MW_Low_1;
  event limit_MW_Normal;
  event entered_zero_zone_KV;
  event limit_KV_High;
  event limit_KV_High_5;
  event limit_KV_High_4;
  event limit_KV_High_3;
  event limit_KV_High_2;
  event limit_KV_High_1;
  event limit_KV_Low;
  event limit_KV_Low_5;
  event limit_KV_Low_4;
  event limit_KV_Low_3;
  event limit_KV_Low_2;
  event limit_KV_Low_1;
  event limit_KV_Normal;
  transition mvar_goes_to_zero
    mvar_goes_to_zero_0 true = 1 -> mvar := zero, entered_zero_zone_MVAR;
  triggeredby mvar_zero;
  transition mvar_goes_normal
    mvar_goes_normal_0 true = 1 -> mvar := normal, limit_MVAR_Normal;
  triggeredby mvar_normal;
  transition mvar_goes_high
    mvar_goes_high_0 true = 1 -> mvar := high, limit_MVAR_High;
    mvar_goes_high_1 true = 1 -> mvar := high, limit_MVAR_High_5;
    mvar_goes_high_2 true = 1 -> mvar := high, limit_MVAR_High_4;
    mvar_goes_high_3 true = 1 -> mvar := high, limit_MVAR_High_3;
    mvar_goes_high_4 true = 1 -> mvar := high, limit_MVAR_High_2;
    mvar_goes_high_5 true = 1 -> mvar := high, limit_MVAR_High_1;
  triggeredby mvar_high;
  transition mvar_goes_low
    mvar_goes_low_0 true = 1 -> mvar := low, limit_MVAR_Low;
    mvar_goes_low_1 true = 1 -> mvar := low, limit_MVAR_Low_5;
    mvar_goes_low_2 true = 1 -> mvar := low, limit_MVAR_Low_4;
    mvar_goes_low_3 true = 1 -> mvar := low, limit_MVAR_Low_3;
    mvar_goes_low_4 true = 1 -> mvar := low, limit_MVAR_Low_2;
    mvar_goes_low_5 true = 1 -> mvar := low, limit_MVAR_Low_1;
  triggeredby mvar_low;
  transition mvar_goes_to_zero_unexplained
    mvar_goes_to_zero_unexplained_0 true = 1 -> mvar := zero, entered_zero_zone_MVAR, count_as_fault;
  transition mvar_goes_normal_unexplained
    mvar_goes_normal_unexplained_0 true = 1 -> mvar := normal, limit_MVAR_Normal, count_as_fault;
  transition mvar_goes_high_unexplained
    mvar_goes_high_unexplained_0 true = 1 -> mvar := high, limit_MVAR_High, count_as_fault;
    mvar_goes_high_unexplained_1 true = 1 -> mvar := high, limit_MVAR_High_5, count_as_fault;
    mvar_goes_high_unexplained_2 true = 1 -> mvar := high, limit_MVAR_High_4, count_as_fault;
    mvar_goes_high_unexplained_3 true = 1 -> mvar := high, limit_MVAR_High_3, count_as_fault;
    mvar_goes_high_unexplained_4 true = 1 -> mvar := high, limit_MVAR_High_2, count_as_fault;
    mvar_goes_high_unexplained_5 true = 1 -> mvar := high, limit_MVAR_High_1, count_as_fault;
  transition mvar_goes_low_unexplained
    mvar_goes_low_unexplained_0 true = 1 -> mvar := low, limit_MVAR_Low, count_as_fault;
    mvar_goes_low_unexplained_1 true = 1 -> mvar := low, limit_MVAR_Low_5, count_as_fault;
    mvar_goes_low_unexplained_2 true = 1 -> mvar := low, limit_MVAR_Low_4, count_as_fault;
    mvar_goes_low_unexplained_3 true = 1 -> mvar := low, limit_MVAR_Low_3, count_as_fault;
    mvar_goes_low_unexplained_4 true = 1 -> mvar := low, limit_MVAR_Low_2, count_as_fault;
    mvar_goes_low_unexplained_5 true = 1 -> mvar := low, limit_MVAR_Low_1, count_as_fault;
  transition mw_goes_normal_when_reenergised
    mw_goes_normal_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> mw := normal, limit_MW_Normal;
  transition mw_goes_high_when_reenergised
    mw_goes_high_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High;
    mw_goes_high_when_reenergised_1 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_5;
    mw_goes_high_when_reenergised_2 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_4;
    mw_goes_high_when_reenergised_3 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_3;
    mw_goes_high_when_reenergised_4 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_2;
    mw_goes_high_when_reenergised_5 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_1;
  transition mw_goes_low_when_reenergised
    mw_goes_low_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low;
    mw_goes_low_when_reenergised_1 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_5;
    mw_goes_low_when_reenergised_2 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_4;
    mw_goes_low_when_reenergised_3 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_3;
    mw_goes_low_when_reenergised_4 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_2;
    mw_goes_low_when_reenergised_5 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_1;
  transition mw_goes_to_zero_when_isolated
    mw_goes_to_zero_when_isolated_0 (isolated = true AND iso_state_changed = true) -> mw := zero, entered_zero_zone_MW, check_generators_off;
  transition mw_goes_low_when_isolated
    mw_goes_low_when_isolated_0 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low, check_generators_off;
    mw_goes_low_when_isolated_1 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_5, check_generators_off;
    mw_goes_low_when_isolated_2 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_4, check_generators_off;
    mw_goes_low_when_isolated_3 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_3, check_generators_off;
    mw_goes_low_when_isolated_4 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_2, check_generators_off;
    mw_goes_low_when_isolated_5 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_1, check_generators_off;
  transition mw_goes_to_zero
    mw_goes_to_zero_0 true = 1 -> mw := zero, entered_zero_zone_MW;
  triggeredby mw_zero;
  transition mw_goes_normal
    mw_goes_normal_0 true = 1 -> mw := normal, limit_MW_Normal;
  triggeredby mw_normal;
  transition mw_goes_high
    mw_goes_high_0 true = 1 -> mw := high, limit_MW_High;
    mw_goes_high_1 true = 1 -> mw := high, limit_MW_High_5;
    mw_goes_high_2 true = 1 -> mw := high, limit_MW_High_4;
    mw_goes_high_3 true = 1 -> mw := high, limit_MW_High_3;
    mw_goes_high_4 true = 1 -> mw := high, limit_MW_High_2;
    mw_goes_high_5 true = 1 -> mw := high, limit_MW_High_1;
  triggeredby mw_high;
  transition mw_goes_low
    mw_goes_low_0 true = 1 -> mw := low, limit_MW_Low;
    mw_goes_low_1 true = 1 -> mw := low, limit_MW_Low_5;
    mw_goes_low_2 true = 1 -> mw := low, limit_MW_Low_4;
    mw_goes_low_3 true = 1 -> mw := low, limit_MW_Low_3;
    mw_goes_low_4 true = 1 -> mw := low, limit_MW_Low_2;
    mw_goes_low_5 true = 1 -> mw := low, limit_MW_Low_1;
  triggeredby mw_low;
  transition mw_goes_to_zero_unexplained
    mw_goes_to_zero_unexplained_0 true = 1 -> mw := zero, entered_zero_zone_MW, count_as_fault;
  transition mw_goes_normal_unexplained
    mw_goes_normal_unexplained_0 true = 1 -> mw := normal, limit_MW_Normal, count_as_fault;
  transition mw_goes_high_unexplained
    mw_goes_high_unexplained_0 true = 1 -> mw := high, limit_MW_High, count_as_fault;
    mw_goes_high_unexplained_1 true = 1 -> mw := high, limit_MW_High_5, count_as_fault;
    mw_goes_high_unexplained_2 true = 1 -> mw := high, limit_MW_High_4, count_as_fault;
    mw_goes_high_unexplained_3 true = 1 -> mw := high, limit_MW_High_3, count_as_fault;
    mw_goes_high_unexplained_4 true = 1 -> mw := high, limit_MW_High_2, count_as_fault;
    mw_goes_high_unexplained_5 true = 1 -> mw := high, limit_MW_High_1, count_as_fault;
  transition mw_goes_low_unexplained
    mw_goes_low_unexplained_0 true = 1 -> mw := low, limit_MW_Low, count_as_fault;
    mw_goes_low_unexplained_1 true = 1 -> mw := low, limit_MW_Low_5, count_as_fault;
    mw_goes_low_unexplained_2 true = 1 -> mw := low, limit_MW_Low_4, count_as_fault;
    mw_goes_low_unexplained_3 true = 1 -> mw := low, limit_MW_Low_3, count_as_fault;
    mw_goes_low_unexplained_4 true = 1 -> mw := low, limit_MW_Low_2, count_as_fault;
    mw_goes_low_unexplained_5 true = 1 -> mw := low, limit_MW_Low_1, count_as_fault;
  transition voltage_goes_normal_when_caps_in
    voltage_goes_normal_when_caps_in_0 (voltage = low AND isolated = false) -> voltage := normal, limit_KV_Normal, check_switched_in;
  transition voltage_goes_normal_when_caps_out
    voltage_goes_normal_when_caps_out_0 (voltage = high AND isolated = false) -> voltage := normal, limit_KV_Normal, check_switched_out;
  transition voltage_goes_normal_when_reenergised
    voltage_goes_normal_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> voltage := normal, limit_KV_Normal;
  transition voltage_goes_high_when_reenergised
    voltage_goes_high_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High;
    voltage_goes_high_when_reenergised_1 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_5;
    voltage_goes_high_when_reenergised_2 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_4;
    voltage_goes_high_when_reenergised_3 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_3;
    voltage_goes_high_when_reenergised_4 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_2;
    voltage_goes_high_when_reenergised_5 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_1;
  transition voltage_goes_Low_when_reenergised
    voltage_goes_Low_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low;
    voltage_goes_Low_when_reenergised_1 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_5;
    voltage_goes_Low_when_reenergised_2 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_4;
    voltage_goes_Low_when_reenergised_3 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_3;
    voltage_goes_Low_when_reenergised_4 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_2;
    voltage_goes_Low_when_reenergised_5 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_1;
  transition voltage_goes_to_zero_when_isolated
    voltage_goes_to_zero_when_isolated_0 (isolated = true AND iso_state_changed = true) -> voltage := zero, entered_zero_zone_KV, check_generators_off;
  transition voltage_goes_low_when_isolated
    voltage_goes_low_when_isolated_0 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low, check_generators_off;
    voltage_goes_low_when_isolated_1 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_5, check_generators_off;
    voltage_goes_low_when_isolated_2 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_4, check_generators_off;
    voltage_goes_low_when_isolated_3 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_3, check_generators_off;
    voltage_goes_low_when_isolated_4 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_2, check_generators_off;
    voltage_goes_low_when_isolated_5 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_1, check_generators_off;
  transition voltage_goes_to_zero
    voltage_goes_to_zero_0 true = 1 -> voltage := zero, entered_zero_zone_KV;
  triggeredby voltage_zero;
  transition voltage_goes_normal
    voltage_goes_normal_0 true = 1 -> voltage := normal, limit_KV_Normal;
  triggeredby voltage_normal;
  transition voltage_goes_high
    voltage_goes_high_0 true = 1 -> voltage := high, limit_KV_High;
    voltage_goes_high_1 true = 1 -> voltage := high, limit_KV_High_5;
    voltage_goes_high_2 true = 1 -> voltage := high, limit_KV_High_4;
    voltage_goes_high_3 true = 1 -> voltage := high, limit_KV_High_3;
    voltage_goes_high_4 true = 1 -> voltage := high, limit_KV_High_2;
    voltage_goes_high_5 true = 1 -> voltage := high, limit_KV_High_1;
  triggeredby voltage_high;
  transition voltage_goes_low
    voltage_goes_low_0 true = 1 -> voltage := low, limit_KV_Low;
    voltage_goes_low_1 true = 1 -> voltage := low, limit_KV_Low_5;
    voltage_goes_low_2 true = 1 -> voltage := low, limit_KV_Low_4;
    voltage_goes_low_3 true = 1 -> voltage := low, limit_KV_Low_3;
    voltage_goes_low_4 true = 1 -> voltage := low, limit_KV_Low_2;
    voltage_goes_low_5 true = 1 -> voltage := low, limit_KV_Low_1;
  triggeredby voltage_low;
  transition voltage_goes_to_zero_unexplained
    voltage_goes_to_zero_unexplained_0 true = 1 -> voltage := zero, entered_zero_zone_KV, count_as_fault;
  transition voltage_goes_normal_unexplained
    voltage_goes_normal_unexplained_0 true = 1 -> voltage := normal, limit_KV_Normal, count_as_fault;
  transition voltage_goes_high_unexplained
    voltage_goes_high_unexplained_0 true = 1 -> voltage := high, limit_KV_High, count_as_fault;
    voltage_goes_high_unexplained_1 true = 1 -> voltage := high, limit_KV_High_5, count_as_fault;
    voltage_goes_high_unexplained_2 true = 1 -> voltage := high, limit_KV_High_4, count_as_fault;
    voltage_goes_high_unexplained_3 true = 1 -> voltage := high, limit_KV_High_3, count_as_fault;
    voltage_goes_high_unexplained_4 true = 1 -> voltage := high, limit_KV_High_2, count_as_fault;
    voltage_goes_high_unexplained_5 true = 1 -> voltage := high, limit_KV_High_1, count_as_fault;
  transition voltage_goes_low_unexplained
    voltage_goes_low_unexplained_0 true = 1 -> voltage := low, limit_KV_Low, count_as_fault;
    voltage_goes_low_unexplained_1 true = 1 -> voltage := low, limit_KV_Low_5, count_as_fault;
    voltage_goes_low_unexplained_2 true = 1 -> voltage := low, limit_KV_Low_4, count_as_fault;
    voltage_goes_low_unexplained_3 true = 1 -> voltage := low, limit_KV_Low_3, count_as_fault;
    voltage_goes_low_unexplained_4 true = 1 -> voltage := low, limit_KV_Low_2, count_as_fault;
    voltage_goes_low_unexplained_5 true = 1 -> voltage := low, limit_KV_Low_1, count_as_fault;
  transition iso_state_changed_timeout
    iso_state_changed_timeout_0 true = 1 -> iso_state_changed := false;
  triggeredby [0.0..15.0] iso_state_changed = true;
  transition become_not_isolated
    become_not_isolated_0 true = 1 -> isolated := false, iso_state_changed := true;
  triggeredby set_isolated_false;
  transition become_isolated
    become_isolated_0 true = 1 -> isolated := true, iso_state_changed := true;
  triggeredby set_isolated_true;
}
component Bus_X121 = {
  var mvar : {zero,high,low,normal};
  var mw : {zero,high,low,normal};
  var voltage : {zero,high,low,normal};
  var iso_state_changed : [0..1];
  var isolated : [0..1];
  event check_generators_off;
  event check_switched_in;
  event check_switched_out;
  event count_as_fault;
  event set_isolated_false;
  event set_isolated_true;
  event mvar_zero;
  event mvar_normal;
  event mvar_high;
  event mvar_low;
  event mw_zero;
  event mw_normal;
  event mw_high;
  event mw_low;
  event voltage_zero;
  event voltage_normal;
  event voltage_high;
  event voltage_low;
  event entered_zero_zone_MVAR;
  event limit_MVAR_High;
  event limit_MVAR_High_5;
  event limit_MVAR_High_4;
  event limit_MVAR_High_3;
  event limit_MVAR_High_2;
  event limit_MVAR_High_1;
  event limit_MVAR_Low;
  event limit_MVAR_Low_5;
  event limit_MVAR_Low_4;
  event limit_MVAR_Low_3;
  event limit_MVAR_Low_2;
  event limit_MVAR_Low_1;
  event limit_MVAR_Normal;
  event entered_zero_zone_MW;
  event limit_MW_High;
  event limit_MW_High_5;
  event limit_MW_High_4;
  event limit_MW_High_3;
  event limit_MW_High_2;
  event limit_MW_High_1;
  event limit_MW_Low;
  event limit_MW_Low_5;
  event limit_MW_Low_4;
  event limit_MW_Low_3;
  event limit_MW_Low_2;
  event limit_MW_Low_1;
  event limit_MW_Normal;
  event entered_zero_zone_KV;
  event limit_KV_High;
  event limit_KV_High_5;
  event limit_KV_High_4;
  event limit_KV_High_3;
  event limit_KV_High_2;
  event limit_KV_High_1;
  event limit_KV_Low;
  event limit_KV_Low_5;
  event limit_KV_Low_4;
  event limit_KV_Low_3;
  event limit_KV_Low_2;
  event limit_KV_Low_1;
  event limit_KV_Normal;
  transition mvar_goes_to_zero
    mvar_goes_to_zero_0 true = 1 -> mvar := zero, entered_zero_zone_MVAR;
  triggeredby mvar_zero;
  transition mvar_goes_normal
    mvar_goes_normal_0 true = 1 -> mvar := normal, limit_MVAR_Normal;
  triggeredby mvar_normal;
  transition mvar_goes_high
    mvar_goes_high_0 true = 1 -> mvar := high, limit_MVAR_High;
    mvar_goes_high_1 true = 1 -> mvar := high, limit_MVAR_High_5;
    mvar_goes_high_2 true = 1 -> mvar := high, limit_MVAR_High_4;
    mvar_goes_high_3 true = 1 -> mvar := high, limit_MVAR_High_3;
    mvar_goes_high_4 true = 1 -> mvar := high, limit_MVAR_High_2;
    mvar_goes_high_5 true = 1 -> mvar := high, limit_MVAR_High_1;
  triggeredby mvar_high;
  transition mvar_goes_low
    mvar_goes_low_0 true = 1 -> mvar := low, limit_MVAR_Low;
    mvar_goes_low_1 true = 1 -> mvar := low, limit_MVAR_Low_5;
    mvar_goes_low_2 true = 1 -> mvar := low, limit_MVAR_Low_4;
    mvar_goes_low_3 true = 1 -> mvar := low, limit_MVAR_Low_3;
    mvar_goes_low_4 true = 1 -> mvar := low, limit_MVAR_Low_2;
    mvar_goes_low_5 true = 1 -> mvar := low, limit_MVAR_Low_1;
  triggeredby mvar_low;
  transition mvar_goes_to_zero_unexplained
    mvar_goes_to_zero_unexplained_0 true = 1 -> mvar := zero, entered_zero_zone_MVAR, count_as_fault;
  transition mvar_goes_normal_unexplained
    mvar_goes_normal_unexplained_0 true = 1 -> mvar := normal, limit_MVAR_Normal, count_as_fault;
  transition mvar_goes_high_unexplained
    mvar_goes_high_unexplained_0 true = 1 -> mvar := high, limit_MVAR_High, count_as_fault;
    mvar_goes_high_unexplained_1 true = 1 -> mvar := high, limit_MVAR_High_5, count_as_fault;
    mvar_goes_high_unexplained_2 true = 1 -> mvar := high, limit_MVAR_High_4, count_as_fault;
    mvar_goes_high_unexplained_3 true = 1 -> mvar := high, limit_MVAR_High_3, count_as_fault;
    mvar_goes_high_unexplained_4 true = 1 -> mvar := high, limit_MVAR_High_2, count_as_fault;
    mvar_goes_high_unexplained_5 true = 1 -> mvar := high, limit_MVAR_High_1, count_as_fault;
  transition mvar_goes_low_unexplained
    mvar_goes_low_unexplained_0 true = 1 -> mvar := low, limit_MVAR_Low, count_as_fault;
    mvar_goes_low_unexplained_1 true = 1 -> mvar := low, limit_MVAR_Low_5, count_as_fault;
    mvar_goes_low_unexplained_2 true = 1 -> mvar := low, limit_MVAR_Low_4, count_as_fault;
    mvar_goes_low_unexplained_3 true = 1 -> mvar := low, limit_MVAR_Low_3, count_as_fault;
    mvar_goes_low_unexplained_4 true = 1 -> mvar := low, limit_MVAR_Low_2, count_as_fault;
    mvar_goes_low_unexplained_5 true = 1 -> mvar := low, limit_MVAR_Low_1, count_as_fault;
  transition mw_goes_normal_when_reenergised
    mw_goes_normal_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> mw := normal, limit_MW_Normal;
  transition mw_goes_high_when_reenergised
    mw_goes_high_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High;
    mw_goes_high_when_reenergised_1 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_5;
    mw_goes_high_when_reenergised_2 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_4;
    mw_goes_high_when_reenergised_3 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_3;
    mw_goes_high_when_reenergised_4 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_2;
    mw_goes_high_when_reenergised_5 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_1;
  transition mw_goes_low_when_reenergised
    mw_goes_low_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low;
    mw_goes_low_when_reenergised_1 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_5;
    mw_goes_low_when_reenergised_2 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_4;
    mw_goes_low_when_reenergised_3 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_3;
    mw_goes_low_when_reenergised_4 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_2;
    mw_goes_low_when_reenergised_5 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_1;
  transition mw_goes_to_zero_when_isolated
    mw_goes_to_zero_when_isolated_0 (isolated = true AND iso_state_changed = true) -> mw := zero, entered_zero_zone_MW, check_generators_off;
  transition mw_goes_low_when_isolated
    mw_goes_low_when_isolated_0 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low, check_generators_off;
    mw_goes_low_when_isolated_1 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_5, check_generators_off;
    mw_goes_low_when_isolated_2 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_4, check_generators_off;
    mw_goes_low_when_isolated_3 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_3, check_generators_off;
    mw_goes_low_when_isolated_4 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_2, check_generators_off;
    mw_goes_low_when_isolated_5 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_1, check_generators_off;
  transition mw_goes_to_zero
    mw_goes_to_zero_0 true = 1 -> mw := zero, entered_zero_zone_MW;
  triggeredby mw_zero;
  transition mw_goes_normal
    mw_goes_normal_0 true = 1 -> mw := normal, limit_MW_Normal;
  triggeredby mw_normal;
  transition mw_goes_high
    mw_goes_high_0 true = 1 -> mw := high, limit_MW_High;
    mw_goes_high_1 true = 1 -> mw := high, limit_MW_High_5;
    mw_goes_high_2 true = 1 -> mw := high, limit_MW_High_4;
    mw_goes_high_3 true = 1 -> mw := high, limit_MW_High_3;
    mw_goes_high_4 true = 1 -> mw := high, limit_MW_High_2;
    mw_goes_high_5 true = 1 -> mw := high, limit_MW_High_1;
  triggeredby mw_high;
  transition mw_goes_low
    mw_goes_low_0 true = 1 -> mw := low, limit_MW_Low;
    mw_goes_low_1 true = 1 -> mw := low, limit_MW_Low_5;
    mw_goes_low_2 true = 1 -> mw := low, limit_MW_Low_4;
    mw_goes_low_3 true = 1 -> mw := low, limit_MW_Low_3;
    mw_goes_low_4 true = 1 -> mw := low, limit_MW_Low_2;
    mw_goes_low_5 true = 1 -> mw := low, limit_MW_Low_1;
  triggeredby mw_low;
  transition mw_goes_to_zero_unexplained
    mw_goes_to_zero_unexplained_0 true = 1 -> mw := zero, entered_zero_zone_MW, count_as_fault;
  transition mw_goes_normal_unexplained
    mw_goes_normal_unexplained_0 true = 1 -> mw := normal, limit_MW_Normal, count_as_fault;
  transition mw_goes_high_unexplained
    mw_goes_high_unexplained_0 true = 1 -> mw := high, limit_MW_High, count_as_fault;
    mw_goes_high_unexplained_1 true = 1 -> mw := high, limit_MW_High_5, count_as_fault;
    mw_goes_high_unexplained_2 true = 1 -> mw := high, limit_MW_High_4, count_as_fault;
    mw_goes_high_unexplained_3 true = 1 -> mw := high, limit_MW_High_3, count_as_fault;
    mw_goes_high_unexplained_4 true = 1 -> mw := high, limit_MW_High_2, count_as_fault;
    mw_goes_high_unexplained_5 true = 1 -> mw := high, limit_MW_High_1, count_as_fault;
  transition mw_goes_low_unexplained
    mw_goes_low_unexplained_0 true = 1 -> mw := low, limit_MW_Low, count_as_fault;
    mw_goes_low_unexplained_1 true = 1 -> mw := low, limit_MW_Low_5, count_as_fault;
    mw_goes_low_unexplained_2 true = 1 -> mw := low, limit_MW_Low_4, count_as_fault;
    mw_goes_low_unexplained_3 true = 1 -> mw := low, limit_MW_Low_3, count_as_fault;
    mw_goes_low_unexplained_4 true = 1 -> mw := low, limit_MW_Low_2, count_as_fault;
    mw_goes_low_unexplained_5 true = 1 -> mw := low, limit_MW_Low_1, count_as_fault;
  transition voltage_goes_normal_when_caps_in
    voltage_goes_normal_when_caps_in_0 (voltage = low AND isolated = false) -> voltage := normal, limit_KV_Normal, check_switched_in;
  transition voltage_goes_normal_when_caps_out
    voltage_goes_normal_when_caps_out_0 (voltage = high AND isolated = false) -> voltage := normal, limit_KV_Normal, check_switched_out;
  transition voltage_goes_normal_when_reenergised
    voltage_goes_normal_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> voltage := normal, limit_KV_Normal;
  transition voltage_goes_high_when_reenergised
    voltage_goes_high_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High;
    voltage_goes_high_when_reenergised_1 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_5;
    voltage_goes_high_when_reenergised_2 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_4;
    voltage_goes_high_when_reenergised_3 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_3;
    voltage_goes_high_when_reenergised_4 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_2;
    voltage_goes_high_when_reenergised_5 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_1;
  transition voltage_goes_Low_when_reenergised
    voltage_goes_Low_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low;
    voltage_goes_Low_when_reenergised_1 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_5;
    voltage_goes_Low_when_reenergised_2 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_4;
    voltage_goes_Low_when_reenergised_3 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_3;
    voltage_goes_Low_when_reenergised_4 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_2;
    voltage_goes_Low_when_reenergised_5 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_1;
  transition voltage_goes_to_zero_when_isolated
    voltage_goes_to_zero_when_isolated_0 (isolated = true AND iso_state_changed = true) -> voltage := zero, entered_zero_zone_KV, check_generators_off;
  transition voltage_goes_low_when_isolated
    voltage_goes_low_when_isolated_0 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low, check_generators_off;
    voltage_goes_low_when_isolated_1 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_5, check_generators_off;
    voltage_goes_low_when_isolated_2 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_4, check_generators_off;
    voltage_goes_low_when_isolated_3 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_3, check_generators_off;
    voltage_goes_low_when_isolated_4 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_2, check_generators_off;
    voltage_goes_low_when_isolated_5 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_1, check_generators_off;
  transition voltage_goes_to_zero
    voltage_goes_to_zero_0 true = 1 -> voltage := zero, entered_zero_zone_KV;
  triggeredby voltage_zero;
  transition voltage_goes_normal
    voltage_goes_normal_0 true = 1 -> voltage := normal, limit_KV_Normal;
  triggeredby voltage_normal;
  transition voltage_goes_high
    voltage_goes_high_0 true = 1 -> voltage := high, limit_KV_High;
    voltage_goes_high_1 true = 1 -> voltage := high, limit_KV_High_5;
    voltage_goes_high_2 true = 1 -> voltage := high, limit_KV_High_4;
    voltage_goes_high_3 true = 1 -> voltage := high, limit_KV_High_3;
    voltage_goes_high_4 true = 1 -> voltage := high, limit_KV_High_2;
    voltage_goes_high_5 true = 1 -> voltage := high, limit_KV_High_1;
  triggeredby voltage_high;
  transition voltage_goes_low
    voltage_goes_low_0 true = 1 -> voltage := low, limit_KV_Low;
    voltage_goes_low_1 true = 1 -> voltage := low, limit_KV_Low_5;
    voltage_goes_low_2 true = 1 -> voltage := low, limit_KV_Low_4;
    voltage_goes_low_3 true = 1 -> voltage := low, limit_KV_Low_3;
    voltage_goes_low_4 true = 1 -> voltage := low, limit_KV_Low_2;
    voltage_goes_low_5 true = 1 -> voltage := low, limit_KV_Low_1;
  triggeredby voltage_low;
  transition voltage_goes_to_zero_unexplained
    voltage_goes_to_zero_unexplained_0 true = 1 -> voltage := zero, entered_zero_zone_KV, count_as_fault;
  transition voltage_goes_normal_unexplained
    voltage_goes_normal_unexplained_0 true = 1 -> voltage := normal, limit_KV_Normal, count_as_fault;
  transition voltage_goes_high_unexplained
    voltage_goes_high_unexplained_0 true = 1 -> voltage := high, limit_KV_High, count_as_fault;
    voltage_goes_high_unexplained_1 true = 1 -> voltage := high, limit_KV_High_5, count_as_fault;
    voltage_goes_high_unexplained_2 true = 1 -> voltage := high, limit_KV_High_4, count_as_fault;
    voltage_goes_high_unexplained_3 true = 1 -> voltage := high, limit_KV_High_3, count_as_fault;
    voltage_goes_high_unexplained_4 true = 1 -> voltage := high, limit_KV_High_2, count_as_fault;
    voltage_goes_high_unexplained_5 true = 1 -> voltage := high, limit_KV_High_1, count_as_fault;
  transition voltage_goes_low_unexplained
    voltage_goes_low_unexplained_0 true = 1 -> voltage := low, limit_KV_Low, count_as_fault;
    voltage_goes_low_unexplained_1 true = 1 -> voltage := low, limit_KV_Low_5, count_as_fault;
    voltage_goes_low_unexplained_2 true = 1 -> voltage := low, limit_KV_Low_4, count_as_fault;
    voltage_goes_low_unexplained_3 true = 1 -> voltage := low, limit_KV_Low_3, count_as_fault;
    voltage_goes_low_unexplained_4 true = 1 -> voltage := low, limit_KV_Low_2, count_as_fault;
    voltage_goes_low_unexplained_5 true = 1 -> voltage := low, limit_KV_Low_1, count_as_fault;
  transition iso_state_changed_timeout
    iso_state_changed_timeout_0 true = 1 -> iso_state_changed := false;
  triggeredby [0.0..15.0] iso_state_changed = true;
  transition become_not_isolated
    become_not_isolated_0 true = 1 -> isolated := false, iso_state_changed := true;
  triggeredby set_isolated_false;
  transition become_isolated
    become_isolated_0 true = 1 -> isolated := true, iso_state_changed := true;
  triggeredby set_isolated_true;
}
component Bus_X122 = {
  var mvar : {zero,high,low,normal};
  var mw : {zero,high,low,normal};
  var voltage : {zero,high,low,normal};
  var iso_state_changed : [0..1];
  var isolated : [0..1];
  event check_generators_off;
  event check_switched_in;
  event check_switched_out;
  event count_as_fault;
  event set_isolated_false;
  event set_isolated_true;
  event mvar_zero;
  event mvar_normal;
  event mvar_high;
  event mvar_low;
  event mw_zero;
  event mw_normal;
  event mw_high;
  event mw_low;
  event voltage_zero;
  event voltage_normal;
  event voltage_high;
  event voltage_low;
  event entered_zero_zone_MVAR;
  event limit_MVAR_High;
  event limit_MVAR_High_5;
  event limit_MVAR_High_4;
  event limit_MVAR_High_3;
  event limit_MVAR_High_2;
  event limit_MVAR_High_1;
  event limit_MVAR_Low;
  event limit_MVAR_Low_5;
  event limit_MVAR_Low_4;
  event limit_MVAR_Low_3;
  event limit_MVAR_Low_2;
  event limit_MVAR_Low_1;
  event limit_MVAR_Normal;
  event entered_zero_zone_MW;
  event limit_MW_High;
  event limit_MW_High_5;
  event limit_MW_High_4;
  event limit_MW_High_3;
  event limit_MW_High_2;
  event limit_MW_High_1;
  event limit_MW_Low;
  event limit_MW_Low_5;
  event limit_MW_Low_4;
  event limit_MW_Low_3;
  event limit_MW_Low_2;
  event limit_MW_Low_1;
  event limit_MW_Normal;
  event entered_zero_zone_KV;
  event limit_KV_High;
  event limit_KV_High_5;
  event limit_KV_High_4;
  event limit_KV_High_3;
  event limit_KV_High_2;
  event limit_KV_High_1;
  event limit_KV_Low;
  event limit_KV_Low_5;
  event limit_KV_Low_4;
  event limit_KV_Low_3;
  event limit_KV_Low_2;
  event limit_KV_Low_1;
  event limit_KV_Normal;
  transition mvar_goes_to_zero
    mvar_goes_to_zero_0 true = 1 -> mvar := zero, entered_zero_zone_MVAR;
  triggeredby mvar_zero;
  transition mvar_goes_normal
    mvar_goes_normal_0 true = 1 -> mvar := normal, limit_MVAR_Normal;
  triggeredby mvar_normal;
  transition mvar_goes_high
    mvar_goes_high_0 true = 1 -> mvar := high, limit_MVAR_High;
    mvar_goes_high_1 true = 1 -> mvar := high, limit_MVAR_High_5;
    mvar_goes_high_2 true = 1 -> mvar := high, limit_MVAR_High_4;
    mvar_goes_high_3 true = 1 -> mvar := high, limit_MVAR_High_3;
    mvar_goes_high_4 true = 1 -> mvar := high, limit_MVAR_High_2;
    mvar_goes_high_5 true = 1 -> mvar := high, limit_MVAR_High_1;
  triggeredby mvar_high;
  transition mvar_goes_low
    mvar_goes_low_0 true = 1 -> mvar := low, limit_MVAR_Low;
    mvar_goes_low_1 true = 1 -> mvar := low, limit_MVAR_Low_5;
    mvar_goes_low_2 true = 1 -> mvar := low, limit_MVAR_Low_4;
    mvar_goes_low_3 true = 1 -> mvar := low, limit_MVAR_Low_3;
    mvar_goes_low_4 true = 1 -> mvar := low, limit_MVAR_Low_2;
    mvar_goes_low_5 true = 1 -> mvar := low, limit_MVAR_Low_1;
  triggeredby mvar_low;
  transition mvar_goes_to_zero_unexplained
    mvar_goes_to_zero_unexplained_0 true = 1 -> mvar := zero, entered_zero_zone_MVAR, count_as_fault;
  transition mvar_goes_normal_unexplained
    mvar_goes_normal_unexplained_0 true = 1 -> mvar := normal, limit_MVAR_Normal, count_as_fault;
  transition mvar_goes_high_unexplained
    mvar_goes_high_unexplained_0 true = 1 -> mvar := high, limit_MVAR_High, count_as_fault;
    mvar_goes_high_unexplained_1 true = 1 -> mvar := high, limit_MVAR_High_5, count_as_fault;
    mvar_goes_high_unexplained_2 true = 1 -> mvar := high, limit_MVAR_High_4, count_as_fault;
    mvar_goes_high_unexplained_3 true = 1 -> mvar := high, limit_MVAR_High_3, count_as_fault;
    mvar_goes_high_unexplained_4 true = 1 -> mvar := high, limit_MVAR_High_2, count_as_fault;
    mvar_goes_high_unexplained_5 true = 1 -> mvar := high, limit_MVAR_High_1, count_as_fault;
  transition mvar_goes_low_unexplained
    mvar_goes_low_unexplained_0 true = 1 -> mvar := low, limit_MVAR_Low, count_as_fault;
    mvar_goes_low_unexplained_1 true = 1 -> mvar := low, limit_MVAR_Low_5, count_as_fault;
    mvar_goes_low_unexplained_2 true = 1 -> mvar := low, limit_MVAR_Low_4, count_as_fault;
    mvar_goes_low_unexplained_3 true = 1 -> mvar := low, limit_MVAR_Low_3, count_as_fault;
    mvar_goes_low_unexplained_4 true = 1 -> mvar := low, limit_MVAR_Low_2, count_as_fault;
    mvar_goes_low_unexplained_5 true = 1 -> mvar := low, limit_MVAR_Low_1, count_as_fault;
  transition mw_goes_normal_when_reenergised
    mw_goes_normal_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> mw := normal, limit_MW_Normal;
  transition mw_goes_high_when_reenergised
    mw_goes_high_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High;
    mw_goes_high_when_reenergised_1 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_5;
    mw_goes_high_when_reenergised_2 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_4;
    mw_goes_high_when_reenergised_3 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_3;
    mw_goes_high_when_reenergised_4 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_2;
    mw_goes_high_when_reenergised_5 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_1;
  transition mw_goes_low_when_reenergised
    mw_goes_low_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low;
    mw_goes_low_when_reenergised_1 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_5;
    mw_goes_low_when_reenergised_2 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_4;
    mw_goes_low_when_reenergised_3 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_3;
    mw_goes_low_when_reenergised_4 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_2;
    mw_goes_low_when_reenergised_5 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_1;
  transition mw_goes_to_zero_when_isolated
    mw_goes_to_zero_when_isolated_0 (isolated = true AND iso_state_changed = true) -> mw := zero, entered_zero_zone_MW, check_generators_off;
  transition mw_goes_low_when_isolated
    mw_goes_low_when_isolated_0 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low, check_generators_off;
    mw_goes_low_when_isolated_1 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_5, check_generators_off;
    mw_goes_low_when_isolated_2 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_4, check_generators_off;
    mw_goes_low_when_isolated_3 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_3, check_generators_off;
    mw_goes_low_when_isolated_4 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_2, check_generators_off;
    mw_goes_low_when_isolated_5 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_1, check_generators_off;
  transition mw_goes_to_zero
    mw_goes_to_zero_0 true = 1 -> mw := zero, entered_zero_zone_MW;
  triggeredby mw_zero;
  transition mw_goes_normal
    mw_goes_normal_0 true = 1 -> mw := normal, limit_MW_Normal;
  triggeredby mw_normal;
  transition mw_goes_high
    mw_goes_high_0 true = 1 -> mw := high, limit_MW_High;
    mw_goes_high_1 true = 1 -> mw := high, limit_MW_High_5;
    mw_goes_high_2 true = 1 -> mw := high, limit_MW_High_4;
    mw_goes_high_3 true = 1 -> mw := high, limit_MW_High_3;
    mw_goes_high_4 true = 1 -> mw := high, limit_MW_High_2;
    mw_goes_high_5 true = 1 -> mw := high, limit_MW_High_1;
  triggeredby mw_high;
  transition mw_goes_low
    mw_goes_low_0 true = 1 -> mw := low, limit_MW_Low;
    mw_goes_low_1 true = 1 -> mw := low, limit_MW_Low_5;
    mw_goes_low_2 true = 1 -> mw := low, limit_MW_Low_4;
    mw_goes_low_3 true = 1 -> mw := low, limit_MW_Low_3;
    mw_goes_low_4 true = 1 -> mw := low, limit_MW_Low_2;
    mw_goes_low_5 true = 1 -> mw := low, limit_MW_Low_1;
  triggeredby mw_low;
  transition mw_goes_to_zero_unexplained
    mw_goes_to_zero_unexplained_0 true = 1 -> mw := zero, entered_zero_zone_MW, count_as_fault;
  transition mw_goes_normal_unexplained
    mw_goes_normal_unexplained_0 true = 1 -> mw := normal, limit_MW_Normal, count_as_fault;
  transition mw_goes_high_unexplained
    mw_goes_high_unexplained_0 true = 1 -> mw := high, limit_MW_High, count_as_fault;
    mw_goes_high_unexplained_1 true = 1 -> mw := high, limit_MW_High_5, count_as_fault;
    mw_goes_high_unexplained_2 true = 1 -> mw := high, limit_MW_High_4, count_as_fault;
    mw_goes_high_unexplained_3 true = 1 -> mw := high, limit_MW_High_3, count_as_fault;
    mw_goes_high_unexplained_4 true = 1 -> mw := high, limit_MW_High_2, count_as_fault;
    mw_goes_high_unexplained_5 true = 1 -> mw := high, limit_MW_High_1, count_as_fault;
  transition mw_goes_low_unexplained
    mw_goes_low_unexplained_0 true = 1 -> mw := low, limit_MW_Low, count_as_fault;
    mw_goes_low_unexplained_1 true = 1 -> mw := low, limit_MW_Low_5, count_as_fault;
    mw_goes_low_unexplained_2 true = 1 -> mw := low, limit_MW_Low_4, count_as_fault;
    mw_goes_low_unexplained_3 true = 1 -> mw := low, limit_MW_Low_3, count_as_fault;
    mw_goes_low_unexplained_4 true = 1 -> mw := low, limit_MW_Low_2, count_as_fault;
    mw_goes_low_unexplained_5 true = 1 -> mw := low, limit_MW_Low_1, count_as_fault;
  transition voltage_goes_normal_when_caps_in
    voltage_goes_normal_when_caps_in_0 (voltage = low AND isolated = false) -> voltage := normal, limit_KV_Normal, check_switched_in;
  transition voltage_goes_normal_when_caps_out
    voltage_goes_normal_when_caps_out_0 (voltage = high AND isolated = false) -> voltage := normal, limit_KV_Normal, check_switched_out;
  transition voltage_goes_normal_when_reenergised
    voltage_goes_normal_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> voltage := normal, limit_KV_Normal;
  transition voltage_goes_high_when_reenergised
    voltage_goes_high_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High;
    voltage_goes_high_when_reenergised_1 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_5;
    voltage_goes_high_when_reenergised_2 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_4;
    voltage_goes_high_when_reenergised_3 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_3;
    voltage_goes_high_when_reenergised_4 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_2;
    voltage_goes_high_when_reenergised_5 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_1;
  transition voltage_goes_Low_when_reenergised
    voltage_goes_Low_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low;
    voltage_goes_Low_when_reenergised_1 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_5;
    voltage_goes_Low_when_reenergised_2 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_4;
    voltage_goes_Low_when_reenergised_3 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_3;
    voltage_goes_Low_when_reenergised_4 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_2;
    voltage_goes_Low_when_reenergised_5 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_1;
  transition voltage_goes_to_zero_when_isolated
    voltage_goes_to_zero_when_isolated_0 (isolated = true AND iso_state_changed = true) -> voltage := zero, entered_zero_zone_KV, check_generators_off;
  transition voltage_goes_low_when_isolated
    voltage_goes_low_when_isolated_0 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low, check_generators_off;
    voltage_goes_low_when_isolated_1 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_5, check_generators_off;
    voltage_goes_low_when_isolated_2 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_4, check_generators_off;
    voltage_goes_low_when_isolated_3 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_3, check_generators_off;
    voltage_goes_low_when_isolated_4 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_2, check_generators_off;
    voltage_goes_low_when_isolated_5 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_1, check_generators_off;
  transition voltage_goes_to_zero
    voltage_goes_to_zero_0 true = 1 -> voltage := zero, entered_zero_zone_KV;
  triggeredby voltage_zero;
  transition voltage_goes_normal
    voltage_goes_normal_0 true = 1 -> voltage := normal, limit_KV_Normal;
  triggeredby voltage_normal;
  transition voltage_goes_high
    voltage_goes_high_0 true = 1 -> voltage := high, limit_KV_High;
    voltage_goes_high_1 true = 1 -> voltage := high, limit_KV_High_5;
    voltage_goes_high_2 true = 1 -> voltage := high, limit_KV_High_4;
    voltage_goes_high_3 true = 1 -> voltage := high, limit_KV_High_3;
    voltage_goes_high_4 true = 1 -> voltage := high, limit_KV_High_2;
    voltage_goes_high_5 true = 1 -> voltage := high, limit_KV_High_1;
  triggeredby voltage_high;
  transition voltage_goes_low
    voltage_goes_low_0 true = 1 -> voltage := low, limit_KV_Low;
    voltage_goes_low_1 true = 1 -> voltage := low, limit_KV_Low_5;
    voltage_goes_low_2 true = 1 -> voltage := low, limit_KV_Low_4;
    voltage_goes_low_3 true = 1 -> voltage := low, limit_KV_Low_3;
    voltage_goes_low_4 true = 1 -> voltage := low, limit_KV_Low_2;
    voltage_goes_low_5 true = 1 -> voltage := low, limit_KV_Low_1;
  triggeredby voltage_low;
  transition voltage_goes_to_zero_unexplained
    voltage_goes_to_zero_unexplained_0 true = 1 -> voltage := zero, entered_zero_zone_KV, count_as_fault;
  transition voltage_goes_normal_unexplained
    voltage_goes_normal_unexplained_0 true = 1 -> voltage := normal, limit_KV_Normal, count_as_fault;
  transition voltage_goes_high_unexplained
    voltage_goes_high_unexplained_0 true = 1 -> voltage := high, limit_KV_High, count_as_fault;
    voltage_goes_high_unexplained_1 true = 1 -> voltage := high, limit_KV_High_5, count_as_fault;
    voltage_goes_high_unexplained_2 true = 1 -> voltage := high, limit_KV_High_4, count_as_fault;
    voltage_goes_high_unexplained_3 true = 1 -> voltage := high, limit_KV_High_3, count_as_fault;
    voltage_goes_high_unexplained_4 true = 1 -> voltage := high, limit_KV_High_2, count_as_fault;
    voltage_goes_high_unexplained_5 true = 1 -> voltage := high, limit_KV_High_1, count_as_fault;
  transition voltage_goes_low_unexplained
    voltage_goes_low_unexplained_0 true = 1 -> voltage := low, limit_KV_Low, count_as_fault;
    voltage_goes_low_unexplained_1 true = 1 -> voltage := low, limit_KV_Low_5, count_as_fault;
    voltage_goes_low_unexplained_2 true = 1 -> voltage := low, limit_KV_Low_4, count_as_fault;
    voltage_goes_low_unexplained_3 true = 1 -> voltage := low, limit_KV_Low_3, count_as_fault;
    voltage_goes_low_unexplained_4 true = 1 -> voltage := low, limit_KV_Low_2, count_as_fault;
    voltage_goes_low_unexplained_5 true = 1 -> voltage := low, limit_KV_Low_1, count_as_fault;
  transition iso_state_changed_timeout
    iso_state_changed_timeout_0 true = 1 -> iso_state_changed := false;
  triggeredby [0.0..15.0] iso_state_changed = true;
  transition become_not_isolated
    become_not_isolated_0 true = 1 -> isolated := false, iso_state_changed := true;
  triggeredby set_isolated_false;
  transition become_isolated
    become_isolated_0 true = 1 -> isolated := true, iso_state_changed := true;
  triggeredby set_isolated_true;
}
component Bus_X110 = {
  var mvar : {zero,high,low,normal};
  var mw : {zero,high,low,normal};
  var voltage : {zero,high,low,normal};
  var iso_state_changed : [0..1];
  var isolated : [0..1];
  event check_generators_off;
  event check_switched_in;
  event check_switched_out;
  event count_as_fault;
  event set_isolated_false;
  event set_isolated_true;
  event mvar_zero;
  event mvar_normal;
  event mvar_high;
  event mvar_low;
  event mw_zero;
  event mw_normal;
  event mw_high;
  event mw_low;
  event voltage_zero;
  event voltage_normal;
  event voltage_high;
  event voltage_low;
  event entered_zero_zone_MVAR;
  event limit_MVAR_High;
  event limit_MVAR_High_5;
  event limit_MVAR_High_4;
  event limit_MVAR_High_3;
  event limit_MVAR_High_2;
  event limit_MVAR_High_1;
  event limit_MVAR_Low;
  event limit_MVAR_Low_5;
  event limit_MVAR_Low_4;
  event limit_MVAR_Low_3;
  event limit_MVAR_Low_2;
  event limit_MVAR_Low_1;
  event limit_MVAR_Normal;
  event entered_zero_zone_MW;
  event limit_MW_High;
  event limit_MW_High_5;
  event limit_MW_High_4;
  event limit_MW_High_3;
  event limit_MW_High_2;
  event limit_MW_High_1;
  event limit_MW_Low;
  event limit_MW_Low_5;
  event limit_MW_Low_4;
  event limit_MW_Low_3;
  event limit_MW_Low_2;
  event limit_MW_Low_1;
  event limit_MW_Normal;
  event entered_zero_zone_KV;
  event limit_KV_High;
  event limit_KV_High_5;
  event limit_KV_High_4;
  event limit_KV_High_3;
  event limit_KV_High_2;
  event limit_KV_High_1;
  event limit_KV_Low;
  event limit_KV_Low_5;
  event limit_KV_Low_4;
  event limit_KV_Low_3;
  event limit_KV_Low_2;
  event limit_KV_Low_1;
  event limit_KV_Normal;
  transition mvar_goes_to_zero
    mvar_goes_to_zero_0 true = 1 -> mvar := zero, entered_zero_zone_MVAR;
  triggeredby mvar_zero;
  transition mvar_goes_normal
    mvar_goes_normal_0 true = 1 -> mvar := normal, limit_MVAR_Normal;
  triggeredby mvar_normal;
  transition mvar_goes_high
    mvar_goes_high_0 true = 1 -> mvar := high, limit_MVAR_High;
    mvar_goes_high_1 true = 1 -> mvar := high, limit_MVAR_High_5;
    mvar_goes_high_2 true = 1 -> mvar := high, limit_MVAR_High_4;
    mvar_goes_high_3 true = 1 -> mvar := high, limit_MVAR_High_3;
    mvar_goes_high_4 true = 1 -> mvar := high, limit_MVAR_High_2;
    mvar_goes_high_5 true = 1 -> mvar := high, limit_MVAR_High_1;
  triggeredby mvar_high;
  transition mvar_goes_low
    mvar_goes_low_0 true = 1 -> mvar := low, limit_MVAR_Low;
    mvar_goes_low_1 true = 1 -> mvar := low, limit_MVAR_Low_5;
    mvar_goes_low_2 true = 1 -> mvar := low, limit_MVAR_Low_4;
    mvar_goes_low_3 true = 1 -> mvar := low, limit_MVAR_Low_3;
    mvar_goes_low_4 true = 1 -> mvar := low, limit_MVAR_Low_2;
    mvar_goes_low_5 true = 1 -> mvar := low, limit_MVAR_Low_1;
  triggeredby mvar_low;
  transition mvar_goes_to_zero_unexplained
    mvar_goes_to_zero_unexplained_0 true = 1 -> mvar := zero, entered_zero_zone_MVAR, count_as_fault;
  transition mvar_goes_normal_unexplained
    mvar_goes_normal_unexplained_0 true = 1 -> mvar := normal, limit_MVAR_Normal, count_as_fault;
  transition mvar_goes_high_unexplained
    mvar_goes_high_unexplained_0 true = 1 -> mvar := high, limit_MVAR_High, count_as_fault;
    mvar_goes_high_unexplained_1 true = 1 -> mvar := high, limit_MVAR_High_5, count_as_fault;
    mvar_goes_high_unexplained_2 true = 1 -> mvar := high, limit_MVAR_High_4, count_as_fault;
    mvar_goes_high_unexplained_3 true = 1 -> mvar := high, limit_MVAR_High_3, count_as_fault;
    mvar_goes_high_unexplained_4 true = 1 -> mvar := high, limit_MVAR_High_2, count_as_fault;
    mvar_goes_high_unexplained_5 true = 1 -> mvar := high, limit_MVAR_High_1, count_as_fault;
  transition mvar_goes_low_unexplained
    mvar_goes_low_unexplained_0 true = 1 -> mvar := low, limit_MVAR_Low, count_as_fault;
    mvar_goes_low_unexplained_1 true = 1 -> mvar := low, limit_MVAR_Low_5, count_as_fault;
    mvar_goes_low_unexplained_2 true = 1 -> mvar := low, limit_MVAR_Low_4, count_as_fault;
    mvar_goes_low_unexplained_3 true = 1 -> mvar := low, limit_MVAR_Low_3, count_as_fault;
    mvar_goes_low_unexplained_4 true = 1 -> mvar := low, limit_MVAR_Low_2, count_as_fault;
    mvar_goes_low_unexplained_5 true = 1 -> mvar := low, limit_MVAR_Low_1, count_as_fault;
  transition mw_goes_normal_when_reenergised
    mw_goes_normal_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> mw := normal, limit_MW_Normal;
  transition mw_goes_high_when_reenergised
    mw_goes_high_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High;
    mw_goes_high_when_reenergised_1 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_5;
    mw_goes_high_when_reenergised_2 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_4;
    mw_goes_high_when_reenergised_3 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_3;
    mw_goes_high_when_reenergised_4 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_2;
    mw_goes_high_when_reenergised_5 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_1;
  transition mw_goes_low_when_reenergised
    mw_goes_low_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low;
    mw_goes_low_when_reenergised_1 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_5;
    mw_goes_low_when_reenergised_2 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_4;
    mw_goes_low_when_reenergised_3 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_3;
    mw_goes_low_when_reenergised_4 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_2;
    mw_goes_low_when_reenergised_5 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_1;
  transition mw_goes_to_zero_when_isolated
    mw_goes_to_zero_when_isolated_0 (isolated = true AND iso_state_changed = true) -> mw := zero, entered_zero_zone_MW, check_generators_off;
  transition mw_goes_low_when_isolated
    mw_goes_low_when_isolated_0 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low, check_generators_off;
    mw_goes_low_when_isolated_1 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_5, check_generators_off;
    mw_goes_low_when_isolated_2 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_4, check_generators_off;
    mw_goes_low_when_isolated_3 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_3, check_generators_off;
    mw_goes_low_when_isolated_4 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_2, check_generators_off;
    mw_goes_low_when_isolated_5 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_1, check_generators_off;
  transition mw_goes_to_zero
    mw_goes_to_zero_0 true = 1 -> mw := zero, entered_zero_zone_MW;
  triggeredby mw_zero;
  transition mw_goes_normal
    mw_goes_normal_0 true = 1 -> mw := normal, limit_MW_Normal;
  triggeredby mw_normal;
  transition mw_goes_high
    mw_goes_high_0 true = 1 -> mw := high, limit_MW_High;
    mw_goes_high_1 true = 1 -> mw := high, limit_MW_High_5;
    mw_goes_high_2 true = 1 -> mw := high, limit_MW_High_4;
    mw_goes_high_3 true = 1 -> mw := high, limit_MW_High_3;
    mw_goes_high_4 true = 1 -> mw := high, limit_MW_High_2;
    mw_goes_high_5 true = 1 -> mw := high, limit_MW_High_1;
  triggeredby mw_high;
  transition mw_goes_low
    mw_goes_low_0 true = 1 -> mw := low, limit_MW_Low;
    mw_goes_low_1 true = 1 -> mw := low, limit_MW_Low_5;
    mw_goes_low_2 true = 1 -> mw := low, limit_MW_Low_4;
    mw_goes_low_3 true = 1 -> mw := low, limit_MW_Low_3;
    mw_goes_low_4 true = 1 -> mw := low, limit_MW_Low_2;
    mw_goes_low_5 true = 1 -> mw := low, limit_MW_Low_1;
  triggeredby mw_low;
  transition mw_goes_to_zero_unexplained
    mw_goes_to_zero_unexplained_0 true = 1 -> mw := zero, entered_zero_zone_MW, count_as_fault;
  transition mw_goes_normal_unexplained
    mw_goes_normal_unexplained_0 true = 1 -> mw := normal, limit_MW_Normal, count_as_fault;
  transition mw_goes_high_unexplained
    mw_goes_high_unexplained_0 true = 1 -> mw := high, limit_MW_High, count_as_fault;
    mw_goes_high_unexplained_1 true = 1 -> mw := high, limit_MW_High_5, count_as_fault;
    mw_goes_high_unexplained_2 true = 1 -> mw := high, limit_MW_High_4, count_as_fault;
    mw_goes_high_unexplained_3 true = 1 -> mw := high, limit_MW_High_3, count_as_fault;
    mw_goes_high_unexplained_4 true = 1 -> mw := high, limit_MW_High_2, count_as_fault;
    mw_goes_high_unexplained_5 true = 1 -> mw := high, limit_MW_High_1, count_as_fault;
  transition mw_goes_low_unexplained
    mw_goes_low_unexplained_0 true = 1 -> mw := low, limit_MW_Low, count_as_fault;
    mw_goes_low_unexplained_1 true = 1 -> mw := low, limit_MW_Low_5, count_as_fault;
    mw_goes_low_unexplained_2 true = 1 -> mw := low, limit_MW_Low_4, count_as_fault;
    mw_goes_low_unexplained_3 true = 1 -> mw := low, limit_MW_Low_3, count_as_fault;
    mw_goes_low_unexplained_4 true = 1 -> mw := low, limit_MW_Low_2, count_as_fault;
    mw_goes_low_unexplained_5 true = 1 -> mw := low, limit_MW_Low_1, count_as_fault;
  transition voltage_goes_normal_when_caps_in
    voltage_goes_normal_when_caps_in_0 (voltage = low AND isolated = false) -> voltage := normal, limit_KV_Normal, check_switched_in;
  transition voltage_goes_normal_when_caps_out
    voltage_goes_normal_when_caps_out_0 (voltage = high AND isolated = false) -> voltage := normal, limit_KV_Normal, check_switched_out;
  transition voltage_goes_normal_when_reenergised
    voltage_goes_normal_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> voltage := normal, limit_KV_Normal;
  transition voltage_goes_high_when_reenergised
    voltage_goes_high_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High;
    voltage_goes_high_when_reenergised_1 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_5;
    voltage_goes_high_when_reenergised_2 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_4;
    voltage_goes_high_when_reenergised_3 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_3;
    voltage_goes_high_when_reenergised_4 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_2;
    voltage_goes_high_when_reenergised_5 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_1;
  transition voltage_goes_Low_when_reenergised
    voltage_goes_Low_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low;
    voltage_goes_Low_when_reenergised_1 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_5;
    voltage_goes_Low_when_reenergised_2 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_4;
    voltage_goes_Low_when_reenergised_3 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_3;
    voltage_goes_Low_when_reenergised_4 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_2;
    voltage_goes_Low_when_reenergised_5 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_1;
  transition voltage_goes_to_zero_when_isolated
    voltage_goes_to_zero_when_isolated_0 (isolated = true AND iso_state_changed = true) -> voltage := zero, entered_zero_zone_KV, check_generators_off;
  transition voltage_goes_low_when_isolated
    voltage_goes_low_when_isolated_0 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low, check_generators_off;
    voltage_goes_low_when_isolated_1 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_5, check_generators_off;
    voltage_goes_low_when_isolated_2 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_4, check_generators_off;
    voltage_goes_low_when_isolated_3 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_3, check_generators_off;
    voltage_goes_low_when_isolated_4 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_2, check_generators_off;
    voltage_goes_low_when_isolated_5 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_1, check_generators_off;
  transition voltage_goes_to_zero
    voltage_goes_to_zero_0 true = 1 -> voltage := zero, entered_zero_zone_KV;
  triggeredby voltage_zero;
  transition voltage_goes_normal
    voltage_goes_normal_0 true = 1 -> voltage := normal, limit_KV_Normal;
  triggeredby voltage_normal;
  transition voltage_goes_high
    voltage_goes_high_0 true = 1 -> voltage := high, limit_KV_High;
    voltage_goes_high_1 true = 1 -> voltage := high, limit_KV_High_5;
    voltage_goes_high_2 true = 1 -> voltage := high, limit_KV_High_4;
    voltage_goes_high_3 true = 1 -> voltage := high, limit_KV_High_3;
    voltage_goes_high_4 true = 1 -> voltage := high, limit_KV_High_2;
    voltage_goes_high_5 true = 1 -> voltage := high, limit_KV_High_1;
  triggeredby voltage_high;
  transition voltage_goes_low
    voltage_goes_low_0 true = 1 -> voltage := low, limit_KV_Low;
    voltage_goes_low_1 true = 1 -> voltage := low, limit_KV_Low_5;
    voltage_goes_low_2 true = 1 -> voltage := low, limit_KV_Low_4;
    voltage_goes_low_3 true = 1 -> voltage := low, limit_KV_Low_3;
    voltage_goes_low_4 true = 1 -> voltage := low, limit_KV_Low_2;
    voltage_goes_low_5 true = 1 -> voltage := low, limit_KV_Low_1;
  triggeredby voltage_low;
  transition voltage_goes_to_zero_unexplained
    voltage_goes_to_zero_unexplained_0 true = 1 -> voltage := zero, entered_zero_zone_KV, count_as_fault;
  transition voltage_goes_normal_unexplained
    voltage_goes_normal_unexplained_0 true = 1 -> voltage := normal, limit_KV_Normal, count_as_fault;
  transition voltage_goes_high_unexplained
    voltage_goes_high_unexplained_0 true = 1 -> voltage := high, limit_KV_High, count_as_fault;
    voltage_goes_high_unexplained_1 true = 1 -> voltage := high, limit_KV_High_5, count_as_fault;
    voltage_goes_high_unexplained_2 true = 1 -> voltage := high, limit_KV_High_4, count_as_fault;
    voltage_goes_high_unexplained_3 true = 1 -> voltage := high, limit_KV_High_3, count_as_fault;
    voltage_goes_high_unexplained_4 true = 1 -> voltage := high, limit_KV_High_2, count_as_fault;
    voltage_goes_high_unexplained_5 true = 1 -> voltage := high, limit_KV_High_1, count_as_fault;
  transition voltage_goes_low_unexplained
    voltage_goes_low_unexplained_0 true = 1 -> voltage := low, limit_KV_Low, count_as_fault;
    voltage_goes_low_unexplained_1 true = 1 -> voltage := low, limit_KV_Low_5, count_as_fault;
    voltage_goes_low_unexplained_2 true = 1 -> voltage := low, limit_KV_Low_4, count_as_fault;
    voltage_goes_low_unexplained_3 true = 1 -> voltage := low, limit_KV_Low_3, count_as_fault;
    voltage_goes_low_unexplained_4 true = 1 -> voltage := low, limit_KV_Low_2, count_as_fault;
    voltage_goes_low_unexplained_5 true = 1 -> voltage := low, limit_KV_Low_1, count_as_fault;
  transition iso_state_changed_timeout
    iso_state_changed_timeout_0 true = 1 -> iso_state_changed := false;
  triggeredby [0.0..15.0] iso_state_changed = true;
  transition become_not_isolated
    become_not_isolated_0 true = 1 -> isolated := false, iso_state_changed := true;
  triggeredby set_isolated_false;
  transition become_isolated
    become_isolated_0 true = 1 -> isolated := true, iso_state_changed := true;
  triggeredby set_isolated_true;
}
component Bus_X34 = {
  connection generatorsXYZ0 : attached = Generator_X91;
  var mvar : {zero,high,low,normal};
  var mw : {zero,high,low,normal};
  var voltage : {zero,high,low,normal};
  var iso_state_changed : [0..1];
  var isolated : [0..1];
  event check_generators_off;
  event check_switched_in;
  event check_switched_out;
  event count_as_fault;
  event set_isolated_false;
  event set_isolated_true;
  event mvar_zero;
  event mvar_normal;
  event mvar_high;
  event mvar_low;
  event mw_zero;
  event mw_normal;
  event mw_high;
  event mw_low;
  event voltage_zero;
  event voltage_normal;
  event voltage_high;
  event voltage_low;
  event entered_zero_zone_MVAR;
  event limit_MVAR_High;
  event limit_MVAR_High_5;
  event limit_MVAR_High_4;
  event limit_MVAR_High_3;
  event limit_MVAR_High_2;
  event limit_MVAR_High_1;
  event limit_MVAR_Low;
  event limit_MVAR_Low_5;
  event limit_MVAR_Low_4;
  event limit_MVAR_Low_3;
  event limit_MVAR_Low_2;
  event limit_MVAR_Low_1;
  event limit_MVAR_Normal;
  event entered_zero_zone_MW;
  event limit_MW_High;
  event limit_MW_High_5;
  event limit_MW_High_4;
  event limit_MW_High_3;
  event limit_MW_High_2;
  event limit_MW_High_1;
  event limit_MW_Low;
  event limit_MW_Low_5;
  event limit_MW_Low_4;
  event limit_MW_Low_3;
  event limit_MW_Low_2;
  event limit_MW_Low_1;
  event limit_MW_Normal;
  event entered_zero_zone_KV;
  event limit_KV_High;
  event limit_KV_High_5;
  event limit_KV_High_4;
  event limit_KV_High_3;
  event limit_KV_High_2;
  event limit_KV_High_1;
  event limit_KV_Low;
  event limit_KV_Low_5;
  event limit_KV_Low_4;
  event limit_KV_Low_3;
  event limit_KV_Low_2;
  event limit_KV_Low_1;
  event limit_KV_Normal;
  transition mvar_goes_to_zero
    mvar_goes_to_zero_0 true = 1 -> mvar := zero, entered_zero_zone_MVAR;
  triggeredby mvar_zero;
  transition mvar_goes_normal
    mvar_goes_normal_0 true = 1 -> mvar := normal, limit_MVAR_Normal;
  triggeredby mvar_normal;
  transition mvar_goes_high
    mvar_goes_high_0 true = 1 -> mvar := high, limit_MVAR_High;
    mvar_goes_high_1 true = 1 -> mvar := high, limit_MVAR_High_5;
    mvar_goes_high_2 true = 1 -> mvar := high, limit_MVAR_High_4;
    mvar_goes_high_3 true = 1 -> mvar := high, limit_MVAR_High_3;
    mvar_goes_high_4 true = 1 -> mvar := high, limit_MVAR_High_2;
    mvar_goes_high_5 true = 1 -> mvar := high, limit_MVAR_High_1;
  triggeredby mvar_high;
  transition mvar_goes_low
    mvar_goes_low_0 true = 1 -> mvar := low, limit_MVAR_Low;
    mvar_goes_low_1 true = 1 -> mvar := low, limit_MVAR_Low_5;
    mvar_goes_low_2 true = 1 -> mvar := low, limit_MVAR_Low_4;
    mvar_goes_low_3 true = 1 -> mvar := low, limit_MVAR_Low_3;
    mvar_goes_low_4 true = 1 -> mvar := low, limit_MVAR_Low_2;
    mvar_goes_low_5 true = 1 -> mvar := low, limit_MVAR_Low_1;
  triggeredby mvar_low;
  transition mvar_goes_to_zero_unexplained
    mvar_goes_to_zero_unexplained_0 true = 1 -> mvar := zero, entered_zero_zone_MVAR, count_as_fault;
  transition mvar_goes_normal_unexplained
    mvar_goes_normal_unexplained_0 true = 1 -> mvar := normal, limit_MVAR_Normal, count_as_fault;
  transition mvar_goes_high_unexplained
    mvar_goes_high_unexplained_0 true = 1 -> mvar := high, limit_MVAR_High, count_as_fault;
    mvar_goes_high_unexplained_1 true = 1 -> mvar := high, limit_MVAR_High_5, count_as_fault;
    mvar_goes_high_unexplained_2 true = 1 -> mvar := high, limit_MVAR_High_4, count_as_fault;
    mvar_goes_high_unexplained_3 true = 1 -> mvar := high, limit_MVAR_High_3, count_as_fault;
    mvar_goes_high_unexplained_4 true = 1 -> mvar := high, limit_MVAR_High_2, count_as_fault;
    mvar_goes_high_unexplained_5 true = 1 -> mvar := high, limit_MVAR_High_1, count_as_fault;
  transition mvar_goes_low_unexplained
    mvar_goes_low_unexplained_0 true = 1 -> mvar := low, limit_MVAR_Low, count_as_fault;
    mvar_goes_low_unexplained_1 true = 1 -> mvar := low, limit_MVAR_Low_5, count_as_fault;
    mvar_goes_low_unexplained_2 true = 1 -> mvar := low, limit_MVAR_Low_4, count_as_fault;
    mvar_goes_low_unexplained_3 true = 1 -> mvar := low, limit_MVAR_Low_3, count_as_fault;
    mvar_goes_low_unexplained_4 true = 1 -> mvar := low, limit_MVAR_Low_2, count_as_fault;
    mvar_goes_low_unexplained_5 true = 1 -> mvar := low, limit_MVAR_Low_1, count_as_fault;
  transition mw_goes_normal_when_reenergised
    mw_goes_normal_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> mw := normal, limit_MW_Normal;
  transition mw_goes_high_when_reenergised
    mw_goes_high_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High;
    mw_goes_high_when_reenergised_1 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_5;
    mw_goes_high_when_reenergised_2 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_4;
    mw_goes_high_when_reenergised_3 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_3;
    mw_goes_high_when_reenergised_4 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_2;
    mw_goes_high_when_reenergised_5 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_1;
  transition mw_goes_low_when_reenergised
    mw_goes_low_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low;
    mw_goes_low_when_reenergised_1 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_5;
    mw_goes_low_when_reenergised_2 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_4;
    mw_goes_low_when_reenergised_3 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_3;
    mw_goes_low_when_reenergised_4 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_2;
    mw_goes_low_when_reenergised_5 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_1;
  transition mw_goes_to_zero_when_isolated
    mw_goes_to_zero_when_isolated_0 (isolated = true AND iso_state_changed = true) -> mw := zero, entered_zero_zone_MW, check_generators_off;
  transition mw_goes_low_when_isolated
    mw_goes_low_when_isolated_0 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low, check_generators_off;
    mw_goes_low_when_isolated_1 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_5, check_generators_off;
    mw_goes_low_when_isolated_2 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_4, check_generators_off;
    mw_goes_low_when_isolated_3 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_3, check_generators_off;
    mw_goes_low_when_isolated_4 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_2, check_generators_off;
    mw_goes_low_when_isolated_5 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_1, check_generators_off;
  transition mw_goes_to_zero
    mw_goes_to_zero_0 true = 1 -> mw := zero, entered_zero_zone_MW;
  triggeredby mw_zero;
  transition mw_goes_normal
    mw_goes_normal_0 true = 1 -> mw := normal, limit_MW_Normal;
  triggeredby mw_normal;
  transition mw_goes_high
    mw_goes_high_0 true = 1 -> mw := high, limit_MW_High;
    mw_goes_high_1 true = 1 -> mw := high, limit_MW_High_5;
    mw_goes_high_2 true = 1 -> mw := high, limit_MW_High_4;
    mw_goes_high_3 true = 1 -> mw := high, limit_MW_High_3;
    mw_goes_high_4 true = 1 -> mw := high, limit_MW_High_2;
    mw_goes_high_5 true = 1 -> mw := high, limit_MW_High_1;
  triggeredby mw_high;
  transition mw_goes_low
    mw_goes_low_0 true = 1 -> mw := low, limit_MW_Low;
    mw_goes_low_1 true = 1 -> mw := low, limit_MW_Low_5;
    mw_goes_low_2 true = 1 -> mw := low, limit_MW_Low_4;
    mw_goes_low_3 true = 1 -> mw := low, limit_MW_Low_3;
    mw_goes_low_4 true = 1 -> mw := low, limit_MW_Low_2;
    mw_goes_low_5 true = 1 -> mw := low, limit_MW_Low_1;
  triggeredby mw_low;
  transition mw_goes_to_zero_unexplained
    mw_goes_to_zero_unexplained_0 true = 1 -> mw := zero, entered_zero_zone_MW, count_as_fault;
  transition mw_goes_normal_unexplained
    mw_goes_normal_unexplained_0 true = 1 -> mw := normal, limit_MW_Normal, count_as_fault;
  transition mw_goes_high_unexplained
    mw_goes_high_unexplained_0 true = 1 -> mw := high, limit_MW_High, count_as_fault;
    mw_goes_high_unexplained_1 true = 1 -> mw := high, limit_MW_High_5, count_as_fault;
    mw_goes_high_unexplained_2 true = 1 -> mw := high, limit_MW_High_4, count_as_fault;
    mw_goes_high_unexplained_3 true = 1 -> mw := high, limit_MW_High_3, count_as_fault;
    mw_goes_high_unexplained_4 true = 1 -> mw := high, limit_MW_High_2, count_as_fault;
    mw_goes_high_unexplained_5 true = 1 -> mw := high, limit_MW_High_1, count_as_fault;
  transition mw_goes_low_unexplained
    mw_goes_low_unexplained_0 true = 1 -> mw := low, limit_MW_Low, count_as_fault;
    mw_goes_low_unexplained_1 true = 1 -> mw := low, limit_MW_Low_5, count_as_fault;
    mw_goes_low_unexplained_2 true = 1 -> mw := low, limit_MW_Low_4, count_as_fault;
    mw_goes_low_unexplained_3 true = 1 -> mw := low, limit_MW_Low_3, count_as_fault;
    mw_goes_low_unexplained_4 true = 1 -> mw := low, limit_MW_Low_2, count_as_fault;
    mw_goes_low_unexplained_5 true = 1 -> mw := low, limit_MW_Low_1, count_as_fault;
  transition voltage_goes_normal_when_caps_in
    voltage_goes_normal_when_caps_in_0 (voltage = low AND isolated = false) -> voltage := normal, limit_KV_Normal, check_switched_in;
  transition voltage_goes_normal_when_caps_out
    voltage_goes_normal_when_caps_out_0 (voltage = high AND isolated = false) -> voltage := normal, limit_KV_Normal, check_switched_out;
  transition voltage_goes_normal_when_reenergised
    voltage_goes_normal_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> voltage := normal, limit_KV_Normal;
  transition voltage_goes_high_when_reenergised
    voltage_goes_high_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High;
    voltage_goes_high_when_reenergised_1 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_5;
    voltage_goes_high_when_reenergised_2 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_4;
    voltage_goes_high_when_reenergised_3 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_3;
    voltage_goes_high_when_reenergised_4 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_2;
    voltage_goes_high_when_reenergised_5 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_1;
  transition voltage_goes_Low_when_reenergised
    voltage_goes_Low_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low;
    voltage_goes_Low_when_reenergised_1 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_5;
    voltage_goes_Low_when_reenergised_2 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_4;
    voltage_goes_Low_when_reenergised_3 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_3;
    voltage_goes_Low_when_reenergised_4 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_2;
    voltage_goes_Low_when_reenergised_5 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_1;
  transition voltage_goes_to_zero_when_isolated
    voltage_goes_to_zero_when_isolated_0 (isolated = true AND iso_state_changed = true) -> voltage := zero, entered_zero_zone_KV, check_generators_off;
  transition voltage_goes_low_when_isolated
    voltage_goes_low_when_isolated_0 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low, check_generators_off;
    voltage_goes_low_when_isolated_1 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_5, check_generators_off;
    voltage_goes_low_when_isolated_2 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_4, check_generators_off;
    voltage_goes_low_when_isolated_3 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_3, check_generators_off;
    voltage_goes_low_when_isolated_4 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_2, check_generators_off;
    voltage_goes_low_when_isolated_5 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_1, check_generators_off;
  transition voltage_goes_to_zero
    voltage_goes_to_zero_0 true = 1 -> voltage := zero, entered_zero_zone_KV;
  triggeredby voltage_zero;
  transition voltage_goes_normal
    voltage_goes_normal_0 true = 1 -> voltage := normal, limit_KV_Normal;
  triggeredby voltage_normal;
  transition voltage_goes_high
    voltage_goes_high_0 true = 1 -> voltage := high, limit_KV_High;
    voltage_goes_high_1 true = 1 -> voltage := high, limit_KV_High_5;
    voltage_goes_high_2 true = 1 -> voltage := high, limit_KV_High_4;
    voltage_goes_high_3 true = 1 -> voltage := high, limit_KV_High_3;
    voltage_goes_high_4 true = 1 -> voltage := high, limit_KV_High_2;
    voltage_goes_high_5 true = 1 -> voltage := high, limit_KV_High_1;
  triggeredby voltage_high;
  transition voltage_goes_low
    voltage_goes_low_0 true = 1 -> voltage := low, limit_KV_Low;
    voltage_goes_low_1 true = 1 -> voltage := low, limit_KV_Low_5;
    voltage_goes_low_2 true = 1 -> voltage := low, limit_KV_Low_4;
    voltage_goes_low_3 true = 1 -> voltage := low, limit_KV_Low_3;
    voltage_goes_low_4 true = 1 -> voltage := low, limit_KV_Low_2;
    voltage_goes_low_5 true = 1 -> voltage := low, limit_KV_Low_1;
  triggeredby voltage_low;
  transition voltage_goes_to_zero_unexplained
    voltage_goes_to_zero_unexplained_0 true = 1 -> voltage := zero, entered_zero_zone_KV, count_as_fault;
  transition voltage_goes_normal_unexplained
    voltage_goes_normal_unexplained_0 true = 1 -> voltage := normal, limit_KV_Normal, count_as_fault;
  transition voltage_goes_high_unexplained
    voltage_goes_high_unexplained_0 true = 1 -> voltage := high, limit_KV_High, count_as_fault;
    voltage_goes_high_unexplained_1 true = 1 -> voltage := high, limit_KV_High_5, count_as_fault;
    voltage_goes_high_unexplained_2 true = 1 -> voltage := high, limit_KV_High_4, count_as_fault;
    voltage_goes_high_unexplained_3 true = 1 -> voltage := high, limit_KV_High_3, count_as_fault;
    voltage_goes_high_unexplained_4 true = 1 -> voltage := high, limit_KV_High_2, count_as_fault;
    voltage_goes_high_unexplained_5 true = 1 -> voltage := high, limit_KV_High_1, count_as_fault;
  transition voltage_goes_low_unexplained
    voltage_goes_low_unexplained_0 true = 1 -> voltage := low, limit_KV_Low, count_as_fault;
    voltage_goes_low_unexplained_1 true = 1 -> voltage := low, limit_KV_Low_5, count_as_fault;
    voltage_goes_low_unexplained_2 true = 1 -> voltage := low, limit_KV_Low_4, count_as_fault;
    voltage_goes_low_unexplained_3 true = 1 -> voltage := low, limit_KV_Low_3, count_as_fault;
    voltage_goes_low_unexplained_4 true = 1 -> voltage := low, limit_KV_Low_2, count_as_fault;
    voltage_goes_low_unexplained_5 true = 1 -> voltage := low, limit_KV_Low_1, count_as_fault;
  transition iso_state_changed_timeout
    iso_state_changed_timeout_0 true = 1 -> iso_state_changed := false;
  triggeredby [0.0..15.0] iso_state_changed = true;
  transition become_not_isolated
    become_not_isolated_0 true = 1 -> isolated := false, iso_state_changed := true;
  triggeredby set_isolated_false;
  transition become_isolated
    become_isolated_0 true = 1 -> isolated := true, iso_state_changed := true;
  triggeredby set_isolated_true;
}
component Bus_X36 = {
  connection generatorsXYZ0 : attached = Generator_X92;
  var mvar : {zero,high,low,normal};
  var mw : {zero,high,low,normal};
  var voltage : {zero,high,low,normal};
  var iso_state_changed : [0..1];
  var isolated : [0..1];
  event check_generators_off;
  event check_switched_in;
  event check_switched_out;
  event count_as_fault;
  event set_isolated_false;
  event set_isolated_true;
  event mvar_zero;
  event mvar_normal;
  event mvar_high;
  event mvar_low;
  event mw_zero;
  event mw_normal;
  event mw_high;
  event mw_low;
  event voltage_zero;
  event voltage_normal;
  event voltage_high;
  event voltage_low;
  event entered_zero_zone_MVAR;
  event limit_MVAR_High;
  event limit_MVAR_High_5;
  event limit_MVAR_High_4;
  event limit_MVAR_High_3;
  event limit_MVAR_High_2;
  event limit_MVAR_High_1;
  event limit_MVAR_Low;
  event limit_MVAR_Low_5;
  event limit_MVAR_Low_4;
  event limit_MVAR_Low_3;
  event limit_MVAR_Low_2;
  event limit_MVAR_Low_1;
  event limit_MVAR_Normal;
  event entered_zero_zone_MW;
  event limit_MW_High;
  event limit_MW_High_5;
  event limit_MW_High_4;
  event limit_MW_High_3;
  event limit_MW_High_2;
  event limit_MW_High_1;
  event limit_MW_Low;
  event limit_MW_Low_5;
  event limit_MW_Low_4;
  event limit_MW_Low_3;
  event limit_MW_Low_2;
  event limit_MW_Low_1;
  event limit_MW_Normal;
  event entered_zero_zone_KV;
  event limit_KV_High;
  event limit_KV_High_5;
  event limit_KV_High_4;
  event limit_KV_High_3;
  event limit_KV_High_2;
  event limit_KV_High_1;
  event limit_KV_Low;
  event limit_KV_Low_5;
  event limit_KV_Low_4;
  event limit_KV_Low_3;
  event limit_KV_Low_2;
  event limit_KV_Low_1;
  event limit_KV_Normal;
  transition mvar_goes_to_zero
    mvar_goes_to_zero_0 true = 1 -> mvar := zero, entered_zero_zone_MVAR;
  triggeredby mvar_zero;
  transition mvar_goes_normal
    mvar_goes_normal_0 true = 1 -> mvar := normal, limit_MVAR_Normal;
  triggeredby mvar_normal;
  transition mvar_goes_high
    mvar_goes_high_0 true = 1 -> mvar := high, limit_MVAR_High;
    mvar_goes_high_1 true = 1 -> mvar := high, limit_MVAR_High_5;
    mvar_goes_high_2 true = 1 -> mvar := high, limit_MVAR_High_4;
    mvar_goes_high_3 true = 1 -> mvar := high, limit_MVAR_High_3;
    mvar_goes_high_4 true = 1 -> mvar := high, limit_MVAR_High_2;
    mvar_goes_high_5 true = 1 -> mvar := high, limit_MVAR_High_1;
  triggeredby mvar_high;
  transition mvar_goes_low
    mvar_goes_low_0 true = 1 -> mvar := low, limit_MVAR_Low;
    mvar_goes_low_1 true = 1 -> mvar := low, limit_MVAR_Low_5;
    mvar_goes_low_2 true = 1 -> mvar := low, limit_MVAR_Low_4;
    mvar_goes_low_3 true = 1 -> mvar := low, limit_MVAR_Low_3;
    mvar_goes_low_4 true = 1 -> mvar := low, limit_MVAR_Low_2;
    mvar_goes_low_5 true = 1 -> mvar := low, limit_MVAR_Low_1;
  triggeredby mvar_low;
  transition mvar_goes_to_zero_unexplained
    mvar_goes_to_zero_unexplained_0 true = 1 -> mvar := zero, entered_zero_zone_MVAR, count_as_fault;
  transition mvar_goes_normal_unexplained
    mvar_goes_normal_unexplained_0 true = 1 -> mvar := normal, limit_MVAR_Normal, count_as_fault;
  transition mvar_goes_high_unexplained
    mvar_goes_high_unexplained_0 true = 1 -> mvar := high, limit_MVAR_High, count_as_fault;
    mvar_goes_high_unexplained_1 true = 1 -> mvar := high, limit_MVAR_High_5, count_as_fault;
    mvar_goes_high_unexplained_2 true = 1 -> mvar := high, limit_MVAR_High_4, count_as_fault;
    mvar_goes_high_unexplained_3 true = 1 -> mvar := high, limit_MVAR_High_3, count_as_fault;
    mvar_goes_high_unexplained_4 true = 1 -> mvar := high, limit_MVAR_High_2, count_as_fault;
    mvar_goes_high_unexplained_5 true = 1 -> mvar := high, limit_MVAR_High_1, count_as_fault;
  transition mvar_goes_low_unexplained
    mvar_goes_low_unexplained_0 true = 1 -> mvar := low, limit_MVAR_Low, count_as_fault;
    mvar_goes_low_unexplained_1 true = 1 -> mvar := low, limit_MVAR_Low_5, count_as_fault;
    mvar_goes_low_unexplained_2 true = 1 -> mvar := low, limit_MVAR_Low_4, count_as_fault;
    mvar_goes_low_unexplained_3 true = 1 -> mvar := low, limit_MVAR_Low_3, count_as_fault;
    mvar_goes_low_unexplained_4 true = 1 -> mvar := low, limit_MVAR_Low_2, count_as_fault;
    mvar_goes_low_unexplained_5 true = 1 -> mvar := low, limit_MVAR_Low_1, count_as_fault;
  transition mw_goes_normal_when_reenergised
    mw_goes_normal_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> mw := normal, limit_MW_Normal;
  transition mw_goes_high_when_reenergised
    mw_goes_high_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High;
    mw_goes_high_when_reenergised_1 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_5;
    mw_goes_high_when_reenergised_2 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_4;
    mw_goes_high_when_reenergised_3 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_3;
    mw_goes_high_when_reenergised_4 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_2;
    mw_goes_high_when_reenergised_5 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_1;
  transition mw_goes_low_when_reenergised
    mw_goes_low_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low;
    mw_goes_low_when_reenergised_1 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_5;
    mw_goes_low_when_reenergised_2 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_4;
    mw_goes_low_when_reenergised_3 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_3;
    mw_goes_low_when_reenergised_4 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_2;
    mw_goes_low_when_reenergised_5 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_1;
  transition mw_goes_to_zero_when_isolated
    mw_goes_to_zero_when_isolated_0 (isolated = true AND iso_state_changed = true) -> mw := zero, entered_zero_zone_MW, check_generators_off;
  transition mw_goes_low_when_isolated
    mw_goes_low_when_isolated_0 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low, check_generators_off;
    mw_goes_low_when_isolated_1 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_5, check_generators_off;
    mw_goes_low_when_isolated_2 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_4, check_generators_off;
    mw_goes_low_when_isolated_3 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_3, check_generators_off;
    mw_goes_low_when_isolated_4 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_2, check_generators_off;
    mw_goes_low_when_isolated_5 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_1, check_generators_off;
  transition mw_goes_to_zero
    mw_goes_to_zero_0 true = 1 -> mw := zero, entered_zero_zone_MW;
  triggeredby mw_zero;
  transition mw_goes_normal
    mw_goes_normal_0 true = 1 -> mw := normal, limit_MW_Normal;
  triggeredby mw_normal;
  transition mw_goes_high
    mw_goes_high_0 true = 1 -> mw := high, limit_MW_High;
    mw_goes_high_1 true = 1 -> mw := high, limit_MW_High_5;
    mw_goes_high_2 true = 1 -> mw := high, limit_MW_High_4;
    mw_goes_high_3 true = 1 -> mw := high, limit_MW_High_3;
    mw_goes_high_4 true = 1 -> mw := high, limit_MW_High_2;
    mw_goes_high_5 true = 1 -> mw := high, limit_MW_High_1;
  triggeredby mw_high;
  transition mw_goes_low
    mw_goes_low_0 true = 1 -> mw := low, limit_MW_Low;
    mw_goes_low_1 true = 1 -> mw := low, limit_MW_Low_5;
    mw_goes_low_2 true = 1 -> mw := low, limit_MW_Low_4;
    mw_goes_low_3 true = 1 -> mw := low, limit_MW_Low_3;
    mw_goes_low_4 true = 1 -> mw := low, limit_MW_Low_2;
    mw_goes_low_5 true = 1 -> mw := low, limit_MW_Low_1;
  triggeredby mw_low;
  transition mw_goes_to_zero_unexplained
    mw_goes_to_zero_unexplained_0 true = 1 -> mw := zero, entered_zero_zone_MW, count_as_fault;
  transition mw_goes_normal_unexplained
    mw_goes_normal_unexplained_0 true = 1 -> mw := normal, limit_MW_Normal, count_as_fault;
  transition mw_goes_high_unexplained
    mw_goes_high_unexplained_0 true = 1 -> mw := high, limit_MW_High, count_as_fault;
    mw_goes_high_unexplained_1 true = 1 -> mw := high, limit_MW_High_5, count_as_fault;
    mw_goes_high_unexplained_2 true = 1 -> mw := high, limit_MW_High_4, count_as_fault;
    mw_goes_high_unexplained_3 true = 1 -> mw := high, limit_MW_High_3, count_as_fault;
    mw_goes_high_unexplained_4 true = 1 -> mw := high, limit_MW_High_2, count_as_fault;
    mw_goes_high_unexplained_5 true = 1 -> mw := high, limit_MW_High_1, count_as_fault;
  transition mw_goes_low_unexplained
    mw_goes_low_unexplained_0 true = 1 -> mw := low, limit_MW_Low, count_as_fault;
    mw_goes_low_unexplained_1 true = 1 -> mw := low, limit_MW_Low_5, count_as_fault;
    mw_goes_low_unexplained_2 true = 1 -> mw := low, limit_MW_Low_4, count_as_fault;
    mw_goes_low_unexplained_3 true = 1 -> mw := low, limit_MW_Low_3, count_as_fault;
    mw_goes_low_unexplained_4 true = 1 -> mw := low, limit_MW_Low_2, count_as_fault;
    mw_goes_low_unexplained_5 true = 1 -> mw := low, limit_MW_Low_1, count_as_fault;
  transition voltage_goes_normal_when_caps_in
    voltage_goes_normal_when_caps_in_0 (voltage = low AND isolated = false) -> voltage := normal, limit_KV_Normal, check_switched_in;
  transition voltage_goes_normal_when_caps_out
    voltage_goes_normal_when_caps_out_0 (voltage = high AND isolated = false) -> voltage := normal, limit_KV_Normal, check_switched_out;
  transition voltage_goes_normal_when_reenergised
    voltage_goes_normal_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> voltage := normal, limit_KV_Normal;
  transition voltage_goes_high_when_reenergised
    voltage_goes_high_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High;
    voltage_goes_high_when_reenergised_1 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_5;
    voltage_goes_high_when_reenergised_2 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_4;
    voltage_goes_high_when_reenergised_3 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_3;
    voltage_goes_high_when_reenergised_4 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_2;
    voltage_goes_high_when_reenergised_5 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_1;
  transition voltage_goes_Low_when_reenergised
    voltage_goes_Low_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low;
    voltage_goes_Low_when_reenergised_1 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_5;
    voltage_goes_Low_when_reenergised_2 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_4;
    voltage_goes_Low_when_reenergised_3 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_3;
    voltage_goes_Low_when_reenergised_4 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_2;
    voltage_goes_Low_when_reenergised_5 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_1;
  transition voltage_goes_to_zero_when_isolated
    voltage_goes_to_zero_when_isolated_0 (isolated = true AND iso_state_changed = true) -> voltage := zero, entered_zero_zone_KV, check_generators_off;
  transition voltage_goes_low_when_isolated
    voltage_goes_low_when_isolated_0 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low, check_generators_off;
    voltage_goes_low_when_isolated_1 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_5, check_generators_off;
    voltage_goes_low_when_isolated_2 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_4, check_generators_off;
    voltage_goes_low_when_isolated_3 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_3, check_generators_off;
    voltage_goes_low_when_isolated_4 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_2, check_generators_off;
    voltage_goes_low_when_isolated_5 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_1, check_generators_off;
  transition voltage_goes_to_zero
    voltage_goes_to_zero_0 true = 1 -> voltage := zero, entered_zero_zone_KV;
  triggeredby voltage_zero;
  transition voltage_goes_normal
    voltage_goes_normal_0 true = 1 -> voltage := normal, limit_KV_Normal;
  triggeredby voltage_normal;
  transition voltage_goes_high
    voltage_goes_high_0 true = 1 -> voltage := high, limit_KV_High;
    voltage_goes_high_1 true = 1 -> voltage := high, limit_KV_High_5;
    voltage_goes_high_2 true = 1 -> voltage := high, limit_KV_High_4;
    voltage_goes_high_3 true = 1 -> voltage := high, limit_KV_High_3;
    voltage_goes_high_4 true = 1 -> voltage := high, limit_KV_High_2;
    voltage_goes_high_5 true = 1 -> voltage := high, limit_KV_High_1;
  triggeredby voltage_high;
  transition voltage_goes_low
    voltage_goes_low_0 true = 1 -> voltage := low, limit_KV_Low;
    voltage_goes_low_1 true = 1 -> voltage := low, limit_KV_Low_5;
    voltage_goes_low_2 true = 1 -> voltage := low, limit_KV_Low_4;
    voltage_goes_low_3 true = 1 -> voltage := low, limit_KV_Low_3;
    voltage_goes_low_4 true = 1 -> voltage := low, limit_KV_Low_2;
    voltage_goes_low_5 true = 1 -> voltage := low, limit_KV_Low_1;
  triggeredby voltage_low;
  transition voltage_goes_to_zero_unexplained
    voltage_goes_to_zero_unexplained_0 true = 1 -> voltage := zero, entered_zero_zone_KV, count_as_fault;
  transition voltage_goes_normal_unexplained
    voltage_goes_normal_unexplained_0 true = 1 -> voltage := normal, limit_KV_Normal, count_as_fault;
  transition voltage_goes_high_unexplained
    voltage_goes_high_unexplained_0 true = 1 -> voltage := high, limit_KV_High, count_as_fault;
    voltage_goes_high_unexplained_1 true = 1 -> voltage := high, limit_KV_High_5, count_as_fault;
    voltage_goes_high_unexplained_2 true = 1 -> voltage := high, limit_KV_High_4, count_as_fault;
    voltage_goes_high_unexplained_3 true = 1 -> voltage := high, limit_KV_High_3, count_as_fault;
    voltage_goes_high_unexplained_4 true = 1 -> voltage := high, limit_KV_High_2, count_as_fault;
    voltage_goes_high_unexplained_5 true = 1 -> voltage := high, limit_KV_High_1, count_as_fault;
  transition voltage_goes_low_unexplained
    voltage_goes_low_unexplained_0 true = 1 -> voltage := low, limit_KV_Low, count_as_fault;
    voltage_goes_low_unexplained_1 true = 1 -> voltage := low, limit_KV_Low_5, count_as_fault;
    voltage_goes_low_unexplained_2 true = 1 -> voltage := low, limit_KV_Low_4, count_as_fault;
    voltage_goes_low_unexplained_3 true = 1 -> voltage := low, limit_KV_Low_3, count_as_fault;
    voltage_goes_low_unexplained_4 true = 1 -> voltage := low, limit_KV_Low_2, count_as_fault;
    voltage_goes_low_unexplained_5 true = 1 -> voltage := low, limit_KV_Low_1, count_as_fault;
  transition iso_state_changed_timeout
    iso_state_changed_timeout_0 true = 1 -> iso_state_changed := false;
  triggeredby [0.0..15.0] iso_state_changed = true;
  transition become_not_isolated
    become_not_isolated_0 true = 1 -> isolated := false, iso_state_changed := true;
  triggeredby set_isolated_false;
  transition become_isolated
    become_isolated_0 true = 1 -> isolated := true, iso_state_changed := true;
  triggeredby set_isolated_true;
}
component Bus_X38 = {
  connection generatorsXYZ0 : attached = Generator_X93;
  var mvar : {zero,high,low,normal};
  var mw : {zero,high,low,normal};
  var voltage : {zero,high,low,normal};
  var iso_state_changed : [0..1];
  var isolated : [0..1];
  event check_generators_off;
  event check_switched_in;
  event check_switched_out;
  event count_as_fault;
  event set_isolated_false;
  event set_isolated_true;
  event mvar_zero;
  event mvar_normal;
  event mvar_high;
  event mvar_low;
  event mw_zero;
  event mw_normal;
  event mw_high;
  event mw_low;
  event voltage_zero;
  event voltage_normal;
  event voltage_high;
  event voltage_low;
  event entered_zero_zone_MVAR;
  event limit_MVAR_High;
  event limit_MVAR_High_5;
  event limit_MVAR_High_4;
  event limit_MVAR_High_3;
  event limit_MVAR_High_2;
  event limit_MVAR_High_1;
  event limit_MVAR_Low;
  event limit_MVAR_Low_5;
  event limit_MVAR_Low_4;
  event limit_MVAR_Low_3;
  event limit_MVAR_Low_2;
  event limit_MVAR_Low_1;
  event limit_MVAR_Normal;
  event entered_zero_zone_MW;
  event limit_MW_High;
  event limit_MW_High_5;
  event limit_MW_High_4;
  event limit_MW_High_3;
  event limit_MW_High_2;
  event limit_MW_High_1;
  event limit_MW_Low;
  event limit_MW_Low_5;
  event limit_MW_Low_4;
  event limit_MW_Low_3;
  event limit_MW_Low_2;
  event limit_MW_Low_1;
  event limit_MW_Normal;
  event entered_zero_zone_KV;
  event limit_KV_High;
  event limit_KV_High_5;
  event limit_KV_High_4;
  event limit_KV_High_3;
  event limit_KV_High_2;
  event limit_KV_High_1;
  event limit_KV_Low;
  event limit_KV_Low_5;
  event limit_KV_Low_4;
  event limit_KV_Low_3;
  event limit_KV_Low_2;
  event limit_KV_Low_1;
  event limit_KV_Normal;
  transition mvar_goes_to_zero
    mvar_goes_to_zero_0 true = 1 -> mvar := zero, entered_zero_zone_MVAR;
  triggeredby mvar_zero;
  transition mvar_goes_normal
    mvar_goes_normal_0 true = 1 -> mvar := normal, limit_MVAR_Normal;
  triggeredby mvar_normal;
  transition mvar_goes_high
    mvar_goes_high_0 true = 1 -> mvar := high, limit_MVAR_High;
    mvar_goes_high_1 true = 1 -> mvar := high, limit_MVAR_High_5;
    mvar_goes_high_2 true = 1 -> mvar := high, limit_MVAR_High_4;
    mvar_goes_high_3 true = 1 -> mvar := high, limit_MVAR_High_3;
    mvar_goes_high_4 true = 1 -> mvar := high, limit_MVAR_High_2;
    mvar_goes_high_5 true = 1 -> mvar := high, limit_MVAR_High_1;
  triggeredby mvar_high;
  transition mvar_goes_low
    mvar_goes_low_0 true = 1 -> mvar := low, limit_MVAR_Low;
    mvar_goes_low_1 true = 1 -> mvar := low, limit_MVAR_Low_5;
    mvar_goes_low_2 true = 1 -> mvar := low, limit_MVAR_Low_4;
    mvar_goes_low_3 true = 1 -> mvar := low, limit_MVAR_Low_3;
    mvar_goes_low_4 true = 1 -> mvar := low, limit_MVAR_Low_2;
    mvar_goes_low_5 true = 1 -> mvar := low, limit_MVAR_Low_1;
  triggeredby mvar_low;
  transition mvar_goes_to_zero_unexplained
    mvar_goes_to_zero_unexplained_0 true = 1 -> mvar := zero, entered_zero_zone_MVAR, count_as_fault;
  transition mvar_goes_normal_unexplained
    mvar_goes_normal_unexplained_0 true = 1 -> mvar := normal, limit_MVAR_Normal, count_as_fault;
  transition mvar_goes_high_unexplained
    mvar_goes_high_unexplained_0 true = 1 -> mvar := high, limit_MVAR_High, count_as_fault;
    mvar_goes_high_unexplained_1 true = 1 -> mvar := high, limit_MVAR_High_5, count_as_fault;
    mvar_goes_high_unexplained_2 true = 1 -> mvar := high, limit_MVAR_High_4, count_as_fault;
    mvar_goes_high_unexplained_3 true = 1 -> mvar := high, limit_MVAR_High_3, count_as_fault;
    mvar_goes_high_unexplained_4 true = 1 -> mvar := high, limit_MVAR_High_2, count_as_fault;
    mvar_goes_high_unexplained_5 true = 1 -> mvar := high, limit_MVAR_High_1, count_as_fault;
  transition mvar_goes_low_unexplained
    mvar_goes_low_unexplained_0 true = 1 -> mvar := low, limit_MVAR_Low, count_as_fault;
    mvar_goes_low_unexplained_1 true = 1 -> mvar := low, limit_MVAR_Low_5, count_as_fault;
    mvar_goes_low_unexplained_2 true = 1 -> mvar := low, limit_MVAR_Low_4, count_as_fault;
    mvar_goes_low_unexplained_3 true = 1 -> mvar := low, limit_MVAR_Low_3, count_as_fault;
    mvar_goes_low_unexplained_4 true = 1 -> mvar := low, limit_MVAR_Low_2, count_as_fault;
    mvar_goes_low_unexplained_5 true = 1 -> mvar := low, limit_MVAR_Low_1, count_as_fault;
  transition mw_goes_normal_when_reenergised
    mw_goes_normal_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> mw := normal, limit_MW_Normal;
  transition mw_goes_high_when_reenergised
    mw_goes_high_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High;
    mw_goes_high_when_reenergised_1 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_5;
    mw_goes_high_when_reenergised_2 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_4;
    mw_goes_high_when_reenergised_3 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_3;
    mw_goes_high_when_reenergised_4 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_2;
    mw_goes_high_when_reenergised_5 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_1;
  transition mw_goes_low_when_reenergised
    mw_goes_low_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low;
    mw_goes_low_when_reenergised_1 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_5;
    mw_goes_low_when_reenergised_2 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_4;
    mw_goes_low_when_reenergised_3 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_3;
    mw_goes_low_when_reenergised_4 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_2;
    mw_goes_low_when_reenergised_5 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_1;
  transition mw_goes_to_zero_when_isolated
    mw_goes_to_zero_when_isolated_0 (isolated = true AND iso_state_changed = true) -> mw := zero, entered_zero_zone_MW, check_generators_off;
  transition mw_goes_low_when_isolated
    mw_goes_low_when_isolated_0 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low, check_generators_off;
    mw_goes_low_when_isolated_1 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_5, check_generators_off;
    mw_goes_low_when_isolated_2 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_4, check_generators_off;
    mw_goes_low_when_isolated_3 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_3, check_generators_off;
    mw_goes_low_when_isolated_4 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_2, check_generators_off;
    mw_goes_low_when_isolated_5 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_1, check_generators_off;
  transition mw_goes_to_zero
    mw_goes_to_zero_0 true = 1 -> mw := zero, entered_zero_zone_MW;
  triggeredby mw_zero;
  transition mw_goes_normal
    mw_goes_normal_0 true = 1 -> mw := normal, limit_MW_Normal;
  triggeredby mw_normal;
  transition mw_goes_high
    mw_goes_high_0 true = 1 -> mw := high, limit_MW_High;
    mw_goes_high_1 true = 1 -> mw := high, limit_MW_High_5;
    mw_goes_high_2 true = 1 -> mw := high, limit_MW_High_4;
    mw_goes_high_3 true = 1 -> mw := high, limit_MW_High_3;
    mw_goes_high_4 true = 1 -> mw := high, limit_MW_High_2;
    mw_goes_high_5 true = 1 -> mw := high, limit_MW_High_1;
  triggeredby mw_high;
  transition mw_goes_low
    mw_goes_low_0 true = 1 -> mw := low, limit_MW_Low;
    mw_goes_low_1 true = 1 -> mw := low, limit_MW_Low_5;
    mw_goes_low_2 true = 1 -> mw := low, limit_MW_Low_4;
    mw_goes_low_3 true = 1 -> mw := low, limit_MW_Low_3;
    mw_goes_low_4 true = 1 -> mw := low, limit_MW_Low_2;
    mw_goes_low_5 true = 1 -> mw := low, limit_MW_Low_1;
  triggeredby mw_low;
  transition mw_goes_to_zero_unexplained
    mw_goes_to_zero_unexplained_0 true = 1 -> mw := zero, entered_zero_zone_MW, count_as_fault;
  transition mw_goes_normal_unexplained
    mw_goes_normal_unexplained_0 true = 1 -> mw := normal, limit_MW_Normal, count_as_fault;
  transition mw_goes_high_unexplained
    mw_goes_high_unexplained_0 true = 1 -> mw := high, limit_MW_High, count_as_fault;
    mw_goes_high_unexplained_1 true = 1 -> mw := high, limit_MW_High_5, count_as_fault;
    mw_goes_high_unexplained_2 true = 1 -> mw := high, limit_MW_High_4, count_as_fault;
    mw_goes_high_unexplained_3 true = 1 -> mw := high, limit_MW_High_3, count_as_fault;
    mw_goes_high_unexplained_4 true = 1 -> mw := high, limit_MW_High_2, count_as_fault;
    mw_goes_high_unexplained_5 true = 1 -> mw := high, limit_MW_High_1, count_as_fault;
  transition mw_goes_low_unexplained
    mw_goes_low_unexplained_0 true = 1 -> mw := low, limit_MW_Low, count_as_fault;
    mw_goes_low_unexplained_1 true = 1 -> mw := low, limit_MW_Low_5, count_as_fault;
    mw_goes_low_unexplained_2 true = 1 -> mw := low, limit_MW_Low_4, count_as_fault;
    mw_goes_low_unexplained_3 true = 1 -> mw := low, limit_MW_Low_3, count_as_fault;
    mw_goes_low_unexplained_4 true = 1 -> mw := low, limit_MW_Low_2, count_as_fault;
    mw_goes_low_unexplained_5 true = 1 -> mw := low, limit_MW_Low_1, count_as_fault;
  transition voltage_goes_normal_when_caps_in
    voltage_goes_normal_when_caps_in_0 (voltage = low AND isolated = false) -> voltage := normal, limit_KV_Normal, check_switched_in;
  transition voltage_goes_normal_when_caps_out
    voltage_goes_normal_when_caps_out_0 (voltage = high AND isolated = false) -> voltage := normal, limit_KV_Normal, check_switched_out;
  transition voltage_goes_normal_when_reenergised
    voltage_goes_normal_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> voltage := normal, limit_KV_Normal;
  transition voltage_goes_high_when_reenergised
    voltage_goes_high_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High;
    voltage_goes_high_when_reenergised_1 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_5;
    voltage_goes_high_when_reenergised_2 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_4;
    voltage_goes_high_when_reenergised_3 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_3;
    voltage_goes_high_when_reenergised_4 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_2;
    voltage_goes_high_when_reenergised_5 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_1;
  transition voltage_goes_Low_when_reenergised
    voltage_goes_Low_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low;
    voltage_goes_Low_when_reenergised_1 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_5;
    voltage_goes_Low_when_reenergised_2 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_4;
    voltage_goes_Low_when_reenergised_3 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_3;
    voltage_goes_Low_when_reenergised_4 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_2;
    voltage_goes_Low_when_reenergised_5 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_1;
  transition voltage_goes_to_zero_when_isolated
    voltage_goes_to_zero_when_isolated_0 (isolated = true AND iso_state_changed = true) -> voltage := zero, entered_zero_zone_KV, check_generators_off;
  transition voltage_goes_low_when_isolated
    voltage_goes_low_when_isolated_0 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low, check_generators_off;
    voltage_goes_low_when_isolated_1 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_5, check_generators_off;
    voltage_goes_low_when_isolated_2 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_4, check_generators_off;
    voltage_goes_low_when_isolated_3 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_3, check_generators_off;
    voltage_goes_low_when_isolated_4 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_2, check_generators_off;
    voltage_goes_low_when_isolated_5 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_1, check_generators_off;
  transition voltage_goes_to_zero
    voltage_goes_to_zero_0 true = 1 -> voltage := zero, entered_zero_zone_KV;
  triggeredby voltage_zero;
  transition voltage_goes_normal
    voltage_goes_normal_0 true = 1 -> voltage := normal, limit_KV_Normal;
  triggeredby voltage_normal;
  transition voltage_goes_high
    voltage_goes_high_0 true = 1 -> voltage := high, limit_KV_High;
    voltage_goes_high_1 true = 1 -> voltage := high, limit_KV_High_5;
    voltage_goes_high_2 true = 1 -> voltage := high, limit_KV_High_4;
    voltage_goes_high_3 true = 1 -> voltage := high, limit_KV_High_3;
    voltage_goes_high_4 true = 1 -> voltage := high, limit_KV_High_2;
    voltage_goes_high_5 true = 1 -> voltage := high, limit_KV_High_1;
  triggeredby voltage_high;
  transition voltage_goes_low
    voltage_goes_low_0 true = 1 -> voltage := low, limit_KV_Low;
    voltage_goes_low_1 true = 1 -> voltage := low, limit_KV_Low_5;
    voltage_goes_low_2 true = 1 -> voltage := low, limit_KV_Low_4;
    voltage_goes_low_3 true = 1 -> voltage := low, limit_KV_Low_3;
    voltage_goes_low_4 true = 1 -> voltage := low, limit_KV_Low_2;
    voltage_goes_low_5 true = 1 -> voltage := low, limit_KV_Low_1;
  triggeredby voltage_low;
  transition voltage_goes_to_zero_unexplained
    voltage_goes_to_zero_unexplained_0 true = 1 -> voltage := zero, entered_zero_zone_KV, count_as_fault;
  transition voltage_goes_normal_unexplained
    voltage_goes_normal_unexplained_0 true = 1 -> voltage := normal, limit_KV_Normal, count_as_fault;
  transition voltage_goes_high_unexplained
    voltage_goes_high_unexplained_0 true = 1 -> voltage := high, limit_KV_High, count_as_fault;
    voltage_goes_high_unexplained_1 true = 1 -> voltage := high, limit_KV_High_5, count_as_fault;
    voltage_goes_high_unexplained_2 true = 1 -> voltage := high, limit_KV_High_4, count_as_fault;
    voltage_goes_high_unexplained_3 true = 1 -> voltage := high, limit_KV_High_3, count_as_fault;
    voltage_goes_high_unexplained_4 true = 1 -> voltage := high, limit_KV_High_2, count_as_fault;
    voltage_goes_high_unexplained_5 true = 1 -> voltage := high, limit_KV_High_1, count_as_fault;
  transition voltage_goes_low_unexplained
    voltage_goes_low_unexplained_0 true = 1 -> voltage := low, limit_KV_Low, count_as_fault;
    voltage_goes_low_unexplained_1 true = 1 -> voltage := low, limit_KV_Low_5, count_as_fault;
    voltage_goes_low_unexplained_2 true = 1 -> voltage := low, limit_KV_Low_4, count_as_fault;
    voltage_goes_low_unexplained_3 true = 1 -> voltage := low, limit_KV_Low_3, count_as_fault;
    voltage_goes_low_unexplained_4 true = 1 -> voltage := low, limit_KV_Low_2, count_as_fault;
    voltage_goes_low_unexplained_5 true = 1 -> voltage := low, limit_KV_Low_1, count_as_fault;
  transition iso_state_changed_timeout
    iso_state_changed_timeout_0 true = 1 -> iso_state_changed := false;
  triggeredby [0.0..15.0] iso_state_changed = true;
  transition become_not_isolated
    become_not_isolated_0 true = 1 -> isolated := false, iso_state_changed := true;
  triggeredby set_isolated_false;
  transition become_isolated
    become_isolated_0 true = 1 -> isolated := true, iso_state_changed := true;
  triggeredby set_isolated_true;
}
component Bus_X40 = {
  connection generatorsXYZ0 : attached = Generator_X94;
  var mvar : {zero,high,low,normal};
  var mw : {zero,high,low,normal};
  var voltage : {zero,high,low,normal};
  var iso_state_changed : [0..1];
  var isolated : [0..1];
  event check_generators_off;
  event check_switched_in;
  event check_switched_out;
  event count_as_fault;
  event set_isolated_false;
  event set_isolated_true;
  event mvar_zero;
  event mvar_normal;
  event mvar_high;
  event mvar_low;
  event mw_zero;
  event mw_normal;
  event mw_high;
  event mw_low;
  event voltage_zero;
  event voltage_normal;
  event voltage_high;
  event voltage_low;
  event entered_zero_zone_MVAR;
  event limit_MVAR_High;
  event limit_MVAR_High_5;
  event limit_MVAR_High_4;
  event limit_MVAR_High_3;
  event limit_MVAR_High_2;
  event limit_MVAR_High_1;
  event limit_MVAR_Low;
  event limit_MVAR_Low_5;
  event limit_MVAR_Low_4;
  event limit_MVAR_Low_3;
  event limit_MVAR_Low_2;
  event limit_MVAR_Low_1;
  event limit_MVAR_Normal;
  event entered_zero_zone_MW;
  event limit_MW_High;
  event limit_MW_High_5;
  event limit_MW_High_4;
  event limit_MW_High_3;
  event limit_MW_High_2;
  event limit_MW_High_1;
  event limit_MW_Low;
  event limit_MW_Low_5;
  event limit_MW_Low_4;
  event limit_MW_Low_3;
  event limit_MW_Low_2;
  event limit_MW_Low_1;
  event limit_MW_Normal;
  event entered_zero_zone_KV;
  event limit_KV_High;
  event limit_KV_High_5;
  event limit_KV_High_4;
  event limit_KV_High_3;
  event limit_KV_High_2;
  event limit_KV_High_1;
  event limit_KV_Low;
  event limit_KV_Low_5;
  event limit_KV_Low_4;
  event limit_KV_Low_3;
  event limit_KV_Low_2;
  event limit_KV_Low_1;
  event limit_KV_Normal;
  transition mvar_goes_to_zero
    mvar_goes_to_zero_0 true = 1 -> mvar := zero, entered_zero_zone_MVAR;
  triggeredby mvar_zero;
  transition mvar_goes_normal
    mvar_goes_normal_0 true = 1 -> mvar := normal, limit_MVAR_Normal;
  triggeredby mvar_normal;
  transition mvar_goes_high
    mvar_goes_high_0 true = 1 -> mvar := high, limit_MVAR_High;
    mvar_goes_high_1 true = 1 -> mvar := high, limit_MVAR_High_5;
    mvar_goes_high_2 true = 1 -> mvar := high, limit_MVAR_High_4;
    mvar_goes_high_3 true = 1 -> mvar := high, limit_MVAR_High_3;
    mvar_goes_high_4 true = 1 -> mvar := high, limit_MVAR_High_2;
    mvar_goes_high_5 true = 1 -> mvar := high, limit_MVAR_High_1;
  triggeredby mvar_high;
  transition mvar_goes_low
    mvar_goes_low_0 true = 1 -> mvar := low, limit_MVAR_Low;
    mvar_goes_low_1 true = 1 -> mvar := low, limit_MVAR_Low_5;
    mvar_goes_low_2 true = 1 -> mvar := low, limit_MVAR_Low_4;
    mvar_goes_low_3 true = 1 -> mvar := low, limit_MVAR_Low_3;
    mvar_goes_low_4 true = 1 -> mvar := low, limit_MVAR_Low_2;
    mvar_goes_low_5 true = 1 -> mvar := low, limit_MVAR_Low_1;
  triggeredby mvar_low;
  transition mvar_goes_to_zero_unexplained
    mvar_goes_to_zero_unexplained_0 true = 1 -> mvar := zero, entered_zero_zone_MVAR, count_as_fault;
  transition mvar_goes_normal_unexplained
    mvar_goes_normal_unexplained_0 true = 1 -> mvar := normal, limit_MVAR_Normal, count_as_fault;
  transition mvar_goes_high_unexplained
    mvar_goes_high_unexplained_0 true = 1 -> mvar := high, limit_MVAR_High, count_as_fault;
    mvar_goes_high_unexplained_1 true = 1 -> mvar := high, limit_MVAR_High_5, count_as_fault;
    mvar_goes_high_unexplained_2 true = 1 -> mvar := high, limit_MVAR_High_4, count_as_fault;
    mvar_goes_high_unexplained_3 true = 1 -> mvar := high, limit_MVAR_High_3, count_as_fault;
    mvar_goes_high_unexplained_4 true = 1 -> mvar := high, limit_MVAR_High_2, count_as_fault;
    mvar_goes_high_unexplained_5 true = 1 -> mvar := high, limit_MVAR_High_1, count_as_fault;
  transition mvar_goes_low_unexplained
    mvar_goes_low_unexplained_0 true = 1 -> mvar := low, limit_MVAR_Low, count_as_fault;
    mvar_goes_low_unexplained_1 true = 1 -> mvar := low, limit_MVAR_Low_5, count_as_fault;
    mvar_goes_low_unexplained_2 true = 1 -> mvar := low, limit_MVAR_Low_4, count_as_fault;
    mvar_goes_low_unexplained_3 true = 1 -> mvar := low, limit_MVAR_Low_3, count_as_fault;
    mvar_goes_low_unexplained_4 true = 1 -> mvar := low, limit_MVAR_Low_2, count_as_fault;
    mvar_goes_low_unexplained_5 true = 1 -> mvar := low, limit_MVAR_Low_1, count_as_fault;
  transition mw_goes_normal_when_reenergised
    mw_goes_normal_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> mw := normal, limit_MW_Normal;
  transition mw_goes_high_when_reenergised
    mw_goes_high_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High;
    mw_goes_high_when_reenergised_1 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_5;
    mw_goes_high_when_reenergised_2 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_4;
    mw_goes_high_when_reenergised_3 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_3;
    mw_goes_high_when_reenergised_4 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_2;
    mw_goes_high_when_reenergised_5 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_1;
  transition mw_goes_low_when_reenergised
    mw_goes_low_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low;
    mw_goes_low_when_reenergised_1 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_5;
    mw_goes_low_when_reenergised_2 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_4;
    mw_goes_low_when_reenergised_3 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_3;
    mw_goes_low_when_reenergised_4 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_2;
    mw_goes_low_when_reenergised_5 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_1;
  transition mw_goes_to_zero_when_isolated
    mw_goes_to_zero_when_isolated_0 (isolated = true AND iso_state_changed = true) -> mw := zero, entered_zero_zone_MW, check_generators_off;
  transition mw_goes_low_when_isolated
    mw_goes_low_when_isolated_0 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low, check_generators_off;
    mw_goes_low_when_isolated_1 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_5, check_generators_off;
    mw_goes_low_when_isolated_2 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_4, check_generators_off;
    mw_goes_low_when_isolated_3 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_3, check_generators_off;
    mw_goes_low_when_isolated_4 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_2, check_generators_off;
    mw_goes_low_when_isolated_5 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_1, check_generators_off;
  transition mw_goes_to_zero
    mw_goes_to_zero_0 true = 1 -> mw := zero, entered_zero_zone_MW;
  triggeredby mw_zero;
  transition mw_goes_normal
    mw_goes_normal_0 true = 1 -> mw := normal, limit_MW_Normal;
  triggeredby mw_normal;
  transition mw_goes_high
    mw_goes_high_0 true = 1 -> mw := high, limit_MW_High;
    mw_goes_high_1 true = 1 -> mw := high, limit_MW_High_5;
    mw_goes_high_2 true = 1 -> mw := high, limit_MW_High_4;
    mw_goes_high_3 true = 1 -> mw := high, limit_MW_High_3;
    mw_goes_high_4 true = 1 -> mw := high, limit_MW_High_2;
    mw_goes_high_5 true = 1 -> mw := high, limit_MW_High_1;
  triggeredby mw_high;
  transition mw_goes_low
    mw_goes_low_0 true = 1 -> mw := low, limit_MW_Low;
    mw_goes_low_1 true = 1 -> mw := low, limit_MW_Low_5;
    mw_goes_low_2 true = 1 -> mw := low, limit_MW_Low_4;
    mw_goes_low_3 true = 1 -> mw := low, limit_MW_Low_3;
    mw_goes_low_4 true = 1 -> mw := low, limit_MW_Low_2;
    mw_goes_low_5 true = 1 -> mw := low, limit_MW_Low_1;
  triggeredby mw_low;
  transition mw_goes_to_zero_unexplained
    mw_goes_to_zero_unexplained_0 true = 1 -> mw := zero, entered_zero_zone_MW, count_as_fault;
  transition mw_goes_normal_unexplained
    mw_goes_normal_unexplained_0 true = 1 -> mw := normal, limit_MW_Normal, count_as_fault;
  transition mw_goes_high_unexplained
    mw_goes_high_unexplained_0 true = 1 -> mw := high, limit_MW_High, count_as_fault;
    mw_goes_high_unexplained_1 true = 1 -> mw := high, limit_MW_High_5, count_as_fault;
    mw_goes_high_unexplained_2 true = 1 -> mw := high, limit_MW_High_4, count_as_fault;
    mw_goes_high_unexplained_3 true = 1 -> mw := high, limit_MW_High_3, count_as_fault;
    mw_goes_high_unexplained_4 true = 1 -> mw := high, limit_MW_High_2, count_as_fault;
    mw_goes_high_unexplained_5 true = 1 -> mw := high, limit_MW_High_1, count_as_fault;
  transition mw_goes_low_unexplained
    mw_goes_low_unexplained_0 true = 1 -> mw := low, limit_MW_Low, count_as_fault;
    mw_goes_low_unexplained_1 true = 1 -> mw := low, limit_MW_Low_5, count_as_fault;
    mw_goes_low_unexplained_2 true = 1 -> mw := low, limit_MW_Low_4, count_as_fault;
    mw_goes_low_unexplained_3 true = 1 -> mw := low, limit_MW_Low_3, count_as_fault;
    mw_goes_low_unexplained_4 true = 1 -> mw := low, limit_MW_Low_2, count_as_fault;
    mw_goes_low_unexplained_5 true = 1 -> mw := low, limit_MW_Low_1, count_as_fault;
  transition voltage_goes_normal_when_caps_in
    voltage_goes_normal_when_caps_in_0 (voltage = low AND isolated = false) -> voltage := normal, limit_KV_Normal, check_switched_in;
  transition voltage_goes_normal_when_caps_out
    voltage_goes_normal_when_caps_out_0 (voltage = high AND isolated = false) -> voltage := normal, limit_KV_Normal, check_switched_out;
  transition voltage_goes_normal_when_reenergised
    voltage_goes_normal_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> voltage := normal, limit_KV_Normal;
  transition voltage_goes_high_when_reenergised
    voltage_goes_high_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High;
    voltage_goes_high_when_reenergised_1 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_5;
    voltage_goes_high_when_reenergised_2 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_4;
    voltage_goes_high_when_reenergised_3 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_3;
    voltage_goes_high_when_reenergised_4 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_2;
    voltage_goes_high_when_reenergised_5 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_1;
  transition voltage_goes_Low_when_reenergised
    voltage_goes_Low_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low;
    voltage_goes_Low_when_reenergised_1 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_5;
    voltage_goes_Low_when_reenergised_2 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_4;
    voltage_goes_Low_when_reenergised_3 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_3;
    voltage_goes_Low_when_reenergised_4 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_2;
    voltage_goes_Low_when_reenergised_5 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_1;
  transition voltage_goes_to_zero_when_isolated
    voltage_goes_to_zero_when_isolated_0 (isolated = true AND iso_state_changed = true) -> voltage := zero, entered_zero_zone_KV, check_generators_off;
  transition voltage_goes_low_when_isolated
    voltage_goes_low_when_isolated_0 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low, check_generators_off;
    voltage_goes_low_when_isolated_1 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_5, check_generators_off;
    voltage_goes_low_when_isolated_2 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_4, check_generators_off;
    voltage_goes_low_when_isolated_3 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_3, check_generators_off;
    voltage_goes_low_when_isolated_4 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_2, check_generators_off;
    voltage_goes_low_when_isolated_5 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_1, check_generators_off;
  transition voltage_goes_to_zero
    voltage_goes_to_zero_0 true = 1 -> voltage := zero, entered_zero_zone_KV;
  triggeredby voltage_zero;
  transition voltage_goes_normal
    voltage_goes_normal_0 true = 1 -> voltage := normal, limit_KV_Normal;
  triggeredby voltage_normal;
  transition voltage_goes_high
    voltage_goes_high_0 true = 1 -> voltage := high, limit_KV_High;
    voltage_goes_high_1 true = 1 -> voltage := high, limit_KV_High_5;
    voltage_goes_high_2 true = 1 -> voltage := high, limit_KV_High_4;
    voltage_goes_high_3 true = 1 -> voltage := high, limit_KV_High_3;
    voltage_goes_high_4 true = 1 -> voltage := high, limit_KV_High_2;
    voltage_goes_high_5 true = 1 -> voltage := high, limit_KV_High_1;
  triggeredby voltage_high;
  transition voltage_goes_low
    voltage_goes_low_0 true = 1 -> voltage := low, limit_KV_Low;
    voltage_goes_low_1 true = 1 -> voltage := low, limit_KV_Low_5;
    voltage_goes_low_2 true = 1 -> voltage := low, limit_KV_Low_4;
    voltage_goes_low_3 true = 1 -> voltage := low, limit_KV_Low_3;
    voltage_goes_low_4 true = 1 -> voltage := low, limit_KV_Low_2;
    voltage_goes_low_5 true = 1 -> voltage := low, limit_KV_Low_1;
  triggeredby voltage_low;
  transition voltage_goes_to_zero_unexplained
    voltage_goes_to_zero_unexplained_0 true = 1 -> voltage := zero, entered_zero_zone_KV, count_as_fault;
  transition voltage_goes_normal_unexplained
    voltage_goes_normal_unexplained_0 true = 1 -> voltage := normal, limit_KV_Normal, count_as_fault;
  transition voltage_goes_high_unexplained
    voltage_goes_high_unexplained_0 true = 1 -> voltage := high, limit_KV_High, count_as_fault;
    voltage_goes_high_unexplained_1 true = 1 -> voltage := high, limit_KV_High_5, count_as_fault;
    voltage_goes_high_unexplained_2 true = 1 -> voltage := high, limit_KV_High_4, count_as_fault;
    voltage_goes_high_unexplained_3 true = 1 -> voltage := high, limit_KV_High_3, count_as_fault;
    voltage_goes_high_unexplained_4 true = 1 -> voltage := high, limit_KV_High_2, count_as_fault;
    voltage_goes_high_unexplained_5 true = 1 -> voltage := high, limit_KV_High_1, count_as_fault;
  transition voltage_goes_low_unexplained
    voltage_goes_low_unexplained_0 true = 1 -> voltage := low, limit_KV_Low, count_as_fault;
    voltage_goes_low_unexplained_1 true = 1 -> voltage := low, limit_KV_Low_5, count_as_fault;
    voltage_goes_low_unexplained_2 true = 1 -> voltage := low, limit_KV_Low_4, count_as_fault;
    voltage_goes_low_unexplained_3 true = 1 -> voltage := low, limit_KV_Low_3, count_as_fault;
    voltage_goes_low_unexplained_4 true = 1 -> voltage := low, limit_KV_Low_2, count_as_fault;
    voltage_goes_low_unexplained_5 true = 1 -> voltage := low, limit_KV_Low_1, count_as_fault;
  transition iso_state_changed_timeout
    iso_state_changed_timeout_0 true = 1 -> iso_state_changed := false;
  triggeredby [0.0..15.0] iso_state_changed = true;
  transition become_not_isolated
    become_not_isolated_0 true = 1 -> isolated := false, iso_state_changed := true;
  triggeredby set_isolated_false;
  transition become_isolated
    become_isolated_0 true = 1 -> isolated := true, iso_state_changed := true;
  triggeredby set_isolated_true;
}
component Bus_X103 = {
  var mvar : {zero,high,low,normal};
  var mw : {zero,high,low,normal};
  var voltage : {zero,high,low,normal};
  var iso_state_changed : [0..1];
  var isolated : [0..1];
  event check_generators_off;
  event check_switched_in;
  event check_switched_out;
  event count_as_fault;
  event set_isolated_false;
  event set_isolated_true;
  event mvar_zero;
  event mvar_normal;
  event mvar_high;
  event mvar_low;
  event mw_zero;
  event mw_normal;
  event mw_high;
  event mw_low;
  event voltage_zero;
  event voltage_normal;
  event voltage_high;
  event voltage_low;
  event entered_zero_zone_MVAR;
  event limit_MVAR_High;
  event limit_MVAR_High_5;
  event limit_MVAR_High_4;
  event limit_MVAR_High_3;
  event limit_MVAR_High_2;
  event limit_MVAR_High_1;
  event limit_MVAR_Low;
  event limit_MVAR_Low_5;
  event limit_MVAR_Low_4;
  event limit_MVAR_Low_3;
  event limit_MVAR_Low_2;
  event limit_MVAR_Low_1;
  event limit_MVAR_Normal;
  event entered_zero_zone_MW;
  event limit_MW_High;
  event limit_MW_High_5;
  event limit_MW_High_4;
  event limit_MW_High_3;
  event limit_MW_High_2;
  event limit_MW_High_1;
  event limit_MW_Low;
  event limit_MW_Low_5;
  event limit_MW_Low_4;
  event limit_MW_Low_3;
  event limit_MW_Low_2;
  event limit_MW_Low_1;
  event limit_MW_Normal;
  event entered_zero_zone_KV;
  event limit_KV_High;
  event limit_KV_High_5;
  event limit_KV_High_4;
  event limit_KV_High_3;
  event limit_KV_High_2;
  event limit_KV_High_1;
  event limit_KV_Low;
  event limit_KV_Low_5;
  event limit_KV_Low_4;
  event limit_KV_Low_3;
  event limit_KV_Low_2;
  event limit_KV_Low_1;
  event limit_KV_Normal;
  transition mvar_goes_to_zero
    mvar_goes_to_zero_0 true = 1 -> mvar := zero, entered_zero_zone_MVAR;
  triggeredby mvar_zero;
  transition mvar_goes_normal
    mvar_goes_normal_0 true = 1 -> mvar := normal, limit_MVAR_Normal;
  triggeredby mvar_normal;
  transition mvar_goes_high
    mvar_goes_high_0 true = 1 -> mvar := high, limit_MVAR_High;
    mvar_goes_high_1 true = 1 -> mvar := high, limit_MVAR_High_5;
    mvar_goes_high_2 true = 1 -> mvar := high, limit_MVAR_High_4;
    mvar_goes_high_3 true = 1 -> mvar := high, limit_MVAR_High_3;
    mvar_goes_high_4 true = 1 -> mvar := high, limit_MVAR_High_2;
    mvar_goes_high_5 true = 1 -> mvar := high, limit_MVAR_High_1;
  triggeredby mvar_high;
  transition mvar_goes_low
    mvar_goes_low_0 true = 1 -> mvar := low, limit_MVAR_Low;
    mvar_goes_low_1 true = 1 -> mvar := low, limit_MVAR_Low_5;
    mvar_goes_low_2 true = 1 -> mvar := low, limit_MVAR_Low_4;
    mvar_goes_low_3 true = 1 -> mvar := low, limit_MVAR_Low_3;
    mvar_goes_low_4 true = 1 -> mvar := low, limit_MVAR_Low_2;
    mvar_goes_low_5 true = 1 -> mvar := low, limit_MVAR_Low_1;
  triggeredby mvar_low;
  transition mvar_goes_to_zero_unexplained
    mvar_goes_to_zero_unexplained_0 true = 1 -> mvar := zero, entered_zero_zone_MVAR, count_as_fault;
  transition mvar_goes_normal_unexplained
    mvar_goes_normal_unexplained_0 true = 1 -> mvar := normal, limit_MVAR_Normal, count_as_fault;
  transition mvar_goes_high_unexplained
    mvar_goes_high_unexplained_0 true = 1 -> mvar := high, limit_MVAR_High, count_as_fault;
    mvar_goes_high_unexplained_1 true = 1 -> mvar := high, limit_MVAR_High_5, count_as_fault;
    mvar_goes_high_unexplained_2 true = 1 -> mvar := high, limit_MVAR_High_4, count_as_fault;
    mvar_goes_high_unexplained_3 true = 1 -> mvar := high, limit_MVAR_High_3, count_as_fault;
    mvar_goes_high_unexplained_4 true = 1 -> mvar := high, limit_MVAR_High_2, count_as_fault;
    mvar_goes_high_unexplained_5 true = 1 -> mvar := high, limit_MVAR_High_1, count_as_fault;
  transition mvar_goes_low_unexplained
    mvar_goes_low_unexplained_0 true = 1 -> mvar := low, limit_MVAR_Low, count_as_fault;
    mvar_goes_low_unexplained_1 true = 1 -> mvar := low, limit_MVAR_Low_5, count_as_fault;
    mvar_goes_low_unexplained_2 true = 1 -> mvar := low, limit_MVAR_Low_4, count_as_fault;
    mvar_goes_low_unexplained_3 true = 1 -> mvar := low, limit_MVAR_Low_3, count_as_fault;
    mvar_goes_low_unexplained_4 true = 1 -> mvar := low, limit_MVAR_Low_2, count_as_fault;
    mvar_goes_low_unexplained_5 true = 1 -> mvar := low, limit_MVAR_Low_1, count_as_fault;
  transition mw_goes_normal_when_reenergised
    mw_goes_normal_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> mw := normal, limit_MW_Normal;
  transition mw_goes_high_when_reenergised
    mw_goes_high_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High;
    mw_goes_high_when_reenergised_1 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_5;
    mw_goes_high_when_reenergised_2 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_4;
    mw_goes_high_when_reenergised_3 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_3;
    mw_goes_high_when_reenergised_4 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_2;
    mw_goes_high_when_reenergised_5 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_1;
  transition mw_goes_low_when_reenergised
    mw_goes_low_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low;
    mw_goes_low_when_reenergised_1 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_5;
    mw_goes_low_when_reenergised_2 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_4;
    mw_goes_low_when_reenergised_3 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_3;
    mw_goes_low_when_reenergised_4 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_2;
    mw_goes_low_when_reenergised_5 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_1;
  transition mw_goes_to_zero_when_isolated
    mw_goes_to_zero_when_isolated_0 (isolated = true AND iso_state_changed = true) -> mw := zero, entered_zero_zone_MW, check_generators_off;
  transition mw_goes_low_when_isolated
    mw_goes_low_when_isolated_0 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low, check_generators_off;
    mw_goes_low_when_isolated_1 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_5, check_generators_off;
    mw_goes_low_when_isolated_2 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_4, check_generators_off;
    mw_goes_low_when_isolated_3 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_3, check_generators_off;
    mw_goes_low_when_isolated_4 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_2, check_generators_off;
    mw_goes_low_when_isolated_5 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_1, check_generators_off;
  transition mw_goes_to_zero
    mw_goes_to_zero_0 true = 1 -> mw := zero, entered_zero_zone_MW;
  triggeredby mw_zero;
  transition mw_goes_normal
    mw_goes_normal_0 true = 1 -> mw := normal, limit_MW_Normal;
  triggeredby mw_normal;
  transition mw_goes_high
    mw_goes_high_0 true = 1 -> mw := high, limit_MW_High;
    mw_goes_high_1 true = 1 -> mw := high, limit_MW_High_5;
    mw_goes_high_2 true = 1 -> mw := high, limit_MW_High_4;
    mw_goes_high_3 true = 1 -> mw := high, limit_MW_High_3;
    mw_goes_high_4 true = 1 -> mw := high, limit_MW_High_2;
    mw_goes_high_5 true = 1 -> mw := high, limit_MW_High_1;
  triggeredby mw_high;
  transition mw_goes_low
    mw_goes_low_0 true = 1 -> mw := low, limit_MW_Low;
    mw_goes_low_1 true = 1 -> mw := low, limit_MW_Low_5;
    mw_goes_low_2 true = 1 -> mw := low, limit_MW_Low_4;
    mw_goes_low_3 true = 1 -> mw := low, limit_MW_Low_3;
    mw_goes_low_4 true = 1 -> mw := low, limit_MW_Low_2;
    mw_goes_low_5 true = 1 -> mw := low, limit_MW_Low_1;
  triggeredby mw_low;
  transition mw_goes_to_zero_unexplained
    mw_goes_to_zero_unexplained_0 true = 1 -> mw := zero, entered_zero_zone_MW, count_as_fault;
  transition mw_goes_normal_unexplained
    mw_goes_normal_unexplained_0 true = 1 -> mw := normal, limit_MW_Normal, count_as_fault;
  transition mw_goes_high_unexplained
    mw_goes_high_unexplained_0 true = 1 -> mw := high, limit_MW_High, count_as_fault;
    mw_goes_high_unexplained_1 true = 1 -> mw := high, limit_MW_High_5, count_as_fault;
    mw_goes_high_unexplained_2 true = 1 -> mw := high, limit_MW_High_4, count_as_fault;
    mw_goes_high_unexplained_3 true = 1 -> mw := high, limit_MW_High_3, count_as_fault;
    mw_goes_high_unexplained_4 true = 1 -> mw := high, limit_MW_High_2, count_as_fault;
    mw_goes_high_unexplained_5 true = 1 -> mw := high, limit_MW_High_1, count_as_fault;
  transition mw_goes_low_unexplained
    mw_goes_low_unexplained_0 true = 1 -> mw := low, limit_MW_Low, count_as_fault;
    mw_goes_low_unexplained_1 true = 1 -> mw := low, limit_MW_Low_5, count_as_fault;
    mw_goes_low_unexplained_2 true = 1 -> mw := low, limit_MW_Low_4, count_as_fault;
    mw_goes_low_unexplained_3 true = 1 -> mw := low, limit_MW_Low_3, count_as_fault;
    mw_goes_low_unexplained_4 true = 1 -> mw := low, limit_MW_Low_2, count_as_fault;
    mw_goes_low_unexplained_5 true = 1 -> mw := low, limit_MW_Low_1, count_as_fault;
  transition voltage_goes_normal_when_caps_in
    voltage_goes_normal_when_caps_in_0 (voltage = low AND isolated = false) -> voltage := normal, limit_KV_Normal, check_switched_in;
  transition voltage_goes_normal_when_caps_out
    voltage_goes_normal_when_caps_out_0 (voltage = high AND isolated = false) -> voltage := normal, limit_KV_Normal, check_switched_out;
  transition voltage_goes_normal_when_reenergised
    voltage_goes_normal_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> voltage := normal, limit_KV_Normal;
  transition voltage_goes_high_when_reenergised
    voltage_goes_high_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High;
    voltage_goes_high_when_reenergised_1 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_5;
    voltage_goes_high_when_reenergised_2 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_4;
    voltage_goes_high_when_reenergised_3 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_3;
    voltage_goes_high_when_reenergised_4 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_2;
    voltage_goes_high_when_reenergised_5 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_1;
  transition voltage_goes_Low_when_reenergised
    voltage_goes_Low_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low;
    voltage_goes_Low_when_reenergised_1 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_5;
    voltage_goes_Low_when_reenergised_2 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_4;
    voltage_goes_Low_when_reenergised_3 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_3;
    voltage_goes_Low_when_reenergised_4 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_2;
    voltage_goes_Low_when_reenergised_5 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_1;
  transition voltage_goes_to_zero_when_isolated
    voltage_goes_to_zero_when_isolated_0 (isolated = true AND iso_state_changed = true) -> voltage := zero, entered_zero_zone_KV, check_generators_off;
  transition voltage_goes_low_when_isolated
    voltage_goes_low_when_isolated_0 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low, check_generators_off;
    voltage_goes_low_when_isolated_1 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_5, check_generators_off;
    voltage_goes_low_when_isolated_2 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_4, check_generators_off;
    voltage_goes_low_when_isolated_3 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_3, check_generators_off;
    voltage_goes_low_when_isolated_4 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_2, check_generators_off;
    voltage_goes_low_when_isolated_5 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_1, check_generators_off;
  transition voltage_goes_to_zero
    voltage_goes_to_zero_0 true = 1 -> voltage := zero, entered_zero_zone_KV;
  triggeredby voltage_zero;
  transition voltage_goes_normal
    voltage_goes_normal_0 true = 1 -> voltage := normal, limit_KV_Normal;
  triggeredby voltage_normal;
  transition voltage_goes_high
    voltage_goes_high_0 true = 1 -> voltage := high, limit_KV_High;
    voltage_goes_high_1 true = 1 -> voltage := high, limit_KV_High_5;
    voltage_goes_high_2 true = 1 -> voltage := high, limit_KV_High_4;
    voltage_goes_high_3 true = 1 -> voltage := high, limit_KV_High_3;
    voltage_goes_high_4 true = 1 -> voltage := high, limit_KV_High_2;
    voltage_goes_high_5 true = 1 -> voltage := high, limit_KV_High_1;
  triggeredby voltage_high;
  transition voltage_goes_low
    voltage_goes_low_0 true = 1 -> voltage := low, limit_KV_Low;
    voltage_goes_low_1 true = 1 -> voltage := low, limit_KV_Low_5;
    voltage_goes_low_2 true = 1 -> voltage := low, limit_KV_Low_4;
    voltage_goes_low_3 true = 1 -> voltage := low, limit_KV_Low_3;
    voltage_goes_low_4 true = 1 -> voltage := low, limit_KV_Low_2;
    voltage_goes_low_5 true = 1 -> voltage := low, limit_KV_Low_1;
  triggeredby voltage_low;
  transition voltage_goes_to_zero_unexplained
    voltage_goes_to_zero_unexplained_0 true = 1 -> voltage := zero, entered_zero_zone_KV, count_as_fault;
  transition voltage_goes_normal_unexplained
    voltage_goes_normal_unexplained_0 true = 1 -> voltage := normal, limit_KV_Normal, count_as_fault;
  transition voltage_goes_high_unexplained
    voltage_goes_high_unexplained_0 true = 1 -> voltage := high, limit_KV_High, count_as_fault;
    voltage_goes_high_unexplained_1 true = 1 -> voltage := high, limit_KV_High_5, count_as_fault;
    voltage_goes_high_unexplained_2 true = 1 -> voltage := high, limit_KV_High_4, count_as_fault;
    voltage_goes_high_unexplained_3 true = 1 -> voltage := high, limit_KV_High_3, count_as_fault;
    voltage_goes_high_unexplained_4 true = 1 -> voltage := high, limit_KV_High_2, count_as_fault;
    voltage_goes_high_unexplained_5 true = 1 -> voltage := high, limit_KV_High_1, count_as_fault;
  transition voltage_goes_low_unexplained
    voltage_goes_low_unexplained_0 true = 1 -> voltage := low, limit_KV_Low, count_as_fault;
    voltage_goes_low_unexplained_1 true = 1 -> voltage := low, limit_KV_Low_5, count_as_fault;
    voltage_goes_low_unexplained_2 true = 1 -> voltage := low, limit_KV_Low_4, count_as_fault;
    voltage_goes_low_unexplained_3 true = 1 -> voltage := low, limit_KV_Low_3, count_as_fault;
    voltage_goes_low_unexplained_4 true = 1 -> voltage := low, limit_KV_Low_2, count_as_fault;
    voltage_goes_low_unexplained_5 true = 1 -> voltage := low, limit_KV_Low_1, count_as_fault;
  transition iso_state_changed_timeout
    iso_state_changed_timeout_0 true = 1 -> iso_state_changed := false;
  triggeredby [0.0..15.0] iso_state_changed = true;
  transition become_not_isolated
    become_not_isolated_0 true = 1 -> isolated := false, iso_state_changed := true;
  triggeredby set_isolated_false;
  transition become_isolated
    become_isolated_0 true = 1 -> isolated := true, iso_state_changed := true;
  triggeredby set_isolated_true;
}
component Bus_X102 = {
  var mvar : {zero,high,low,normal};
  var mw : {zero,high,low,normal};
  var voltage : {zero,high,low,normal};
  var iso_state_changed : [0..1];
  var isolated : [0..1];
  event check_generators_off;
  event check_switched_in;
  event check_switched_out;
  event count_as_fault;
  event set_isolated_false;
  event set_isolated_true;
  event mvar_zero;
  event mvar_normal;
  event mvar_high;
  event mvar_low;
  event mw_zero;
  event mw_normal;
  event mw_high;
  event mw_low;
  event voltage_zero;
  event voltage_normal;
  event voltage_high;
  event voltage_low;
  event entered_zero_zone_MVAR;
  event limit_MVAR_High;
  event limit_MVAR_High_5;
  event limit_MVAR_High_4;
  event limit_MVAR_High_3;
  event limit_MVAR_High_2;
  event limit_MVAR_High_1;
  event limit_MVAR_Low;
  event limit_MVAR_Low_5;
  event limit_MVAR_Low_4;
  event limit_MVAR_Low_3;
  event limit_MVAR_Low_2;
  event limit_MVAR_Low_1;
  event limit_MVAR_Normal;
  event entered_zero_zone_MW;
  event limit_MW_High;
  event limit_MW_High_5;
  event limit_MW_High_4;
  event limit_MW_High_3;
  event limit_MW_High_2;
  event limit_MW_High_1;
  event limit_MW_Low;
  event limit_MW_Low_5;
  event limit_MW_Low_4;
  event limit_MW_Low_3;
  event limit_MW_Low_2;
  event limit_MW_Low_1;
  event limit_MW_Normal;
  event entered_zero_zone_KV;
  event limit_KV_High;
  event limit_KV_High_5;
  event limit_KV_High_4;
  event limit_KV_High_3;
  event limit_KV_High_2;
  event limit_KV_High_1;
  event limit_KV_Low;
  event limit_KV_Low_5;
  event limit_KV_Low_4;
  event limit_KV_Low_3;
  event limit_KV_Low_2;
  event limit_KV_Low_1;
  event limit_KV_Normal;
  transition mvar_goes_to_zero
    mvar_goes_to_zero_0 true = 1 -> mvar := zero, entered_zero_zone_MVAR;
  triggeredby mvar_zero;
  transition mvar_goes_normal
    mvar_goes_normal_0 true = 1 -> mvar := normal, limit_MVAR_Normal;
  triggeredby mvar_normal;
  transition mvar_goes_high
    mvar_goes_high_0 true = 1 -> mvar := high, limit_MVAR_High;
    mvar_goes_high_1 true = 1 -> mvar := high, limit_MVAR_High_5;
    mvar_goes_high_2 true = 1 -> mvar := high, limit_MVAR_High_4;
    mvar_goes_high_3 true = 1 -> mvar := high, limit_MVAR_High_3;
    mvar_goes_high_4 true = 1 -> mvar := high, limit_MVAR_High_2;
    mvar_goes_high_5 true = 1 -> mvar := high, limit_MVAR_High_1;
  triggeredby mvar_high;
  transition mvar_goes_low
    mvar_goes_low_0 true = 1 -> mvar := low, limit_MVAR_Low;
    mvar_goes_low_1 true = 1 -> mvar := low, limit_MVAR_Low_5;
    mvar_goes_low_2 true = 1 -> mvar := low, limit_MVAR_Low_4;
    mvar_goes_low_3 true = 1 -> mvar := low, limit_MVAR_Low_3;
    mvar_goes_low_4 true = 1 -> mvar := low, limit_MVAR_Low_2;
    mvar_goes_low_5 true = 1 -> mvar := low, limit_MVAR_Low_1;
  triggeredby mvar_low;
  transition mvar_goes_to_zero_unexplained
    mvar_goes_to_zero_unexplained_0 true = 1 -> mvar := zero, entered_zero_zone_MVAR, count_as_fault;
  transition mvar_goes_normal_unexplained
    mvar_goes_normal_unexplained_0 true = 1 -> mvar := normal, limit_MVAR_Normal, count_as_fault;
  transition mvar_goes_high_unexplained
    mvar_goes_high_unexplained_0 true = 1 -> mvar := high, limit_MVAR_High, count_as_fault;
    mvar_goes_high_unexplained_1 true = 1 -> mvar := high, limit_MVAR_High_5, count_as_fault;
    mvar_goes_high_unexplained_2 true = 1 -> mvar := high, limit_MVAR_High_4, count_as_fault;
    mvar_goes_high_unexplained_3 true = 1 -> mvar := high, limit_MVAR_High_3, count_as_fault;
    mvar_goes_high_unexplained_4 true = 1 -> mvar := high, limit_MVAR_High_2, count_as_fault;
    mvar_goes_high_unexplained_5 true = 1 -> mvar := high, limit_MVAR_High_1, count_as_fault;
  transition mvar_goes_low_unexplained
    mvar_goes_low_unexplained_0 true = 1 -> mvar := low, limit_MVAR_Low, count_as_fault;
    mvar_goes_low_unexplained_1 true = 1 -> mvar := low, limit_MVAR_Low_5, count_as_fault;
    mvar_goes_low_unexplained_2 true = 1 -> mvar := low, limit_MVAR_Low_4, count_as_fault;
    mvar_goes_low_unexplained_3 true = 1 -> mvar := low, limit_MVAR_Low_3, count_as_fault;
    mvar_goes_low_unexplained_4 true = 1 -> mvar := low, limit_MVAR_Low_2, count_as_fault;
    mvar_goes_low_unexplained_5 true = 1 -> mvar := low, limit_MVAR_Low_1, count_as_fault;
  transition mw_goes_normal_when_reenergised
    mw_goes_normal_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> mw := normal, limit_MW_Normal;
  transition mw_goes_high_when_reenergised
    mw_goes_high_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High;
    mw_goes_high_when_reenergised_1 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_5;
    mw_goes_high_when_reenergised_2 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_4;
    mw_goes_high_when_reenergised_3 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_3;
    mw_goes_high_when_reenergised_4 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_2;
    mw_goes_high_when_reenergised_5 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_1;
  transition mw_goes_low_when_reenergised
    mw_goes_low_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low;
    mw_goes_low_when_reenergised_1 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_5;
    mw_goes_low_when_reenergised_2 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_4;
    mw_goes_low_when_reenergised_3 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_3;
    mw_goes_low_when_reenergised_4 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_2;
    mw_goes_low_when_reenergised_5 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_1;
  transition mw_goes_to_zero_when_isolated
    mw_goes_to_zero_when_isolated_0 (isolated = true AND iso_state_changed = true) -> mw := zero, entered_zero_zone_MW, check_generators_off;
  transition mw_goes_low_when_isolated
    mw_goes_low_when_isolated_0 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low, check_generators_off;
    mw_goes_low_when_isolated_1 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_5, check_generators_off;
    mw_goes_low_when_isolated_2 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_4, check_generators_off;
    mw_goes_low_when_isolated_3 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_3, check_generators_off;
    mw_goes_low_when_isolated_4 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_2, check_generators_off;
    mw_goes_low_when_isolated_5 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_1, check_generators_off;
  transition mw_goes_to_zero
    mw_goes_to_zero_0 true = 1 -> mw := zero, entered_zero_zone_MW;
  triggeredby mw_zero;
  transition mw_goes_normal
    mw_goes_normal_0 true = 1 -> mw := normal, limit_MW_Normal;
  triggeredby mw_normal;
  transition mw_goes_high
    mw_goes_high_0 true = 1 -> mw := high, limit_MW_High;
    mw_goes_high_1 true = 1 -> mw := high, limit_MW_High_5;
    mw_goes_high_2 true = 1 -> mw := high, limit_MW_High_4;
    mw_goes_high_3 true = 1 -> mw := high, limit_MW_High_3;
    mw_goes_high_4 true = 1 -> mw := high, limit_MW_High_2;
    mw_goes_high_5 true = 1 -> mw := high, limit_MW_High_1;
  triggeredby mw_high;
  transition mw_goes_low
    mw_goes_low_0 true = 1 -> mw := low, limit_MW_Low;
    mw_goes_low_1 true = 1 -> mw := low, limit_MW_Low_5;
    mw_goes_low_2 true = 1 -> mw := low, limit_MW_Low_4;
    mw_goes_low_3 true = 1 -> mw := low, limit_MW_Low_3;
    mw_goes_low_4 true = 1 -> mw := low, limit_MW_Low_2;
    mw_goes_low_5 true = 1 -> mw := low, limit_MW_Low_1;
  triggeredby mw_low;
  transition mw_goes_to_zero_unexplained
    mw_goes_to_zero_unexplained_0 true = 1 -> mw := zero, entered_zero_zone_MW, count_as_fault;
  transition mw_goes_normal_unexplained
    mw_goes_normal_unexplained_0 true = 1 -> mw := normal, limit_MW_Normal, count_as_fault;
  transition mw_goes_high_unexplained
    mw_goes_high_unexplained_0 true = 1 -> mw := high, limit_MW_High, count_as_fault;
    mw_goes_high_unexplained_1 true = 1 -> mw := high, limit_MW_High_5, count_as_fault;
    mw_goes_high_unexplained_2 true = 1 -> mw := high, limit_MW_High_4, count_as_fault;
    mw_goes_high_unexplained_3 true = 1 -> mw := high, limit_MW_High_3, count_as_fault;
    mw_goes_high_unexplained_4 true = 1 -> mw := high, limit_MW_High_2, count_as_fault;
    mw_goes_high_unexplained_5 true = 1 -> mw := high, limit_MW_High_1, count_as_fault;
  transition mw_goes_low_unexplained
    mw_goes_low_unexplained_0 true = 1 -> mw := low, limit_MW_Low, count_as_fault;
    mw_goes_low_unexplained_1 true = 1 -> mw := low, limit_MW_Low_5, count_as_fault;
    mw_goes_low_unexplained_2 true = 1 -> mw := low, limit_MW_Low_4, count_as_fault;
    mw_goes_low_unexplained_3 true = 1 -> mw := low, limit_MW_Low_3, count_as_fault;
    mw_goes_low_unexplained_4 true = 1 -> mw := low, limit_MW_Low_2, count_as_fault;
    mw_goes_low_unexplained_5 true = 1 -> mw := low, limit_MW_Low_1, count_as_fault;
  transition voltage_goes_normal_when_caps_in
    voltage_goes_normal_when_caps_in_0 (voltage = low AND isolated = false) -> voltage := normal, limit_KV_Normal, check_switched_in;
  transition voltage_goes_normal_when_caps_out
    voltage_goes_normal_when_caps_out_0 (voltage = high AND isolated = false) -> voltage := normal, limit_KV_Normal, check_switched_out;
  transition voltage_goes_normal_when_reenergised
    voltage_goes_normal_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> voltage := normal, limit_KV_Normal;
  transition voltage_goes_high_when_reenergised
    voltage_goes_high_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High;
    voltage_goes_high_when_reenergised_1 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_5;
    voltage_goes_high_when_reenergised_2 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_4;
    voltage_goes_high_when_reenergised_3 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_3;
    voltage_goes_high_when_reenergised_4 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_2;
    voltage_goes_high_when_reenergised_5 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_1;
  transition voltage_goes_Low_when_reenergised
    voltage_goes_Low_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low;
    voltage_goes_Low_when_reenergised_1 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_5;
    voltage_goes_Low_when_reenergised_2 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_4;
    voltage_goes_Low_when_reenergised_3 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_3;
    voltage_goes_Low_when_reenergised_4 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_2;
    voltage_goes_Low_when_reenergised_5 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_1;
  transition voltage_goes_to_zero_when_isolated
    voltage_goes_to_zero_when_isolated_0 (isolated = true AND iso_state_changed = true) -> voltage := zero, entered_zero_zone_KV, check_generators_off;
  transition voltage_goes_low_when_isolated
    voltage_goes_low_when_isolated_0 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low, check_generators_off;
    voltage_goes_low_when_isolated_1 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_5, check_generators_off;
    voltage_goes_low_when_isolated_2 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_4, check_generators_off;
    voltage_goes_low_when_isolated_3 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_3, check_generators_off;
    voltage_goes_low_when_isolated_4 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_2, check_generators_off;
    voltage_goes_low_when_isolated_5 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_1, check_generators_off;
  transition voltage_goes_to_zero
    voltage_goes_to_zero_0 true = 1 -> voltage := zero, entered_zero_zone_KV;
  triggeredby voltage_zero;
  transition voltage_goes_normal
    voltage_goes_normal_0 true = 1 -> voltage := normal, limit_KV_Normal;
  triggeredby voltage_normal;
  transition voltage_goes_high
    voltage_goes_high_0 true = 1 -> voltage := high, limit_KV_High;
    voltage_goes_high_1 true = 1 -> voltage := high, limit_KV_High_5;
    voltage_goes_high_2 true = 1 -> voltage := high, limit_KV_High_4;
    voltage_goes_high_3 true = 1 -> voltage := high, limit_KV_High_3;
    voltage_goes_high_4 true = 1 -> voltage := high, limit_KV_High_2;
    voltage_goes_high_5 true = 1 -> voltage := high, limit_KV_High_1;
  triggeredby voltage_high;
  transition voltage_goes_low
    voltage_goes_low_0 true = 1 -> voltage := low, limit_KV_Low;
    voltage_goes_low_1 true = 1 -> voltage := low, limit_KV_Low_5;
    voltage_goes_low_2 true = 1 -> voltage := low, limit_KV_Low_4;
    voltage_goes_low_3 true = 1 -> voltage := low, limit_KV_Low_3;
    voltage_goes_low_4 true = 1 -> voltage := low, limit_KV_Low_2;
    voltage_goes_low_5 true = 1 -> voltage := low, limit_KV_Low_1;
  triggeredby voltage_low;
  transition voltage_goes_to_zero_unexplained
    voltage_goes_to_zero_unexplained_0 true = 1 -> voltage := zero, entered_zero_zone_KV, count_as_fault;
  transition voltage_goes_normal_unexplained
    voltage_goes_normal_unexplained_0 true = 1 -> voltage := normal, limit_KV_Normal, count_as_fault;
  transition voltage_goes_high_unexplained
    voltage_goes_high_unexplained_0 true = 1 -> voltage := high, limit_KV_High, count_as_fault;
    voltage_goes_high_unexplained_1 true = 1 -> voltage := high, limit_KV_High_5, count_as_fault;
    voltage_goes_high_unexplained_2 true = 1 -> voltage := high, limit_KV_High_4, count_as_fault;
    voltage_goes_high_unexplained_3 true = 1 -> voltage := high, limit_KV_High_3, count_as_fault;
    voltage_goes_high_unexplained_4 true = 1 -> voltage := high, limit_KV_High_2, count_as_fault;
    voltage_goes_high_unexplained_5 true = 1 -> voltage := high, limit_KV_High_1, count_as_fault;
  transition voltage_goes_low_unexplained
    voltage_goes_low_unexplained_0 true = 1 -> voltage := low, limit_KV_Low, count_as_fault;
    voltage_goes_low_unexplained_1 true = 1 -> voltage := low, limit_KV_Low_5, count_as_fault;
    voltage_goes_low_unexplained_2 true = 1 -> voltage := low, limit_KV_Low_4, count_as_fault;
    voltage_goes_low_unexplained_3 true = 1 -> voltage := low, limit_KV_Low_3, count_as_fault;
    voltage_goes_low_unexplained_4 true = 1 -> voltage := low, limit_KV_Low_2, count_as_fault;
    voltage_goes_low_unexplained_5 true = 1 -> voltage := low, limit_KV_Low_1, count_as_fault;
  transition iso_state_changed_timeout
    iso_state_changed_timeout_0 true = 1 -> iso_state_changed := false;
  triggeredby [0.0..15.0] iso_state_changed = true;
  transition become_not_isolated
    become_not_isolated_0 true = 1 -> isolated := false, iso_state_changed := true;
  triggeredby set_isolated_false;
  transition become_isolated
    become_isolated_0 true = 1 -> isolated := true, iso_state_changed := true;
  triggeredby set_isolated_true;
}
component Bus_X123 = {
  var mvar : {zero,high,low,normal};
  var mw : {zero,high,low,normal};
  var voltage : {zero,high,low,normal};
  var iso_state_changed : [0..1];
  var isolated : [0..1];
  event check_generators_off;
  event check_switched_in;
  event check_switched_out;
  event count_as_fault;
  event set_isolated_false;
  event set_isolated_true;
  event mvar_zero;
  event mvar_normal;
  event mvar_high;
  event mvar_low;
  event mw_zero;
  event mw_normal;
  event mw_high;
  event mw_low;
  event voltage_zero;
  event voltage_normal;
  event voltage_high;
  event voltage_low;
  event entered_zero_zone_MVAR;
  event limit_MVAR_High;
  event limit_MVAR_High_5;
  event limit_MVAR_High_4;
  event limit_MVAR_High_3;
  event limit_MVAR_High_2;
  event limit_MVAR_High_1;
  event limit_MVAR_Low;
  event limit_MVAR_Low_5;
  event limit_MVAR_Low_4;
  event limit_MVAR_Low_3;
  event limit_MVAR_Low_2;
  event limit_MVAR_Low_1;
  event limit_MVAR_Normal;
  event entered_zero_zone_MW;
  event limit_MW_High;
  event limit_MW_High_5;
  event limit_MW_High_4;
  event limit_MW_High_3;
  event limit_MW_High_2;
  event limit_MW_High_1;
  event limit_MW_Low;
  event limit_MW_Low_5;
  event limit_MW_Low_4;
  event limit_MW_Low_3;
  event limit_MW_Low_2;
  event limit_MW_Low_1;
  event limit_MW_Normal;
  event entered_zero_zone_KV;
  event limit_KV_High;
  event limit_KV_High_5;
  event limit_KV_High_4;
  event limit_KV_High_3;
  event limit_KV_High_2;
  event limit_KV_High_1;
  event limit_KV_Low;
  event limit_KV_Low_5;
  event limit_KV_Low_4;
  event limit_KV_Low_3;
  event limit_KV_Low_2;
  event limit_KV_Low_1;
  event limit_KV_Normal;
  transition mvar_goes_to_zero
    mvar_goes_to_zero_0 true = 1 -> mvar := zero, entered_zero_zone_MVAR;
  triggeredby mvar_zero;
  transition mvar_goes_normal
    mvar_goes_normal_0 true = 1 -> mvar := normal, limit_MVAR_Normal;
  triggeredby mvar_normal;
  transition mvar_goes_high
    mvar_goes_high_0 true = 1 -> mvar := high, limit_MVAR_High;
    mvar_goes_high_1 true = 1 -> mvar := high, limit_MVAR_High_5;
    mvar_goes_high_2 true = 1 -> mvar := high, limit_MVAR_High_4;
    mvar_goes_high_3 true = 1 -> mvar := high, limit_MVAR_High_3;
    mvar_goes_high_4 true = 1 -> mvar := high, limit_MVAR_High_2;
    mvar_goes_high_5 true = 1 -> mvar := high, limit_MVAR_High_1;
  triggeredby mvar_high;
  transition mvar_goes_low
    mvar_goes_low_0 true = 1 -> mvar := low, limit_MVAR_Low;
    mvar_goes_low_1 true = 1 -> mvar := low, limit_MVAR_Low_5;
    mvar_goes_low_2 true = 1 -> mvar := low, limit_MVAR_Low_4;
    mvar_goes_low_3 true = 1 -> mvar := low, limit_MVAR_Low_3;
    mvar_goes_low_4 true = 1 -> mvar := low, limit_MVAR_Low_2;
    mvar_goes_low_5 true = 1 -> mvar := low, limit_MVAR_Low_1;
  triggeredby mvar_low;
  transition mvar_goes_to_zero_unexplained
    mvar_goes_to_zero_unexplained_0 true = 1 -> mvar := zero, entered_zero_zone_MVAR, count_as_fault;
  transition mvar_goes_normal_unexplained
    mvar_goes_normal_unexplained_0 true = 1 -> mvar := normal, limit_MVAR_Normal, count_as_fault;
  transition mvar_goes_high_unexplained
    mvar_goes_high_unexplained_0 true = 1 -> mvar := high, limit_MVAR_High, count_as_fault;
    mvar_goes_high_unexplained_1 true = 1 -> mvar := high, limit_MVAR_High_5, count_as_fault;
    mvar_goes_high_unexplained_2 true = 1 -> mvar := high, limit_MVAR_High_4, count_as_fault;
    mvar_goes_high_unexplained_3 true = 1 -> mvar := high, limit_MVAR_High_3, count_as_fault;
    mvar_goes_high_unexplained_4 true = 1 -> mvar := high, limit_MVAR_High_2, count_as_fault;
    mvar_goes_high_unexplained_5 true = 1 -> mvar := high, limit_MVAR_High_1, count_as_fault;
  transition mvar_goes_low_unexplained
    mvar_goes_low_unexplained_0 true = 1 -> mvar := low, limit_MVAR_Low, count_as_fault;
    mvar_goes_low_unexplained_1 true = 1 -> mvar := low, limit_MVAR_Low_5, count_as_fault;
    mvar_goes_low_unexplained_2 true = 1 -> mvar := low, limit_MVAR_Low_4, count_as_fault;
    mvar_goes_low_unexplained_3 true = 1 -> mvar := low, limit_MVAR_Low_3, count_as_fault;
    mvar_goes_low_unexplained_4 true = 1 -> mvar := low, limit_MVAR_Low_2, count_as_fault;
    mvar_goes_low_unexplained_5 true = 1 -> mvar := low, limit_MVAR_Low_1, count_as_fault;
  transition mw_goes_normal_when_reenergised
    mw_goes_normal_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> mw := normal, limit_MW_Normal;
  transition mw_goes_high_when_reenergised
    mw_goes_high_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High;
    mw_goes_high_when_reenergised_1 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_5;
    mw_goes_high_when_reenergised_2 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_4;
    mw_goes_high_when_reenergised_3 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_3;
    mw_goes_high_when_reenergised_4 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_2;
    mw_goes_high_when_reenergised_5 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_1;
  transition mw_goes_low_when_reenergised
    mw_goes_low_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low;
    mw_goes_low_when_reenergised_1 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_5;
    mw_goes_low_when_reenergised_2 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_4;
    mw_goes_low_when_reenergised_3 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_3;
    mw_goes_low_when_reenergised_4 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_2;
    mw_goes_low_when_reenergised_5 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_1;
  transition mw_goes_to_zero_when_isolated
    mw_goes_to_zero_when_isolated_0 (isolated = true AND iso_state_changed = true) -> mw := zero, entered_zero_zone_MW, check_generators_off;
  transition mw_goes_low_when_isolated
    mw_goes_low_when_isolated_0 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low, check_generators_off;
    mw_goes_low_when_isolated_1 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_5, check_generators_off;
    mw_goes_low_when_isolated_2 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_4, check_generators_off;
    mw_goes_low_when_isolated_3 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_3, check_generators_off;
    mw_goes_low_when_isolated_4 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_2, check_generators_off;
    mw_goes_low_when_isolated_5 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_1, check_generators_off;
  transition mw_goes_to_zero
    mw_goes_to_zero_0 true = 1 -> mw := zero, entered_zero_zone_MW;
  triggeredby mw_zero;
  transition mw_goes_normal
    mw_goes_normal_0 true = 1 -> mw := normal, limit_MW_Normal;
  triggeredby mw_normal;
  transition mw_goes_high
    mw_goes_high_0 true = 1 -> mw := high, limit_MW_High;
    mw_goes_high_1 true = 1 -> mw := high, limit_MW_High_5;
    mw_goes_high_2 true = 1 -> mw := high, limit_MW_High_4;
    mw_goes_high_3 true = 1 -> mw := high, limit_MW_High_3;
    mw_goes_high_4 true = 1 -> mw := high, limit_MW_High_2;
    mw_goes_high_5 true = 1 -> mw := high, limit_MW_High_1;
  triggeredby mw_high;
  transition mw_goes_low
    mw_goes_low_0 true = 1 -> mw := low, limit_MW_Low;
    mw_goes_low_1 true = 1 -> mw := low, limit_MW_Low_5;
    mw_goes_low_2 true = 1 -> mw := low, limit_MW_Low_4;
    mw_goes_low_3 true = 1 -> mw := low, limit_MW_Low_3;
    mw_goes_low_4 true = 1 -> mw := low, limit_MW_Low_2;
    mw_goes_low_5 true = 1 -> mw := low, limit_MW_Low_1;
  triggeredby mw_low;
  transition mw_goes_to_zero_unexplained
    mw_goes_to_zero_unexplained_0 true = 1 -> mw := zero, entered_zero_zone_MW, count_as_fault;
  transition mw_goes_normal_unexplained
    mw_goes_normal_unexplained_0 true = 1 -> mw := normal, limit_MW_Normal, count_as_fault;
  transition mw_goes_high_unexplained
    mw_goes_high_unexplained_0 true = 1 -> mw := high, limit_MW_High, count_as_fault;
    mw_goes_high_unexplained_1 true = 1 -> mw := high, limit_MW_High_5, count_as_fault;
    mw_goes_high_unexplained_2 true = 1 -> mw := high, limit_MW_High_4, count_as_fault;
    mw_goes_high_unexplained_3 true = 1 -> mw := high, limit_MW_High_3, count_as_fault;
    mw_goes_high_unexplained_4 true = 1 -> mw := high, limit_MW_High_2, count_as_fault;
    mw_goes_high_unexplained_5 true = 1 -> mw := high, limit_MW_High_1, count_as_fault;
  transition mw_goes_low_unexplained
    mw_goes_low_unexplained_0 true = 1 -> mw := low, limit_MW_Low, count_as_fault;
    mw_goes_low_unexplained_1 true = 1 -> mw := low, limit_MW_Low_5, count_as_fault;
    mw_goes_low_unexplained_2 true = 1 -> mw := low, limit_MW_Low_4, count_as_fault;
    mw_goes_low_unexplained_3 true = 1 -> mw := low, limit_MW_Low_3, count_as_fault;
    mw_goes_low_unexplained_4 true = 1 -> mw := low, limit_MW_Low_2, count_as_fault;
    mw_goes_low_unexplained_5 true = 1 -> mw := low, limit_MW_Low_1, count_as_fault;
  transition voltage_goes_normal_when_caps_in
    voltage_goes_normal_when_caps_in_0 (voltage = low AND isolated = false) -> voltage := normal, limit_KV_Normal, check_switched_in;
  transition voltage_goes_normal_when_caps_out
    voltage_goes_normal_when_caps_out_0 (voltage = high AND isolated = false) -> voltage := normal, limit_KV_Normal, check_switched_out;
  transition voltage_goes_normal_when_reenergised
    voltage_goes_normal_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> voltage := normal, limit_KV_Normal;
  transition voltage_goes_high_when_reenergised
    voltage_goes_high_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High;
    voltage_goes_high_when_reenergised_1 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_5;
    voltage_goes_high_when_reenergised_2 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_4;
    voltage_goes_high_when_reenergised_3 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_3;
    voltage_goes_high_when_reenergised_4 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_2;
    voltage_goes_high_when_reenergised_5 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_1;
  transition voltage_goes_Low_when_reenergised
    voltage_goes_Low_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low;
    voltage_goes_Low_when_reenergised_1 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_5;
    voltage_goes_Low_when_reenergised_2 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_4;
    voltage_goes_Low_when_reenergised_3 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_3;
    voltage_goes_Low_when_reenergised_4 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_2;
    voltage_goes_Low_when_reenergised_5 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_1;
  transition voltage_goes_to_zero_when_isolated
    voltage_goes_to_zero_when_isolated_0 (isolated = true AND iso_state_changed = true) -> voltage := zero, entered_zero_zone_KV, check_generators_off;
  transition voltage_goes_low_when_isolated
    voltage_goes_low_when_isolated_0 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low, check_generators_off;
    voltage_goes_low_when_isolated_1 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_5, check_generators_off;
    voltage_goes_low_when_isolated_2 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_4, check_generators_off;
    voltage_goes_low_when_isolated_3 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_3, check_generators_off;
    voltage_goes_low_when_isolated_4 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_2, check_generators_off;
    voltage_goes_low_when_isolated_5 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_1, check_generators_off;
  transition voltage_goes_to_zero
    voltage_goes_to_zero_0 true = 1 -> voltage := zero, entered_zero_zone_KV;
  triggeredby voltage_zero;
  transition voltage_goes_normal
    voltage_goes_normal_0 true = 1 -> voltage := normal, limit_KV_Normal;
  triggeredby voltage_normal;
  transition voltage_goes_high
    voltage_goes_high_0 true = 1 -> voltage := high, limit_KV_High;
    voltage_goes_high_1 true = 1 -> voltage := high, limit_KV_High_5;
    voltage_goes_high_2 true = 1 -> voltage := high, limit_KV_High_4;
    voltage_goes_high_3 true = 1 -> voltage := high, limit_KV_High_3;
    voltage_goes_high_4 true = 1 -> voltage := high, limit_KV_High_2;
    voltage_goes_high_5 true = 1 -> voltage := high, limit_KV_High_1;
  triggeredby voltage_high;
  transition voltage_goes_low
    voltage_goes_low_0 true = 1 -> voltage := low, limit_KV_Low;
    voltage_goes_low_1 true = 1 -> voltage := low, limit_KV_Low_5;
    voltage_goes_low_2 true = 1 -> voltage := low, limit_KV_Low_4;
    voltage_goes_low_3 true = 1 -> voltage := low, limit_KV_Low_3;
    voltage_goes_low_4 true = 1 -> voltage := low, limit_KV_Low_2;
    voltage_goes_low_5 true = 1 -> voltage := low, limit_KV_Low_1;
  triggeredby voltage_low;
  transition voltage_goes_to_zero_unexplained
    voltage_goes_to_zero_unexplained_0 true = 1 -> voltage := zero, entered_zero_zone_KV, count_as_fault;
  transition voltage_goes_normal_unexplained
    voltage_goes_normal_unexplained_0 true = 1 -> voltage := normal, limit_KV_Normal, count_as_fault;
  transition voltage_goes_high_unexplained
    voltage_goes_high_unexplained_0 true = 1 -> voltage := high, limit_KV_High, count_as_fault;
    voltage_goes_high_unexplained_1 true = 1 -> voltage := high, limit_KV_High_5, count_as_fault;
    voltage_goes_high_unexplained_2 true = 1 -> voltage := high, limit_KV_High_4, count_as_fault;
    voltage_goes_high_unexplained_3 true = 1 -> voltage := high, limit_KV_High_3, count_as_fault;
    voltage_goes_high_unexplained_4 true = 1 -> voltage := high, limit_KV_High_2, count_as_fault;
    voltage_goes_high_unexplained_5 true = 1 -> voltage := high, limit_KV_High_1, count_as_fault;
  transition voltage_goes_low_unexplained
    voltage_goes_low_unexplained_0 true = 1 -> voltage := low, limit_KV_Low, count_as_fault;
    voltage_goes_low_unexplained_1 true = 1 -> voltage := low, limit_KV_Low_5, count_as_fault;
    voltage_goes_low_unexplained_2 true = 1 -> voltage := low, limit_KV_Low_4, count_as_fault;
    voltage_goes_low_unexplained_3 true = 1 -> voltage := low, limit_KV_Low_3, count_as_fault;
    voltage_goes_low_unexplained_4 true = 1 -> voltage := low, limit_KV_Low_2, count_as_fault;
    voltage_goes_low_unexplained_5 true = 1 -> voltage := low, limit_KV_Low_1, count_as_fault;
  transition iso_state_changed_timeout
    iso_state_changed_timeout_0 true = 1 -> iso_state_changed := false;
  triggeredby [0.0..15.0] iso_state_changed = true;
  transition become_not_isolated
    become_not_isolated_0 true = 1 -> isolated := false, iso_state_changed := true;
  triggeredby set_isolated_false;
  transition become_isolated
    become_isolated_0 true = 1 -> isolated := true, iso_state_changed := true;
  triggeredby set_isolated_true;
}
component Bus_X124 = {
  var mvar : {zero,high,low,normal};
  var mw : {zero,high,low,normal};
  var voltage : {zero,high,low,normal};
  var iso_state_changed : [0..1];
  var isolated : [0..1];
  event check_generators_off;
  event check_switched_in;
  event check_switched_out;
  event count_as_fault;
  event set_isolated_false;
  event set_isolated_true;
  event mvar_zero;
  event mvar_normal;
  event mvar_high;
  event mvar_low;
  event mw_zero;
  event mw_normal;
  event mw_high;
  event mw_low;
  event voltage_zero;
  event voltage_normal;
  event voltage_high;
  event voltage_low;
  event entered_zero_zone_MVAR;
  event limit_MVAR_High;
  event limit_MVAR_High_5;
  event limit_MVAR_High_4;
  event limit_MVAR_High_3;
  event limit_MVAR_High_2;
  event limit_MVAR_High_1;
  event limit_MVAR_Low;
  event limit_MVAR_Low_5;
  event limit_MVAR_Low_4;
  event limit_MVAR_Low_3;
  event limit_MVAR_Low_2;
  event limit_MVAR_Low_1;
  event limit_MVAR_Normal;
  event entered_zero_zone_MW;
  event limit_MW_High;
  event limit_MW_High_5;
  event limit_MW_High_4;
  event limit_MW_High_3;
  event limit_MW_High_2;
  event limit_MW_High_1;
  event limit_MW_Low;
  event limit_MW_Low_5;
  event limit_MW_Low_4;
  event limit_MW_Low_3;
  event limit_MW_Low_2;
  event limit_MW_Low_1;
  event limit_MW_Normal;
  event entered_zero_zone_KV;
  event limit_KV_High;
  event limit_KV_High_5;
  event limit_KV_High_4;
  event limit_KV_High_3;
  event limit_KV_High_2;
  event limit_KV_High_1;
  event limit_KV_Low;
  event limit_KV_Low_5;
  event limit_KV_Low_4;
  event limit_KV_Low_3;
  event limit_KV_Low_2;
  event limit_KV_Low_1;
  event limit_KV_Normal;
  transition mvar_goes_to_zero
    mvar_goes_to_zero_0 true = 1 -> mvar := zero, entered_zero_zone_MVAR;
  triggeredby mvar_zero;
  transition mvar_goes_normal
    mvar_goes_normal_0 true = 1 -> mvar := normal, limit_MVAR_Normal;
  triggeredby mvar_normal;
  transition mvar_goes_high
    mvar_goes_high_0 true = 1 -> mvar := high, limit_MVAR_High;
    mvar_goes_high_1 true = 1 -> mvar := high, limit_MVAR_High_5;
    mvar_goes_high_2 true = 1 -> mvar := high, limit_MVAR_High_4;
    mvar_goes_high_3 true = 1 -> mvar := high, limit_MVAR_High_3;
    mvar_goes_high_4 true = 1 -> mvar := high, limit_MVAR_High_2;
    mvar_goes_high_5 true = 1 -> mvar := high, limit_MVAR_High_1;
  triggeredby mvar_high;
  transition mvar_goes_low
    mvar_goes_low_0 true = 1 -> mvar := low, limit_MVAR_Low;
    mvar_goes_low_1 true = 1 -> mvar := low, limit_MVAR_Low_5;
    mvar_goes_low_2 true = 1 -> mvar := low, limit_MVAR_Low_4;
    mvar_goes_low_3 true = 1 -> mvar := low, limit_MVAR_Low_3;
    mvar_goes_low_4 true = 1 -> mvar := low, limit_MVAR_Low_2;
    mvar_goes_low_5 true = 1 -> mvar := low, limit_MVAR_Low_1;
  triggeredby mvar_low;
  transition mvar_goes_to_zero_unexplained
    mvar_goes_to_zero_unexplained_0 true = 1 -> mvar := zero, entered_zero_zone_MVAR, count_as_fault;
  transition mvar_goes_normal_unexplained
    mvar_goes_normal_unexplained_0 true = 1 -> mvar := normal, limit_MVAR_Normal, count_as_fault;
  transition mvar_goes_high_unexplained
    mvar_goes_high_unexplained_0 true = 1 -> mvar := high, limit_MVAR_High, count_as_fault;
    mvar_goes_high_unexplained_1 true = 1 -> mvar := high, limit_MVAR_High_5, count_as_fault;
    mvar_goes_high_unexplained_2 true = 1 -> mvar := high, limit_MVAR_High_4, count_as_fault;
    mvar_goes_high_unexplained_3 true = 1 -> mvar := high, limit_MVAR_High_3, count_as_fault;
    mvar_goes_high_unexplained_4 true = 1 -> mvar := high, limit_MVAR_High_2, count_as_fault;
    mvar_goes_high_unexplained_5 true = 1 -> mvar := high, limit_MVAR_High_1, count_as_fault;
  transition mvar_goes_low_unexplained
    mvar_goes_low_unexplained_0 true = 1 -> mvar := low, limit_MVAR_Low, count_as_fault;
    mvar_goes_low_unexplained_1 true = 1 -> mvar := low, limit_MVAR_Low_5, count_as_fault;
    mvar_goes_low_unexplained_2 true = 1 -> mvar := low, limit_MVAR_Low_4, count_as_fault;
    mvar_goes_low_unexplained_3 true = 1 -> mvar := low, limit_MVAR_Low_3, count_as_fault;
    mvar_goes_low_unexplained_4 true = 1 -> mvar := low, limit_MVAR_Low_2, count_as_fault;
    mvar_goes_low_unexplained_5 true = 1 -> mvar := low, limit_MVAR_Low_1, count_as_fault;
  transition mw_goes_normal_when_reenergised
    mw_goes_normal_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> mw := normal, limit_MW_Normal;
  transition mw_goes_high_when_reenergised
    mw_goes_high_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High;
    mw_goes_high_when_reenergised_1 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_5;
    mw_goes_high_when_reenergised_2 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_4;
    mw_goes_high_when_reenergised_3 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_3;
    mw_goes_high_when_reenergised_4 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_2;
    mw_goes_high_when_reenergised_5 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_1;
  transition mw_goes_low_when_reenergised
    mw_goes_low_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low;
    mw_goes_low_when_reenergised_1 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_5;
    mw_goes_low_when_reenergised_2 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_4;
    mw_goes_low_when_reenergised_3 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_3;
    mw_goes_low_when_reenergised_4 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_2;
    mw_goes_low_when_reenergised_5 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_1;
  transition mw_goes_to_zero_when_isolated
    mw_goes_to_zero_when_isolated_0 (isolated = true AND iso_state_changed = true) -> mw := zero, entered_zero_zone_MW, check_generators_off;
  transition mw_goes_low_when_isolated
    mw_goes_low_when_isolated_0 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low, check_generators_off;
    mw_goes_low_when_isolated_1 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_5, check_generators_off;
    mw_goes_low_when_isolated_2 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_4, check_generators_off;
    mw_goes_low_when_isolated_3 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_3, check_generators_off;
    mw_goes_low_when_isolated_4 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_2, check_generators_off;
    mw_goes_low_when_isolated_5 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_1, check_generators_off;
  transition mw_goes_to_zero
    mw_goes_to_zero_0 true = 1 -> mw := zero, entered_zero_zone_MW;
  triggeredby mw_zero;
  transition mw_goes_normal
    mw_goes_normal_0 true = 1 -> mw := normal, limit_MW_Normal;
  triggeredby mw_normal;
  transition mw_goes_high
    mw_goes_high_0 true = 1 -> mw := high, limit_MW_High;
    mw_goes_high_1 true = 1 -> mw := high, limit_MW_High_5;
    mw_goes_high_2 true = 1 -> mw := high, limit_MW_High_4;
    mw_goes_high_3 true = 1 -> mw := high, limit_MW_High_3;
    mw_goes_high_4 true = 1 -> mw := high, limit_MW_High_2;
    mw_goes_high_5 true = 1 -> mw := high, limit_MW_High_1;
  triggeredby mw_high;
  transition mw_goes_low
    mw_goes_low_0 true = 1 -> mw := low, limit_MW_Low;
    mw_goes_low_1 true = 1 -> mw := low, limit_MW_Low_5;
    mw_goes_low_2 true = 1 -> mw := low, limit_MW_Low_4;
    mw_goes_low_3 true = 1 -> mw := low, limit_MW_Low_3;
    mw_goes_low_4 true = 1 -> mw := low, limit_MW_Low_2;
    mw_goes_low_5 true = 1 -> mw := low, limit_MW_Low_1;
  triggeredby mw_low;
  transition mw_goes_to_zero_unexplained
    mw_goes_to_zero_unexplained_0 true = 1 -> mw := zero, entered_zero_zone_MW, count_as_fault;
  transition mw_goes_normal_unexplained
    mw_goes_normal_unexplained_0 true = 1 -> mw := normal, limit_MW_Normal, count_as_fault;
  transition mw_goes_high_unexplained
    mw_goes_high_unexplained_0 true = 1 -> mw := high, limit_MW_High, count_as_fault;
    mw_goes_high_unexplained_1 true = 1 -> mw := high, limit_MW_High_5, count_as_fault;
    mw_goes_high_unexplained_2 true = 1 -> mw := high, limit_MW_High_4, count_as_fault;
    mw_goes_high_unexplained_3 true = 1 -> mw := high, limit_MW_High_3, count_as_fault;
    mw_goes_high_unexplained_4 true = 1 -> mw := high, limit_MW_High_2, count_as_fault;
    mw_goes_high_unexplained_5 true = 1 -> mw := high, limit_MW_High_1, count_as_fault;
  transition mw_goes_low_unexplained
    mw_goes_low_unexplained_0 true = 1 -> mw := low, limit_MW_Low, count_as_fault;
    mw_goes_low_unexplained_1 true = 1 -> mw := low, limit_MW_Low_5, count_as_fault;
    mw_goes_low_unexplained_2 true = 1 -> mw := low, limit_MW_Low_4, count_as_fault;
    mw_goes_low_unexplained_3 true = 1 -> mw := low, limit_MW_Low_3, count_as_fault;
    mw_goes_low_unexplained_4 true = 1 -> mw := low, limit_MW_Low_2, count_as_fault;
    mw_goes_low_unexplained_5 true = 1 -> mw := low, limit_MW_Low_1, count_as_fault;
  transition voltage_goes_normal_when_caps_in
    voltage_goes_normal_when_caps_in_0 (voltage = low AND isolated = false) -> voltage := normal, limit_KV_Normal, check_switched_in;
  transition voltage_goes_normal_when_caps_out
    voltage_goes_normal_when_caps_out_0 (voltage = high AND isolated = false) -> voltage := normal, limit_KV_Normal, check_switched_out;
  transition voltage_goes_normal_when_reenergised
    voltage_goes_normal_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> voltage := normal, limit_KV_Normal;
  transition voltage_goes_high_when_reenergised
    voltage_goes_high_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High;
    voltage_goes_high_when_reenergised_1 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_5;
    voltage_goes_high_when_reenergised_2 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_4;
    voltage_goes_high_when_reenergised_3 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_3;
    voltage_goes_high_when_reenergised_4 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_2;
    voltage_goes_high_when_reenergised_5 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_1;
  transition voltage_goes_Low_when_reenergised
    voltage_goes_Low_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low;
    voltage_goes_Low_when_reenergised_1 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_5;
    voltage_goes_Low_when_reenergised_2 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_4;
    voltage_goes_Low_when_reenergised_3 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_3;
    voltage_goes_Low_when_reenergised_4 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_2;
    voltage_goes_Low_when_reenergised_5 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_1;
  transition voltage_goes_to_zero_when_isolated
    voltage_goes_to_zero_when_isolated_0 (isolated = true AND iso_state_changed = true) -> voltage := zero, entered_zero_zone_KV, check_generators_off;
  transition voltage_goes_low_when_isolated
    voltage_goes_low_when_isolated_0 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low, check_generators_off;
    voltage_goes_low_when_isolated_1 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_5, check_generators_off;
    voltage_goes_low_when_isolated_2 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_4, check_generators_off;
    voltage_goes_low_when_isolated_3 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_3, check_generators_off;
    voltage_goes_low_when_isolated_4 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_2, check_generators_off;
    voltage_goes_low_when_isolated_5 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_1, check_generators_off;
  transition voltage_goes_to_zero
    voltage_goes_to_zero_0 true = 1 -> voltage := zero, entered_zero_zone_KV;
  triggeredby voltage_zero;
  transition voltage_goes_normal
    voltage_goes_normal_0 true = 1 -> voltage := normal, limit_KV_Normal;
  triggeredby voltage_normal;
  transition voltage_goes_high
    voltage_goes_high_0 true = 1 -> voltage := high, limit_KV_High;
    voltage_goes_high_1 true = 1 -> voltage := high, limit_KV_High_5;
    voltage_goes_high_2 true = 1 -> voltage := high, limit_KV_High_4;
    voltage_goes_high_3 true = 1 -> voltage := high, limit_KV_High_3;
    voltage_goes_high_4 true = 1 -> voltage := high, limit_KV_High_2;
    voltage_goes_high_5 true = 1 -> voltage := high, limit_KV_High_1;
  triggeredby voltage_high;
  transition voltage_goes_low
    voltage_goes_low_0 true = 1 -> voltage := low, limit_KV_Low;
    voltage_goes_low_1 true = 1 -> voltage := low, limit_KV_Low_5;
    voltage_goes_low_2 true = 1 -> voltage := low, limit_KV_Low_4;
    voltage_goes_low_3 true = 1 -> voltage := low, limit_KV_Low_3;
    voltage_goes_low_4 true = 1 -> voltage := low, limit_KV_Low_2;
    voltage_goes_low_5 true = 1 -> voltage := low, limit_KV_Low_1;
  triggeredby voltage_low;
  transition voltage_goes_to_zero_unexplained
    voltage_goes_to_zero_unexplained_0 true = 1 -> voltage := zero, entered_zero_zone_KV, count_as_fault;
  transition voltage_goes_normal_unexplained
    voltage_goes_normal_unexplained_0 true = 1 -> voltage := normal, limit_KV_Normal, count_as_fault;
  transition voltage_goes_high_unexplained
    voltage_goes_high_unexplained_0 true = 1 -> voltage := high, limit_KV_High, count_as_fault;
    voltage_goes_high_unexplained_1 true = 1 -> voltage := high, limit_KV_High_5, count_as_fault;
    voltage_goes_high_unexplained_2 true = 1 -> voltage := high, limit_KV_High_4, count_as_fault;
    voltage_goes_high_unexplained_3 true = 1 -> voltage := high, limit_KV_High_3, count_as_fault;
    voltage_goes_high_unexplained_4 true = 1 -> voltage := high, limit_KV_High_2, count_as_fault;
    voltage_goes_high_unexplained_5 true = 1 -> voltage := high, limit_KV_High_1, count_as_fault;
  transition voltage_goes_low_unexplained
    voltage_goes_low_unexplained_0 true = 1 -> voltage := low, limit_KV_Low, count_as_fault;
    voltage_goes_low_unexplained_1 true = 1 -> voltage := low, limit_KV_Low_5, count_as_fault;
    voltage_goes_low_unexplained_2 true = 1 -> voltage := low, limit_KV_Low_4, count_as_fault;
    voltage_goes_low_unexplained_3 true = 1 -> voltage := low, limit_KV_Low_3, count_as_fault;
    voltage_goes_low_unexplained_4 true = 1 -> voltage := low, limit_KV_Low_2, count_as_fault;
    voltage_goes_low_unexplained_5 true = 1 -> voltage := low, limit_KV_Low_1, count_as_fault;
  transition iso_state_changed_timeout
    iso_state_changed_timeout_0 true = 1 -> iso_state_changed := false;
  triggeredby [0.0..15.0] iso_state_changed = true;
  transition become_not_isolated
    become_not_isolated_0 true = 1 -> isolated := false, iso_state_changed := true;
  triggeredby set_isolated_false;
  transition become_isolated
    become_isolated_0 true = 1 -> isolated := true, iso_state_changed := true;
  triggeredby set_isolated_true;
}
component Bus_X116 = {
  var mvar : {zero,high,low,normal};
  var mw : {zero,high,low,normal};
  var voltage : {zero,high,low,normal};
  var iso_state_changed : [0..1];
  var isolated : [0..1];
  event check_generators_off;
  event check_switched_in;
  event check_switched_out;
  event count_as_fault;
  event set_isolated_false;
  event set_isolated_true;
  event mvar_zero;
  event mvar_normal;
  event mvar_high;
  event mvar_low;
  event mw_zero;
  event mw_normal;
  event mw_high;
  event mw_low;
  event voltage_zero;
  event voltage_normal;
  event voltage_high;
  event voltage_low;
  event entered_zero_zone_MVAR;
  event limit_MVAR_High;
  event limit_MVAR_High_5;
  event limit_MVAR_High_4;
  event limit_MVAR_High_3;
  event limit_MVAR_High_2;
  event limit_MVAR_High_1;
  event limit_MVAR_Low;
  event limit_MVAR_Low_5;
  event limit_MVAR_Low_4;
  event limit_MVAR_Low_3;
  event limit_MVAR_Low_2;
  event limit_MVAR_Low_1;
  event limit_MVAR_Normal;
  event entered_zero_zone_MW;
  event limit_MW_High;
  event limit_MW_High_5;
  event limit_MW_High_4;
  event limit_MW_High_3;
  event limit_MW_High_2;
  event limit_MW_High_1;
  event limit_MW_Low;
  event limit_MW_Low_5;
  event limit_MW_Low_4;
  event limit_MW_Low_3;
  event limit_MW_Low_2;
  event limit_MW_Low_1;
  event limit_MW_Normal;
  event entered_zero_zone_KV;
  event limit_KV_High;
  event limit_KV_High_5;
  event limit_KV_High_4;
  event limit_KV_High_3;
  event limit_KV_High_2;
  event limit_KV_High_1;
  event limit_KV_Low;
  event limit_KV_Low_5;
  event limit_KV_Low_4;
  event limit_KV_Low_3;
  event limit_KV_Low_2;
  event limit_KV_Low_1;
  event limit_KV_Normal;
  transition mvar_goes_to_zero
    mvar_goes_to_zero_0 true = 1 -> mvar := zero, entered_zero_zone_MVAR;
  triggeredby mvar_zero;
  transition mvar_goes_normal
    mvar_goes_normal_0 true = 1 -> mvar := normal, limit_MVAR_Normal;
  triggeredby mvar_normal;
  transition mvar_goes_high
    mvar_goes_high_0 true = 1 -> mvar := high, limit_MVAR_High;
    mvar_goes_high_1 true = 1 -> mvar := high, limit_MVAR_High_5;
    mvar_goes_high_2 true = 1 -> mvar := high, limit_MVAR_High_4;
    mvar_goes_high_3 true = 1 -> mvar := high, limit_MVAR_High_3;
    mvar_goes_high_4 true = 1 -> mvar := high, limit_MVAR_High_2;
    mvar_goes_high_5 true = 1 -> mvar := high, limit_MVAR_High_1;
  triggeredby mvar_high;
  transition mvar_goes_low
    mvar_goes_low_0 true = 1 -> mvar := low, limit_MVAR_Low;
    mvar_goes_low_1 true = 1 -> mvar := low, limit_MVAR_Low_5;
    mvar_goes_low_2 true = 1 -> mvar := low, limit_MVAR_Low_4;
    mvar_goes_low_3 true = 1 -> mvar := low, limit_MVAR_Low_3;
    mvar_goes_low_4 true = 1 -> mvar := low, limit_MVAR_Low_2;
    mvar_goes_low_5 true = 1 -> mvar := low, limit_MVAR_Low_1;
  triggeredby mvar_low;
  transition mvar_goes_to_zero_unexplained
    mvar_goes_to_zero_unexplained_0 true = 1 -> mvar := zero, entered_zero_zone_MVAR, count_as_fault;
  transition mvar_goes_normal_unexplained
    mvar_goes_normal_unexplained_0 true = 1 -> mvar := normal, limit_MVAR_Normal, count_as_fault;
  transition mvar_goes_high_unexplained
    mvar_goes_high_unexplained_0 true = 1 -> mvar := high, limit_MVAR_High, count_as_fault;
    mvar_goes_high_unexplained_1 true = 1 -> mvar := high, limit_MVAR_High_5, count_as_fault;
    mvar_goes_high_unexplained_2 true = 1 -> mvar := high, limit_MVAR_High_4, count_as_fault;
    mvar_goes_high_unexplained_3 true = 1 -> mvar := high, limit_MVAR_High_3, count_as_fault;
    mvar_goes_high_unexplained_4 true = 1 -> mvar := high, limit_MVAR_High_2, count_as_fault;
    mvar_goes_high_unexplained_5 true = 1 -> mvar := high, limit_MVAR_High_1, count_as_fault;
  transition mvar_goes_low_unexplained
    mvar_goes_low_unexplained_0 true = 1 -> mvar := low, limit_MVAR_Low, count_as_fault;
    mvar_goes_low_unexplained_1 true = 1 -> mvar := low, limit_MVAR_Low_5, count_as_fault;
    mvar_goes_low_unexplained_2 true = 1 -> mvar := low, limit_MVAR_Low_4, count_as_fault;
    mvar_goes_low_unexplained_3 true = 1 -> mvar := low, limit_MVAR_Low_3, count_as_fault;
    mvar_goes_low_unexplained_4 true = 1 -> mvar := low, limit_MVAR_Low_2, count_as_fault;
    mvar_goes_low_unexplained_5 true = 1 -> mvar := low, limit_MVAR_Low_1, count_as_fault;
  transition mw_goes_normal_when_reenergised
    mw_goes_normal_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> mw := normal, limit_MW_Normal;
  transition mw_goes_high_when_reenergised
    mw_goes_high_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High;
    mw_goes_high_when_reenergised_1 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_5;
    mw_goes_high_when_reenergised_2 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_4;
    mw_goes_high_when_reenergised_3 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_3;
    mw_goes_high_when_reenergised_4 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_2;
    mw_goes_high_when_reenergised_5 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_1;
  transition mw_goes_low_when_reenergised
    mw_goes_low_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low;
    mw_goes_low_when_reenergised_1 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_5;
    mw_goes_low_when_reenergised_2 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_4;
    mw_goes_low_when_reenergised_3 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_3;
    mw_goes_low_when_reenergised_4 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_2;
    mw_goes_low_when_reenergised_5 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_1;
  transition mw_goes_to_zero_when_isolated
    mw_goes_to_zero_when_isolated_0 (isolated = true AND iso_state_changed = true) -> mw := zero, entered_zero_zone_MW, check_generators_off;
  transition mw_goes_low_when_isolated
    mw_goes_low_when_isolated_0 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low, check_generators_off;
    mw_goes_low_when_isolated_1 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_5, check_generators_off;
    mw_goes_low_when_isolated_2 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_4, check_generators_off;
    mw_goes_low_when_isolated_3 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_3, check_generators_off;
    mw_goes_low_when_isolated_4 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_2, check_generators_off;
    mw_goes_low_when_isolated_5 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_1, check_generators_off;
  transition mw_goes_to_zero
    mw_goes_to_zero_0 true = 1 -> mw := zero, entered_zero_zone_MW;
  triggeredby mw_zero;
  transition mw_goes_normal
    mw_goes_normal_0 true = 1 -> mw := normal, limit_MW_Normal;
  triggeredby mw_normal;
  transition mw_goes_high
    mw_goes_high_0 true = 1 -> mw := high, limit_MW_High;
    mw_goes_high_1 true = 1 -> mw := high, limit_MW_High_5;
    mw_goes_high_2 true = 1 -> mw := high, limit_MW_High_4;
    mw_goes_high_3 true = 1 -> mw := high, limit_MW_High_3;
    mw_goes_high_4 true = 1 -> mw := high, limit_MW_High_2;
    mw_goes_high_5 true = 1 -> mw := high, limit_MW_High_1;
  triggeredby mw_high;
  transition mw_goes_low
    mw_goes_low_0 true = 1 -> mw := low, limit_MW_Low;
    mw_goes_low_1 true = 1 -> mw := low, limit_MW_Low_5;
    mw_goes_low_2 true = 1 -> mw := low, limit_MW_Low_4;
    mw_goes_low_3 true = 1 -> mw := low, limit_MW_Low_3;
    mw_goes_low_4 true = 1 -> mw := low, limit_MW_Low_2;
    mw_goes_low_5 true = 1 -> mw := low, limit_MW_Low_1;
  triggeredby mw_low;
  transition mw_goes_to_zero_unexplained
    mw_goes_to_zero_unexplained_0 true = 1 -> mw := zero, entered_zero_zone_MW, count_as_fault;
  transition mw_goes_normal_unexplained
    mw_goes_normal_unexplained_0 true = 1 -> mw := normal, limit_MW_Normal, count_as_fault;
  transition mw_goes_high_unexplained
    mw_goes_high_unexplained_0 true = 1 -> mw := high, limit_MW_High, count_as_fault;
    mw_goes_high_unexplained_1 true = 1 -> mw := high, limit_MW_High_5, count_as_fault;
    mw_goes_high_unexplained_2 true = 1 -> mw := high, limit_MW_High_4, count_as_fault;
    mw_goes_high_unexplained_3 true = 1 -> mw := high, limit_MW_High_3, count_as_fault;
    mw_goes_high_unexplained_4 true = 1 -> mw := high, limit_MW_High_2, count_as_fault;
    mw_goes_high_unexplained_5 true = 1 -> mw := high, limit_MW_High_1, count_as_fault;
  transition mw_goes_low_unexplained
    mw_goes_low_unexplained_0 true = 1 -> mw := low, limit_MW_Low, count_as_fault;
    mw_goes_low_unexplained_1 true = 1 -> mw := low, limit_MW_Low_5, count_as_fault;
    mw_goes_low_unexplained_2 true = 1 -> mw := low, limit_MW_Low_4, count_as_fault;
    mw_goes_low_unexplained_3 true = 1 -> mw := low, limit_MW_Low_3, count_as_fault;
    mw_goes_low_unexplained_4 true = 1 -> mw := low, limit_MW_Low_2, count_as_fault;
    mw_goes_low_unexplained_5 true = 1 -> mw := low, limit_MW_Low_1, count_as_fault;
  transition voltage_goes_normal_when_caps_in
    voltage_goes_normal_when_caps_in_0 (voltage = low AND isolated = false) -> voltage := normal, limit_KV_Normal, check_switched_in;
  transition voltage_goes_normal_when_caps_out
    voltage_goes_normal_when_caps_out_0 (voltage = high AND isolated = false) -> voltage := normal, limit_KV_Normal, check_switched_out;
  transition voltage_goes_normal_when_reenergised
    voltage_goes_normal_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> voltage := normal, limit_KV_Normal;
  transition voltage_goes_high_when_reenergised
    voltage_goes_high_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High;
    voltage_goes_high_when_reenergised_1 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_5;
    voltage_goes_high_when_reenergised_2 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_4;
    voltage_goes_high_when_reenergised_3 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_3;
    voltage_goes_high_when_reenergised_4 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_2;
    voltage_goes_high_when_reenergised_5 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_1;
  transition voltage_goes_Low_when_reenergised
    voltage_goes_Low_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low;
    voltage_goes_Low_when_reenergised_1 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_5;
    voltage_goes_Low_when_reenergised_2 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_4;
    voltage_goes_Low_when_reenergised_3 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_3;
    voltage_goes_Low_when_reenergised_4 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_2;
    voltage_goes_Low_when_reenergised_5 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_1;
  transition voltage_goes_to_zero_when_isolated
    voltage_goes_to_zero_when_isolated_0 (isolated = true AND iso_state_changed = true) -> voltage := zero, entered_zero_zone_KV, check_generators_off;
  transition voltage_goes_low_when_isolated
    voltage_goes_low_when_isolated_0 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low, check_generators_off;
    voltage_goes_low_when_isolated_1 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_5, check_generators_off;
    voltage_goes_low_when_isolated_2 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_4, check_generators_off;
    voltage_goes_low_when_isolated_3 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_3, check_generators_off;
    voltage_goes_low_when_isolated_4 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_2, check_generators_off;
    voltage_goes_low_when_isolated_5 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_1, check_generators_off;
  transition voltage_goes_to_zero
    voltage_goes_to_zero_0 true = 1 -> voltage := zero, entered_zero_zone_KV;
  triggeredby voltage_zero;
  transition voltage_goes_normal
    voltage_goes_normal_0 true = 1 -> voltage := normal, limit_KV_Normal;
  triggeredby voltage_normal;
  transition voltage_goes_high
    voltage_goes_high_0 true = 1 -> voltage := high, limit_KV_High;
    voltage_goes_high_1 true = 1 -> voltage := high, limit_KV_High_5;
    voltage_goes_high_2 true = 1 -> voltage := high, limit_KV_High_4;
    voltage_goes_high_3 true = 1 -> voltage := high, limit_KV_High_3;
    voltage_goes_high_4 true = 1 -> voltage := high, limit_KV_High_2;
    voltage_goes_high_5 true = 1 -> voltage := high, limit_KV_High_1;
  triggeredby voltage_high;
  transition voltage_goes_low
    voltage_goes_low_0 true = 1 -> voltage := low, limit_KV_Low;
    voltage_goes_low_1 true = 1 -> voltage := low, limit_KV_Low_5;
    voltage_goes_low_2 true = 1 -> voltage := low, limit_KV_Low_4;
    voltage_goes_low_3 true = 1 -> voltage := low, limit_KV_Low_3;
    voltage_goes_low_4 true = 1 -> voltage := low, limit_KV_Low_2;
    voltage_goes_low_5 true = 1 -> voltage := low, limit_KV_Low_1;
  triggeredby voltage_low;
  transition voltage_goes_to_zero_unexplained
    voltage_goes_to_zero_unexplained_0 true = 1 -> voltage := zero, entered_zero_zone_KV, count_as_fault;
  transition voltage_goes_normal_unexplained
    voltage_goes_normal_unexplained_0 true = 1 -> voltage := normal, limit_KV_Normal, count_as_fault;
  transition voltage_goes_high_unexplained
    voltage_goes_high_unexplained_0 true = 1 -> voltage := high, limit_KV_High, count_as_fault;
    voltage_goes_high_unexplained_1 true = 1 -> voltage := high, limit_KV_High_5, count_as_fault;
    voltage_goes_high_unexplained_2 true = 1 -> voltage := high, limit_KV_High_4, count_as_fault;
    voltage_goes_high_unexplained_3 true = 1 -> voltage := high, limit_KV_High_3, count_as_fault;
    voltage_goes_high_unexplained_4 true = 1 -> voltage := high, limit_KV_High_2, count_as_fault;
    voltage_goes_high_unexplained_5 true = 1 -> voltage := high, limit_KV_High_1, count_as_fault;
  transition voltage_goes_low_unexplained
    voltage_goes_low_unexplained_0 true = 1 -> voltage := low, limit_KV_Low, count_as_fault;
    voltage_goes_low_unexplained_1 true = 1 -> voltage := low, limit_KV_Low_5, count_as_fault;
    voltage_goes_low_unexplained_2 true = 1 -> voltage := low, limit_KV_Low_4, count_as_fault;
    voltage_goes_low_unexplained_3 true = 1 -> voltage := low, limit_KV_Low_3, count_as_fault;
    voltage_goes_low_unexplained_4 true = 1 -> voltage := low, limit_KV_Low_2, count_as_fault;
    voltage_goes_low_unexplained_5 true = 1 -> voltage := low, limit_KV_Low_1, count_as_fault;
  transition iso_state_changed_timeout
    iso_state_changed_timeout_0 true = 1 -> iso_state_changed := false;
  triggeredby [0.0..15.0] iso_state_changed = true;
  transition become_not_isolated
    become_not_isolated_0 true = 1 -> isolated := false, iso_state_changed := true;
  triggeredby set_isolated_false;
  transition become_isolated
    become_isolated_0 true = 1 -> isolated := true, iso_state_changed := true;
  triggeredby set_isolated_true;
}
component Bus_X114 = {
  var mvar : {zero,high,low,normal};
  var mw : {zero,high,low,normal};
  var voltage : {zero,high,low,normal};
  var iso_state_changed : [0..1];
  var isolated : [0..1];
  event check_generators_off;
  event check_switched_in;
  event check_switched_out;
  event count_as_fault;
  event set_isolated_false;
  event set_isolated_true;
  event mvar_zero;
  event mvar_normal;
  event mvar_high;
  event mvar_low;
  event mw_zero;
  event mw_normal;
  event mw_high;
  event mw_low;
  event voltage_zero;
  event voltage_normal;
  event voltage_high;
  event voltage_low;
  event entered_zero_zone_MVAR;
  event limit_MVAR_High;
  event limit_MVAR_High_5;
  event limit_MVAR_High_4;
  event limit_MVAR_High_3;
  event limit_MVAR_High_2;
  event limit_MVAR_High_1;
  event limit_MVAR_Low;
  event limit_MVAR_Low_5;
  event limit_MVAR_Low_4;
  event limit_MVAR_Low_3;
  event limit_MVAR_Low_2;
  event limit_MVAR_Low_1;
  event limit_MVAR_Normal;
  event entered_zero_zone_MW;
  event limit_MW_High;
  event limit_MW_High_5;
  event limit_MW_High_4;
  event limit_MW_High_3;
  event limit_MW_High_2;
  event limit_MW_High_1;
  event limit_MW_Low;
  event limit_MW_Low_5;
  event limit_MW_Low_4;
  event limit_MW_Low_3;
  event limit_MW_Low_2;
  event limit_MW_Low_1;
  event limit_MW_Normal;
  event entered_zero_zone_KV;
  event limit_KV_High;
  event limit_KV_High_5;
  event limit_KV_High_4;
  event limit_KV_High_3;
  event limit_KV_High_2;
  event limit_KV_High_1;
  event limit_KV_Low;
  event limit_KV_Low_5;
  event limit_KV_Low_4;
  event limit_KV_Low_3;
  event limit_KV_Low_2;
  event limit_KV_Low_1;
  event limit_KV_Normal;
  transition mvar_goes_to_zero
    mvar_goes_to_zero_0 true = 1 -> mvar := zero, entered_zero_zone_MVAR;
  triggeredby mvar_zero;
  transition mvar_goes_normal
    mvar_goes_normal_0 true = 1 -> mvar := normal, limit_MVAR_Normal;
  triggeredby mvar_normal;
  transition mvar_goes_high
    mvar_goes_high_0 true = 1 -> mvar := high, limit_MVAR_High;
    mvar_goes_high_1 true = 1 -> mvar := high, limit_MVAR_High_5;
    mvar_goes_high_2 true = 1 -> mvar := high, limit_MVAR_High_4;
    mvar_goes_high_3 true = 1 -> mvar := high, limit_MVAR_High_3;
    mvar_goes_high_4 true = 1 -> mvar := high, limit_MVAR_High_2;
    mvar_goes_high_5 true = 1 -> mvar := high, limit_MVAR_High_1;
  triggeredby mvar_high;
  transition mvar_goes_low
    mvar_goes_low_0 true = 1 -> mvar := low, limit_MVAR_Low;
    mvar_goes_low_1 true = 1 -> mvar := low, limit_MVAR_Low_5;
    mvar_goes_low_2 true = 1 -> mvar := low, limit_MVAR_Low_4;
    mvar_goes_low_3 true = 1 -> mvar := low, limit_MVAR_Low_3;
    mvar_goes_low_4 true = 1 -> mvar := low, limit_MVAR_Low_2;
    mvar_goes_low_5 true = 1 -> mvar := low, limit_MVAR_Low_1;
  triggeredby mvar_low;
  transition mvar_goes_to_zero_unexplained
    mvar_goes_to_zero_unexplained_0 true = 1 -> mvar := zero, entered_zero_zone_MVAR, count_as_fault;
  transition mvar_goes_normal_unexplained
    mvar_goes_normal_unexplained_0 true = 1 -> mvar := normal, limit_MVAR_Normal, count_as_fault;
  transition mvar_goes_high_unexplained
    mvar_goes_high_unexplained_0 true = 1 -> mvar := high, limit_MVAR_High, count_as_fault;
    mvar_goes_high_unexplained_1 true = 1 -> mvar := high, limit_MVAR_High_5, count_as_fault;
    mvar_goes_high_unexplained_2 true = 1 -> mvar := high, limit_MVAR_High_4, count_as_fault;
    mvar_goes_high_unexplained_3 true = 1 -> mvar := high, limit_MVAR_High_3, count_as_fault;
    mvar_goes_high_unexplained_4 true = 1 -> mvar := high, limit_MVAR_High_2, count_as_fault;
    mvar_goes_high_unexplained_5 true = 1 -> mvar := high, limit_MVAR_High_1, count_as_fault;
  transition mvar_goes_low_unexplained
    mvar_goes_low_unexplained_0 true = 1 -> mvar := low, limit_MVAR_Low, count_as_fault;
    mvar_goes_low_unexplained_1 true = 1 -> mvar := low, limit_MVAR_Low_5, count_as_fault;
    mvar_goes_low_unexplained_2 true = 1 -> mvar := low, limit_MVAR_Low_4, count_as_fault;
    mvar_goes_low_unexplained_3 true = 1 -> mvar := low, limit_MVAR_Low_3, count_as_fault;
    mvar_goes_low_unexplained_4 true = 1 -> mvar := low, limit_MVAR_Low_2, count_as_fault;
    mvar_goes_low_unexplained_5 true = 1 -> mvar := low, limit_MVAR_Low_1, count_as_fault;
  transition mw_goes_normal_when_reenergised
    mw_goes_normal_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> mw := normal, limit_MW_Normal;
  transition mw_goes_high_when_reenergised
    mw_goes_high_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High;
    mw_goes_high_when_reenergised_1 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_5;
    mw_goes_high_when_reenergised_2 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_4;
    mw_goes_high_when_reenergised_3 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_3;
    mw_goes_high_when_reenergised_4 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_2;
    mw_goes_high_when_reenergised_5 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_1;
  transition mw_goes_low_when_reenergised
    mw_goes_low_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low;
    mw_goes_low_when_reenergised_1 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_5;
    mw_goes_low_when_reenergised_2 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_4;
    mw_goes_low_when_reenergised_3 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_3;
    mw_goes_low_when_reenergised_4 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_2;
    mw_goes_low_when_reenergised_5 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_1;
  transition mw_goes_to_zero_when_isolated
    mw_goes_to_zero_when_isolated_0 (isolated = true AND iso_state_changed = true) -> mw := zero, entered_zero_zone_MW, check_generators_off;
  transition mw_goes_low_when_isolated
    mw_goes_low_when_isolated_0 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low, check_generators_off;
    mw_goes_low_when_isolated_1 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_5, check_generators_off;
    mw_goes_low_when_isolated_2 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_4, check_generators_off;
    mw_goes_low_when_isolated_3 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_3, check_generators_off;
    mw_goes_low_when_isolated_4 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_2, check_generators_off;
    mw_goes_low_when_isolated_5 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_1, check_generators_off;
  transition mw_goes_to_zero
    mw_goes_to_zero_0 true = 1 -> mw := zero, entered_zero_zone_MW;
  triggeredby mw_zero;
  transition mw_goes_normal
    mw_goes_normal_0 true = 1 -> mw := normal, limit_MW_Normal;
  triggeredby mw_normal;
  transition mw_goes_high
    mw_goes_high_0 true = 1 -> mw := high, limit_MW_High;
    mw_goes_high_1 true = 1 -> mw := high, limit_MW_High_5;
    mw_goes_high_2 true = 1 -> mw := high, limit_MW_High_4;
    mw_goes_high_3 true = 1 -> mw := high, limit_MW_High_3;
    mw_goes_high_4 true = 1 -> mw := high, limit_MW_High_2;
    mw_goes_high_5 true = 1 -> mw := high, limit_MW_High_1;
  triggeredby mw_high;
  transition mw_goes_low
    mw_goes_low_0 true = 1 -> mw := low, limit_MW_Low;
    mw_goes_low_1 true = 1 -> mw := low, limit_MW_Low_5;
    mw_goes_low_2 true = 1 -> mw := low, limit_MW_Low_4;
    mw_goes_low_3 true = 1 -> mw := low, limit_MW_Low_3;
    mw_goes_low_4 true = 1 -> mw := low, limit_MW_Low_2;
    mw_goes_low_5 true = 1 -> mw := low, limit_MW_Low_1;
  triggeredby mw_low;
  transition mw_goes_to_zero_unexplained
    mw_goes_to_zero_unexplained_0 true = 1 -> mw := zero, entered_zero_zone_MW, count_as_fault;
  transition mw_goes_normal_unexplained
    mw_goes_normal_unexplained_0 true = 1 -> mw := normal, limit_MW_Normal, count_as_fault;
  transition mw_goes_high_unexplained
    mw_goes_high_unexplained_0 true = 1 -> mw := high, limit_MW_High, count_as_fault;
    mw_goes_high_unexplained_1 true = 1 -> mw := high, limit_MW_High_5, count_as_fault;
    mw_goes_high_unexplained_2 true = 1 -> mw := high, limit_MW_High_4, count_as_fault;
    mw_goes_high_unexplained_3 true = 1 -> mw := high, limit_MW_High_3, count_as_fault;
    mw_goes_high_unexplained_4 true = 1 -> mw := high, limit_MW_High_2, count_as_fault;
    mw_goes_high_unexplained_5 true = 1 -> mw := high, limit_MW_High_1, count_as_fault;
  transition mw_goes_low_unexplained
    mw_goes_low_unexplained_0 true = 1 -> mw := low, limit_MW_Low, count_as_fault;
    mw_goes_low_unexplained_1 true = 1 -> mw := low, limit_MW_Low_5, count_as_fault;
    mw_goes_low_unexplained_2 true = 1 -> mw := low, limit_MW_Low_4, count_as_fault;
    mw_goes_low_unexplained_3 true = 1 -> mw := low, limit_MW_Low_3, count_as_fault;
    mw_goes_low_unexplained_4 true = 1 -> mw := low, limit_MW_Low_2, count_as_fault;
    mw_goes_low_unexplained_5 true = 1 -> mw := low, limit_MW_Low_1, count_as_fault;
  transition voltage_goes_normal_when_caps_in
    voltage_goes_normal_when_caps_in_0 (voltage = low AND isolated = false) -> voltage := normal, limit_KV_Normal, check_switched_in;
  transition voltage_goes_normal_when_caps_out
    voltage_goes_normal_when_caps_out_0 (voltage = high AND isolated = false) -> voltage := normal, limit_KV_Normal, check_switched_out;
  transition voltage_goes_normal_when_reenergised
    voltage_goes_normal_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> voltage := normal, limit_KV_Normal;
  transition voltage_goes_high_when_reenergised
    voltage_goes_high_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High;
    voltage_goes_high_when_reenergised_1 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_5;
    voltage_goes_high_when_reenergised_2 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_4;
    voltage_goes_high_when_reenergised_3 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_3;
    voltage_goes_high_when_reenergised_4 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_2;
    voltage_goes_high_when_reenergised_5 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_1;
  transition voltage_goes_Low_when_reenergised
    voltage_goes_Low_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low;
    voltage_goes_Low_when_reenergised_1 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_5;
    voltage_goes_Low_when_reenergised_2 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_4;
    voltage_goes_Low_when_reenergised_3 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_3;
    voltage_goes_Low_when_reenergised_4 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_2;
    voltage_goes_Low_when_reenergised_5 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_1;
  transition voltage_goes_to_zero_when_isolated
    voltage_goes_to_zero_when_isolated_0 (isolated = true AND iso_state_changed = true) -> voltage := zero, entered_zero_zone_KV, check_generators_off;
  transition voltage_goes_low_when_isolated
    voltage_goes_low_when_isolated_0 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low, check_generators_off;
    voltage_goes_low_when_isolated_1 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_5, check_generators_off;
    voltage_goes_low_when_isolated_2 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_4, check_generators_off;
    voltage_goes_low_when_isolated_3 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_3, check_generators_off;
    voltage_goes_low_when_isolated_4 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_2, check_generators_off;
    voltage_goes_low_when_isolated_5 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_1, check_generators_off;
  transition voltage_goes_to_zero
    voltage_goes_to_zero_0 true = 1 -> voltage := zero, entered_zero_zone_KV;
  triggeredby voltage_zero;
  transition voltage_goes_normal
    voltage_goes_normal_0 true = 1 -> voltage := normal, limit_KV_Normal;
  triggeredby voltage_normal;
  transition voltage_goes_high
    voltage_goes_high_0 true = 1 -> voltage := high, limit_KV_High;
    voltage_goes_high_1 true = 1 -> voltage := high, limit_KV_High_5;
    voltage_goes_high_2 true = 1 -> voltage := high, limit_KV_High_4;
    voltage_goes_high_3 true = 1 -> voltage := high, limit_KV_High_3;
    voltage_goes_high_4 true = 1 -> voltage := high, limit_KV_High_2;
    voltage_goes_high_5 true = 1 -> voltage := high, limit_KV_High_1;
  triggeredby voltage_high;
  transition voltage_goes_low
    voltage_goes_low_0 true = 1 -> voltage := low, limit_KV_Low;
    voltage_goes_low_1 true = 1 -> voltage := low, limit_KV_Low_5;
    voltage_goes_low_2 true = 1 -> voltage := low, limit_KV_Low_4;
    voltage_goes_low_3 true = 1 -> voltage := low, limit_KV_Low_3;
    voltage_goes_low_4 true = 1 -> voltage := low, limit_KV_Low_2;
    voltage_goes_low_5 true = 1 -> voltage := low, limit_KV_Low_1;
  triggeredby voltage_low;
  transition voltage_goes_to_zero_unexplained
    voltage_goes_to_zero_unexplained_0 true = 1 -> voltage := zero, entered_zero_zone_KV, count_as_fault;
  transition voltage_goes_normal_unexplained
    voltage_goes_normal_unexplained_0 true = 1 -> voltage := normal, limit_KV_Normal, count_as_fault;
  transition voltage_goes_high_unexplained
    voltage_goes_high_unexplained_0 true = 1 -> voltage := high, limit_KV_High, count_as_fault;
    voltage_goes_high_unexplained_1 true = 1 -> voltage := high, limit_KV_High_5, count_as_fault;
    voltage_goes_high_unexplained_2 true = 1 -> voltage := high, limit_KV_High_4, count_as_fault;
    voltage_goes_high_unexplained_3 true = 1 -> voltage := high, limit_KV_High_3, count_as_fault;
    voltage_goes_high_unexplained_4 true = 1 -> voltage := high, limit_KV_High_2, count_as_fault;
    voltage_goes_high_unexplained_5 true = 1 -> voltage := high, limit_KV_High_1, count_as_fault;
  transition voltage_goes_low_unexplained
    voltage_goes_low_unexplained_0 true = 1 -> voltage := low, limit_KV_Low, count_as_fault;
    voltage_goes_low_unexplained_1 true = 1 -> voltage := low, limit_KV_Low_5, count_as_fault;
    voltage_goes_low_unexplained_2 true = 1 -> voltage := low, limit_KV_Low_4, count_as_fault;
    voltage_goes_low_unexplained_3 true = 1 -> voltage := low, limit_KV_Low_3, count_as_fault;
    voltage_goes_low_unexplained_4 true = 1 -> voltage := low, limit_KV_Low_2, count_as_fault;
    voltage_goes_low_unexplained_5 true = 1 -> voltage := low, limit_KV_Low_1, count_as_fault;
  transition iso_state_changed_timeout
    iso_state_changed_timeout_0 true = 1 -> iso_state_changed := false;
  triggeredby [0.0..15.0] iso_state_changed = true;
  transition become_not_isolated
    become_not_isolated_0 true = 1 -> isolated := false, iso_state_changed := true;
  triggeredby set_isolated_false;
  transition become_isolated
    become_isolated_0 true = 1 -> isolated := true, iso_state_changed := true;
  triggeredby set_isolated_true;
}
component Bus_X105 = {
  var mvar : {zero,high,low,normal};
  var mw : {zero,high,low,normal};
  var voltage : {zero,high,low,normal};
  var iso_state_changed : [0..1];
  var isolated : [0..1];
  event check_generators_off;
  event check_switched_in;
  event check_switched_out;
  event count_as_fault;
  event set_isolated_false;
  event set_isolated_true;
  event mvar_zero;
  event mvar_normal;
  event mvar_high;
  event mvar_low;
  event mw_zero;
  event mw_normal;
  event mw_high;
  event mw_low;
  event voltage_zero;
  event voltage_normal;
  event voltage_high;
  event voltage_low;
  event entered_zero_zone_MVAR;
  event limit_MVAR_High;
  event limit_MVAR_High_5;
  event limit_MVAR_High_4;
  event limit_MVAR_High_3;
  event limit_MVAR_High_2;
  event limit_MVAR_High_1;
  event limit_MVAR_Low;
  event limit_MVAR_Low_5;
  event limit_MVAR_Low_4;
  event limit_MVAR_Low_3;
  event limit_MVAR_Low_2;
  event limit_MVAR_Low_1;
  event limit_MVAR_Normal;
  event entered_zero_zone_MW;
  event limit_MW_High;
  event limit_MW_High_5;
  event limit_MW_High_4;
  event limit_MW_High_3;
  event limit_MW_High_2;
  event limit_MW_High_1;
  event limit_MW_Low;
  event limit_MW_Low_5;
  event limit_MW_Low_4;
  event limit_MW_Low_3;
  event limit_MW_Low_2;
  event limit_MW_Low_1;
  event limit_MW_Normal;
  event entered_zero_zone_KV;
  event limit_KV_High;
  event limit_KV_High_5;
  event limit_KV_High_4;
  event limit_KV_High_3;
  event limit_KV_High_2;
  event limit_KV_High_1;
  event limit_KV_Low;
  event limit_KV_Low_5;
  event limit_KV_Low_4;
  event limit_KV_Low_3;
  event limit_KV_Low_2;
  event limit_KV_Low_1;
  event limit_KV_Normal;
  transition mvar_goes_to_zero
    mvar_goes_to_zero_0 true = 1 -> mvar := zero, entered_zero_zone_MVAR;
  triggeredby mvar_zero;
  transition mvar_goes_normal
    mvar_goes_normal_0 true = 1 -> mvar := normal, limit_MVAR_Normal;
  triggeredby mvar_normal;
  transition mvar_goes_high
    mvar_goes_high_0 true = 1 -> mvar := high, limit_MVAR_High;
    mvar_goes_high_1 true = 1 -> mvar := high, limit_MVAR_High_5;
    mvar_goes_high_2 true = 1 -> mvar := high, limit_MVAR_High_4;
    mvar_goes_high_3 true = 1 -> mvar := high, limit_MVAR_High_3;
    mvar_goes_high_4 true = 1 -> mvar := high, limit_MVAR_High_2;
    mvar_goes_high_5 true = 1 -> mvar := high, limit_MVAR_High_1;
  triggeredby mvar_high;
  transition mvar_goes_low
    mvar_goes_low_0 true = 1 -> mvar := low, limit_MVAR_Low;
    mvar_goes_low_1 true = 1 -> mvar := low, limit_MVAR_Low_5;
    mvar_goes_low_2 true = 1 -> mvar := low, limit_MVAR_Low_4;
    mvar_goes_low_3 true = 1 -> mvar := low, limit_MVAR_Low_3;
    mvar_goes_low_4 true = 1 -> mvar := low, limit_MVAR_Low_2;
    mvar_goes_low_5 true = 1 -> mvar := low, limit_MVAR_Low_1;
  triggeredby mvar_low;
  transition mvar_goes_to_zero_unexplained
    mvar_goes_to_zero_unexplained_0 true = 1 -> mvar := zero, entered_zero_zone_MVAR, count_as_fault;
  transition mvar_goes_normal_unexplained
    mvar_goes_normal_unexplained_0 true = 1 -> mvar := normal, limit_MVAR_Normal, count_as_fault;
  transition mvar_goes_high_unexplained
    mvar_goes_high_unexplained_0 true = 1 -> mvar := high, limit_MVAR_High, count_as_fault;
    mvar_goes_high_unexplained_1 true = 1 -> mvar := high, limit_MVAR_High_5, count_as_fault;
    mvar_goes_high_unexplained_2 true = 1 -> mvar := high, limit_MVAR_High_4, count_as_fault;
    mvar_goes_high_unexplained_3 true = 1 -> mvar := high, limit_MVAR_High_3, count_as_fault;
    mvar_goes_high_unexplained_4 true = 1 -> mvar := high, limit_MVAR_High_2, count_as_fault;
    mvar_goes_high_unexplained_5 true = 1 -> mvar := high, limit_MVAR_High_1, count_as_fault;
  transition mvar_goes_low_unexplained
    mvar_goes_low_unexplained_0 true = 1 -> mvar := low, limit_MVAR_Low, count_as_fault;
    mvar_goes_low_unexplained_1 true = 1 -> mvar := low, limit_MVAR_Low_5, count_as_fault;
    mvar_goes_low_unexplained_2 true = 1 -> mvar := low, limit_MVAR_Low_4, count_as_fault;
    mvar_goes_low_unexplained_3 true = 1 -> mvar := low, limit_MVAR_Low_3, count_as_fault;
    mvar_goes_low_unexplained_4 true = 1 -> mvar := low, limit_MVAR_Low_2, count_as_fault;
    mvar_goes_low_unexplained_5 true = 1 -> mvar := low, limit_MVAR_Low_1, count_as_fault;
  transition mw_goes_normal_when_reenergised
    mw_goes_normal_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> mw := normal, limit_MW_Normal;
  transition mw_goes_high_when_reenergised
    mw_goes_high_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High;
    mw_goes_high_when_reenergised_1 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_5;
    mw_goes_high_when_reenergised_2 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_4;
    mw_goes_high_when_reenergised_3 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_3;
    mw_goes_high_when_reenergised_4 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_2;
    mw_goes_high_when_reenergised_5 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_1;
  transition mw_goes_low_when_reenergised
    mw_goes_low_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low;
    mw_goes_low_when_reenergised_1 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_5;
    mw_goes_low_when_reenergised_2 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_4;
    mw_goes_low_when_reenergised_3 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_3;
    mw_goes_low_when_reenergised_4 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_2;
    mw_goes_low_when_reenergised_5 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_1;
  transition mw_goes_to_zero_when_isolated
    mw_goes_to_zero_when_isolated_0 (isolated = true AND iso_state_changed = true) -> mw := zero, entered_zero_zone_MW, check_generators_off;
  transition mw_goes_low_when_isolated
    mw_goes_low_when_isolated_0 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low, check_generators_off;
    mw_goes_low_when_isolated_1 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_5, check_generators_off;
    mw_goes_low_when_isolated_2 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_4, check_generators_off;
    mw_goes_low_when_isolated_3 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_3, check_generators_off;
    mw_goes_low_when_isolated_4 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_2, check_generators_off;
    mw_goes_low_when_isolated_5 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_1, check_generators_off;
  transition mw_goes_to_zero
    mw_goes_to_zero_0 true = 1 -> mw := zero, entered_zero_zone_MW;
  triggeredby mw_zero;
  transition mw_goes_normal
    mw_goes_normal_0 true = 1 -> mw := normal, limit_MW_Normal;
  triggeredby mw_normal;
  transition mw_goes_high
    mw_goes_high_0 true = 1 -> mw := high, limit_MW_High;
    mw_goes_high_1 true = 1 -> mw := high, limit_MW_High_5;
    mw_goes_high_2 true = 1 -> mw := high, limit_MW_High_4;
    mw_goes_high_3 true = 1 -> mw := high, limit_MW_High_3;
    mw_goes_high_4 true = 1 -> mw := high, limit_MW_High_2;
    mw_goes_high_5 true = 1 -> mw := high, limit_MW_High_1;
  triggeredby mw_high;
  transition mw_goes_low
    mw_goes_low_0 true = 1 -> mw := low, limit_MW_Low;
    mw_goes_low_1 true = 1 -> mw := low, limit_MW_Low_5;
    mw_goes_low_2 true = 1 -> mw := low, limit_MW_Low_4;
    mw_goes_low_3 true = 1 -> mw := low, limit_MW_Low_3;
    mw_goes_low_4 true = 1 -> mw := low, limit_MW_Low_2;
    mw_goes_low_5 true = 1 -> mw := low, limit_MW_Low_1;
  triggeredby mw_low;
  transition mw_goes_to_zero_unexplained
    mw_goes_to_zero_unexplained_0 true = 1 -> mw := zero, entered_zero_zone_MW, count_as_fault;
  transition mw_goes_normal_unexplained
    mw_goes_normal_unexplained_0 true = 1 -> mw := normal, limit_MW_Normal, count_as_fault;
  transition mw_goes_high_unexplained
    mw_goes_high_unexplained_0 true = 1 -> mw := high, limit_MW_High, count_as_fault;
    mw_goes_high_unexplained_1 true = 1 -> mw := high, limit_MW_High_5, count_as_fault;
    mw_goes_high_unexplained_2 true = 1 -> mw := high, limit_MW_High_4, count_as_fault;
    mw_goes_high_unexplained_3 true = 1 -> mw := high, limit_MW_High_3, count_as_fault;
    mw_goes_high_unexplained_4 true = 1 -> mw := high, limit_MW_High_2, count_as_fault;
    mw_goes_high_unexplained_5 true = 1 -> mw := high, limit_MW_High_1, count_as_fault;
  transition mw_goes_low_unexplained
    mw_goes_low_unexplained_0 true = 1 -> mw := low, limit_MW_Low, count_as_fault;
    mw_goes_low_unexplained_1 true = 1 -> mw := low, limit_MW_Low_5, count_as_fault;
    mw_goes_low_unexplained_2 true = 1 -> mw := low, limit_MW_Low_4, count_as_fault;
    mw_goes_low_unexplained_3 true = 1 -> mw := low, limit_MW_Low_3, count_as_fault;
    mw_goes_low_unexplained_4 true = 1 -> mw := low, limit_MW_Low_2, count_as_fault;
    mw_goes_low_unexplained_5 true = 1 -> mw := low, limit_MW_Low_1, count_as_fault;
  transition voltage_goes_normal_when_caps_in
    voltage_goes_normal_when_caps_in_0 (voltage = low AND isolated = false) -> voltage := normal, limit_KV_Normal, check_switched_in;
  transition voltage_goes_normal_when_caps_out
    voltage_goes_normal_when_caps_out_0 (voltage = high AND isolated = false) -> voltage := normal, limit_KV_Normal, check_switched_out;
  transition voltage_goes_normal_when_reenergised
    voltage_goes_normal_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> voltage := normal, limit_KV_Normal;
  transition voltage_goes_high_when_reenergised
    voltage_goes_high_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High;
    voltage_goes_high_when_reenergised_1 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_5;
    voltage_goes_high_when_reenergised_2 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_4;
    voltage_goes_high_when_reenergised_3 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_3;
    voltage_goes_high_when_reenergised_4 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_2;
    voltage_goes_high_when_reenergised_5 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_1;
  transition voltage_goes_Low_when_reenergised
    voltage_goes_Low_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low;
    voltage_goes_Low_when_reenergised_1 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_5;
    voltage_goes_Low_when_reenergised_2 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_4;
    voltage_goes_Low_when_reenergised_3 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_3;
    voltage_goes_Low_when_reenergised_4 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_2;
    voltage_goes_Low_when_reenergised_5 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_1;
  transition voltage_goes_to_zero_when_isolated
    voltage_goes_to_zero_when_isolated_0 (isolated = true AND iso_state_changed = true) -> voltage := zero, entered_zero_zone_KV, check_generators_off;
  transition voltage_goes_low_when_isolated
    voltage_goes_low_when_isolated_0 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low, check_generators_off;
    voltage_goes_low_when_isolated_1 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_5, check_generators_off;
    voltage_goes_low_when_isolated_2 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_4, check_generators_off;
    voltage_goes_low_when_isolated_3 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_3, check_generators_off;
    voltage_goes_low_when_isolated_4 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_2, check_generators_off;
    voltage_goes_low_when_isolated_5 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_1, check_generators_off;
  transition voltage_goes_to_zero
    voltage_goes_to_zero_0 true = 1 -> voltage := zero, entered_zero_zone_KV;
  triggeredby voltage_zero;
  transition voltage_goes_normal
    voltage_goes_normal_0 true = 1 -> voltage := normal, limit_KV_Normal;
  triggeredby voltage_normal;
  transition voltage_goes_high
    voltage_goes_high_0 true = 1 -> voltage := high, limit_KV_High;
    voltage_goes_high_1 true = 1 -> voltage := high, limit_KV_High_5;
    voltage_goes_high_2 true = 1 -> voltage := high, limit_KV_High_4;
    voltage_goes_high_3 true = 1 -> voltage := high, limit_KV_High_3;
    voltage_goes_high_4 true = 1 -> voltage := high, limit_KV_High_2;
    voltage_goes_high_5 true = 1 -> voltage := high, limit_KV_High_1;
  triggeredby voltage_high;
  transition voltage_goes_low
    voltage_goes_low_0 true = 1 -> voltage := low, limit_KV_Low;
    voltage_goes_low_1 true = 1 -> voltage := low, limit_KV_Low_5;
    voltage_goes_low_2 true = 1 -> voltage := low, limit_KV_Low_4;
    voltage_goes_low_3 true = 1 -> voltage := low, limit_KV_Low_3;
    voltage_goes_low_4 true = 1 -> voltage := low, limit_KV_Low_2;
    voltage_goes_low_5 true = 1 -> voltage := low, limit_KV_Low_1;
  triggeredby voltage_low;
  transition voltage_goes_to_zero_unexplained
    voltage_goes_to_zero_unexplained_0 true = 1 -> voltage := zero, entered_zero_zone_KV, count_as_fault;
  transition voltage_goes_normal_unexplained
    voltage_goes_normal_unexplained_0 true = 1 -> voltage := normal, limit_KV_Normal, count_as_fault;
  transition voltage_goes_high_unexplained
    voltage_goes_high_unexplained_0 true = 1 -> voltage := high, limit_KV_High, count_as_fault;
    voltage_goes_high_unexplained_1 true = 1 -> voltage := high, limit_KV_High_5, count_as_fault;
    voltage_goes_high_unexplained_2 true = 1 -> voltage := high, limit_KV_High_4, count_as_fault;
    voltage_goes_high_unexplained_3 true = 1 -> voltage := high, limit_KV_High_3, count_as_fault;
    voltage_goes_high_unexplained_4 true = 1 -> voltage := high, limit_KV_High_2, count_as_fault;
    voltage_goes_high_unexplained_5 true = 1 -> voltage := high, limit_KV_High_1, count_as_fault;
  transition voltage_goes_low_unexplained
    voltage_goes_low_unexplained_0 true = 1 -> voltage := low, limit_KV_Low, count_as_fault;
    voltage_goes_low_unexplained_1 true = 1 -> voltage := low, limit_KV_Low_5, count_as_fault;
    voltage_goes_low_unexplained_2 true = 1 -> voltage := low, limit_KV_Low_4, count_as_fault;
    voltage_goes_low_unexplained_3 true = 1 -> voltage := low, limit_KV_Low_3, count_as_fault;
    voltage_goes_low_unexplained_4 true = 1 -> voltage := low, limit_KV_Low_2, count_as_fault;
    voltage_goes_low_unexplained_5 true = 1 -> voltage := low, limit_KV_Low_1, count_as_fault;
  transition iso_state_changed_timeout
    iso_state_changed_timeout_0 true = 1 -> iso_state_changed := false;
  triggeredby [0.0..15.0] iso_state_changed = true;
  transition become_not_isolated
    become_not_isolated_0 true = 1 -> isolated := false, iso_state_changed := true;
  triggeredby set_isolated_false;
  transition become_isolated
    become_isolated_0 true = 1 -> isolated := true, iso_state_changed := true;
  triggeredby set_isolated_true;
}
component Bus_X52 = {
  connection generatorsXYZ0 : attached = Generator_X95;
  var mvar : {zero,high,low,normal};
  var mw : {zero,high,low,normal};
  var voltage : {zero,high,low,normal};
  var iso_state_changed : [0..1];
  var isolated : [0..1];
  event check_generators_off;
  event check_switched_in;
  event check_switched_out;
  event count_as_fault;
  event set_isolated_false;
  event set_isolated_true;
  event mvar_zero;
  event mvar_normal;
  event mvar_high;
  event mvar_low;
  event mw_zero;
  event mw_normal;
  event mw_high;
  event mw_low;
  event voltage_zero;
  event voltage_normal;
  event voltage_high;
  event voltage_low;
  event entered_zero_zone_MVAR;
  event limit_MVAR_High;
  event limit_MVAR_High_5;
  event limit_MVAR_High_4;
  event limit_MVAR_High_3;
  event limit_MVAR_High_2;
  event limit_MVAR_High_1;
  event limit_MVAR_Low;
  event limit_MVAR_Low_5;
  event limit_MVAR_Low_4;
  event limit_MVAR_Low_3;
  event limit_MVAR_Low_2;
  event limit_MVAR_Low_1;
  event limit_MVAR_Normal;
  event entered_zero_zone_MW;
  event limit_MW_High;
  event limit_MW_High_5;
  event limit_MW_High_4;
  event limit_MW_High_3;
  event limit_MW_High_2;
  event limit_MW_High_1;
  event limit_MW_Low;
  event limit_MW_Low_5;
  event limit_MW_Low_4;
  event limit_MW_Low_3;
  event limit_MW_Low_2;
  event limit_MW_Low_1;
  event limit_MW_Normal;
  event entered_zero_zone_KV;
  event limit_KV_High;
  event limit_KV_High_5;
  event limit_KV_High_4;
  event limit_KV_High_3;
  event limit_KV_High_2;
  event limit_KV_High_1;
  event limit_KV_Low;
  event limit_KV_Low_5;
  event limit_KV_Low_4;
  event limit_KV_Low_3;
  event limit_KV_Low_2;
  event limit_KV_Low_1;
  event limit_KV_Normal;
  transition mvar_goes_to_zero
    mvar_goes_to_zero_0 true = 1 -> mvar := zero, entered_zero_zone_MVAR;
  triggeredby mvar_zero;
  transition mvar_goes_normal
    mvar_goes_normal_0 true = 1 -> mvar := normal, limit_MVAR_Normal;
  triggeredby mvar_normal;
  transition mvar_goes_high
    mvar_goes_high_0 true = 1 -> mvar := high, limit_MVAR_High;
    mvar_goes_high_1 true = 1 -> mvar := high, limit_MVAR_High_5;
    mvar_goes_high_2 true = 1 -> mvar := high, limit_MVAR_High_4;
    mvar_goes_high_3 true = 1 -> mvar := high, limit_MVAR_High_3;
    mvar_goes_high_4 true = 1 -> mvar := high, limit_MVAR_High_2;
    mvar_goes_high_5 true = 1 -> mvar := high, limit_MVAR_High_1;
  triggeredby mvar_high;
  transition mvar_goes_low
    mvar_goes_low_0 true = 1 -> mvar := low, limit_MVAR_Low;
    mvar_goes_low_1 true = 1 -> mvar := low, limit_MVAR_Low_5;
    mvar_goes_low_2 true = 1 -> mvar := low, limit_MVAR_Low_4;
    mvar_goes_low_3 true = 1 -> mvar := low, limit_MVAR_Low_3;
    mvar_goes_low_4 true = 1 -> mvar := low, limit_MVAR_Low_2;
    mvar_goes_low_5 true = 1 -> mvar := low, limit_MVAR_Low_1;
  triggeredby mvar_low;
  transition mvar_goes_to_zero_unexplained
    mvar_goes_to_zero_unexplained_0 true = 1 -> mvar := zero, entered_zero_zone_MVAR, count_as_fault;
  transition mvar_goes_normal_unexplained
    mvar_goes_normal_unexplained_0 true = 1 -> mvar := normal, limit_MVAR_Normal, count_as_fault;
  transition mvar_goes_high_unexplained
    mvar_goes_high_unexplained_0 true = 1 -> mvar := high, limit_MVAR_High, count_as_fault;
    mvar_goes_high_unexplained_1 true = 1 -> mvar := high, limit_MVAR_High_5, count_as_fault;
    mvar_goes_high_unexplained_2 true = 1 -> mvar := high, limit_MVAR_High_4, count_as_fault;
    mvar_goes_high_unexplained_3 true = 1 -> mvar := high, limit_MVAR_High_3, count_as_fault;
    mvar_goes_high_unexplained_4 true = 1 -> mvar := high, limit_MVAR_High_2, count_as_fault;
    mvar_goes_high_unexplained_5 true = 1 -> mvar := high, limit_MVAR_High_1, count_as_fault;
  transition mvar_goes_low_unexplained
    mvar_goes_low_unexplained_0 true = 1 -> mvar := low, limit_MVAR_Low, count_as_fault;
    mvar_goes_low_unexplained_1 true = 1 -> mvar := low, limit_MVAR_Low_5, count_as_fault;
    mvar_goes_low_unexplained_2 true = 1 -> mvar := low, limit_MVAR_Low_4, count_as_fault;
    mvar_goes_low_unexplained_3 true = 1 -> mvar := low, limit_MVAR_Low_3, count_as_fault;
    mvar_goes_low_unexplained_4 true = 1 -> mvar := low, limit_MVAR_Low_2, count_as_fault;
    mvar_goes_low_unexplained_5 true = 1 -> mvar := low, limit_MVAR_Low_1, count_as_fault;
  transition mw_goes_normal_when_reenergised
    mw_goes_normal_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> mw := normal, limit_MW_Normal;
  transition mw_goes_high_when_reenergised
    mw_goes_high_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High;
    mw_goes_high_when_reenergised_1 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_5;
    mw_goes_high_when_reenergised_2 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_4;
    mw_goes_high_when_reenergised_3 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_3;
    mw_goes_high_when_reenergised_4 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_2;
    mw_goes_high_when_reenergised_5 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_1;
  transition mw_goes_low_when_reenergised
    mw_goes_low_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low;
    mw_goes_low_when_reenergised_1 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_5;
    mw_goes_low_when_reenergised_2 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_4;
    mw_goes_low_when_reenergised_3 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_3;
    mw_goes_low_when_reenergised_4 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_2;
    mw_goes_low_when_reenergised_5 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_1;
  transition mw_goes_to_zero_when_isolated
    mw_goes_to_zero_when_isolated_0 (isolated = true AND iso_state_changed = true) -> mw := zero, entered_zero_zone_MW, check_generators_off;
  transition mw_goes_low_when_isolated
    mw_goes_low_when_isolated_0 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low, check_generators_off;
    mw_goes_low_when_isolated_1 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_5, check_generators_off;
    mw_goes_low_when_isolated_2 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_4, check_generators_off;
    mw_goes_low_when_isolated_3 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_3, check_generators_off;
    mw_goes_low_when_isolated_4 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_2, check_generators_off;
    mw_goes_low_when_isolated_5 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_1, check_generators_off;
  transition mw_goes_to_zero
    mw_goes_to_zero_0 true = 1 -> mw := zero, entered_zero_zone_MW;
  triggeredby mw_zero;
  transition mw_goes_normal
    mw_goes_normal_0 true = 1 -> mw := normal, limit_MW_Normal;
  triggeredby mw_normal;
  transition mw_goes_high
    mw_goes_high_0 true = 1 -> mw := high, limit_MW_High;
    mw_goes_high_1 true = 1 -> mw := high, limit_MW_High_5;
    mw_goes_high_2 true = 1 -> mw := high, limit_MW_High_4;
    mw_goes_high_3 true = 1 -> mw := high, limit_MW_High_3;
    mw_goes_high_4 true = 1 -> mw := high, limit_MW_High_2;
    mw_goes_high_5 true = 1 -> mw := high, limit_MW_High_1;
  triggeredby mw_high;
  transition mw_goes_low
    mw_goes_low_0 true = 1 -> mw := low, limit_MW_Low;
    mw_goes_low_1 true = 1 -> mw := low, limit_MW_Low_5;
    mw_goes_low_2 true = 1 -> mw := low, limit_MW_Low_4;
    mw_goes_low_3 true = 1 -> mw := low, limit_MW_Low_3;
    mw_goes_low_4 true = 1 -> mw := low, limit_MW_Low_2;
    mw_goes_low_5 true = 1 -> mw := low, limit_MW_Low_1;
  triggeredby mw_low;
  transition mw_goes_to_zero_unexplained
    mw_goes_to_zero_unexplained_0 true = 1 -> mw := zero, entered_zero_zone_MW, count_as_fault;
  transition mw_goes_normal_unexplained
    mw_goes_normal_unexplained_0 true = 1 -> mw := normal, limit_MW_Normal, count_as_fault;
  transition mw_goes_high_unexplained
    mw_goes_high_unexplained_0 true = 1 -> mw := high, limit_MW_High, count_as_fault;
    mw_goes_high_unexplained_1 true = 1 -> mw := high, limit_MW_High_5, count_as_fault;
    mw_goes_high_unexplained_2 true = 1 -> mw := high, limit_MW_High_4, count_as_fault;
    mw_goes_high_unexplained_3 true = 1 -> mw := high, limit_MW_High_3, count_as_fault;
    mw_goes_high_unexplained_4 true = 1 -> mw := high, limit_MW_High_2, count_as_fault;
    mw_goes_high_unexplained_5 true = 1 -> mw := high, limit_MW_High_1, count_as_fault;
  transition mw_goes_low_unexplained
    mw_goes_low_unexplained_0 true = 1 -> mw := low, limit_MW_Low, count_as_fault;
    mw_goes_low_unexplained_1 true = 1 -> mw := low, limit_MW_Low_5, count_as_fault;
    mw_goes_low_unexplained_2 true = 1 -> mw := low, limit_MW_Low_4, count_as_fault;
    mw_goes_low_unexplained_3 true = 1 -> mw := low, limit_MW_Low_3, count_as_fault;
    mw_goes_low_unexplained_4 true = 1 -> mw := low, limit_MW_Low_2, count_as_fault;
    mw_goes_low_unexplained_5 true = 1 -> mw := low, limit_MW_Low_1, count_as_fault;
  transition voltage_goes_normal_when_caps_in
    voltage_goes_normal_when_caps_in_0 (voltage = low AND isolated = false) -> voltage := normal, limit_KV_Normal, check_switched_in;
  transition voltage_goes_normal_when_caps_out
    voltage_goes_normal_when_caps_out_0 (voltage = high AND isolated = false) -> voltage := normal, limit_KV_Normal, check_switched_out;
  transition voltage_goes_normal_when_reenergised
    voltage_goes_normal_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> voltage := normal, limit_KV_Normal;
  transition voltage_goes_high_when_reenergised
    voltage_goes_high_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High;
    voltage_goes_high_when_reenergised_1 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_5;
    voltage_goes_high_when_reenergised_2 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_4;
    voltage_goes_high_when_reenergised_3 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_3;
    voltage_goes_high_when_reenergised_4 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_2;
    voltage_goes_high_when_reenergised_5 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_1;
  transition voltage_goes_Low_when_reenergised
    voltage_goes_Low_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low;
    voltage_goes_Low_when_reenergised_1 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_5;
    voltage_goes_Low_when_reenergised_2 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_4;
    voltage_goes_Low_when_reenergised_3 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_3;
    voltage_goes_Low_when_reenergised_4 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_2;
    voltage_goes_Low_when_reenergised_5 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_1;
  transition voltage_goes_to_zero_when_isolated
    voltage_goes_to_zero_when_isolated_0 (isolated = true AND iso_state_changed = true) -> voltage := zero, entered_zero_zone_KV, check_generators_off;
  transition voltage_goes_low_when_isolated
    voltage_goes_low_when_isolated_0 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low, check_generators_off;
    voltage_goes_low_when_isolated_1 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_5, check_generators_off;
    voltage_goes_low_when_isolated_2 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_4, check_generators_off;
    voltage_goes_low_when_isolated_3 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_3, check_generators_off;
    voltage_goes_low_when_isolated_4 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_2, check_generators_off;
    voltage_goes_low_when_isolated_5 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_1, check_generators_off;
  transition voltage_goes_to_zero
    voltage_goes_to_zero_0 true = 1 -> voltage := zero, entered_zero_zone_KV;
  triggeredby voltage_zero;
  transition voltage_goes_normal
    voltage_goes_normal_0 true = 1 -> voltage := normal, limit_KV_Normal;
  triggeredby voltage_normal;
  transition voltage_goes_high
    voltage_goes_high_0 true = 1 -> voltage := high, limit_KV_High;
    voltage_goes_high_1 true = 1 -> voltage := high, limit_KV_High_5;
    voltage_goes_high_2 true = 1 -> voltage := high, limit_KV_High_4;
    voltage_goes_high_3 true = 1 -> voltage := high, limit_KV_High_3;
    voltage_goes_high_4 true = 1 -> voltage := high, limit_KV_High_2;
    voltage_goes_high_5 true = 1 -> voltage := high, limit_KV_High_1;
  triggeredby voltage_high;
  transition voltage_goes_low
    voltage_goes_low_0 true = 1 -> voltage := low, limit_KV_Low;
    voltage_goes_low_1 true = 1 -> voltage := low, limit_KV_Low_5;
    voltage_goes_low_2 true = 1 -> voltage := low, limit_KV_Low_4;
    voltage_goes_low_3 true = 1 -> voltage := low, limit_KV_Low_3;
    voltage_goes_low_4 true = 1 -> voltage := low, limit_KV_Low_2;
    voltage_goes_low_5 true = 1 -> voltage := low, limit_KV_Low_1;
  triggeredby voltage_low;
  transition voltage_goes_to_zero_unexplained
    voltage_goes_to_zero_unexplained_0 true = 1 -> voltage := zero, entered_zero_zone_KV, count_as_fault;
  transition voltage_goes_normal_unexplained
    voltage_goes_normal_unexplained_0 true = 1 -> voltage := normal, limit_KV_Normal, count_as_fault;
  transition voltage_goes_high_unexplained
    voltage_goes_high_unexplained_0 true = 1 -> voltage := high, limit_KV_High, count_as_fault;
    voltage_goes_high_unexplained_1 true = 1 -> voltage := high, limit_KV_High_5, count_as_fault;
    voltage_goes_high_unexplained_2 true = 1 -> voltage := high, limit_KV_High_4, count_as_fault;
    voltage_goes_high_unexplained_3 true = 1 -> voltage := high, limit_KV_High_3, count_as_fault;
    voltage_goes_high_unexplained_4 true = 1 -> voltage := high, limit_KV_High_2, count_as_fault;
    voltage_goes_high_unexplained_5 true = 1 -> voltage := high, limit_KV_High_1, count_as_fault;
  transition voltage_goes_low_unexplained
    voltage_goes_low_unexplained_0 true = 1 -> voltage := low, limit_KV_Low, count_as_fault;
    voltage_goes_low_unexplained_1 true = 1 -> voltage := low, limit_KV_Low_5, count_as_fault;
    voltage_goes_low_unexplained_2 true = 1 -> voltage := low, limit_KV_Low_4, count_as_fault;
    voltage_goes_low_unexplained_3 true = 1 -> voltage := low, limit_KV_Low_3, count_as_fault;
    voltage_goes_low_unexplained_4 true = 1 -> voltage := low, limit_KV_Low_2, count_as_fault;
    voltage_goes_low_unexplained_5 true = 1 -> voltage := low, limit_KV_Low_1, count_as_fault;
  transition iso_state_changed_timeout
    iso_state_changed_timeout_0 true = 1 -> iso_state_changed := false;
  triggeredby [0.0..15.0] iso_state_changed = true;
  transition become_not_isolated
    become_not_isolated_0 true = 1 -> isolated := false, iso_state_changed := true;
  triggeredby set_isolated_false;
  transition become_isolated
    become_isolated_0 true = 1 -> isolated := true, iso_state_changed := true;
  triggeredby set_isolated_true;
}
component Bus_X54 = {
  connection generatorsXYZ0 : attached = Generator_X96;
  var mvar : {zero,high,low,normal};
  var mw : {zero,high,low,normal};
  var voltage : {zero,high,low,normal};
  var iso_state_changed : [0..1];
  var isolated : [0..1];
  event check_generators_off;
  event check_switched_in;
  event check_switched_out;
  event count_as_fault;
  event set_isolated_false;
  event set_isolated_true;
  event mvar_zero;
  event mvar_normal;
  event mvar_high;
  event mvar_low;
  event mw_zero;
  event mw_normal;
  event mw_high;
  event mw_low;
  event voltage_zero;
  event voltage_normal;
  event voltage_high;
  event voltage_low;
  event entered_zero_zone_MVAR;
  event limit_MVAR_High;
  event limit_MVAR_High_5;
  event limit_MVAR_High_4;
  event limit_MVAR_High_3;
  event limit_MVAR_High_2;
  event limit_MVAR_High_1;
  event limit_MVAR_Low;
  event limit_MVAR_Low_5;
  event limit_MVAR_Low_4;
  event limit_MVAR_Low_3;
  event limit_MVAR_Low_2;
  event limit_MVAR_Low_1;
  event limit_MVAR_Normal;
  event entered_zero_zone_MW;
  event limit_MW_High;
  event limit_MW_High_5;
  event limit_MW_High_4;
  event limit_MW_High_3;
  event limit_MW_High_2;
  event limit_MW_High_1;
  event limit_MW_Low;
  event limit_MW_Low_5;
  event limit_MW_Low_4;
  event limit_MW_Low_3;
  event limit_MW_Low_2;
  event limit_MW_Low_1;
  event limit_MW_Normal;
  event entered_zero_zone_KV;
  event limit_KV_High;
  event limit_KV_High_5;
  event limit_KV_High_4;
  event limit_KV_High_3;
  event limit_KV_High_2;
  event limit_KV_High_1;
  event limit_KV_Low;
  event limit_KV_Low_5;
  event limit_KV_Low_4;
  event limit_KV_Low_3;
  event limit_KV_Low_2;
  event limit_KV_Low_1;
  event limit_KV_Normal;
  transition mvar_goes_to_zero
    mvar_goes_to_zero_0 true = 1 -> mvar := zero, entered_zero_zone_MVAR;
  triggeredby mvar_zero;
  transition mvar_goes_normal
    mvar_goes_normal_0 true = 1 -> mvar := normal, limit_MVAR_Normal;
  triggeredby mvar_normal;
  transition mvar_goes_high
    mvar_goes_high_0 true = 1 -> mvar := high, limit_MVAR_High;
    mvar_goes_high_1 true = 1 -> mvar := high, limit_MVAR_High_5;
    mvar_goes_high_2 true = 1 -> mvar := high, limit_MVAR_High_4;
    mvar_goes_high_3 true = 1 -> mvar := high, limit_MVAR_High_3;
    mvar_goes_high_4 true = 1 -> mvar := high, limit_MVAR_High_2;
    mvar_goes_high_5 true = 1 -> mvar := high, limit_MVAR_High_1;
  triggeredby mvar_high;
  transition mvar_goes_low
    mvar_goes_low_0 true = 1 -> mvar := low, limit_MVAR_Low;
    mvar_goes_low_1 true = 1 -> mvar := low, limit_MVAR_Low_5;
    mvar_goes_low_2 true = 1 -> mvar := low, limit_MVAR_Low_4;
    mvar_goes_low_3 true = 1 -> mvar := low, limit_MVAR_Low_3;
    mvar_goes_low_4 true = 1 -> mvar := low, limit_MVAR_Low_2;
    mvar_goes_low_5 true = 1 -> mvar := low, limit_MVAR_Low_1;
  triggeredby mvar_low;
  transition mvar_goes_to_zero_unexplained
    mvar_goes_to_zero_unexplained_0 true = 1 -> mvar := zero, entered_zero_zone_MVAR, count_as_fault;
  transition mvar_goes_normal_unexplained
    mvar_goes_normal_unexplained_0 true = 1 -> mvar := normal, limit_MVAR_Normal, count_as_fault;
  transition mvar_goes_high_unexplained
    mvar_goes_high_unexplained_0 true = 1 -> mvar := high, limit_MVAR_High, count_as_fault;
    mvar_goes_high_unexplained_1 true = 1 -> mvar := high, limit_MVAR_High_5, count_as_fault;
    mvar_goes_high_unexplained_2 true = 1 -> mvar := high, limit_MVAR_High_4, count_as_fault;
    mvar_goes_high_unexplained_3 true = 1 -> mvar := high, limit_MVAR_High_3, count_as_fault;
    mvar_goes_high_unexplained_4 true = 1 -> mvar := high, limit_MVAR_High_2, count_as_fault;
    mvar_goes_high_unexplained_5 true = 1 -> mvar := high, limit_MVAR_High_1, count_as_fault;
  transition mvar_goes_low_unexplained
    mvar_goes_low_unexplained_0 true = 1 -> mvar := low, limit_MVAR_Low, count_as_fault;
    mvar_goes_low_unexplained_1 true = 1 -> mvar := low, limit_MVAR_Low_5, count_as_fault;
    mvar_goes_low_unexplained_2 true = 1 -> mvar := low, limit_MVAR_Low_4, count_as_fault;
    mvar_goes_low_unexplained_3 true = 1 -> mvar := low, limit_MVAR_Low_3, count_as_fault;
    mvar_goes_low_unexplained_4 true = 1 -> mvar := low, limit_MVAR_Low_2, count_as_fault;
    mvar_goes_low_unexplained_5 true = 1 -> mvar := low, limit_MVAR_Low_1, count_as_fault;
  transition mw_goes_normal_when_reenergised
    mw_goes_normal_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> mw := normal, limit_MW_Normal;
  transition mw_goes_high_when_reenergised
    mw_goes_high_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High;
    mw_goes_high_when_reenergised_1 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_5;
    mw_goes_high_when_reenergised_2 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_4;
    mw_goes_high_when_reenergised_3 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_3;
    mw_goes_high_when_reenergised_4 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_2;
    mw_goes_high_when_reenergised_5 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_1;
  transition mw_goes_low_when_reenergised
    mw_goes_low_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low;
    mw_goes_low_when_reenergised_1 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_5;
    mw_goes_low_when_reenergised_2 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_4;
    mw_goes_low_when_reenergised_3 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_3;
    mw_goes_low_when_reenergised_4 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_2;
    mw_goes_low_when_reenergised_5 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_1;
  transition mw_goes_to_zero_when_isolated
    mw_goes_to_zero_when_isolated_0 (isolated = true AND iso_state_changed = true) -> mw := zero, entered_zero_zone_MW, check_generators_off;
  transition mw_goes_low_when_isolated
    mw_goes_low_when_isolated_0 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low, check_generators_off;
    mw_goes_low_when_isolated_1 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_5, check_generators_off;
    mw_goes_low_when_isolated_2 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_4, check_generators_off;
    mw_goes_low_when_isolated_3 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_3, check_generators_off;
    mw_goes_low_when_isolated_4 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_2, check_generators_off;
    mw_goes_low_when_isolated_5 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_1, check_generators_off;
  transition mw_goes_to_zero
    mw_goes_to_zero_0 true = 1 -> mw := zero, entered_zero_zone_MW;
  triggeredby mw_zero;
  transition mw_goes_normal
    mw_goes_normal_0 true = 1 -> mw := normal, limit_MW_Normal;
  triggeredby mw_normal;
  transition mw_goes_high
    mw_goes_high_0 true = 1 -> mw := high, limit_MW_High;
    mw_goes_high_1 true = 1 -> mw := high, limit_MW_High_5;
    mw_goes_high_2 true = 1 -> mw := high, limit_MW_High_4;
    mw_goes_high_3 true = 1 -> mw := high, limit_MW_High_3;
    mw_goes_high_4 true = 1 -> mw := high, limit_MW_High_2;
    mw_goes_high_5 true = 1 -> mw := high, limit_MW_High_1;
  triggeredby mw_high;
  transition mw_goes_low
    mw_goes_low_0 true = 1 -> mw := low, limit_MW_Low;
    mw_goes_low_1 true = 1 -> mw := low, limit_MW_Low_5;
    mw_goes_low_2 true = 1 -> mw := low, limit_MW_Low_4;
    mw_goes_low_3 true = 1 -> mw := low, limit_MW_Low_3;
    mw_goes_low_4 true = 1 -> mw := low, limit_MW_Low_2;
    mw_goes_low_5 true = 1 -> mw := low, limit_MW_Low_1;
  triggeredby mw_low;
  transition mw_goes_to_zero_unexplained
    mw_goes_to_zero_unexplained_0 true = 1 -> mw := zero, entered_zero_zone_MW, count_as_fault;
  transition mw_goes_normal_unexplained
    mw_goes_normal_unexplained_0 true = 1 -> mw := normal, limit_MW_Normal, count_as_fault;
  transition mw_goes_high_unexplained
    mw_goes_high_unexplained_0 true = 1 -> mw := high, limit_MW_High, count_as_fault;
    mw_goes_high_unexplained_1 true = 1 -> mw := high, limit_MW_High_5, count_as_fault;
    mw_goes_high_unexplained_2 true = 1 -> mw := high, limit_MW_High_4, count_as_fault;
    mw_goes_high_unexplained_3 true = 1 -> mw := high, limit_MW_High_3, count_as_fault;
    mw_goes_high_unexplained_4 true = 1 -> mw := high, limit_MW_High_2, count_as_fault;
    mw_goes_high_unexplained_5 true = 1 -> mw := high, limit_MW_High_1, count_as_fault;
  transition mw_goes_low_unexplained
    mw_goes_low_unexplained_0 true = 1 -> mw := low, limit_MW_Low, count_as_fault;
    mw_goes_low_unexplained_1 true = 1 -> mw := low, limit_MW_Low_5, count_as_fault;
    mw_goes_low_unexplained_2 true = 1 -> mw := low, limit_MW_Low_4, count_as_fault;
    mw_goes_low_unexplained_3 true = 1 -> mw := low, limit_MW_Low_3, count_as_fault;
    mw_goes_low_unexplained_4 true = 1 -> mw := low, limit_MW_Low_2, count_as_fault;
    mw_goes_low_unexplained_5 true = 1 -> mw := low, limit_MW_Low_1, count_as_fault;
  transition voltage_goes_normal_when_caps_in
    voltage_goes_normal_when_caps_in_0 (voltage = low AND isolated = false) -> voltage := normal, limit_KV_Normal, check_switched_in;
  transition voltage_goes_normal_when_caps_out
    voltage_goes_normal_when_caps_out_0 (voltage = high AND isolated = false) -> voltage := normal, limit_KV_Normal, check_switched_out;
  transition voltage_goes_normal_when_reenergised
    voltage_goes_normal_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> voltage := normal, limit_KV_Normal;
  transition voltage_goes_high_when_reenergised
    voltage_goes_high_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High;
    voltage_goes_high_when_reenergised_1 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_5;
    voltage_goes_high_when_reenergised_2 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_4;
    voltage_goes_high_when_reenergised_3 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_3;
    voltage_goes_high_when_reenergised_4 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_2;
    voltage_goes_high_when_reenergised_5 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_1;
  transition voltage_goes_Low_when_reenergised
    voltage_goes_Low_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low;
    voltage_goes_Low_when_reenergised_1 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_5;
    voltage_goes_Low_when_reenergised_2 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_4;
    voltage_goes_Low_when_reenergised_3 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_3;
    voltage_goes_Low_when_reenergised_4 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_2;
    voltage_goes_Low_when_reenergised_5 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_1;
  transition voltage_goes_to_zero_when_isolated
    voltage_goes_to_zero_when_isolated_0 (isolated = true AND iso_state_changed = true) -> voltage := zero, entered_zero_zone_KV, check_generators_off;
  transition voltage_goes_low_when_isolated
    voltage_goes_low_when_isolated_0 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low, check_generators_off;
    voltage_goes_low_when_isolated_1 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_5, check_generators_off;
    voltage_goes_low_when_isolated_2 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_4, check_generators_off;
    voltage_goes_low_when_isolated_3 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_3, check_generators_off;
    voltage_goes_low_when_isolated_4 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_2, check_generators_off;
    voltage_goes_low_when_isolated_5 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_1, check_generators_off;
  transition voltage_goes_to_zero
    voltage_goes_to_zero_0 true = 1 -> voltage := zero, entered_zero_zone_KV;
  triggeredby voltage_zero;
  transition voltage_goes_normal
    voltage_goes_normal_0 true = 1 -> voltage := normal, limit_KV_Normal;
  triggeredby voltage_normal;
  transition voltage_goes_high
    voltage_goes_high_0 true = 1 -> voltage := high, limit_KV_High;
    voltage_goes_high_1 true = 1 -> voltage := high, limit_KV_High_5;
    voltage_goes_high_2 true = 1 -> voltage := high, limit_KV_High_4;
    voltage_goes_high_3 true = 1 -> voltage := high, limit_KV_High_3;
    voltage_goes_high_4 true = 1 -> voltage := high, limit_KV_High_2;
    voltage_goes_high_5 true = 1 -> voltage := high, limit_KV_High_1;
  triggeredby voltage_high;
  transition voltage_goes_low
    voltage_goes_low_0 true = 1 -> voltage := low, limit_KV_Low;
    voltage_goes_low_1 true = 1 -> voltage := low, limit_KV_Low_5;
    voltage_goes_low_2 true = 1 -> voltage := low, limit_KV_Low_4;
    voltage_goes_low_3 true = 1 -> voltage := low, limit_KV_Low_3;
    voltage_goes_low_4 true = 1 -> voltage := low, limit_KV_Low_2;
    voltage_goes_low_5 true = 1 -> voltage := low, limit_KV_Low_1;
  triggeredby voltage_low;
  transition voltage_goes_to_zero_unexplained
    voltage_goes_to_zero_unexplained_0 true = 1 -> voltage := zero, entered_zero_zone_KV, count_as_fault;
  transition voltage_goes_normal_unexplained
    voltage_goes_normal_unexplained_0 true = 1 -> voltage := normal, limit_KV_Normal, count_as_fault;
  transition voltage_goes_high_unexplained
    voltage_goes_high_unexplained_0 true = 1 -> voltage := high, limit_KV_High, count_as_fault;
    voltage_goes_high_unexplained_1 true = 1 -> voltage := high, limit_KV_High_5, count_as_fault;
    voltage_goes_high_unexplained_2 true = 1 -> voltage := high, limit_KV_High_4, count_as_fault;
    voltage_goes_high_unexplained_3 true = 1 -> voltage := high, limit_KV_High_3, count_as_fault;
    voltage_goes_high_unexplained_4 true = 1 -> voltage := high, limit_KV_High_2, count_as_fault;
    voltage_goes_high_unexplained_5 true = 1 -> voltage := high, limit_KV_High_1, count_as_fault;
  transition voltage_goes_low_unexplained
    voltage_goes_low_unexplained_0 true = 1 -> voltage := low, limit_KV_Low, count_as_fault;
    voltage_goes_low_unexplained_1 true = 1 -> voltage := low, limit_KV_Low_5, count_as_fault;
    voltage_goes_low_unexplained_2 true = 1 -> voltage := low, limit_KV_Low_4, count_as_fault;
    voltage_goes_low_unexplained_3 true = 1 -> voltage := low, limit_KV_Low_3, count_as_fault;
    voltage_goes_low_unexplained_4 true = 1 -> voltage := low, limit_KV_Low_2, count_as_fault;
    voltage_goes_low_unexplained_5 true = 1 -> voltage := low, limit_KV_Low_1, count_as_fault;
  transition iso_state_changed_timeout
    iso_state_changed_timeout_0 true = 1 -> iso_state_changed := false;
  triggeredby [0.0..15.0] iso_state_changed = true;
  transition become_not_isolated
    become_not_isolated_0 true = 1 -> isolated := false, iso_state_changed := true;
  triggeredby set_isolated_false;
  transition become_isolated
    become_isolated_0 true = 1 -> isolated := true, iso_state_changed := true;
  triggeredby set_isolated_true;
}
component Bus_X56 = {
  connection generatorsXYZ0 : attached = Generator_X97;
  var mvar : {zero,high,low,normal};
  var mw : {zero,high,low,normal};
  var voltage : {zero,high,low,normal};
  var iso_state_changed : [0..1];
  var isolated : [0..1];
  event check_generators_off;
  event check_switched_in;
  event check_switched_out;
  event count_as_fault;
  event set_isolated_false;
  event set_isolated_true;
  event mvar_zero;
  event mvar_normal;
  event mvar_high;
  event mvar_low;
  event mw_zero;
  event mw_normal;
  event mw_high;
  event mw_low;
  event voltage_zero;
  event voltage_normal;
  event voltage_high;
  event voltage_low;
  event entered_zero_zone_MVAR;
  event limit_MVAR_High;
  event limit_MVAR_High_5;
  event limit_MVAR_High_4;
  event limit_MVAR_High_3;
  event limit_MVAR_High_2;
  event limit_MVAR_High_1;
  event limit_MVAR_Low;
  event limit_MVAR_Low_5;
  event limit_MVAR_Low_4;
  event limit_MVAR_Low_3;
  event limit_MVAR_Low_2;
  event limit_MVAR_Low_1;
  event limit_MVAR_Normal;
  event entered_zero_zone_MW;
  event limit_MW_High;
  event limit_MW_High_5;
  event limit_MW_High_4;
  event limit_MW_High_3;
  event limit_MW_High_2;
  event limit_MW_High_1;
  event limit_MW_Low;
  event limit_MW_Low_5;
  event limit_MW_Low_4;
  event limit_MW_Low_3;
  event limit_MW_Low_2;
  event limit_MW_Low_1;
  event limit_MW_Normal;
  event entered_zero_zone_KV;
  event limit_KV_High;
  event limit_KV_High_5;
  event limit_KV_High_4;
  event limit_KV_High_3;
  event limit_KV_High_2;
  event limit_KV_High_1;
  event limit_KV_Low;
  event limit_KV_Low_5;
  event limit_KV_Low_4;
  event limit_KV_Low_3;
  event limit_KV_Low_2;
  event limit_KV_Low_1;
  event limit_KV_Normal;
  transition mvar_goes_to_zero
    mvar_goes_to_zero_0 true = 1 -> mvar := zero, entered_zero_zone_MVAR;
  triggeredby mvar_zero;
  transition mvar_goes_normal
    mvar_goes_normal_0 true = 1 -> mvar := normal, limit_MVAR_Normal;
  triggeredby mvar_normal;
  transition mvar_goes_high
    mvar_goes_high_0 true = 1 -> mvar := high, limit_MVAR_High;
    mvar_goes_high_1 true = 1 -> mvar := high, limit_MVAR_High_5;
    mvar_goes_high_2 true = 1 -> mvar := high, limit_MVAR_High_4;
    mvar_goes_high_3 true = 1 -> mvar := high, limit_MVAR_High_3;
    mvar_goes_high_4 true = 1 -> mvar := high, limit_MVAR_High_2;
    mvar_goes_high_5 true = 1 -> mvar := high, limit_MVAR_High_1;
  triggeredby mvar_high;
  transition mvar_goes_low
    mvar_goes_low_0 true = 1 -> mvar := low, limit_MVAR_Low;
    mvar_goes_low_1 true = 1 -> mvar := low, limit_MVAR_Low_5;
    mvar_goes_low_2 true = 1 -> mvar := low, limit_MVAR_Low_4;
    mvar_goes_low_3 true = 1 -> mvar := low, limit_MVAR_Low_3;
    mvar_goes_low_4 true = 1 -> mvar := low, limit_MVAR_Low_2;
    mvar_goes_low_5 true = 1 -> mvar := low, limit_MVAR_Low_1;
  triggeredby mvar_low;
  transition mvar_goes_to_zero_unexplained
    mvar_goes_to_zero_unexplained_0 true = 1 -> mvar := zero, entered_zero_zone_MVAR, count_as_fault;
  transition mvar_goes_normal_unexplained
    mvar_goes_normal_unexplained_0 true = 1 -> mvar := normal, limit_MVAR_Normal, count_as_fault;
  transition mvar_goes_high_unexplained
    mvar_goes_high_unexplained_0 true = 1 -> mvar := high, limit_MVAR_High, count_as_fault;
    mvar_goes_high_unexplained_1 true = 1 -> mvar := high, limit_MVAR_High_5, count_as_fault;
    mvar_goes_high_unexplained_2 true = 1 -> mvar := high, limit_MVAR_High_4, count_as_fault;
    mvar_goes_high_unexplained_3 true = 1 -> mvar := high, limit_MVAR_High_3, count_as_fault;
    mvar_goes_high_unexplained_4 true = 1 -> mvar := high, limit_MVAR_High_2, count_as_fault;
    mvar_goes_high_unexplained_5 true = 1 -> mvar := high, limit_MVAR_High_1, count_as_fault;
  transition mvar_goes_low_unexplained
    mvar_goes_low_unexplained_0 true = 1 -> mvar := low, limit_MVAR_Low, count_as_fault;
    mvar_goes_low_unexplained_1 true = 1 -> mvar := low, limit_MVAR_Low_5, count_as_fault;
    mvar_goes_low_unexplained_2 true = 1 -> mvar := low, limit_MVAR_Low_4, count_as_fault;
    mvar_goes_low_unexplained_3 true = 1 -> mvar := low, limit_MVAR_Low_3, count_as_fault;
    mvar_goes_low_unexplained_4 true = 1 -> mvar := low, limit_MVAR_Low_2, count_as_fault;
    mvar_goes_low_unexplained_5 true = 1 -> mvar := low, limit_MVAR_Low_1, count_as_fault;
  transition mw_goes_normal_when_reenergised
    mw_goes_normal_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> mw := normal, limit_MW_Normal;
  transition mw_goes_high_when_reenergised
    mw_goes_high_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High;
    mw_goes_high_when_reenergised_1 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_5;
    mw_goes_high_when_reenergised_2 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_4;
    mw_goes_high_when_reenergised_3 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_3;
    mw_goes_high_when_reenergised_4 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_2;
    mw_goes_high_when_reenergised_5 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_1;
  transition mw_goes_low_when_reenergised
    mw_goes_low_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low;
    mw_goes_low_when_reenergised_1 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_5;
    mw_goes_low_when_reenergised_2 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_4;
    mw_goes_low_when_reenergised_3 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_3;
    mw_goes_low_when_reenergised_4 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_2;
    mw_goes_low_when_reenergised_5 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_1;
  transition mw_goes_to_zero_when_isolated
    mw_goes_to_zero_when_isolated_0 (isolated = true AND iso_state_changed = true) -> mw := zero, entered_zero_zone_MW, check_generators_off;
  transition mw_goes_low_when_isolated
    mw_goes_low_when_isolated_0 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low, check_generators_off;
    mw_goes_low_when_isolated_1 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_5, check_generators_off;
    mw_goes_low_when_isolated_2 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_4, check_generators_off;
    mw_goes_low_when_isolated_3 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_3, check_generators_off;
    mw_goes_low_when_isolated_4 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_2, check_generators_off;
    mw_goes_low_when_isolated_5 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_1, check_generators_off;
  transition mw_goes_to_zero
    mw_goes_to_zero_0 true = 1 -> mw := zero, entered_zero_zone_MW;
  triggeredby mw_zero;
  transition mw_goes_normal
    mw_goes_normal_0 true = 1 -> mw := normal, limit_MW_Normal;
  triggeredby mw_normal;
  transition mw_goes_high
    mw_goes_high_0 true = 1 -> mw := high, limit_MW_High;
    mw_goes_high_1 true = 1 -> mw := high, limit_MW_High_5;
    mw_goes_high_2 true = 1 -> mw := high, limit_MW_High_4;
    mw_goes_high_3 true = 1 -> mw := high, limit_MW_High_3;
    mw_goes_high_4 true = 1 -> mw := high, limit_MW_High_2;
    mw_goes_high_5 true = 1 -> mw := high, limit_MW_High_1;
  triggeredby mw_high;
  transition mw_goes_low
    mw_goes_low_0 true = 1 -> mw := low, limit_MW_Low;
    mw_goes_low_1 true = 1 -> mw := low, limit_MW_Low_5;
    mw_goes_low_2 true = 1 -> mw := low, limit_MW_Low_4;
    mw_goes_low_3 true = 1 -> mw := low, limit_MW_Low_3;
    mw_goes_low_4 true = 1 -> mw := low, limit_MW_Low_2;
    mw_goes_low_5 true = 1 -> mw := low, limit_MW_Low_1;
  triggeredby mw_low;
  transition mw_goes_to_zero_unexplained
    mw_goes_to_zero_unexplained_0 true = 1 -> mw := zero, entered_zero_zone_MW, count_as_fault;
  transition mw_goes_normal_unexplained
    mw_goes_normal_unexplained_0 true = 1 -> mw := normal, limit_MW_Normal, count_as_fault;
  transition mw_goes_high_unexplained
    mw_goes_high_unexplained_0 true = 1 -> mw := high, limit_MW_High, count_as_fault;
    mw_goes_high_unexplained_1 true = 1 -> mw := high, limit_MW_High_5, count_as_fault;
    mw_goes_high_unexplained_2 true = 1 -> mw := high, limit_MW_High_4, count_as_fault;
    mw_goes_high_unexplained_3 true = 1 -> mw := high, limit_MW_High_3, count_as_fault;
    mw_goes_high_unexplained_4 true = 1 -> mw := high, limit_MW_High_2, count_as_fault;
    mw_goes_high_unexplained_5 true = 1 -> mw := high, limit_MW_High_1, count_as_fault;
  transition mw_goes_low_unexplained
    mw_goes_low_unexplained_0 true = 1 -> mw := low, limit_MW_Low, count_as_fault;
    mw_goes_low_unexplained_1 true = 1 -> mw := low, limit_MW_Low_5, count_as_fault;
    mw_goes_low_unexplained_2 true = 1 -> mw := low, limit_MW_Low_4, count_as_fault;
    mw_goes_low_unexplained_3 true = 1 -> mw := low, limit_MW_Low_3, count_as_fault;
    mw_goes_low_unexplained_4 true = 1 -> mw := low, limit_MW_Low_2, count_as_fault;
    mw_goes_low_unexplained_5 true = 1 -> mw := low, limit_MW_Low_1, count_as_fault;
  transition voltage_goes_normal_when_caps_in
    voltage_goes_normal_when_caps_in_0 (voltage = low AND isolated = false) -> voltage := normal, limit_KV_Normal, check_switched_in;
  transition voltage_goes_normal_when_caps_out
    voltage_goes_normal_when_caps_out_0 (voltage = high AND isolated = false) -> voltage := normal, limit_KV_Normal, check_switched_out;
  transition voltage_goes_normal_when_reenergised
    voltage_goes_normal_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> voltage := normal, limit_KV_Normal;
  transition voltage_goes_high_when_reenergised
    voltage_goes_high_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High;
    voltage_goes_high_when_reenergised_1 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_5;
    voltage_goes_high_when_reenergised_2 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_4;
    voltage_goes_high_when_reenergised_3 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_3;
    voltage_goes_high_when_reenergised_4 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_2;
    voltage_goes_high_when_reenergised_5 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_1;
  transition voltage_goes_Low_when_reenergised
    voltage_goes_Low_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low;
    voltage_goes_Low_when_reenergised_1 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_5;
    voltage_goes_Low_when_reenergised_2 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_4;
    voltage_goes_Low_when_reenergised_3 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_3;
    voltage_goes_Low_when_reenergised_4 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_2;
    voltage_goes_Low_when_reenergised_5 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_1;
  transition voltage_goes_to_zero_when_isolated
    voltage_goes_to_zero_when_isolated_0 (isolated = true AND iso_state_changed = true) -> voltage := zero, entered_zero_zone_KV, check_generators_off;
  transition voltage_goes_low_when_isolated
    voltage_goes_low_when_isolated_0 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low, check_generators_off;
    voltage_goes_low_when_isolated_1 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_5, check_generators_off;
    voltage_goes_low_when_isolated_2 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_4, check_generators_off;
    voltage_goes_low_when_isolated_3 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_3, check_generators_off;
    voltage_goes_low_when_isolated_4 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_2, check_generators_off;
    voltage_goes_low_when_isolated_5 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_1, check_generators_off;
  transition voltage_goes_to_zero
    voltage_goes_to_zero_0 true = 1 -> voltage := zero, entered_zero_zone_KV;
  triggeredby voltage_zero;
  transition voltage_goes_normal
    voltage_goes_normal_0 true = 1 -> voltage := normal, limit_KV_Normal;
  triggeredby voltage_normal;
  transition voltage_goes_high
    voltage_goes_high_0 true = 1 -> voltage := high, limit_KV_High;
    voltage_goes_high_1 true = 1 -> voltage := high, limit_KV_High_5;
    voltage_goes_high_2 true = 1 -> voltage := high, limit_KV_High_4;
    voltage_goes_high_3 true = 1 -> voltage := high, limit_KV_High_3;
    voltage_goes_high_4 true = 1 -> voltage := high, limit_KV_High_2;
    voltage_goes_high_5 true = 1 -> voltage := high, limit_KV_High_1;
  triggeredby voltage_high;
  transition voltage_goes_low
    voltage_goes_low_0 true = 1 -> voltage := low, limit_KV_Low;
    voltage_goes_low_1 true = 1 -> voltage := low, limit_KV_Low_5;
    voltage_goes_low_2 true = 1 -> voltage := low, limit_KV_Low_4;
    voltage_goes_low_3 true = 1 -> voltage := low, limit_KV_Low_3;
    voltage_goes_low_4 true = 1 -> voltage := low, limit_KV_Low_2;
    voltage_goes_low_5 true = 1 -> voltage := low, limit_KV_Low_1;
  triggeredby voltage_low;
  transition voltage_goes_to_zero_unexplained
    voltage_goes_to_zero_unexplained_0 true = 1 -> voltage := zero, entered_zero_zone_KV, count_as_fault;
  transition voltage_goes_normal_unexplained
    voltage_goes_normal_unexplained_0 true = 1 -> voltage := normal, limit_KV_Normal, count_as_fault;
  transition voltage_goes_high_unexplained
    voltage_goes_high_unexplained_0 true = 1 -> voltage := high, limit_KV_High, count_as_fault;
    voltage_goes_high_unexplained_1 true = 1 -> voltage := high, limit_KV_High_5, count_as_fault;
    voltage_goes_high_unexplained_2 true = 1 -> voltage := high, limit_KV_High_4, count_as_fault;
    voltage_goes_high_unexplained_3 true = 1 -> voltage := high, limit_KV_High_3, count_as_fault;
    voltage_goes_high_unexplained_4 true = 1 -> voltage := high, limit_KV_High_2, count_as_fault;
    voltage_goes_high_unexplained_5 true = 1 -> voltage := high, limit_KV_High_1, count_as_fault;
  transition voltage_goes_low_unexplained
    voltage_goes_low_unexplained_0 true = 1 -> voltage := low, limit_KV_Low, count_as_fault;
    voltage_goes_low_unexplained_1 true = 1 -> voltage := low, limit_KV_Low_5, count_as_fault;
    voltage_goes_low_unexplained_2 true = 1 -> voltage := low, limit_KV_Low_4, count_as_fault;
    voltage_goes_low_unexplained_3 true = 1 -> voltage := low, limit_KV_Low_3, count_as_fault;
    voltage_goes_low_unexplained_4 true = 1 -> voltage := low, limit_KV_Low_2, count_as_fault;
    voltage_goes_low_unexplained_5 true = 1 -> voltage := low, limit_KV_Low_1, count_as_fault;
  transition iso_state_changed_timeout
    iso_state_changed_timeout_0 true = 1 -> iso_state_changed := false;
  triggeredby [0.0..15.0] iso_state_changed = true;
  transition become_not_isolated
    become_not_isolated_0 true = 1 -> isolated := false, iso_state_changed := true;
  triggeredby set_isolated_false;
  transition become_isolated
    become_isolated_0 true = 1 -> isolated := true, iso_state_changed := true;
  triggeredby set_isolated_true;
}
component Bus_X58 = {
  connection generatorsXYZ0 : attached = Generator_X98;
  var mvar : {zero,high,low,normal};
  var mw : {zero,high,low,normal};
  var voltage : {zero,high,low,normal};
  var iso_state_changed : [0..1];
  var isolated : [0..1];
  event check_generators_off;
  event check_switched_in;
  event check_switched_out;
  event count_as_fault;
  event set_isolated_false;
  event set_isolated_true;
  event mvar_zero;
  event mvar_normal;
  event mvar_high;
  event mvar_low;
  event mw_zero;
  event mw_normal;
  event mw_high;
  event mw_low;
  event voltage_zero;
  event voltage_normal;
  event voltage_high;
  event voltage_low;
  event entered_zero_zone_MVAR;
  event limit_MVAR_High;
  event limit_MVAR_High_5;
  event limit_MVAR_High_4;
  event limit_MVAR_High_3;
  event limit_MVAR_High_2;
  event limit_MVAR_High_1;
  event limit_MVAR_Low;
  event limit_MVAR_Low_5;
  event limit_MVAR_Low_4;
  event limit_MVAR_Low_3;
  event limit_MVAR_Low_2;
  event limit_MVAR_Low_1;
  event limit_MVAR_Normal;
  event entered_zero_zone_MW;
  event limit_MW_High;
  event limit_MW_High_5;
  event limit_MW_High_4;
  event limit_MW_High_3;
  event limit_MW_High_2;
  event limit_MW_High_1;
  event limit_MW_Low;
  event limit_MW_Low_5;
  event limit_MW_Low_4;
  event limit_MW_Low_3;
  event limit_MW_Low_2;
  event limit_MW_Low_1;
  event limit_MW_Normal;
  event entered_zero_zone_KV;
  event limit_KV_High;
  event limit_KV_High_5;
  event limit_KV_High_4;
  event limit_KV_High_3;
  event limit_KV_High_2;
  event limit_KV_High_1;
  event limit_KV_Low;
  event limit_KV_Low_5;
  event limit_KV_Low_4;
  event limit_KV_Low_3;
  event limit_KV_Low_2;
  event limit_KV_Low_1;
  event limit_KV_Normal;
  transition mvar_goes_to_zero
    mvar_goes_to_zero_0 true = 1 -> mvar := zero, entered_zero_zone_MVAR;
  triggeredby mvar_zero;
  transition mvar_goes_normal
    mvar_goes_normal_0 true = 1 -> mvar := normal, limit_MVAR_Normal;
  triggeredby mvar_normal;
  transition mvar_goes_high
    mvar_goes_high_0 true = 1 -> mvar := high, limit_MVAR_High;
    mvar_goes_high_1 true = 1 -> mvar := high, limit_MVAR_High_5;
    mvar_goes_high_2 true = 1 -> mvar := high, limit_MVAR_High_4;
    mvar_goes_high_3 true = 1 -> mvar := high, limit_MVAR_High_3;
    mvar_goes_high_4 true = 1 -> mvar := high, limit_MVAR_High_2;
    mvar_goes_high_5 true = 1 -> mvar := high, limit_MVAR_High_1;
  triggeredby mvar_high;
  transition mvar_goes_low
    mvar_goes_low_0 true = 1 -> mvar := low, limit_MVAR_Low;
    mvar_goes_low_1 true = 1 -> mvar := low, limit_MVAR_Low_5;
    mvar_goes_low_2 true = 1 -> mvar := low, limit_MVAR_Low_4;
    mvar_goes_low_3 true = 1 -> mvar := low, limit_MVAR_Low_3;
    mvar_goes_low_4 true = 1 -> mvar := low, limit_MVAR_Low_2;
    mvar_goes_low_5 true = 1 -> mvar := low, limit_MVAR_Low_1;
  triggeredby mvar_low;
  transition mvar_goes_to_zero_unexplained
    mvar_goes_to_zero_unexplained_0 true = 1 -> mvar := zero, entered_zero_zone_MVAR, count_as_fault;
  transition mvar_goes_normal_unexplained
    mvar_goes_normal_unexplained_0 true = 1 -> mvar := normal, limit_MVAR_Normal, count_as_fault;
  transition mvar_goes_high_unexplained
    mvar_goes_high_unexplained_0 true = 1 -> mvar := high, limit_MVAR_High, count_as_fault;
    mvar_goes_high_unexplained_1 true = 1 -> mvar := high, limit_MVAR_High_5, count_as_fault;
    mvar_goes_high_unexplained_2 true = 1 -> mvar := high, limit_MVAR_High_4, count_as_fault;
    mvar_goes_high_unexplained_3 true = 1 -> mvar := high, limit_MVAR_High_3, count_as_fault;
    mvar_goes_high_unexplained_4 true = 1 -> mvar := high, limit_MVAR_High_2, count_as_fault;
    mvar_goes_high_unexplained_5 true = 1 -> mvar := high, limit_MVAR_High_1, count_as_fault;
  transition mvar_goes_low_unexplained
    mvar_goes_low_unexplained_0 true = 1 -> mvar := low, limit_MVAR_Low, count_as_fault;
    mvar_goes_low_unexplained_1 true = 1 -> mvar := low, limit_MVAR_Low_5, count_as_fault;
    mvar_goes_low_unexplained_2 true = 1 -> mvar := low, limit_MVAR_Low_4, count_as_fault;
    mvar_goes_low_unexplained_3 true = 1 -> mvar := low, limit_MVAR_Low_3, count_as_fault;
    mvar_goes_low_unexplained_4 true = 1 -> mvar := low, limit_MVAR_Low_2, count_as_fault;
    mvar_goes_low_unexplained_5 true = 1 -> mvar := low, limit_MVAR_Low_1, count_as_fault;
  transition mw_goes_normal_when_reenergised
    mw_goes_normal_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> mw := normal, limit_MW_Normal;
  transition mw_goes_high_when_reenergised
    mw_goes_high_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High;
    mw_goes_high_when_reenergised_1 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_5;
    mw_goes_high_when_reenergised_2 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_4;
    mw_goes_high_when_reenergised_3 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_3;
    mw_goes_high_when_reenergised_4 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_2;
    mw_goes_high_when_reenergised_5 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_1;
  transition mw_goes_low_when_reenergised
    mw_goes_low_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low;
    mw_goes_low_when_reenergised_1 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_5;
    mw_goes_low_when_reenergised_2 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_4;
    mw_goes_low_when_reenergised_3 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_3;
    mw_goes_low_when_reenergised_4 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_2;
    mw_goes_low_when_reenergised_5 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_1;
  transition mw_goes_to_zero_when_isolated
    mw_goes_to_zero_when_isolated_0 (isolated = true AND iso_state_changed = true) -> mw := zero, entered_zero_zone_MW, check_generators_off;
  transition mw_goes_low_when_isolated
    mw_goes_low_when_isolated_0 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low, check_generators_off;
    mw_goes_low_when_isolated_1 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_5, check_generators_off;
    mw_goes_low_when_isolated_2 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_4, check_generators_off;
    mw_goes_low_when_isolated_3 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_3, check_generators_off;
    mw_goes_low_when_isolated_4 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_2, check_generators_off;
    mw_goes_low_when_isolated_5 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_1, check_generators_off;
  transition mw_goes_to_zero
    mw_goes_to_zero_0 true = 1 -> mw := zero, entered_zero_zone_MW;
  triggeredby mw_zero;
  transition mw_goes_normal
    mw_goes_normal_0 true = 1 -> mw := normal, limit_MW_Normal;
  triggeredby mw_normal;
  transition mw_goes_high
    mw_goes_high_0 true = 1 -> mw := high, limit_MW_High;
    mw_goes_high_1 true = 1 -> mw := high, limit_MW_High_5;
    mw_goes_high_2 true = 1 -> mw := high, limit_MW_High_4;
    mw_goes_high_3 true = 1 -> mw := high, limit_MW_High_3;
    mw_goes_high_4 true = 1 -> mw := high, limit_MW_High_2;
    mw_goes_high_5 true = 1 -> mw := high, limit_MW_High_1;
  triggeredby mw_high;
  transition mw_goes_low
    mw_goes_low_0 true = 1 -> mw := low, limit_MW_Low;
    mw_goes_low_1 true = 1 -> mw := low, limit_MW_Low_5;
    mw_goes_low_2 true = 1 -> mw := low, limit_MW_Low_4;
    mw_goes_low_3 true = 1 -> mw := low, limit_MW_Low_3;
    mw_goes_low_4 true = 1 -> mw := low, limit_MW_Low_2;
    mw_goes_low_5 true = 1 -> mw := low, limit_MW_Low_1;
  triggeredby mw_low;
  transition mw_goes_to_zero_unexplained
    mw_goes_to_zero_unexplained_0 true = 1 -> mw := zero, entered_zero_zone_MW, count_as_fault;
  transition mw_goes_normal_unexplained
    mw_goes_normal_unexplained_0 true = 1 -> mw := normal, limit_MW_Normal, count_as_fault;
  transition mw_goes_high_unexplained
    mw_goes_high_unexplained_0 true = 1 -> mw := high, limit_MW_High, count_as_fault;
    mw_goes_high_unexplained_1 true = 1 -> mw := high, limit_MW_High_5, count_as_fault;
    mw_goes_high_unexplained_2 true = 1 -> mw := high, limit_MW_High_4, count_as_fault;
    mw_goes_high_unexplained_3 true = 1 -> mw := high, limit_MW_High_3, count_as_fault;
    mw_goes_high_unexplained_4 true = 1 -> mw := high, limit_MW_High_2, count_as_fault;
    mw_goes_high_unexplained_5 true = 1 -> mw := high, limit_MW_High_1, count_as_fault;
  transition mw_goes_low_unexplained
    mw_goes_low_unexplained_0 true = 1 -> mw := low, limit_MW_Low, count_as_fault;
    mw_goes_low_unexplained_1 true = 1 -> mw := low, limit_MW_Low_5, count_as_fault;
    mw_goes_low_unexplained_2 true = 1 -> mw := low, limit_MW_Low_4, count_as_fault;
    mw_goes_low_unexplained_3 true = 1 -> mw := low, limit_MW_Low_3, count_as_fault;
    mw_goes_low_unexplained_4 true = 1 -> mw := low, limit_MW_Low_2, count_as_fault;
    mw_goes_low_unexplained_5 true = 1 -> mw := low, limit_MW_Low_1, count_as_fault;
  transition voltage_goes_normal_when_caps_in
    voltage_goes_normal_when_caps_in_0 (voltage = low AND isolated = false) -> voltage := normal, limit_KV_Normal, check_switched_in;
  transition voltage_goes_normal_when_caps_out
    voltage_goes_normal_when_caps_out_0 (voltage = high AND isolated = false) -> voltage := normal, limit_KV_Normal, check_switched_out;
  transition voltage_goes_normal_when_reenergised
    voltage_goes_normal_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> voltage := normal, limit_KV_Normal;
  transition voltage_goes_high_when_reenergised
    voltage_goes_high_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High;
    voltage_goes_high_when_reenergised_1 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_5;
    voltage_goes_high_when_reenergised_2 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_4;
    voltage_goes_high_when_reenergised_3 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_3;
    voltage_goes_high_when_reenergised_4 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_2;
    voltage_goes_high_when_reenergised_5 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_1;
  transition voltage_goes_Low_when_reenergised
    voltage_goes_Low_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low;
    voltage_goes_Low_when_reenergised_1 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_5;
    voltage_goes_Low_when_reenergised_2 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_4;
    voltage_goes_Low_when_reenergised_3 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_3;
    voltage_goes_Low_when_reenergised_4 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_2;
    voltage_goes_Low_when_reenergised_5 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_1;
  transition voltage_goes_to_zero_when_isolated
    voltage_goes_to_zero_when_isolated_0 (isolated = true AND iso_state_changed = true) -> voltage := zero, entered_zero_zone_KV, check_generators_off;
  transition voltage_goes_low_when_isolated
    voltage_goes_low_when_isolated_0 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low, check_generators_off;
    voltage_goes_low_when_isolated_1 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_5, check_generators_off;
    voltage_goes_low_when_isolated_2 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_4, check_generators_off;
    voltage_goes_low_when_isolated_3 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_3, check_generators_off;
    voltage_goes_low_when_isolated_4 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_2, check_generators_off;
    voltage_goes_low_when_isolated_5 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_1, check_generators_off;
  transition voltage_goes_to_zero
    voltage_goes_to_zero_0 true = 1 -> voltage := zero, entered_zero_zone_KV;
  triggeredby voltage_zero;
  transition voltage_goes_normal
    voltage_goes_normal_0 true = 1 -> voltage := normal, limit_KV_Normal;
  triggeredby voltage_normal;
  transition voltage_goes_high
    voltage_goes_high_0 true = 1 -> voltage := high, limit_KV_High;
    voltage_goes_high_1 true = 1 -> voltage := high, limit_KV_High_5;
    voltage_goes_high_2 true = 1 -> voltage := high, limit_KV_High_4;
    voltage_goes_high_3 true = 1 -> voltage := high, limit_KV_High_3;
    voltage_goes_high_4 true = 1 -> voltage := high, limit_KV_High_2;
    voltage_goes_high_5 true = 1 -> voltage := high, limit_KV_High_1;
  triggeredby voltage_high;
  transition voltage_goes_low
    voltage_goes_low_0 true = 1 -> voltage := low, limit_KV_Low;
    voltage_goes_low_1 true = 1 -> voltage := low, limit_KV_Low_5;
    voltage_goes_low_2 true = 1 -> voltage := low, limit_KV_Low_4;
    voltage_goes_low_3 true = 1 -> voltage := low, limit_KV_Low_3;
    voltage_goes_low_4 true = 1 -> voltage := low, limit_KV_Low_2;
    voltage_goes_low_5 true = 1 -> voltage := low, limit_KV_Low_1;
  triggeredby voltage_low;
  transition voltage_goes_to_zero_unexplained
    voltage_goes_to_zero_unexplained_0 true = 1 -> voltage := zero, entered_zero_zone_KV, count_as_fault;
  transition voltage_goes_normal_unexplained
    voltage_goes_normal_unexplained_0 true = 1 -> voltage := normal, limit_KV_Normal, count_as_fault;
  transition voltage_goes_high_unexplained
    voltage_goes_high_unexplained_0 true = 1 -> voltage := high, limit_KV_High, count_as_fault;
    voltage_goes_high_unexplained_1 true = 1 -> voltage := high, limit_KV_High_5, count_as_fault;
    voltage_goes_high_unexplained_2 true = 1 -> voltage := high, limit_KV_High_4, count_as_fault;
    voltage_goes_high_unexplained_3 true = 1 -> voltage := high, limit_KV_High_3, count_as_fault;
    voltage_goes_high_unexplained_4 true = 1 -> voltage := high, limit_KV_High_2, count_as_fault;
    voltage_goes_high_unexplained_5 true = 1 -> voltage := high, limit_KV_High_1, count_as_fault;
  transition voltage_goes_low_unexplained
    voltage_goes_low_unexplained_0 true = 1 -> voltage := low, limit_KV_Low, count_as_fault;
    voltage_goes_low_unexplained_1 true = 1 -> voltage := low, limit_KV_Low_5, count_as_fault;
    voltage_goes_low_unexplained_2 true = 1 -> voltage := low, limit_KV_Low_4, count_as_fault;
    voltage_goes_low_unexplained_3 true = 1 -> voltage := low, limit_KV_Low_3, count_as_fault;
    voltage_goes_low_unexplained_4 true = 1 -> voltage := low, limit_KV_Low_2, count_as_fault;
    voltage_goes_low_unexplained_5 true = 1 -> voltage := low, limit_KV_Low_1, count_as_fault;
  transition iso_state_changed_timeout
    iso_state_changed_timeout_0 true = 1 -> iso_state_changed := false;
  triggeredby [0.0..15.0] iso_state_changed = true;
  transition become_not_isolated
    become_not_isolated_0 true = 1 -> isolated := false, iso_state_changed := true;
  triggeredby set_isolated_false;
  transition become_isolated
    become_isolated_0 true = 1 -> isolated := true, iso_state_changed := true;
  triggeredby set_isolated_true;
}
component Bus_X60 = {
  connection generatorsXYZ0 : attached = Generator_X99;
  var mvar : {zero,high,low,normal};
  var mw : {zero,high,low,normal};
  var voltage : {zero,high,low,normal};
  var iso_state_changed : [0..1];
  var isolated : [0..1];
  event check_generators_off;
  event check_switched_in;
  event check_switched_out;
  event count_as_fault;
  event set_isolated_false;
  event set_isolated_true;
  event mvar_zero;
  event mvar_normal;
  event mvar_high;
  event mvar_low;
  event mw_zero;
  event mw_normal;
  event mw_high;
  event mw_low;
  event voltage_zero;
  event voltage_normal;
  event voltage_high;
  event voltage_low;
  event entered_zero_zone_MVAR;
  event limit_MVAR_High;
  event limit_MVAR_High_5;
  event limit_MVAR_High_4;
  event limit_MVAR_High_3;
  event limit_MVAR_High_2;
  event limit_MVAR_High_1;
  event limit_MVAR_Low;
  event limit_MVAR_Low_5;
  event limit_MVAR_Low_4;
  event limit_MVAR_Low_3;
  event limit_MVAR_Low_2;
  event limit_MVAR_Low_1;
  event limit_MVAR_Normal;
  event entered_zero_zone_MW;
  event limit_MW_High;
  event limit_MW_High_5;
  event limit_MW_High_4;
  event limit_MW_High_3;
  event limit_MW_High_2;
  event limit_MW_High_1;
  event limit_MW_Low;
  event limit_MW_Low_5;
  event limit_MW_Low_4;
  event limit_MW_Low_3;
  event limit_MW_Low_2;
  event limit_MW_Low_1;
  event limit_MW_Normal;
  event entered_zero_zone_KV;
  event limit_KV_High;
  event limit_KV_High_5;
  event limit_KV_High_4;
  event limit_KV_High_3;
  event limit_KV_High_2;
  event limit_KV_High_1;
  event limit_KV_Low;
  event limit_KV_Low_5;
  event limit_KV_Low_4;
  event limit_KV_Low_3;
  event limit_KV_Low_2;
  event limit_KV_Low_1;
  event limit_KV_Normal;
  transition mvar_goes_to_zero
    mvar_goes_to_zero_0 true = 1 -> mvar := zero, entered_zero_zone_MVAR;
  triggeredby mvar_zero;
  transition mvar_goes_normal
    mvar_goes_normal_0 true = 1 -> mvar := normal, limit_MVAR_Normal;
  triggeredby mvar_normal;
  transition mvar_goes_high
    mvar_goes_high_0 true = 1 -> mvar := high, limit_MVAR_High;
    mvar_goes_high_1 true = 1 -> mvar := high, limit_MVAR_High_5;
    mvar_goes_high_2 true = 1 -> mvar := high, limit_MVAR_High_4;
    mvar_goes_high_3 true = 1 -> mvar := high, limit_MVAR_High_3;
    mvar_goes_high_4 true = 1 -> mvar := high, limit_MVAR_High_2;
    mvar_goes_high_5 true = 1 -> mvar := high, limit_MVAR_High_1;
  triggeredby mvar_high;
  transition mvar_goes_low
    mvar_goes_low_0 true = 1 -> mvar := low, limit_MVAR_Low;
    mvar_goes_low_1 true = 1 -> mvar := low, limit_MVAR_Low_5;
    mvar_goes_low_2 true = 1 -> mvar := low, limit_MVAR_Low_4;
    mvar_goes_low_3 true = 1 -> mvar := low, limit_MVAR_Low_3;
    mvar_goes_low_4 true = 1 -> mvar := low, limit_MVAR_Low_2;
    mvar_goes_low_5 true = 1 -> mvar := low, limit_MVAR_Low_1;
  triggeredby mvar_low;
  transition mvar_goes_to_zero_unexplained
    mvar_goes_to_zero_unexplained_0 true = 1 -> mvar := zero, entered_zero_zone_MVAR, count_as_fault;
  transition mvar_goes_normal_unexplained
    mvar_goes_normal_unexplained_0 true = 1 -> mvar := normal, limit_MVAR_Normal, count_as_fault;
  transition mvar_goes_high_unexplained
    mvar_goes_high_unexplained_0 true = 1 -> mvar := high, limit_MVAR_High, count_as_fault;
    mvar_goes_high_unexplained_1 true = 1 -> mvar := high, limit_MVAR_High_5, count_as_fault;
    mvar_goes_high_unexplained_2 true = 1 -> mvar := high, limit_MVAR_High_4, count_as_fault;
    mvar_goes_high_unexplained_3 true = 1 -> mvar := high, limit_MVAR_High_3, count_as_fault;
    mvar_goes_high_unexplained_4 true = 1 -> mvar := high, limit_MVAR_High_2, count_as_fault;
    mvar_goes_high_unexplained_5 true = 1 -> mvar := high, limit_MVAR_High_1, count_as_fault;
  transition mvar_goes_low_unexplained
    mvar_goes_low_unexplained_0 true = 1 -> mvar := low, limit_MVAR_Low, count_as_fault;
    mvar_goes_low_unexplained_1 true = 1 -> mvar := low, limit_MVAR_Low_5, count_as_fault;
    mvar_goes_low_unexplained_2 true = 1 -> mvar := low, limit_MVAR_Low_4, count_as_fault;
    mvar_goes_low_unexplained_3 true = 1 -> mvar := low, limit_MVAR_Low_3, count_as_fault;
    mvar_goes_low_unexplained_4 true = 1 -> mvar := low, limit_MVAR_Low_2, count_as_fault;
    mvar_goes_low_unexplained_5 true = 1 -> mvar := low, limit_MVAR_Low_1, count_as_fault;
  transition mw_goes_normal_when_reenergised
    mw_goes_normal_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> mw := normal, limit_MW_Normal;
  transition mw_goes_high_when_reenergised
    mw_goes_high_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High;
    mw_goes_high_when_reenergised_1 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_5;
    mw_goes_high_when_reenergised_2 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_4;
    mw_goes_high_when_reenergised_3 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_3;
    mw_goes_high_when_reenergised_4 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_2;
    mw_goes_high_when_reenergised_5 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_1;
  transition mw_goes_low_when_reenergised
    mw_goes_low_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low;
    mw_goes_low_when_reenergised_1 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_5;
    mw_goes_low_when_reenergised_2 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_4;
    mw_goes_low_when_reenergised_3 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_3;
    mw_goes_low_when_reenergised_4 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_2;
    mw_goes_low_when_reenergised_5 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_1;
  transition mw_goes_to_zero_when_isolated
    mw_goes_to_zero_when_isolated_0 (isolated = true AND iso_state_changed = true) -> mw := zero, entered_zero_zone_MW, check_generators_off;
  transition mw_goes_low_when_isolated
    mw_goes_low_when_isolated_0 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low, check_generators_off;
    mw_goes_low_when_isolated_1 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_5, check_generators_off;
    mw_goes_low_when_isolated_2 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_4, check_generators_off;
    mw_goes_low_when_isolated_3 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_3, check_generators_off;
    mw_goes_low_when_isolated_4 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_2, check_generators_off;
    mw_goes_low_when_isolated_5 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_1, check_generators_off;
  transition mw_goes_to_zero
    mw_goes_to_zero_0 true = 1 -> mw := zero, entered_zero_zone_MW;
  triggeredby mw_zero;
  transition mw_goes_normal
    mw_goes_normal_0 true = 1 -> mw := normal, limit_MW_Normal;
  triggeredby mw_normal;
  transition mw_goes_high
    mw_goes_high_0 true = 1 -> mw := high, limit_MW_High;
    mw_goes_high_1 true = 1 -> mw := high, limit_MW_High_5;
    mw_goes_high_2 true = 1 -> mw := high, limit_MW_High_4;
    mw_goes_high_3 true = 1 -> mw := high, limit_MW_High_3;
    mw_goes_high_4 true = 1 -> mw := high, limit_MW_High_2;
    mw_goes_high_5 true = 1 -> mw := high, limit_MW_High_1;
  triggeredby mw_high;
  transition mw_goes_low
    mw_goes_low_0 true = 1 -> mw := low, limit_MW_Low;
    mw_goes_low_1 true = 1 -> mw := low, limit_MW_Low_5;
    mw_goes_low_2 true = 1 -> mw := low, limit_MW_Low_4;
    mw_goes_low_3 true = 1 -> mw := low, limit_MW_Low_3;
    mw_goes_low_4 true = 1 -> mw := low, limit_MW_Low_2;
    mw_goes_low_5 true = 1 -> mw := low, limit_MW_Low_1;
  triggeredby mw_low;
  transition mw_goes_to_zero_unexplained
    mw_goes_to_zero_unexplained_0 true = 1 -> mw := zero, entered_zero_zone_MW, count_as_fault;
  transition mw_goes_normal_unexplained
    mw_goes_normal_unexplained_0 true = 1 -> mw := normal, limit_MW_Normal, count_as_fault;
  transition mw_goes_high_unexplained
    mw_goes_high_unexplained_0 true = 1 -> mw := high, limit_MW_High, count_as_fault;
    mw_goes_high_unexplained_1 true = 1 -> mw := high, limit_MW_High_5, count_as_fault;
    mw_goes_high_unexplained_2 true = 1 -> mw := high, limit_MW_High_4, count_as_fault;
    mw_goes_high_unexplained_3 true = 1 -> mw := high, limit_MW_High_3, count_as_fault;
    mw_goes_high_unexplained_4 true = 1 -> mw := high, limit_MW_High_2, count_as_fault;
    mw_goes_high_unexplained_5 true = 1 -> mw := high, limit_MW_High_1, count_as_fault;
  transition mw_goes_low_unexplained
    mw_goes_low_unexplained_0 true = 1 -> mw := low, limit_MW_Low, count_as_fault;
    mw_goes_low_unexplained_1 true = 1 -> mw := low, limit_MW_Low_5, count_as_fault;
    mw_goes_low_unexplained_2 true = 1 -> mw := low, limit_MW_Low_4, count_as_fault;
    mw_goes_low_unexplained_3 true = 1 -> mw := low, limit_MW_Low_3, count_as_fault;
    mw_goes_low_unexplained_4 true = 1 -> mw := low, limit_MW_Low_2, count_as_fault;
    mw_goes_low_unexplained_5 true = 1 -> mw := low, limit_MW_Low_1, count_as_fault;
  transition voltage_goes_normal_when_caps_in
    voltage_goes_normal_when_caps_in_0 (voltage = low AND isolated = false) -> voltage := normal, limit_KV_Normal, check_switched_in;
  transition voltage_goes_normal_when_caps_out
    voltage_goes_normal_when_caps_out_0 (voltage = high AND isolated = false) -> voltage := normal, limit_KV_Normal, check_switched_out;
  transition voltage_goes_normal_when_reenergised
    voltage_goes_normal_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> voltage := normal, limit_KV_Normal;
  transition voltage_goes_high_when_reenergised
    voltage_goes_high_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High;
    voltage_goes_high_when_reenergised_1 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_5;
    voltage_goes_high_when_reenergised_2 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_4;
    voltage_goes_high_when_reenergised_3 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_3;
    voltage_goes_high_when_reenergised_4 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_2;
    voltage_goes_high_when_reenergised_5 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_1;
  transition voltage_goes_Low_when_reenergised
    voltage_goes_Low_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low;
    voltage_goes_Low_when_reenergised_1 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_5;
    voltage_goes_Low_when_reenergised_2 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_4;
    voltage_goes_Low_when_reenergised_3 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_3;
    voltage_goes_Low_when_reenergised_4 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_2;
    voltage_goes_Low_when_reenergised_5 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_1;
  transition voltage_goes_to_zero_when_isolated
    voltage_goes_to_zero_when_isolated_0 (isolated = true AND iso_state_changed = true) -> voltage := zero, entered_zero_zone_KV, check_generators_off;
  transition voltage_goes_low_when_isolated
    voltage_goes_low_when_isolated_0 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low, check_generators_off;
    voltage_goes_low_when_isolated_1 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_5, check_generators_off;
    voltage_goes_low_when_isolated_2 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_4, check_generators_off;
    voltage_goes_low_when_isolated_3 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_3, check_generators_off;
    voltage_goes_low_when_isolated_4 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_2, check_generators_off;
    voltage_goes_low_when_isolated_5 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_1, check_generators_off;
  transition voltage_goes_to_zero
    voltage_goes_to_zero_0 true = 1 -> voltage := zero, entered_zero_zone_KV;
  triggeredby voltage_zero;
  transition voltage_goes_normal
    voltage_goes_normal_0 true = 1 -> voltage := normal, limit_KV_Normal;
  triggeredby voltage_normal;
  transition voltage_goes_high
    voltage_goes_high_0 true = 1 -> voltage := high, limit_KV_High;
    voltage_goes_high_1 true = 1 -> voltage := high, limit_KV_High_5;
    voltage_goes_high_2 true = 1 -> voltage := high, limit_KV_High_4;
    voltage_goes_high_3 true = 1 -> voltage := high, limit_KV_High_3;
    voltage_goes_high_4 true = 1 -> voltage := high, limit_KV_High_2;
    voltage_goes_high_5 true = 1 -> voltage := high, limit_KV_High_1;
  triggeredby voltage_high;
  transition voltage_goes_low
    voltage_goes_low_0 true = 1 -> voltage := low, limit_KV_Low;
    voltage_goes_low_1 true = 1 -> voltage := low, limit_KV_Low_5;
    voltage_goes_low_2 true = 1 -> voltage := low, limit_KV_Low_4;
    voltage_goes_low_3 true = 1 -> voltage := low, limit_KV_Low_3;
    voltage_goes_low_4 true = 1 -> voltage := low, limit_KV_Low_2;
    voltage_goes_low_5 true = 1 -> voltage := low, limit_KV_Low_1;
  triggeredby voltage_low;
  transition voltage_goes_to_zero_unexplained
    voltage_goes_to_zero_unexplained_0 true = 1 -> voltage := zero, entered_zero_zone_KV, count_as_fault;
  transition voltage_goes_normal_unexplained
    voltage_goes_normal_unexplained_0 true = 1 -> voltage := normal, limit_KV_Normal, count_as_fault;
  transition voltage_goes_high_unexplained
    voltage_goes_high_unexplained_0 true = 1 -> voltage := high, limit_KV_High, count_as_fault;
    voltage_goes_high_unexplained_1 true = 1 -> voltage := high, limit_KV_High_5, count_as_fault;
    voltage_goes_high_unexplained_2 true = 1 -> voltage := high, limit_KV_High_4, count_as_fault;
    voltage_goes_high_unexplained_3 true = 1 -> voltage := high, limit_KV_High_3, count_as_fault;
    voltage_goes_high_unexplained_4 true = 1 -> voltage := high, limit_KV_High_2, count_as_fault;
    voltage_goes_high_unexplained_5 true = 1 -> voltage := high, limit_KV_High_1, count_as_fault;
  transition voltage_goes_low_unexplained
    voltage_goes_low_unexplained_0 true = 1 -> voltage := low, limit_KV_Low, count_as_fault;
    voltage_goes_low_unexplained_1 true = 1 -> voltage := low, limit_KV_Low_5, count_as_fault;
    voltage_goes_low_unexplained_2 true = 1 -> voltage := low, limit_KV_Low_4, count_as_fault;
    voltage_goes_low_unexplained_3 true = 1 -> voltage := low, limit_KV_Low_3, count_as_fault;
    voltage_goes_low_unexplained_4 true = 1 -> voltage := low, limit_KV_Low_2, count_as_fault;
    voltage_goes_low_unexplained_5 true = 1 -> voltage := low, limit_KV_Low_1, count_as_fault;
  transition iso_state_changed_timeout
    iso_state_changed_timeout_0 true = 1 -> iso_state_changed := false;
  triggeredby [0.0..15.0] iso_state_changed = true;
  transition become_not_isolated
    become_not_isolated_0 true = 1 -> isolated := false, iso_state_changed := true;
  triggeredby set_isolated_false;
  transition become_isolated
    become_isolated_0 true = 1 -> isolated := true, iso_state_changed := true;
  triggeredby set_isolated_true;
}
component Bus_X125 = {
  var mvar : {zero,high,low,normal};
  var mw : {zero,high,low,normal};
  var voltage : {zero,high,low,normal};
  var iso_state_changed : [0..1];
  var isolated : [0..1];
  event check_generators_off;
  event check_switched_in;
  event check_switched_out;
  event count_as_fault;
  event set_isolated_false;
  event set_isolated_true;
  event mvar_zero;
  event mvar_normal;
  event mvar_high;
  event mvar_low;
  event mw_zero;
  event mw_normal;
  event mw_high;
  event mw_low;
  event voltage_zero;
  event voltage_normal;
  event voltage_high;
  event voltage_low;
  event entered_zero_zone_MVAR;
  event limit_MVAR_High;
  event limit_MVAR_High_5;
  event limit_MVAR_High_4;
  event limit_MVAR_High_3;
  event limit_MVAR_High_2;
  event limit_MVAR_High_1;
  event limit_MVAR_Low;
  event limit_MVAR_Low_5;
  event limit_MVAR_Low_4;
  event limit_MVAR_Low_3;
  event limit_MVAR_Low_2;
  event limit_MVAR_Low_1;
  event limit_MVAR_Normal;
  event entered_zero_zone_MW;
  event limit_MW_High;
  event limit_MW_High_5;
  event limit_MW_High_4;
  event limit_MW_High_3;
  event limit_MW_High_2;
  event limit_MW_High_1;
  event limit_MW_Low;
  event limit_MW_Low_5;
  event limit_MW_Low_4;
  event limit_MW_Low_3;
  event limit_MW_Low_2;
  event limit_MW_Low_1;
  event limit_MW_Normal;
  event entered_zero_zone_KV;
  event limit_KV_High;
  event limit_KV_High_5;
  event limit_KV_High_4;
  event limit_KV_High_3;
  event limit_KV_High_2;
  event limit_KV_High_1;
  event limit_KV_Low;
  event limit_KV_Low_5;
  event limit_KV_Low_4;
  event limit_KV_Low_3;
  event limit_KV_Low_2;
  event limit_KV_Low_1;
  event limit_KV_Normal;
  transition mvar_goes_to_zero
    mvar_goes_to_zero_0 true = 1 -> mvar := zero, entered_zero_zone_MVAR;
  triggeredby mvar_zero;
  transition mvar_goes_normal
    mvar_goes_normal_0 true = 1 -> mvar := normal, limit_MVAR_Normal;
  triggeredby mvar_normal;
  transition mvar_goes_high
    mvar_goes_high_0 true = 1 -> mvar := high, limit_MVAR_High;
    mvar_goes_high_1 true = 1 -> mvar := high, limit_MVAR_High_5;
    mvar_goes_high_2 true = 1 -> mvar := high, limit_MVAR_High_4;
    mvar_goes_high_3 true = 1 -> mvar := high, limit_MVAR_High_3;
    mvar_goes_high_4 true = 1 -> mvar := high, limit_MVAR_High_2;
    mvar_goes_high_5 true = 1 -> mvar := high, limit_MVAR_High_1;
  triggeredby mvar_high;
  transition mvar_goes_low
    mvar_goes_low_0 true = 1 -> mvar := low, limit_MVAR_Low;
    mvar_goes_low_1 true = 1 -> mvar := low, limit_MVAR_Low_5;
    mvar_goes_low_2 true = 1 -> mvar := low, limit_MVAR_Low_4;
    mvar_goes_low_3 true = 1 -> mvar := low, limit_MVAR_Low_3;
    mvar_goes_low_4 true = 1 -> mvar := low, limit_MVAR_Low_2;
    mvar_goes_low_5 true = 1 -> mvar := low, limit_MVAR_Low_1;
  triggeredby mvar_low;
  transition mvar_goes_to_zero_unexplained
    mvar_goes_to_zero_unexplained_0 true = 1 -> mvar := zero, entered_zero_zone_MVAR, count_as_fault;
  transition mvar_goes_normal_unexplained
    mvar_goes_normal_unexplained_0 true = 1 -> mvar := normal, limit_MVAR_Normal, count_as_fault;
  transition mvar_goes_high_unexplained
    mvar_goes_high_unexplained_0 true = 1 -> mvar := high, limit_MVAR_High, count_as_fault;
    mvar_goes_high_unexplained_1 true = 1 -> mvar := high, limit_MVAR_High_5, count_as_fault;
    mvar_goes_high_unexplained_2 true = 1 -> mvar := high, limit_MVAR_High_4, count_as_fault;
    mvar_goes_high_unexplained_3 true = 1 -> mvar := high, limit_MVAR_High_3, count_as_fault;
    mvar_goes_high_unexplained_4 true = 1 -> mvar := high, limit_MVAR_High_2, count_as_fault;
    mvar_goes_high_unexplained_5 true = 1 -> mvar := high, limit_MVAR_High_1, count_as_fault;
  transition mvar_goes_low_unexplained
    mvar_goes_low_unexplained_0 true = 1 -> mvar := low, limit_MVAR_Low, count_as_fault;
    mvar_goes_low_unexplained_1 true = 1 -> mvar := low, limit_MVAR_Low_5, count_as_fault;
    mvar_goes_low_unexplained_2 true = 1 -> mvar := low, limit_MVAR_Low_4, count_as_fault;
    mvar_goes_low_unexplained_3 true = 1 -> mvar := low, limit_MVAR_Low_3, count_as_fault;
    mvar_goes_low_unexplained_4 true = 1 -> mvar := low, limit_MVAR_Low_2, count_as_fault;
    mvar_goes_low_unexplained_5 true = 1 -> mvar := low, limit_MVAR_Low_1, count_as_fault;
  transition mw_goes_normal_when_reenergised
    mw_goes_normal_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> mw := normal, limit_MW_Normal;
  transition mw_goes_high_when_reenergised
    mw_goes_high_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High;
    mw_goes_high_when_reenergised_1 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_5;
    mw_goes_high_when_reenergised_2 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_4;
    mw_goes_high_when_reenergised_3 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_3;
    mw_goes_high_when_reenergised_4 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_2;
    mw_goes_high_when_reenergised_5 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_1;
  transition mw_goes_low_when_reenergised
    mw_goes_low_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low;
    mw_goes_low_when_reenergised_1 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_5;
    mw_goes_low_when_reenergised_2 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_4;
    mw_goes_low_when_reenergised_3 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_3;
    mw_goes_low_when_reenergised_4 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_2;
    mw_goes_low_when_reenergised_5 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_1;
  transition mw_goes_to_zero_when_isolated
    mw_goes_to_zero_when_isolated_0 (isolated = true AND iso_state_changed = true) -> mw := zero, entered_zero_zone_MW, check_generators_off;
  transition mw_goes_low_when_isolated
    mw_goes_low_when_isolated_0 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low, check_generators_off;
    mw_goes_low_when_isolated_1 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_5, check_generators_off;
    mw_goes_low_when_isolated_2 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_4, check_generators_off;
    mw_goes_low_when_isolated_3 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_3, check_generators_off;
    mw_goes_low_when_isolated_4 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_2, check_generators_off;
    mw_goes_low_when_isolated_5 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_1, check_generators_off;
  transition mw_goes_to_zero
    mw_goes_to_zero_0 true = 1 -> mw := zero, entered_zero_zone_MW;
  triggeredby mw_zero;
  transition mw_goes_normal
    mw_goes_normal_0 true = 1 -> mw := normal, limit_MW_Normal;
  triggeredby mw_normal;
  transition mw_goes_high
    mw_goes_high_0 true = 1 -> mw := high, limit_MW_High;
    mw_goes_high_1 true = 1 -> mw := high, limit_MW_High_5;
    mw_goes_high_2 true = 1 -> mw := high, limit_MW_High_4;
    mw_goes_high_3 true = 1 -> mw := high, limit_MW_High_3;
    mw_goes_high_4 true = 1 -> mw := high, limit_MW_High_2;
    mw_goes_high_5 true = 1 -> mw := high, limit_MW_High_1;
  triggeredby mw_high;
  transition mw_goes_low
    mw_goes_low_0 true = 1 -> mw := low, limit_MW_Low;
    mw_goes_low_1 true = 1 -> mw := low, limit_MW_Low_5;
    mw_goes_low_2 true = 1 -> mw := low, limit_MW_Low_4;
    mw_goes_low_3 true = 1 -> mw := low, limit_MW_Low_3;
    mw_goes_low_4 true = 1 -> mw := low, limit_MW_Low_2;
    mw_goes_low_5 true = 1 -> mw := low, limit_MW_Low_1;
  triggeredby mw_low;
  transition mw_goes_to_zero_unexplained
    mw_goes_to_zero_unexplained_0 true = 1 -> mw := zero, entered_zero_zone_MW, count_as_fault;
  transition mw_goes_normal_unexplained
    mw_goes_normal_unexplained_0 true = 1 -> mw := normal, limit_MW_Normal, count_as_fault;
  transition mw_goes_high_unexplained
    mw_goes_high_unexplained_0 true = 1 -> mw := high, limit_MW_High, count_as_fault;
    mw_goes_high_unexplained_1 true = 1 -> mw := high, limit_MW_High_5, count_as_fault;
    mw_goes_high_unexplained_2 true = 1 -> mw := high, limit_MW_High_4, count_as_fault;
    mw_goes_high_unexplained_3 true = 1 -> mw := high, limit_MW_High_3, count_as_fault;
    mw_goes_high_unexplained_4 true = 1 -> mw := high, limit_MW_High_2, count_as_fault;
    mw_goes_high_unexplained_5 true = 1 -> mw := high, limit_MW_High_1, count_as_fault;
  transition mw_goes_low_unexplained
    mw_goes_low_unexplained_0 true = 1 -> mw := low, limit_MW_Low, count_as_fault;
    mw_goes_low_unexplained_1 true = 1 -> mw := low, limit_MW_Low_5, count_as_fault;
    mw_goes_low_unexplained_2 true = 1 -> mw := low, limit_MW_Low_4, count_as_fault;
    mw_goes_low_unexplained_3 true = 1 -> mw := low, limit_MW_Low_3, count_as_fault;
    mw_goes_low_unexplained_4 true = 1 -> mw := low, limit_MW_Low_2, count_as_fault;
    mw_goes_low_unexplained_5 true = 1 -> mw := low, limit_MW_Low_1, count_as_fault;
  transition voltage_goes_normal_when_caps_in
    voltage_goes_normal_when_caps_in_0 (voltage = low AND isolated = false) -> voltage := normal, limit_KV_Normal, check_switched_in;
  transition voltage_goes_normal_when_caps_out
    voltage_goes_normal_when_caps_out_0 (voltage = high AND isolated = false) -> voltage := normal, limit_KV_Normal, check_switched_out;
  transition voltage_goes_normal_when_reenergised
    voltage_goes_normal_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> voltage := normal, limit_KV_Normal;
  transition voltage_goes_high_when_reenergised
    voltage_goes_high_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High;
    voltage_goes_high_when_reenergised_1 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_5;
    voltage_goes_high_when_reenergised_2 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_4;
    voltage_goes_high_when_reenergised_3 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_3;
    voltage_goes_high_when_reenergised_4 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_2;
    voltage_goes_high_when_reenergised_5 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_1;
  transition voltage_goes_Low_when_reenergised
    voltage_goes_Low_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low;
    voltage_goes_Low_when_reenergised_1 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_5;
    voltage_goes_Low_when_reenergised_2 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_4;
    voltage_goes_Low_when_reenergised_3 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_3;
    voltage_goes_Low_when_reenergised_4 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_2;
    voltage_goes_Low_when_reenergised_5 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_1;
  transition voltage_goes_to_zero_when_isolated
    voltage_goes_to_zero_when_isolated_0 (isolated = true AND iso_state_changed = true) -> voltage := zero, entered_zero_zone_KV, check_generators_off;
  transition voltage_goes_low_when_isolated
    voltage_goes_low_when_isolated_0 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low, check_generators_off;
    voltage_goes_low_when_isolated_1 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_5, check_generators_off;
    voltage_goes_low_when_isolated_2 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_4, check_generators_off;
    voltage_goes_low_when_isolated_3 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_3, check_generators_off;
    voltage_goes_low_when_isolated_4 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_2, check_generators_off;
    voltage_goes_low_when_isolated_5 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_1, check_generators_off;
  transition voltage_goes_to_zero
    voltage_goes_to_zero_0 true = 1 -> voltage := zero, entered_zero_zone_KV;
  triggeredby voltage_zero;
  transition voltage_goes_normal
    voltage_goes_normal_0 true = 1 -> voltage := normal, limit_KV_Normal;
  triggeredby voltage_normal;
  transition voltage_goes_high
    voltage_goes_high_0 true = 1 -> voltage := high, limit_KV_High;
    voltage_goes_high_1 true = 1 -> voltage := high, limit_KV_High_5;
    voltage_goes_high_2 true = 1 -> voltage := high, limit_KV_High_4;
    voltage_goes_high_3 true = 1 -> voltage := high, limit_KV_High_3;
    voltage_goes_high_4 true = 1 -> voltage := high, limit_KV_High_2;
    voltage_goes_high_5 true = 1 -> voltage := high, limit_KV_High_1;
  triggeredby voltage_high;
  transition voltage_goes_low
    voltage_goes_low_0 true = 1 -> voltage := low, limit_KV_Low;
    voltage_goes_low_1 true = 1 -> voltage := low, limit_KV_Low_5;
    voltage_goes_low_2 true = 1 -> voltage := low, limit_KV_Low_4;
    voltage_goes_low_3 true = 1 -> voltage := low, limit_KV_Low_3;
    voltage_goes_low_4 true = 1 -> voltage := low, limit_KV_Low_2;
    voltage_goes_low_5 true = 1 -> voltage := low, limit_KV_Low_1;
  triggeredby voltage_low;
  transition voltage_goes_to_zero_unexplained
    voltage_goes_to_zero_unexplained_0 true = 1 -> voltage := zero, entered_zero_zone_KV, count_as_fault;
  transition voltage_goes_normal_unexplained
    voltage_goes_normal_unexplained_0 true = 1 -> voltage := normal, limit_KV_Normal, count_as_fault;
  transition voltage_goes_high_unexplained
    voltage_goes_high_unexplained_0 true = 1 -> voltage := high, limit_KV_High, count_as_fault;
    voltage_goes_high_unexplained_1 true = 1 -> voltage := high, limit_KV_High_5, count_as_fault;
    voltage_goes_high_unexplained_2 true = 1 -> voltage := high, limit_KV_High_4, count_as_fault;
    voltage_goes_high_unexplained_3 true = 1 -> voltage := high, limit_KV_High_3, count_as_fault;
    voltage_goes_high_unexplained_4 true = 1 -> voltage := high, limit_KV_High_2, count_as_fault;
    voltage_goes_high_unexplained_5 true = 1 -> voltage := high, limit_KV_High_1, count_as_fault;
  transition voltage_goes_low_unexplained
    voltage_goes_low_unexplained_0 true = 1 -> voltage := low, limit_KV_Low, count_as_fault;
    voltage_goes_low_unexplained_1 true = 1 -> voltage := low, limit_KV_Low_5, count_as_fault;
    voltage_goes_low_unexplained_2 true = 1 -> voltage := low, limit_KV_Low_4, count_as_fault;
    voltage_goes_low_unexplained_3 true = 1 -> voltage := low, limit_KV_Low_3, count_as_fault;
    voltage_goes_low_unexplained_4 true = 1 -> voltage := low, limit_KV_Low_2, count_as_fault;
    voltage_goes_low_unexplained_5 true = 1 -> voltage := low, limit_KV_Low_1, count_as_fault;
  transition iso_state_changed_timeout
    iso_state_changed_timeout_0 true = 1 -> iso_state_changed := false;
  triggeredby [0.0..15.0] iso_state_changed = true;
  transition become_not_isolated
    become_not_isolated_0 true = 1 -> isolated := false, iso_state_changed := true;
  triggeredby set_isolated_false;
  transition become_isolated
    become_isolated_0 true = 1 -> isolated := true, iso_state_changed := true;
  triggeredby set_isolated_true;
}
component Bus_X112 = {
  var mvar : {zero,high,low,normal};
  var mw : {zero,high,low,normal};
  var voltage : {zero,high,low,normal};
  var iso_state_changed : [0..1];
  var isolated : [0..1];
  event check_generators_off;
  event check_switched_in;
  event check_switched_out;
  event count_as_fault;
  event set_isolated_false;
  event set_isolated_true;
  event mvar_zero;
  event mvar_normal;
  event mvar_high;
  event mvar_low;
  event mw_zero;
  event mw_normal;
  event mw_high;
  event mw_low;
  event voltage_zero;
  event voltage_normal;
  event voltage_high;
  event voltage_low;
  event entered_zero_zone_MVAR;
  event limit_MVAR_High;
  event limit_MVAR_High_5;
  event limit_MVAR_High_4;
  event limit_MVAR_High_3;
  event limit_MVAR_High_2;
  event limit_MVAR_High_1;
  event limit_MVAR_Low;
  event limit_MVAR_Low_5;
  event limit_MVAR_Low_4;
  event limit_MVAR_Low_3;
  event limit_MVAR_Low_2;
  event limit_MVAR_Low_1;
  event limit_MVAR_Normal;
  event entered_zero_zone_MW;
  event limit_MW_High;
  event limit_MW_High_5;
  event limit_MW_High_4;
  event limit_MW_High_3;
  event limit_MW_High_2;
  event limit_MW_High_1;
  event limit_MW_Low;
  event limit_MW_Low_5;
  event limit_MW_Low_4;
  event limit_MW_Low_3;
  event limit_MW_Low_2;
  event limit_MW_Low_1;
  event limit_MW_Normal;
  event entered_zero_zone_KV;
  event limit_KV_High;
  event limit_KV_High_5;
  event limit_KV_High_4;
  event limit_KV_High_3;
  event limit_KV_High_2;
  event limit_KV_High_1;
  event limit_KV_Low;
  event limit_KV_Low_5;
  event limit_KV_Low_4;
  event limit_KV_Low_3;
  event limit_KV_Low_2;
  event limit_KV_Low_1;
  event limit_KV_Normal;
  transition mvar_goes_to_zero
    mvar_goes_to_zero_0 true = 1 -> mvar := zero, entered_zero_zone_MVAR;
  triggeredby mvar_zero;
  transition mvar_goes_normal
    mvar_goes_normal_0 true = 1 -> mvar := normal, limit_MVAR_Normal;
  triggeredby mvar_normal;
  transition mvar_goes_high
    mvar_goes_high_0 true = 1 -> mvar := high, limit_MVAR_High;
    mvar_goes_high_1 true = 1 -> mvar := high, limit_MVAR_High_5;
    mvar_goes_high_2 true = 1 -> mvar := high, limit_MVAR_High_4;
    mvar_goes_high_3 true = 1 -> mvar := high, limit_MVAR_High_3;
    mvar_goes_high_4 true = 1 -> mvar := high, limit_MVAR_High_2;
    mvar_goes_high_5 true = 1 -> mvar := high, limit_MVAR_High_1;
  triggeredby mvar_high;
  transition mvar_goes_low
    mvar_goes_low_0 true = 1 -> mvar := low, limit_MVAR_Low;
    mvar_goes_low_1 true = 1 -> mvar := low, limit_MVAR_Low_5;
    mvar_goes_low_2 true = 1 -> mvar := low, limit_MVAR_Low_4;
    mvar_goes_low_3 true = 1 -> mvar := low, limit_MVAR_Low_3;
    mvar_goes_low_4 true = 1 -> mvar := low, limit_MVAR_Low_2;
    mvar_goes_low_5 true = 1 -> mvar := low, limit_MVAR_Low_1;
  triggeredby mvar_low;
  transition mvar_goes_to_zero_unexplained
    mvar_goes_to_zero_unexplained_0 true = 1 -> mvar := zero, entered_zero_zone_MVAR, count_as_fault;
  transition mvar_goes_normal_unexplained
    mvar_goes_normal_unexplained_0 true = 1 -> mvar := normal, limit_MVAR_Normal, count_as_fault;
  transition mvar_goes_high_unexplained
    mvar_goes_high_unexplained_0 true = 1 -> mvar := high, limit_MVAR_High, count_as_fault;
    mvar_goes_high_unexplained_1 true = 1 -> mvar := high, limit_MVAR_High_5, count_as_fault;
    mvar_goes_high_unexplained_2 true = 1 -> mvar := high, limit_MVAR_High_4, count_as_fault;
    mvar_goes_high_unexplained_3 true = 1 -> mvar := high, limit_MVAR_High_3, count_as_fault;
    mvar_goes_high_unexplained_4 true = 1 -> mvar := high, limit_MVAR_High_2, count_as_fault;
    mvar_goes_high_unexplained_5 true = 1 -> mvar := high, limit_MVAR_High_1, count_as_fault;
  transition mvar_goes_low_unexplained
    mvar_goes_low_unexplained_0 true = 1 -> mvar := low, limit_MVAR_Low, count_as_fault;
    mvar_goes_low_unexplained_1 true = 1 -> mvar := low, limit_MVAR_Low_5, count_as_fault;
    mvar_goes_low_unexplained_2 true = 1 -> mvar := low, limit_MVAR_Low_4, count_as_fault;
    mvar_goes_low_unexplained_3 true = 1 -> mvar := low, limit_MVAR_Low_3, count_as_fault;
    mvar_goes_low_unexplained_4 true = 1 -> mvar := low, limit_MVAR_Low_2, count_as_fault;
    mvar_goes_low_unexplained_5 true = 1 -> mvar := low, limit_MVAR_Low_1, count_as_fault;
  transition mw_goes_normal_when_reenergised
    mw_goes_normal_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> mw := normal, limit_MW_Normal;
  transition mw_goes_high_when_reenergised
    mw_goes_high_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High;
    mw_goes_high_when_reenergised_1 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_5;
    mw_goes_high_when_reenergised_2 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_4;
    mw_goes_high_when_reenergised_3 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_3;
    mw_goes_high_when_reenergised_4 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_2;
    mw_goes_high_when_reenergised_5 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_1;
  transition mw_goes_low_when_reenergised
    mw_goes_low_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low;
    mw_goes_low_when_reenergised_1 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_5;
    mw_goes_low_when_reenergised_2 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_4;
    mw_goes_low_when_reenergised_3 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_3;
    mw_goes_low_when_reenergised_4 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_2;
    mw_goes_low_when_reenergised_5 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_1;
  transition mw_goes_to_zero_when_isolated
    mw_goes_to_zero_when_isolated_0 (isolated = true AND iso_state_changed = true) -> mw := zero, entered_zero_zone_MW, check_generators_off;
  transition mw_goes_low_when_isolated
    mw_goes_low_when_isolated_0 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low, check_generators_off;
    mw_goes_low_when_isolated_1 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_5, check_generators_off;
    mw_goes_low_when_isolated_2 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_4, check_generators_off;
    mw_goes_low_when_isolated_3 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_3, check_generators_off;
    mw_goes_low_when_isolated_4 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_2, check_generators_off;
    mw_goes_low_when_isolated_5 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_1, check_generators_off;
  transition mw_goes_to_zero
    mw_goes_to_zero_0 true = 1 -> mw := zero, entered_zero_zone_MW;
  triggeredby mw_zero;
  transition mw_goes_normal
    mw_goes_normal_0 true = 1 -> mw := normal, limit_MW_Normal;
  triggeredby mw_normal;
  transition mw_goes_high
    mw_goes_high_0 true = 1 -> mw := high, limit_MW_High;
    mw_goes_high_1 true = 1 -> mw := high, limit_MW_High_5;
    mw_goes_high_2 true = 1 -> mw := high, limit_MW_High_4;
    mw_goes_high_3 true = 1 -> mw := high, limit_MW_High_3;
    mw_goes_high_4 true = 1 -> mw := high, limit_MW_High_2;
    mw_goes_high_5 true = 1 -> mw := high, limit_MW_High_1;
  triggeredby mw_high;
  transition mw_goes_low
    mw_goes_low_0 true = 1 -> mw := low, limit_MW_Low;
    mw_goes_low_1 true = 1 -> mw := low, limit_MW_Low_5;
    mw_goes_low_2 true = 1 -> mw := low, limit_MW_Low_4;
    mw_goes_low_3 true = 1 -> mw := low, limit_MW_Low_3;
    mw_goes_low_4 true = 1 -> mw := low, limit_MW_Low_2;
    mw_goes_low_5 true = 1 -> mw := low, limit_MW_Low_1;
  triggeredby mw_low;
  transition mw_goes_to_zero_unexplained
    mw_goes_to_zero_unexplained_0 true = 1 -> mw := zero, entered_zero_zone_MW, count_as_fault;
  transition mw_goes_normal_unexplained
    mw_goes_normal_unexplained_0 true = 1 -> mw := normal, limit_MW_Normal, count_as_fault;
  transition mw_goes_high_unexplained
    mw_goes_high_unexplained_0 true = 1 -> mw := high, limit_MW_High, count_as_fault;
    mw_goes_high_unexplained_1 true = 1 -> mw := high, limit_MW_High_5, count_as_fault;
    mw_goes_high_unexplained_2 true = 1 -> mw := high, limit_MW_High_4, count_as_fault;
    mw_goes_high_unexplained_3 true = 1 -> mw := high, limit_MW_High_3, count_as_fault;
    mw_goes_high_unexplained_4 true = 1 -> mw := high, limit_MW_High_2, count_as_fault;
    mw_goes_high_unexplained_5 true = 1 -> mw := high, limit_MW_High_1, count_as_fault;
  transition mw_goes_low_unexplained
    mw_goes_low_unexplained_0 true = 1 -> mw := low, limit_MW_Low, count_as_fault;
    mw_goes_low_unexplained_1 true = 1 -> mw := low, limit_MW_Low_5, count_as_fault;
    mw_goes_low_unexplained_2 true = 1 -> mw := low, limit_MW_Low_4, count_as_fault;
    mw_goes_low_unexplained_3 true = 1 -> mw := low, limit_MW_Low_3, count_as_fault;
    mw_goes_low_unexplained_4 true = 1 -> mw := low, limit_MW_Low_2, count_as_fault;
    mw_goes_low_unexplained_5 true = 1 -> mw := low, limit_MW_Low_1, count_as_fault;
  transition voltage_goes_normal_when_caps_in
    voltage_goes_normal_when_caps_in_0 (voltage = low AND isolated = false) -> voltage := normal, limit_KV_Normal, check_switched_in;
  transition voltage_goes_normal_when_caps_out
    voltage_goes_normal_when_caps_out_0 (voltage = high AND isolated = false) -> voltage := normal, limit_KV_Normal, check_switched_out;
  transition voltage_goes_normal_when_reenergised
    voltage_goes_normal_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> voltage := normal, limit_KV_Normal;
  transition voltage_goes_high_when_reenergised
    voltage_goes_high_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High;
    voltage_goes_high_when_reenergised_1 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_5;
    voltage_goes_high_when_reenergised_2 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_4;
    voltage_goes_high_when_reenergised_3 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_3;
    voltage_goes_high_when_reenergised_4 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_2;
    voltage_goes_high_when_reenergised_5 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_1;
  transition voltage_goes_Low_when_reenergised
    voltage_goes_Low_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low;
    voltage_goes_Low_when_reenergised_1 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_5;
    voltage_goes_Low_when_reenergised_2 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_4;
    voltage_goes_Low_when_reenergised_3 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_3;
    voltage_goes_Low_when_reenergised_4 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_2;
    voltage_goes_Low_when_reenergised_5 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_1;
  transition voltage_goes_to_zero_when_isolated
    voltage_goes_to_zero_when_isolated_0 (isolated = true AND iso_state_changed = true) -> voltage := zero, entered_zero_zone_KV, check_generators_off;
  transition voltage_goes_low_when_isolated
    voltage_goes_low_when_isolated_0 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low, check_generators_off;
    voltage_goes_low_when_isolated_1 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_5, check_generators_off;
    voltage_goes_low_when_isolated_2 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_4, check_generators_off;
    voltage_goes_low_when_isolated_3 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_3, check_generators_off;
    voltage_goes_low_when_isolated_4 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_2, check_generators_off;
    voltage_goes_low_when_isolated_5 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_1, check_generators_off;
  transition voltage_goes_to_zero
    voltage_goes_to_zero_0 true = 1 -> voltage := zero, entered_zero_zone_KV;
  triggeredby voltage_zero;
  transition voltage_goes_normal
    voltage_goes_normal_0 true = 1 -> voltage := normal, limit_KV_Normal;
  triggeredby voltage_normal;
  transition voltage_goes_high
    voltage_goes_high_0 true = 1 -> voltage := high, limit_KV_High;
    voltage_goes_high_1 true = 1 -> voltage := high, limit_KV_High_5;
    voltage_goes_high_2 true = 1 -> voltage := high, limit_KV_High_4;
    voltage_goes_high_3 true = 1 -> voltage := high, limit_KV_High_3;
    voltage_goes_high_4 true = 1 -> voltage := high, limit_KV_High_2;
    voltage_goes_high_5 true = 1 -> voltage := high, limit_KV_High_1;
  triggeredby voltage_high;
  transition voltage_goes_low
    voltage_goes_low_0 true = 1 -> voltage := low, limit_KV_Low;
    voltage_goes_low_1 true = 1 -> voltage := low, limit_KV_Low_5;
    voltage_goes_low_2 true = 1 -> voltage := low, limit_KV_Low_4;
    voltage_goes_low_3 true = 1 -> voltage := low, limit_KV_Low_3;
    voltage_goes_low_4 true = 1 -> voltage := low, limit_KV_Low_2;
    voltage_goes_low_5 true = 1 -> voltage := low, limit_KV_Low_1;
  triggeredby voltage_low;
  transition voltage_goes_to_zero_unexplained
    voltage_goes_to_zero_unexplained_0 true = 1 -> voltage := zero, entered_zero_zone_KV, count_as_fault;
  transition voltage_goes_normal_unexplained
    voltage_goes_normal_unexplained_0 true = 1 -> voltage := normal, limit_KV_Normal, count_as_fault;
  transition voltage_goes_high_unexplained
    voltage_goes_high_unexplained_0 true = 1 -> voltage := high, limit_KV_High, count_as_fault;
    voltage_goes_high_unexplained_1 true = 1 -> voltage := high, limit_KV_High_5, count_as_fault;
    voltage_goes_high_unexplained_2 true = 1 -> voltage := high, limit_KV_High_4, count_as_fault;
    voltage_goes_high_unexplained_3 true = 1 -> voltage := high, limit_KV_High_3, count_as_fault;
    voltage_goes_high_unexplained_4 true = 1 -> voltage := high, limit_KV_High_2, count_as_fault;
    voltage_goes_high_unexplained_5 true = 1 -> voltage := high, limit_KV_High_1, count_as_fault;
  transition voltage_goes_low_unexplained
    voltage_goes_low_unexplained_0 true = 1 -> voltage := low, limit_KV_Low, count_as_fault;
    voltage_goes_low_unexplained_1 true = 1 -> voltage := low, limit_KV_Low_5, count_as_fault;
    voltage_goes_low_unexplained_2 true = 1 -> voltage := low, limit_KV_Low_4, count_as_fault;
    voltage_goes_low_unexplained_3 true = 1 -> voltage := low, limit_KV_Low_3, count_as_fault;
    voltage_goes_low_unexplained_4 true = 1 -> voltage := low, limit_KV_Low_2, count_as_fault;
    voltage_goes_low_unexplained_5 true = 1 -> voltage := low, limit_KV_Low_1, count_as_fault;
  transition iso_state_changed_timeout
    iso_state_changed_timeout_0 true = 1 -> iso_state_changed := false;
  triggeredby [0.0..15.0] iso_state_changed = true;
  transition become_not_isolated
    become_not_isolated_0 true = 1 -> isolated := false, iso_state_changed := true;
  triggeredby set_isolated_false;
  transition become_isolated
    become_isolated_0 true = 1 -> isolated := true, iso_state_changed := true;
  triggeredby set_isolated_true;
}
component Bus_X106 = {
  var mvar : {zero,high,low,normal};
  var mw : {zero,high,low,normal};
  var voltage : {zero,high,low,normal};
  var iso_state_changed : [0..1];
  var isolated : [0..1];
  event check_generators_off;
  event check_switched_in;
  event check_switched_out;
  event count_as_fault;
  event set_isolated_false;
  event set_isolated_true;
  event mvar_zero;
  event mvar_normal;
  event mvar_high;
  event mvar_low;
  event mw_zero;
  event mw_normal;
  event mw_high;
  event mw_low;
  event voltage_zero;
  event voltage_normal;
  event voltage_high;
  event voltage_low;
  event entered_zero_zone_MVAR;
  event limit_MVAR_High;
  event limit_MVAR_High_5;
  event limit_MVAR_High_4;
  event limit_MVAR_High_3;
  event limit_MVAR_High_2;
  event limit_MVAR_High_1;
  event limit_MVAR_Low;
  event limit_MVAR_Low_5;
  event limit_MVAR_Low_4;
  event limit_MVAR_Low_3;
  event limit_MVAR_Low_2;
  event limit_MVAR_Low_1;
  event limit_MVAR_Normal;
  event entered_zero_zone_MW;
  event limit_MW_High;
  event limit_MW_High_5;
  event limit_MW_High_4;
  event limit_MW_High_3;
  event limit_MW_High_2;
  event limit_MW_High_1;
  event limit_MW_Low;
  event limit_MW_Low_5;
  event limit_MW_Low_4;
  event limit_MW_Low_3;
  event limit_MW_Low_2;
  event limit_MW_Low_1;
  event limit_MW_Normal;
  event entered_zero_zone_KV;
  event limit_KV_High;
  event limit_KV_High_5;
  event limit_KV_High_4;
  event limit_KV_High_3;
  event limit_KV_High_2;
  event limit_KV_High_1;
  event limit_KV_Low;
  event limit_KV_Low_5;
  event limit_KV_Low_4;
  event limit_KV_Low_3;
  event limit_KV_Low_2;
  event limit_KV_Low_1;
  event limit_KV_Normal;
  transition mvar_goes_to_zero
    mvar_goes_to_zero_0 true = 1 -> mvar := zero, entered_zero_zone_MVAR;
  triggeredby mvar_zero;
  transition mvar_goes_normal
    mvar_goes_normal_0 true = 1 -> mvar := normal, limit_MVAR_Normal;
  triggeredby mvar_normal;
  transition mvar_goes_high
    mvar_goes_high_0 true = 1 -> mvar := high, limit_MVAR_High;
    mvar_goes_high_1 true = 1 -> mvar := high, limit_MVAR_High_5;
    mvar_goes_high_2 true = 1 -> mvar := high, limit_MVAR_High_4;
    mvar_goes_high_3 true = 1 -> mvar := high, limit_MVAR_High_3;
    mvar_goes_high_4 true = 1 -> mvar := high, limit_MVAR_High_2;
    mvar_goes_high_5 true = 1 -> mvar := high, limit_MVAR_High_1;
  triggeredby mvar_high;
  transition mvar_goes_low
    mvar_goes_low_0 true = 1 -> mvar := low, limit_MVAR_Low;
    mvar_goes_low_1 true = 1 -> mvar := low, limit_MVAR_Low_5;
    mvar_goes_low_2 true = 1 -> mvar := low, limit_MVAR_Low_4;
    mvar_goes_low_3 true = 1 -> mvar := low, limit_MVAR_Low_3;
    mvar_goes_low_4 true = 1 -> mvar := low, limit_MVAR_Low_2;
    mvar_goes_low_5 true = 1 -> mvar := low, limit_MVAR_Low_1;
  triggeredby mvar_low;
  transition mvar_goes_to_zero_unexplained
    mvar_goes_to_zero_unexplained_0 true = 1 -> mvar := zero, entered_zero_zone_MVAR, count_as_fault;
  transition mvar_goes_normal_unexplained
    mvar_goes_normal_unexplained_0 true = 1 -> mvar := normal, limit_MVAR_Normal, count_as_fault;
  transition mvar_goes_high_unexplained
    mvar_goes_high_unexplained_0 true = 1 -> mvar := high, limit_MVAR_High, count_as_fault;
    mvar_goes_high_unexplained_1 true = 1 -> mvar := high, limit_MVAR_High_5, count_as_fault;
    mvar_goes_high_unexplained_2 true = 1 -> mvar := high, limit_MVAR_High_4, count_as_fault;
    mvar_goes_high_unexplained_3 true = 1 -> mvar := high, limit_MVAR_High_3, count_as_fault;
    mvar_goes_high_unexplained_4 true = 1 -> mvar := high, limit_MVAR_High_2, count_as_fault;
    mvar_goes_high_unexplained_5 true = 1 -> mvar := high, limit_MVAR_High_1, count_as_fault;
  transition mvar_goes_low_unexplained
    mvar_goes_low_unexplained_0 true = 1 -> mvar := low, limit_MVAR_Low, count_as_fault;
    mvar_goes_low_unexplained_1 true = 1 -> mvar := low, limit_MVAR_Low_5, count_as_fault;
    mvar_goes_low_unexplained_2 true = 1 -> mvar := low, limit_MVAR_Low_4, count_as_fault;
    mvar_goes_low_unexplained_3 true = 1 -> mvar := low, limit_MVAR_Low_3, count_as_fault;
    mvar_goes_low_unexplained_4 true = 1 -> mvar := low, limit_MVAR_Low_2, count_as_fault;
    mvar_goes_low_unexplained_5 true = 1 -> mvar := low, limit_MVAR_Low_1, count_as_fault;
  transition mw_goes_normal_when_reenergised
    mw_goes_normal_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> mw := normal, limit_MW_Normal;
  transition mw_goes_high_when_reenergised
    mw_goes_high_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High;
    mw_goes_high_when_reenergised_1 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_5;
    mw_goes_high_when_reenergised_2 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_4;
    mw_goes_high_when_reenergised_3 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_3;
    mw_goes_high_when_reenergised_4 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_2;
    mw_goes_high_when_reenergised_5 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_1;
  transition mw_goes_low_when_reenergised
    mw_goes_low_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low;
    mw_goes_low_when_reenergised_1 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_5;
    mw_goes_low_when_reenergised_2 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_4;
    mw_goes_low_when_reenergised_3 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_3;
    mw_goes_low_when_reenergised_4 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_2;
    mw_goes_low_when_reenergised_5 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_1;
  transition mw_goes_to_zero_when_isolated
    mw_goes_to_zero_when_isolated_0 (isolated = true AND iso_state_changed = true) -> mw := zero, entered_zero_zone_MW, check_generators_off;
  transition mw_goes_low_when_isolated
    mw_goes_low_when_isolated_0 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low, check_generators_off;
    mw_goes_low_when_isolated_1 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_5, check_generators_off;
    mw_goes_low_when_isolated_2 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_4, check_generators_off;
    mw_goes_low_when_isolated_3 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_3, check_generators_off;
    mw_goes_low_when_isolated_4 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_2, check_generators_off;
    mw_goes_low_when_isolated_5 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_1, check_generators_off;
  transition mw_goes_to_zero
    mw_goes_to_zero_0 true = 1 -> mw := zero, entered_zero_zone_MW;
  triggeredby mw_zero;
  transition mw_goes_normal
    mw_goes_normal_0 true = 1 -> mw := normal, limit_MW_Normal;
  triggeredby mw_normal;
  transition mw_goes_high
    mw_goes_high_0 true = 1 -> mw := high, limit_MW_High;
    mw_goes_high_1 true = 1 -> mw := high, limit_MW_High_5;
    mw_goes_high_2 true = 1 -> mw := high, limit_MW_High_4;
    mw_goes_high_3 true = 1 -> mw := high, limit_MW_High_3;
    mw_goes_high_4 true = 1 -> mw := high, limit_MW_High_2;
    mw_goes_high_5 true = 1 -> mw := high, limit_MW_High_1;
  triggeredby mw_high;
  transition mw_goes_low
    mw_goes_low_0 true = 1 -> mw := low, limit_MW_Low;
    mw_goes_low_1 true = 1 -> mw := low, limit_MW_Low_5;
    mw_goes_low_2 true = 1 -> mw := low, limit_MW_Low_4;
    mw_goes_low_3 true = 1 -> mw := low, limit_MW_Low_3;
    mw_goes_low_4 true = 1 -> mw := low, limit_MW_Low_2;
    mw_goes_low_5 true = 1 -> mw := low, limit_MW_Low_1;
  triggeredby mw_low;
  transition mw_goes_to_zero_unexplained
    mw_goes_to_zero_unexplained_0 true = 1 -> mw := zero, entered_zero_zone_MW, count_as_fault;
  transition mw_goes_normal_unexplained
    mw_goes_normal_unexplained_0 true = 1 -> mw := normal, limit_MW_Normal, count_as_fault;
  transition mw_goes_high_unexplained
    mw_goes_high_unexplained_0 true = 1 -> mw := high, limit_MW_High, count_as_fault;
    mw_goes_high_unexplained_1 true = 1 -> mw := high, limit_MW_High_5, count_as_fault;
    mw_goes_high_unexplained_2 true = 1 -> mw := high, limit_MW_High_4, count_as_fault;
    mw_goes_high_unexplained_3 true = 1 -> mw := high, limit_MW_High_3, count_as_fault;
    mw_goes_high_unexplained_4 true = 1 -> mw := high, limit_MW_High_2, count_as_fault;
    mw_goes_high_unexplained_5 true = 1 -> mw := high, limit_MW_High_1, count_as_fault;
  transition mw_goes_low_unexplained
    mw_goes_low_unexplained_0 true = 1 -> mw := low, limit_MW_Low, count_as_fault;
    mw_goes_low_unexplained_1 true = 1 -> mw := low, limit_MW_Low_5, count_as_fault;
    mw_goes_low_unexplained_2 true = 1 -> mw := low, limit_MW_Low_4, count_as_fault;
    mw_goes_low_unexplained_3 true = 1 -> mw := low, limit_MW_Low_3, count_as_fault;
    mw_goes_low_unexplained_4 true = 1 -> mw := low, limit_MW_Low_2, count_as_fault;
    mw_goes_low_unexplained_5 true = 1 -> mw := low, limit_MW_Low_1, count_as_fault;
  transition voltage_goes_normal_when_caps_in
    voltage_goes_normal_when_caps_in_0 (voltage = low AND isolated = false) -> voltage := normal, limit_KV_Normal, check_switched_in;
  transition voltage_goes_normal_when_caps_out
    voltage_goes_normal_when_caps_out_0 (voltage = high AND isolated = false) -> voltage := normal, limit_KV_Normal, check_switched_out;
  transition voltage_goes_normal_when_reenergised
    voltage_goes_normal_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> voltage := normal, limit_KV_Normal;
  transition voltage_goes_high_when_reenergised
    voltage_goes_high_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High;
    voltage_goes_high_when_reenergised_1 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_5;
    voltage_goes_high_when_reenergised_2 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_4;
    voltage_goes_high_when_reenergised_3 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_3;
    voltage_goes_high_when_reenergised_4 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_2;
    voltage_goes_high_when_reenergised_5 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_1;
  transition voltage_goes_Low_when_reenergised
    voltage_goes_Low_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low;
    voltage_goes_Low_when_reenergised_1 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_5;
    voltage_goes_Low_when_reenergised_2 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_4;
    voltage_goes_Low_when_reenergised_3 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_3;
    voltage_goes_Low_when_reenergised_4 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_2;
    voltage_goes_Low_when_reenergised_5 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_1;
  transition voltage_goes_to_zero_when_isolated
    voltage_goes_to_zero_when_isolated_0 (isolated = true AND iso_state_changed = true) -> voltage := zero, entered_zero_zone_KV, check_generators_off;
  transition voltage_goes_low_when_isolated
    voltage_goes_low_when_isolated_0 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low, check_generators_off;
    voltage_goes_low_when_isolated_1 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_5, check_generators_off;
    voltage_goes_low_when_isolated_2 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_4, check_generators_off;
    voltage_goes_low_when_isolated_3 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_3, check_generators_off;
    voltage_goes_low_when_isolated_4 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_2, check_generators_off;
    voltage_goes_low_when_isolated_5 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_1, check_generators_off;
  transition voltage_goes_to_zero
    voltage_goes_to_zero_0 true = 1 -> voltage := zero, entered_zero_zone_KV;
  triggeredby voltage_zero;
  transition voltage_goes_normal
    voltage_goes_normal_0 true = 1 -> voltage := normal, limit_KV_Normal;
  triggeredby voltage_normal;
  transition voltage_goes_high
    voltage_goes_high_0 true = 1 -> voltage := high, limit_KV_High;
    voltage_goes_high_1 true = 1 -> voltage := high, limit_KV_High_5;
    voltage_goes_high_2 true = 1 -> voltage := high, limit_KV_High_4;
    voltage_goes_high_3 true = 1 -> voltage := high, limit_KV_High_3;
    voltage_goes_high_4 true = 1 -> voltage := high, limit_KV_High_2;
    voltage_goes_high_5 true = 1 -> voltage := high, limit_KV_High_1;
  triggeredby voltage_high;
  transition voltage_goes_low
    voltage_goes_low_0 true = 1 -> voltage := low, limit_KV_Low;
    voltage_goes_low_1 true = 1 -> voltage := low, limit_KV_Low_5;
    voltage_goes_low_2 true = 1 -> voltage := low, limit_KV_Low_4;
    voltage_goes_low_3 true = 1 -> voltage := low, limit_KV_Low_3;
    voltage_goes_low_4 true = 1 -> voltage := low, limit_KV_Low_2;
    voltage_goes_low_5 true = 1 -> voltage := low, limit_KV_Low_1;
  triggeredby voltage_low;
  transition voltage_goes_to_zero_unexplained
    voltage_goes_to_zero_unexplained_0 true = 1 -> voltage := zero, entered_zero_zone_KV, count_as_fault;
  transition voltage_goes_normal_unexplained
    voltage_goes_normal_unexplained_0 true = 1 -> voltage := normal, limit_KV_Normal, count_as_fault;
  transition voltage_goes_high_unexplained
    voltage_goes_high_unexplained_0 true = 1 -> voltage := high, limit_KV_High, count_as_fault;
    voltage_goes_high_unexplained_1 true = 1 -> voltage := high, limit_KV_High_5, count_as_fault;
    voltage_goes_high_unexplained_2 true = 1 -> voltage := high, limit_KV_High_4, count_as_fault;
    voltage_goes_high_unexplained_3 true = 1 -> voltage := high, limit_KV_High_3, count_as_fault;
    voltage_goes_high_unexplained_4 true = 1 -> voltage := high, limit_KV_High_2, count_as_fault;
    voltage_goes_high_unexplained_5 true = 1 -> voltage := high, limit_KV_High_1, count_as_fault;
  transition voltage_goes_low_unexplained
    voltage_goes_low_unexplained_0 true = 1 -> voltage := low, limit_KV_Low, count_as_fault;
    voltage_goes_low_unexplained_1 true = 1 -> voltage := low, limit_KV_Low_5, count_as_fault;
    voltage_goes_low_unexplained_2 true = 1 -> voltage := low, limit_KV_Low_4, count_as_fault;
    voltage_goes_low_unexplained_3 true = 1 -> voltage := low, limit_KV_Low_3, count_as_fault;
    voltage_goes_low_unexplained_4 true = 1 -> voltage := low, limit_KV_Low_2, count_as_fault;
    voltage_goes_low_unexplained_5 true = 1 -> voltage := low, limit_KV_Low_1, count_as_fault;
  transition iso_state_changed_timeout
    iso_state_changed_timeout_0 true = 1 -> iso_state_changed := false;
  triggeredby [0.0..15.0] iso_state_changed = true;
  transition become_not_isolated
    become_not_isolated_0 true = 1 -> isolated := false, iso_state_changed := true;
  triggeredby set_isolated_false;
  transition become_isolated
    become_isolated_0 true = 1 -> isolated := true, iso_state_changed := true;
  triggeredby set_isolated_true;
}
component Bus_X104 = {
  var mvar : {zero,high,low,normal};
  var mw : {zero,high,low,normal};
  var voltage : {zero,high,low,normal};
  var iso_state_changed : [0..1];
  var isolated : [0..1];
  event check_generators_off;
  event check_switched_in;
  event check_switched_out;
  event count_as_fault;
  event set_isolated_false;
  event set_isolated_true;
  event mvar_zero;
  event mvar_normal;
  event mvar_high;
  event mvar_low;
  event mw_zero;
  event mw_normal;
  event mw_high;
  event mw_low;
  event voltage_zero;
  event voltage_normal;
  event voltage_high;
  event voltage_low;
  event entered_zero_zone_MVAR;
  event limit_MVAR_High;
  event limit_MVAR_High_5;
  event limit_MVAR_High_4;
  event limit_MVAR_High_3;
  event limit_MVAR_High_2;
  event limit_MVAR_High_1;
  event limit_MVAR_Low;
  event limit_MVAR_Low_5;
  event limit_MVAR_Low_4;
  event limit_MVAR_Low_3;
  event limit_MVAR_Low_2;
  event limit_MVAR_Low_1;
  event limit_MVAR_Normal;
  event entered_zero_zone_MW;
  event limit_MW_High;
  event limit_MW_High_5;
  event limit_MW_High_4;
  event limit_MW_High_3;
  event limit_MW_High_2;
  event limit_MW_High_1;
  event limit_MW_Low;
  event limit_MW_Low_5;
  event limit_MW_Low_4;
  event limit_MW_Low_3;
  event limit_MW_Low_2;
  event limit_MW_Low_1;
  event limit_MW_Normal;
  event entered_zero_zone_KV;
  event limit_KV_High;
  event limit_KV_High_5;
  event limit_KV_High_4;
  event limit_KV_High_3;
  event limit_KV_High_2;
  event limit_KV_High_1;
  event limit_KV_Low;
  event limit_KV_Low_5;
  event limit_KV_Low_4;
  event limit_KV_Low_3;
  event limit_KV_Low_2;
  event limit_KV_Low_1;
  event limit_KV_Normal;
  transition mvar_goes_to_zero
    mvar_goes_to_zero_0 true = 1 -> mvar := zero, entered_zero_zone_MVAR;
  triggeredby mvar_zero;
  transition mvar_goes_normal
    mvar_goes_normal_0 true = 1 -> mvar := normal, limit_MVAR_Normal;
  triggeredby mvar_normal;
  transition mvar_goes_high
    mvar_goes_high_0 true = 1 -> mvar := high, limit_MVAR_High;
    mvar_goes_high_1 true = 1 -> mvar := high, limit_MVAR_High_5;
    mvar_goes_high_2 true = 1 -> mvar := high, limit_MVAR_High_4;
    mvar_goes_high_3 true = 1 -> mvar := high, limit_MVAR_High_3;
    mvar_goes_high_4 true = 1 -> mvar := high, limit_MVAR_High_2;
    mvar_goes_high_5 true = 1 -> mvar := high, limit_MVAR_High_1;
  triggeredby mvar_high;
  transition mvar_goes_low
    mvar_goes_low_0 true = 1 -> mvar := low, limit_MVAR_Low;
    mvar_goes_low_1 true = 1 -> mvar := low, limit_MVAR_Low_5;
    mvar_goes_low_2 true = 1 -> mvar := low, limit_MVAR_Low_4;
    mvar_goes_low_3 true = 1 -> mvar := low, limit_MVAR_Low_3;
    mvar_goes_low_4 true = 1 -> mvar := low, limit_MVAR_Low_2;
    mvar_goes_low_5 true = 1 -> mvar := low, limit_MVAR_Low_1;
  triggeredby mvar_low;
  transition mvar_goes_to_zero_unexplained
    mvar_goes_to_zero_unexplained_0 true = 1 -> mvar := zero, entered_zero_zone_MVAR, count_as_fault;
  transition mvar_goes_normal_unexplained
    mvar_goes_normal_unexplained_0 true = 1 -> mvar := normal, limit_MVAR_Normal, count_as_fault;
  transition mvar_goes_high_unexplained
    mvar_goes_high_unexplained_0 true = 1 -> mvar := high, limit_MVAR_High, count_as_fault;
    mvar_goes_high_unexplained_1 true = 1 -> mvar := high, limit_MVAR_High_5, count_as_fault;
    mvar_goes_high_unexplained_2 true = 1 -> mvar := high, limit_MVAR_High_4, count_as_fault;
    mvar_goes_high_unexplained_3 true = 1 -> mvar := high, limit_MVAR_High_3, count_as_fault;
    mvar_goes_high_unexplained_4 true = 1 -> mvar := high, limit_MVAR_High_2, count_as_fault;
    mvar_goes_high_unexplained_5 true = 1 -> mvar := high, limit_MVAR_High_1, count_as_fault;
  transition mvar_goes_low_unexplained
    mvar_goes_low_unexplained_0 true = 1 -> mvar := low, limit_MVAR_Low, count_as_fault;
    mvar_goes_low_unexplained_1 true = 1 -> mvar := low, limit_MVAR_Low_5, count_as_fault;
    mvar_goes_low_unexplained_2 true = 1 -> mvar := low, limit_MVAR_Low_4, count_as_fault;
    mvar_goes_low_unexplained_3 true = 1 -> mvar := low, limit_MVAR_Low_3, count_as_fault;
    mvar_goes_low_unexplained_4 true = 1 -> mvar := low, limit_MVAR_Low_2, count_as_fault;
    mvar_goes_low_unexplained_5 true = 1 -> mvar := low, limit_MVAR_Low_1, count_as_fault;
  transition mw_goes_normal_when_reenergised
    mw_goes_normal_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> mw := normal, limit_MW_Normal;
  transition mw_goes_high_when_reenergised
    mw_goes_high_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High;
    mw_goes_high_when_reenergised_1 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_5;
    mw_goes_high_when_reenergised_2 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_4;
    mw_goes_high_when_reenergised_3 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_3;
    mw_goes_high_when_reenergised_4 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_2;
    mw_goes_high_when_reenergised_5 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_1;
  transition mw_goes_low_when_reenergised
    mw_goes_low_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low;
    mw_goes_low_when_reenergised_1 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_5;
    mw_goes_low_when_reenergised_2 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_4;
    mw_goes_low_when_reenergised_3 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_3;
    mw_goes_low_when_reenergised_4 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_2;
    mw_goes_low_when_reenergised_5 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_1;
  transition mw_goes_to_zero_when_isolated
    mw_goes_to_zero_when_isolated_0 (isolated = true AND iso_state_changed = true) -> mw := zero, entered_zero_zone_MW, check_generators_off;
  transition mw_goes_low_when_isolated
    mw_goes_low_when_isolated_0 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low, check_generators_off;
    mw_goes_low_when_isolated_1 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_5, check_generators_off;
    mw_goes_low_when_isolated_2 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_4, check_generators_off;
    mw_goes_low_when_isolated_3 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_3, check_generators_off;
    mw_goes_low_when_isolated_4 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_2, check_generators_off;
    mw_goes_low_when_isolated_5 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_1, check_generators_off;
  transition mw_goes_to_zero
    mw_goes_to_zero_0 true = 1 -> mw := zero, entered_zero_zone_MW;
  triggeredby mw_zero;
  transition mw_goes_normal
    mw_goes_normal_0 true = 1 -> mw := normal, limit_MW_Normal;
  triggeredby mw_normal;
  transition mw_goes_high
    mw_goes_high_0 true = 1 -> mw := high, limit_MW_High;
    mw_goes_high_1 true = 1 -> mw := high, limit_MW_High_5;
    mw_goes_high_2 true = 1 -> mw := high, limit_MW_High_4;
    mw_goes_high_3 true = 1 -> mw := high, limit_MW_High_3;
    mw_goes_high_4 true = 1 -> mw := high, limit_MW_High_2;
    mw_goes_high_5 true = 1 -> mw := high, limit_MW_High_1;
  triggeredby mw_high;
  transition mw_goes_low
    mw_goes_low_0 true = 1 -> mw := low, limit_MW_Low;
    mw_goes_low_1 true = 1 -> mw := low, limit_MW_Low_5;
    mw_goes_low_2 true = 1 -> mw := low, limit_MW_Low_4;
    mw_goes_low_3 true = 1 -> mw := low, limit_MW_Low_3;
    mw_goes_low_4 true = 1 -> mw := low, limit_MW_Low_2;
    mw_goes_low_5 true = 1 -> mw := low, limit_MW_Low_1;
  triggeredby mw_low;
  transition mw_goes_to_zero_unexplained
    mw_goes_to_zero_unexplained_0 true = 1 -> mw := zero, entered_zero_zone_MW, count_as_fault;
  transition mw_goes_normal_unexplained
    mw_goes_normal_unexplained_0 true = 1 -> mw := normal, limit_MW_Normal, count_as_fault;
  transition mw_goes_high_unexplained
    mw_goes_high_unexplained_0 true = 1 -> mw := high, limit_MW_High, count_as_fault;
    mw_goes_high_unexplained_1 true = 1 -> mw := high, limit_MW_High_5, count_as_fault;
    mw_goes_high_unexplained_2 true = 1 -> mw := high, limit_MW_High_4, count_as_fault;
    mw_goes_high_unexplained_3 true = 1 -> mw := high, limit_MW_High_3, count_as_fault;
    mw_goes_high_unexplained_4 true = 1 -> mw := high, limit_MW_High_2, count_as_fault;
    mw_goes_high_unexplained_5 true = 1 -> mw := high, limit_MW_High_1, count_as_fault;
  transition mw_goes_low_unexplained
    mw_goes_low_unexplained_0 true = 1 -> mw := low, limit_MW_Low, count_as_fault;
    mw_goes_low_unexplained_1 true = 1 -> mw := low, limit_MW_Low_5, count_as_fault;
    mw_goes_low_unexplained_2 true = 1 -> mw := low, limit_MW_Low_4, count_as_fault;
    mw_goes_low_unexplained_3 true = 1 -> mw := low, limit_MW_Low_3, count_as_fault;
    mw_goes_low_unexplained_4 true = 1 -> mw := low, limit_MW_Low_2, count_as_fault;
    mw_goes_low_unexplained_5 true = 1 -> mw := low, limit_MW_Low_1, count_as_fault;
  transition voltage_goes_normal_when_caps_in
    voltage_goes_normal_when_caps_in_0 (voltage = low AND isolated = false) -> voltage := normal, limit_KV_Normal, check_switched_in;
  transition voltage_goes_normal_when_caps_out
    voltage_goes_normal_when_caps_out_0 (voltage = high AND isolated = false) -> voltage := normal, limit_KV_Normal, check_switched_out;
  transition voltage_goes_normal_when_reenergised
    voltage_goes_normal_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> voltage := normal, limit_KV_Normal;
  transition voltage_goes_high_when_reenergised
    voltage_goes_high_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High;
    voltage_goes_high_when_reenergised_1 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_5;
    voltage_goes_high_when_reenergised_2 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_4;
    voltage_goes_high_when_reenergised_3 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_3;
    voltage_goes_high_when_reenergised_4 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_2;
    voltage_goes_high_when_reenergised_5 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_1;
  transition voltage_goes_Low_when_reenergised
    voltage_goes_Low_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low;
    voltage_goes_Low_when_reenergised_1 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_5;
    voltage_goes_Low_when_reenergised_2 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_4;
    voltage_goes_Low_when_reenergised_3 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_3;
    voltage_goes_Low_when_reenergised_4 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_2;
    voltage_goes_Low_when_reenergised_5 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_1;
  transition voltage_goes_to_zero_when_isolated
    voltage_goes_to_zero_when_isolated_0 (isolated = true AND iso_state_changed = true) -> voltage := zero, entered_zero_zone_KV, check_generators_off;
  transition voltage_goes_low_when_isolated
    voltage_goes_low_when_isolated_0 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low, check_generators_off;
    voltage_goes_low_when_isolated_1 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_5, check_generators_off;
    voltage_goes_low_when_isolated_2 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_4, check_generators_off;
    voltage_goes_low_when_isolated_3 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_3, check_generators_off;
    voltage_goes_low_when_isolated_4 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_2, check_generators_off;
    voltage_goes_low_when_isolated_5 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_1, check_generators_off;
  transition voltage_goes_to_zero
    voltage_goes_to_zero_0 true = 1 -> voltage := zero, entered_zero_zone_KV;
  triggeredby voltage_zero;
  transition voltage_goes_normal
    voltage_goes_normal_0 true = 1 -> voltage := normal, limit_KV_Normal;
  triggeredby voltage_normal;
  transition voltage_goes_high
    voltage_goes_high_0 true = 1 -> voltage := high, limit_KV_High;
    voltage_goes_high_1 true = 1 -> voltage := high, limit_KV_High_5;
    voltage_goes_high_2 true = 1 -> voltage := high, limit_KV_High_4;
    voltage_goes_high_3 true = 1 -> voltage := high, limit_KV_High_3;
    voltage_goes_high_4 true = 1 -> voltage := high, limit_KV_High_2;
    voltage_goes_high_5 true = 1 -> voltage := high, limit_KV_High_1;
  triggeredby voltage_high;
  transition voltage_goes_low
    voltage_goes_low_0 true = 1 -> voltage := low, limit_KV_Low;
    voltage_goes_low_1 true = 1 -> voltage := low, limit_KV_Low_5;
    voltage_goes_low_2 true = 1 -> voltage := low, limit_KV_Low_4;
    voltage_goes_low_3 true = 1 -> voltage := low, limit_KV_Low_3;
    voltage_goes_low_4 true = 1 -> voltage := low, limit_KV_Low_2;
    voltage_goes_low_5 true = 1 -> voltage := low, limit_KV_Low_1;
  triggeredby voltage_low;
  transition voltage_goes_to_zero_unexplained
    voltage_goes_to_zero_unexplained_0 true = 1 -> voltage := zero, entered_zero_zone_KV, count_as_fault;
  transition voltage_goes_normal_unexplained
    voltage_goes_normal_unexplained_0 true = 1 -> voltage := normal, limit_KV_Normal, count_as_fault;
  transition voltage_goes_high_unexplained
    voltage_goes_high_unexplained_0 true = 1 -> voltage := high, limit_KV_High, count_as_fault;
    voltage_goes_high_unexplained_1 true = 1 -> voltage := high, limit_KV_High_5, count_as_fault;
    voltage_goes_high_unexplained_2 true = 1 -> voltage := high, limit_KV_High_4, count_as_fault;
    voltage_goes_high_unexplained_3 true = 1 -> voltage := high, limit_KV_High_3, count_as_fault;
    voltage_goes_high_unexplained_4 true = 1 -> voltage := high, limit_KV_High_2, count_as_fault;
    voltage_goes_high_unexplained_5 true = 1 -> voltage := high, limit_KV_High_1, count_as_fault;
  transition voltage_goes_low_unexplained
    voltage_goes_low_unexplained_0 true = 1 -> voltage := low, limit_KV_Low, count_as_fault;
    voltage_goes_low_unexplained_1 true = 1 -> voltage := low, limit_KV_Low_5, count_as_fault;
    voltage_goes_low_unexplained_2 true = 1 -> voltage := low, limit_KV_Low_4, count_as_fault;
    voltage_goes_low_unexplained_3 true = 1 -> voltage := low, limit_KV_Low_3, count_as_fault;
    voltage_goes_low_unexplained_4 true = 1 -> voltage := low, limit_KV_Low_2, count_as_fault;
    voltage_goes_low_unexplained_5 true = 1 -> voltage := low, limit_KV_Low_1, count_as_fault;
  transition iso_state_changed_timeout
    iso_state_changed_timeout_0 true = 1 -> iso_state_changed := false;
  triggeredby [0.0..15.0] iso_state_changed = true;
  transition become_not_isolated
    become_not_isolated_0 true = 1 -> isolated := false, iso_state_changed := true;
  triggeredby set_isolated_false;
  transition become_isolated
    become_isolated_0 true = 1 -> isolated := true, iso_state_changed := true;
  triggeredby set_isolated_true;
}
component Bus_X107 = {
  var mvar : {zero,high,low,normal};
  var mw : {zero,high,low,normal};
  var voltage : {zero,high,low,normal};
  var iso_state_changed : [0..1];
  var isolated : [0..1];
  event check_generators_off;
  event check_switched_in;
  event check_switched_out;
  event count_as_fault;
  event set_isolated_false;
  event set_isolated_true;
  event mvar_zero;
  event mvar_normal;
  event mvar_high;
  event mvar_low;
  event mw_zero;
  event mw_normal;
  event mw_high;
  event mw_low;
  event voltage_zero;
  event voltage_normal;
  event voltage_high;
  event voltage_low;
  event entered_zero_zone_MVAR;
  event limit_MVAR_High;
  event limit_MVAR_High_5;
  event limit_MVAR_High_4;
  event limit_MVAR_High_3;
  event limit_MVAR_High_2;
  event limit_MVAR_High_1;
  event limit_MVAR_Low;
  event limit_MVAR_Low_5;
  event limit_MVAR_Low_4;
  event limit_MVAR_Low_3;
  event limit_MVAR_Low_2;
  event limit_MVAR_Low_1;
  event limit_MVAR_Normal;
  event entered_zero_zone_MW;
  event limit_MW_High;
  event limit_MW_High_5;
  event limit_MW_High_4;
  event limit_MW_High_3;
  event limit_MW_High_2;
  event limit_MW_High_1;
  event limit_MW_Low;
  event limit_MW_Low_5;
  event limit_MW_Low_4;
  event limit_MW_Low_3;
  event limit_MW_Low_2;
  event limit_MW_Low_1;
  event limit_MW_Normal;
  event entered_zero_zone_KV;
  event limit_KV_High;
  event limit_KV_High_5;
  event limit_KV_High_4;
  event limit_KV_High_3;
  event limit_KV_High_2;
  event limit_KV_High_1;
  event limit_KV_Low;
  event limit_KV_Low_5;
  event limit_KV_Low_4;
  event limit_KV_Low_3;
  event limit_KV_Low_2;
  event limit_KV_Low_1;
  event limit_KV_Normal;
  transition mvar_goes_to_zero
    mvar_goes_to_zero_0 true = 1 -> mvar := zero, entered_zero_zone_MVAR;
  triggeredby mvar_zero;
  transition mvar_goes_normal
    mvar_goes_normal_0 true = 1 -> mvar := normal, limit_MVAR_Normal;
  triggeredby mvar_normal;
  transition mvar_goes_high
    mvar_goes_high_0 true = 1 -> mvar := high, limit_MVAR_High;
    mvar_goes_high_1 true = 1 -> mvar := high, limit_MVAR_High_5;
    mvar_goes_high_2 true = 1 -> mvar := high, limit_MVAR_High_4;
    mvar_goes_high_3 true = 1 -> mvar := high, limit_MVAR_High_3;
    mvar_goes_high_4 true = 1 -> mvar := high, limit_MVAR_High_2;
    mvar_goes_high_5 true = 1 -> mvar := high, limit_MVAR_High_1;
  triggeredby mvar_high;
  transition mvar_goes_low
    mvar_goes_low_0 true = 1 -> mvar := low, limit_MVAR_Low;
    mvar_goes_low_1 true = 1 -> mvar := low, limit_MVAR_Low_5;
    mvar_goes_low_2 true = 1 -> mvar := low, limit_MVAR_Low_4;
    mvar_goes_low_3 true = 1 -> mvar := low, limit_MVAR_Low_3;
    mvar_goes_low_4 true = 1 -> mvar := low, limit_MVAR_Low_2;
    mvar_goes_low_5 true = 1 -> mvar := low, limit_MVAR_Low_1;
  triggeredby mvar_low;
  transition mvar_goes_to_zero_unexplained
    mvar_goes_to_zero_unexplained_0 true = 1 -> mvar := zero, entered_zero_zone_MVAR, count_as_fault;
  transition mvar_goes_normal_unexplained
    mvar_goes_normal_unexplained_0 true = 1 -> mvar := normal, limit_MVAR_Normal, count_as_fault;
  transition mvar_goes_high_unexplained
    mvar_goes_high_unexplained_0 true = 1 -> mvar := high, limit_MVAR_High, count_as_fault;
    mvar_goes_high_unexplained_1 true = 1 -> mvar := high, limit_MVAR_High_5, count_as_fault;
    mvar_goes_high_unexplained_2 true = 1 -> mvar := high, limit_MVAR_High_4, count_as_fault;
    mvar_goes_high_unexplained_3 true = 1 -> mvar := high, limit_MVAR_High_3, count_as_fault;
    mvar_goes_high_unexplained_4 true = 1 -> mvar := high, limit_MVAR_High_2, count_as_fault;
    mvar_goes_high_unexplained_5 true = 1 -> mvar := high, limit_MVAR_High_1, count_as_fault;
  transition mvar_goes_low_unexplained
    mvar_goes_low_unexplained_0 true = 1 -> mvar := low, limit_MVAR_Low, count_as_fault;
    mvar_goes_low_unexplained_1 true = 1 -> mvar := low, limit_MVAR_Low_5, count_as_fault;
    mvar_goes_low_unexplained_2 true = 1 -> mvar := low, limit_MVAR_Low_4, count_as_fault;
    mvar_goes_low_unexplained_3 true = 1 -> mvar := low, limit_MVAR_Low_3, count_as_fault;
    mvar_goes_low_unexplained_4 true = 1 -> mvar := low, limit_MVAR_Low_2, count_as_fault;
    mvar_goes_low_unexplained_5 true = 1 -> mvar := low, limit_MVAR_Low_1, count_as_fault;
  transition mw_goes_normal_when_reenergised
    mw_goes_normal_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> mw := normal, limit_MW_Normal;
  transition mw_goes_high_when_reenergised
    mw_goes_high_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High;
    mw_goes_high_when_reenergised_1 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_5;
    mw_goes_high_when_reenergised_2 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_4;
    mw_goes_high_when_reenergised_3 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_3;
    mw_goes_high_when_reenergised_4 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_2;
    mw_goes_high_when_reenergised_5 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_1;
  transition mw_goes_low_when_reenergised
    mw_goes_low_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low;
    mw_goes_low_when_reenergised_1 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_5;
    mw_goes_low_when_reenergised_2 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_4;
    mw_goes_low_when_reenergised_3 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_3;
    mw_goes_low_when_reenergised_4 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_2;
    mw_goes_low_when_reenergised_5 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_1;
  transition mw_goes_to_zero_when_isolated
    mw_goes_to_zero_when_isolated_0 (isolated = true AND iso_state_changed = true) -> mw := zero, entered_zero_zone_MW, check_generators_off;
  transition mw_goes_low_when_isolated
    mw_goes_low_when_isolated_0 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low, check_generators_off;
    mw_goes_low_when_isolated_1 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_5, check_generators_off;
    mw_goes_low_when_isolated_2 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_4, check_generators_off;
    mw_goes_low_when_isolated_3 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_3, check_generators_off;
    mw_goes_low_when_isolated_4 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_2, check_generators_off;
    mw_goes_low_when_isolated_5 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_1, check_generators_off;
  transition mw_goes_to_zero
    mw_goes_to_zero_0 true = 1 -> mw := zero, entered_zero_zone_MW;
  triggeredby mw_zero;
  transition mw_goes_normal
    mw_goes_normal_0 true = 1 -> mw := normal, limit_MW_Normal;
  triggeredby mw_normal;
  transition mw_goes_high
    mw_goes_high_0 true = 1 -> mw := high, limit_MW_High;
    mw_goes_high_1 true = 1 -> mw := high, limit_MW_High_5;
    mw_goes_high_2 true = 1 -> mw := high, limit_MW_High_4;
    mw_goes_high_3 true = 1 -> mw := high, limit_MW_High_3;
    mw_goes_high_4 true = 1 -> mw := high, limit_MW_High_2;
    mw_goes_high_5 true = 1 -> mw := high, limit_MW_High_1;
  triggeredby mw_high;
  transition mw_goes_low
    mw_goes_low_0 true = 1 -> mw := low, limit_MW_Low;
    mw_goes_low_1 true = 1 -> mw := low, limit_MW_Low_5;
    mw_goes_low_2 true = 1 -> mw := low, limit_MW_Low_4;
    mw_goes_low_3 true = 1 -> mw := low, limit_MW_Low_3;
    mw_goes_low_4 true = 1 -> mw := low, limit_MW_Low_2;
    mw_goes_low_5 true = 1 -> mw := low, limit_MW_Low_1;
  triggeredby mw_low;
  transition mw_goes_to_zero_unexplained
    mw_goes_to_zero_unexplained_0 true = 1 -> mw := zero, entered_zero_zone_MW, count_as_fault;
  transition mw_goes_normal_unexplained
    mw_goes_normal_unexplained_0 true = 1 -> mw := normal, limit_MW_Normal, count_as_fault;
  transition mw_goes_high_unexplained
    mw_goes_high_unexplained_0 true = 1 -> mw := high, limit_MW_High, count_as_fault;
    mw_goes_high_unexplained_1 true = 1 -> mw := high, limit_MW_High_5, count_as_fault;
    mw_goes_high_unexplained_2 true = 1 -> mw := high, limit_MW_High_4, count_as_fault;
    mw_goes_high_unexplained_3 true = 1 -> mw := high, limit_MW_High_3, count_as_fault;
    mw_goes_high_unexplained_4 true = 1 -> mw := high, limit_MW_High_2, count_as_fault;
    mw_goes_high_unexplained_5 true = 1 -> mw := high, limit_MW_High_1, count_as_fault;
  transition mw_goes_low_unexplained
    mw_goes_low_unexplained_0 true = 1 -> mw := low, limit_MW_Low, count_as_fault;
    mw_goes_low_unexplained_1 true = 1 -> mw := low, limit_MW_Low_5, count_as_fault;
    mw_goes_low_unexplained_2 true = 1 -> mw := low, limit_MW_Low_4, count_as_fault;
    mw_goes_low_unexplained_3 true = 1 -> mw := low, limit_MW_Low_3, count_as_fault;
    mw_goes_low_unexplained_4 true = 1 -> mw := low, limit_MW_Low_2, count_as_fault;
    mw_goes_low_unexplained_5 true = 1 -> mw := low, limit_MW_Low_1, count_as_fault;
  transition voltage_goes_normal_when_caps_in
    voltage_goes_normal_when_caps_in_0 (voltage = low AND isolated = false) -> voltage := normal, limit_KV_Normal, check_switched_in;
  transition voltage_goes_normal_when_caps_out
    voltage_goes_normal_when_caps_out_0 (voltage = high AND isolated = false) -> voltage := normal, limit_KV_Normal, check_switched_out;
  transition voltage_goes_normal_when_reenergised
    voltage_goes_normal_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> voltage := normal, limit_KV_Normal;
  transition voltage_goes_high_when_reenergised
    voltage_goes_high_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High;
    voltage_goes_high_when_reenergised_1 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_5;
    voltage_goes_high_when_reenergised_2 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_4;
    voltage_goes_high_when_reenergised_3 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_3;
    voltage_goes_high_when_reenergised_4 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_2;
    voltage_goes_high_when_reenergised_5 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_1;
  transition voltage_goes_Low_when_reenergised
    voltage_goes_Low_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low;
    voltage_goes_Low_when_reenergised_1 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_5;
    voltage_goes_Low_when_reenergised_2 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_4;
    voltage_goes_Low_when_reenergised_3 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_3;
    voltage_goes_Low_when_reenergised_4 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_2;
    voltage_goes_Low_when_reenergised_5 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_1;
  transition voltage_goes_to_zero_when_isolated
    voltage_goes_to_zero_when_isolated_0 (isolated = true AND iso_state_changed = true) -> voltage := zero, entered_zero_zone_KV, check_generators_off;
  transition voltage_goes_low_when_isolated
    voltage_goes_low_when_isolated_0 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low, check_generators_off;
    voltage_goes_low_when_isolated_1 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_5, check_generators_off;
    voltage_goes_low_when_isolated_2 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_4, check_generators_off;
    voltage_goes_low_when_isolated_3 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_3, check_generators_off;
    voltage_goes_low_when_isolated_4 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_2, check_generators_off;
    voltage_goes_low_when_isolated_5 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_1, check_generators_off;
  transition voltage_goes_to_zero
    voltage_goes_to_zero_0 true = 1 -> voltage := zero, entered_zero_zone_KV;
  triggeredby voltage_zero;
  transition voltage_goes_normal
    voltage_goes_normal_0 true = 1 -> voltage := normal, limit_KV_Normal;
  triggeredby voltage_normal;
  transition voltage_goes_high
    voltage_goes_high_0 true = 1 -> voltage := high, limit_KV_High;
    voltage_goes_high_1 true = 1 -> voltage := high, limit_KV_High_5;
    voltage_goes_high_2 true = 1 -> voltage := high, limit_KV_High_4;
    voltage_goes_high_3 true = 1 -> voltage := high, limit_KV_High_3;
    voltage_goes_high_4 true = 1 -> voltage := high, limit_KV_High_2;
    voltage_goes_high_5 true = 1 -> voltage := high, limit_KV_High_1;
  triggeredby voltage_high;
  transition voltage_goes_low
    voltage_goes_low_0 true = 1 -> voltage := low, limit_KV_Low;
    voltage_goes_low_1 true = 1 -> voltage := low, limit_KV_Low_5;
    voltage_goes_low_2 true = 1 -> voltage := low, limit_KV_Low_4;
    voltage_goes_low_3 true = 1 -> voltage := low, limit_KV_Low_3;
    voltage_goes_low_4 true = 1 -> voltage := low, limit_KV_Low_2;
    voltage_goes_low_5 true = 1 -> voltage := low, limit_KV_Low_1;
  triggeredby voltage_low;
  transition voltage_goes_to_zero_unexplained
    voltage_goes_to_zero_unexplained_0 true = 1 -> voltage := zero, entered_zero_zone_KV, count_as_fault;
  transition voltage_goes_normal_unexplained
    voltage_goes_normal_unexplained_0 true = 1 -> voltage := normal, limit_KV_Normal, count_as_fault;
  transition voltage_goes_high_unexplained
    voltage_goes_high_unexplained_0 true = 1 -> voltage := high, limit_KV_High, count_as_fault;
    voltage_goes_high_unexplained_1 true = 1 -> voltage := high, limit_KV_High_5, count_as_fault;
    voltage_goes_high_unexplained_2 true = 1 -> voltage := high, limit_KV_High_4, count_as_fault;
    voltage_goes_high_unexplained_3 true = 1 -> voltage := high, limit_KV_High_3, count_as_fault;
    voltage_goes_high_unexplained_4 true = 1 -> voltage := high, limit_KV_High_2, count_as_fault;
    voltage_goes_high_unexplained_5 true = 1 -> voltage := high, limit_KV_High_1, count_as_fault;
  transition voltage_goes_low_unexplained
    voltage_goes_low_unexplained_0 true = 1 -> voltage := low, limit_KV_Low, count_as_fault;
    voltage_goes_low_unexplained_1 true = 1 -> voltage := low, limit_KV_Low_5, count_as_fault;
    voltage_goes_low_unexplained_2 true = 1 -> voltage := low, limit_KV_Low_4, count_as_fault;
    voltage_goes_low_unexplained_3 true = 1 -> voltage := low, limit_KV_Low_3, count_as_fault;
    voltage_goes_low_unexplained_4 true = 1 -> voltage := low, limit_KV_Low_2, count_as_fault;
    voltage_goes_low_unexplained_5 true = 1 -> voltage := low, limit_KV_Low_1, count_as_fault;
  transition iso_state_changed_timeout
    iso_state_changed_timeout_0 true = 1 -> iso_state_changed := false;
  triggeredby [0.0..15.0] iso_state_changed = true;
  transition become_not_isolated
    become_not_isolated_0 true = 1 -> isolated := false, iso_state_changed := true;
  triggeredby set_isolated_false;
  transition become_isolated
    become_isolated_0 true = 1 -> isolated := true, iso_state_changed := true;
  triggeredby set_isolated_true;
}
component Bus_X109 = {
  var mvar : {zero,high,low,normal};
  var mw : {zero,high,low,normal};
  var voltage : {zero,high,low,normal};
  var iso_state_changed : [0..1];
  var isolated : [0..1];
  event check_generators_off;
  event check_switched_in;
  event check_switched_out;
  event count_as_fault;
  event set_isolated_false;
  event set_isolated_true;
  event mvar_zero;
  event mvar_normal;
  event mvar_high;
  event mvar_low;
  event mw_zero;
  event mw_normal;
  event mw_high;
  event mw_low;
  event voltage_zero;
  event voltage_normal;
  event voltage_high;
  event voltage_low;
  event entered_zero_zone_MVAR;
  event limit_MVAR_High;
  event limit_MVAR_High_5;
  event limit_MVAR_High_4;
  event limit_MVAR_High_3;
  event limit_MVAR_High_2;
  event limit_MVAR_High_1;
  event limit_MVAR_Low;
  event limit_MVAR_Low_5;
  event limit_MVAR_Low_4;
  event limit_MVAR_Low_3;
  event limit_MVAR_Low_2;
  event limit_MVAR_Low_1;
  event limit_MVAR_Normal;
  event entered_zero_zone_MW;
  event limit_MW_High;
  event limit_MW_High_5;
  event limit_MW_High_4;
  event limit_MW_High_3;
  event limit_MW_High_2;
  event limit_MW_High_1;
  event limit_MW_Low;
  event limit_MW_Low_5;
  event limit_MW_Low_4;
  event limit_MW_Low_3;
  event limit_MW_Low_2;
  event limit_MW_Low_1;
  event limit_MW_Normal;
  event entered_zero_zone_KV;
  event limit_KV_High;
  event limit_KV_High_5;
  event limit_KV_High_4;
  event limit_KV_High_3;
  event limit_KV_High_2;
  event limit_KV_High_1;
  event limit_KV_Low;
  event limit_KV_Low_5;
  event limit_KV_Low_4;
  event limit_KV_Low_3;
  event limit_KV_Low_2;
  event limit_KV_Low_1;
  event limit_KV_Normal;
  transition mvar_goes_to_zero
    mvar_goes_to_zero_0 true = 1 -> mvar := zero, entered_zero_zone_MVAR;
  triggeredby mvar_zero;
  transition mvar_goes_normal
    mvar_goes_normal_0 true = 1 -> mvar := normal, limit_MVAR_Normal;
  triggeredby mvar_normal;
  transition mvar_goes_high
    mvar_goes_high_0 true = 1 -> mvar := high, limit_MVAR_High;
    mvar_goes_high_1 true = 1 -> mvar := high, limit_MVAR_High_5;
    mvar_goes_high_2 true = 1 -> mvar := high, limit_MVAR_High_4;
    mvar_goes_high_3 true = 1 -> mvar := high, limit_MVAR_High_3;
    mvar_goes_high_4 true = 1 -> mvar := high, limit_MVAR_High_2;
    mvar_goes_high_5 true = 1 -> mvar := high, limit_MVAR_High_1;
  triggeredby mvar_high;
  transition mvar_goes_low
    mvar_goes_low_0 true = 1 -> mvar := low, limit_MVAR_Low;
    mvar_goes_low_1 true = 1 -> mvar := low, limit_MVAR_Low_5;
    mvar_goes_low_2 true = 1 -> mvar := low, limit_MVAR_Low_4;
    mvar_goes_low_3 true = 1 -> mvar := low, limit_MVAR_Low_3;
    mvar_goes_low_4 true = 1 -> mvar := low, limit_MVAR_Low_2;
    mvar_goes_low_5 true = 1 -> mvar := low, limit_MVAR_Low_1;
  triggeredby mvar_low;
  transition mvar_goes_to_zero_unexplained
    mvar_goes_to_zero_unexplained_0 true = 1 -> mvar := zero, entered_zero_zone_MVAR, count_as_fault;
  transition mvar_goes_normal_unexplained
    mvar_goes_normal_unexplained_0 true = 1 -> mvar := normal, limit_MVAR_Normal, count_as_fault;
  transition mvar_goes_high_unexplained
    mvar_goes_high_unexplained_0 true = 1 -> mvar := high, limit_MVAR_High, count_as_fault;
    mvar_goes_high_unexplained_1 true = 1 -> mvar := high, limit_MVAR_High_5, count_as_fault;
    mvar_goes_high_unexplained_2 true = 1 -> mvar := high, limit_MVAR_High_4, count_as_fault;
    mvar_goes_high_unexplained_3 true = 1 -> mvar := high, limit_MVAR_High_3, count_as_fault;
    mvar_goes_high_unexplained_4 true = 1 -> mvar := high, limit_MVAR_High_2, count_as_fault;
    mvar_goes_high_unexplained_5 true = 1 -> mvar := high, limit_MVAR_High_1, count_as_fault;
  transition mvar_goes_low_unexplained
    mvar_goes_low_unexplained_0 true = 1 -> mvar := low, limit_MVAR_Low, count_as_fault;
    mvar_goes_low_unexplained_1 true = 1 -> mvar := low, limit_MVAR_Low_5, count_as_fault;
    mvar_goes_low_unexplained_2 true = 1 -> mvar := low, limit_MVAR_Low_4, count_as_fault;
    mvar_goes_low_unexplained_3 true = 1 -> mvar := low, limit_MVAR_Low_3, count_as_fault;
    mvar_goes_low_unexplained_4 true = 1 -> mvar := low, limit_MVAR_Low_2, count_as_fault;
    mvar_goes_low_unexplained_5 true = 1 -> mvar := low, limit_MVAR_Low_1, count_as_fault;
  transition mw_goes_normal_when_reenergised
    mw_goes_normal_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> mw := normal, limit_MW_Normal;
  transition mw_goes_high_when_reenergised
    mw_goes_high_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High;
    mw_goes_high_when_reenergised_1 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_5;
    mw_goes_high_when_reenergised_2 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_4;
    mw_goes_high_when_reenergised_3 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_3;
    mw_goes_high_when_reenergised_4 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_2;
    mw_goes_high_when_reenergised_5 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_1;
  transition mw_goes_low_when_reenergised
    mw_goes_low_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low;
    mw_goes_low_when_reenergised_1 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_5;
    mw_goes_low_when_reenergised_2 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_4;
    mw_goes_low_when_reenergised_3 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_3;
    mw_goes_low_when_reenergised_4 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_2;
    mw_goes_low_when_reenergised_5 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_1;
  transition mw_goes_to_zero_when_isolated
    mw_goes_to_zero_when_isolated_0 (isolated = true AND iso_state_changed = true) -> mw := zero, entered_zero_zone_MW, check_generators_off;
  transition mw_goes_low_when_isolated
    mw_goes_low_when_isolated_0 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low, check_generators_off;
    mw_goes_low_when_isolated_1 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_5, check_generators_off;
    mw_goes_low_when_isolated_2 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_4, check_generators_off;
    mw_goes_low_when_isolated_3 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_3, check_generators_off;
    mw_goes_low_when_isolated_4 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_2, check_generators_off;
    mw_goes_low_when_isolated_5 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_1, check_generators_off;
  transition mw_goes_to_zero
    mw_goes_to_zero_0 true = 1 -> mw := zero, entered_zero_zone_MW;
  triggeredby mw_zero;
  transition mw_goes_normal
    mw_goes_normal_0 true = 1 -> mw := normal, limit_MW_Normal;
  triggeredby mw_normal;
  transition mw_goes_high
    mw_goes_high_0 true = 1 -> mw := high, limit_MW_High;
    mw_goes_high_1 true = 1 -> mw := high, limit_MW_High_5;
    mw_goes_high_2 true = 1 -> mw := high, limit_MW_High_4;
    mw_goes_high_3 true = 1 -> mw := high, limit_MW_High_3;
    mw_goes_high_4 true = 1 -> mw := high, limit_MW_High_2;
    mw_goes_high_5 true = 1 -> mw := high, limit_MW_High_1;
  triggeredby mw_high;
  transition mw_goes_low
    mw_goes_low_0 true = 1 -> mw := low, limit_MW_Low;
    mw_goes_low_1 true = 1 -> mw := low, limit_MW_Low_5;
    mw_goes_low_2 true = 1 -> mw := low, limit_MW_Low_4;
    mw_goes_low_3 true = 1 -> mw := low, limit_MW_Low_3;
    mw_goes_low_4 true = 1 -> mw := low, limit_MW_Low_2;
    mw_goes_low_5 true = 1 -> mw := low, limit_MW_Low_1;
  triggeredby mw_low;
  transition mw_goes_to_zero_unexplained
    mw_goes_to_zero_unexplained_0 true = 1 -> mw := zero, entered_zero_zone_MW, count_as_fault;
  transition mw_goes_normal_unexplained
    mw_goes_normal_unexplained_0 true = 1 -> mw := normal, limit_MW_Normal, count_as_fault;
  transition mw_goes_high_unexplained
    mw_goes_high_unexplained_0 true = 1 -> mw := high, limit_MW_High, count_as_fault;
    mw_goes_high_unexplained_1 true = 1 -> mw := high, limit_MW_High_5, count_as_fault;
    mw_goes_high_unexplained_2 true = 1 -> mw := high, limit_MW_High_4, count_as_fault;
    mw_goes_high_unexplained_3 true = 1 -> mw := high, limit_MW_High_3, count_as_fault;
    mw_goes_high_unexplained_4 true = 1 -> mw := high, limit_MW_High_2, count_as_fault;
    mw_goes_high_unexplained_5 true = 1 -> mw := high, limit_MW_High_1, count_as_fault;
  transition mw_goes_low_unexplained
    mw_goes_low_unexplained_0 true = 1 -> mw := low, limit_MW_Low, count_as_fault;
    mw_goes_low_unexplained_1 true = 1 -> mw := low, limit_MW_Low_5, count_as_fault;
    mw_goes_low_unexplained_2 true = 1 -> mw := low, limit_MW_Low_4, count_as_fault;
    mw_goes_low_unexplained_3 true = 1 -> mw := low, limit_MW_Low_3, count_as_fault;
    mw_goes_low_unexplained_4 true = 1 -> mw := low, limit_MW_Low_2, count_as_fault;
    mw_goes_low_unexplained_5 true = 1 -> mw := low, limit_MW_Low_1, count_as_fault;
  transition voltage_goes_normal_when_caps_in
    voltage_goes_normal_when_caps_in_0 (voltage = low AND isolated = false) -> voltage := normal, limit_KV_Normal, check_switched_in;
  transition voltage_goes_normal_when_caps_out
    voltage_goes_normal_when_caps_out_0 (voltage = high AND isolated = false) -> voltage := normal, limit_KV_Normal, check_switched_out;
  transition voltage_goes_normal_when_reenergised
    voltage_goes_normal_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> voltage := normal, limit_KV_Normal;
  transition voltage_goes_high_when_reenergised
    voltage_goes_high_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High;
    voltage_goes_high_when_reenergised_1 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_5;
    voltage_goes_high_when_reenergised_2 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_4;
    voltage_goes_high_when_reenergised_3 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_3;
    voltage_goes_high_when_reenergised_4 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_2;
    voltage_goes_high_when_reenergised_5 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_1;
  transition voltage_goes_Low_when_reenergised
    voltage_goes_Low_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low;
    voltage_goes_Low_when_reenergised_1 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_5;
    voltage_goes_Low_when_reenergised_2 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_4;
    voltage_goes_Low_when_reenergised_3 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_3;
    voltage_goes_Low_when_reenergised_4 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_2;
    voltage_goes_Low_when_reenergised_5 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_1;
  transition voltage_goes_to_zero_when_isolated
    voltage_goes_to_zero_when_isolated_0 (isolated = true AND iso_state_changed = true) -> voltage := zero, entered_zero_zone_KV, check_generators_off;
  transition voltage_goes_low_when_isolated
    voltage_goes_low_when_isolated_0 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low, check_generators_off;
    voltage_goes_low_when_isolated_1 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_5, check_generators_off;
    voltage_goes_low_when_isolated_2 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_4, check_generators_off;
    voltage_goes_low_when_isolated_3 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_3, check_generators_off;
    voltage_goes_low_when_isolated_4 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_2, check_generators_off;
    voltage_goes_low_when_isolated_5 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_1, check_generators_off;
  transition voltage_goes_to_zero
    voltage_goes_to_zero_0 true = 1 -> voltage := zero, entered_zero_zone_KV;
  triggeredby voltage_zero;
  transition voltage_goes_normal
    voltage_goes_normal_0 true = 1 -> voltage := normal, limit_KV_Normal;
  triggeredby voltage_normal;
  transition voltage_goes_high
    voltage_goes_high_0 true = 1 -> voltage := high, limit_KV_High;
    voltage_goes_high_1 true = 1 -> voltage := high, limit_KV_High_5;
    voltage_goes_high_2 true = 1 -> voltage := high, limit_KV_High_4;
    voltage_goes_high_3 true = 1 -> voltage := high, limit_KV_High_3;
    voltage_goes_high_4 true = 1 -> voltage := high, limit_KV_High_2;
    voltage_goes_high_5 true = 1 -> voltage := high, limit_KV_High_1;
  triggeredby voltage_high;
  transition voltage_goes_low
    voltage_goes_low_0 true = 1 -> voltage := low, limit_KV_Low;
    voltage_goes_low_1 true = 1 -> voltage := low, limit_KV_Low_5;
    voltage_goes_low_2 true = 1 -> voltage := low, limit_KV_Low_4;
    voltage_goes_low_3 true = 1 -> voltage := low, limit_KV_Low_3;
    voltage_goes_low_4 true = 1 -> voltage := low, limit_KV_Low_2;
    voltage_goes_low_5 true = 1 -> voltage := low, limit_KV_Low_1;
  triggeredby voltage_low;
  transition voltage_goes_to_zero_unexplained
    voltage_goes_to_zero_unexplained_0 true = 1 -> voltage := zero, entered_zero_zone_KV, count_as_fault;
  transition voltage_goes_normal_unexplained
    voltage_goes_normal_unexplained_0 true = 1 -> voltage := normal, limit_KV_Normal, count_as_fault;
  transition voltage_goes_high_unexplained
    voltage_goes_high_unexplained_0 true = 1 -> voltage := high, limit_KV_High, count_as_fault;
    voltage_goes_high_unexplained_1 true = 1 -> voltage := high, limit_KV_High_5, count_as_fault;
    voltage_goes_high_unexplained_2 true = 1 -> voltage := high, limit_KV_High_4, count_as_fault;
    voltage_goes_high_unexplained_3 true = 1 -> voltage := high, limit_KV_High_3, count_as_fault;
    voltage_goes_high_unexplained_4 true = 1 -> voltage := high, limit_KV_High_2, count_as_fault;
    voltage_goes_high_unexplained_5 true = 1 -> voltage := high, limit_KV_High_1, count_as_fault;
  transition voltage_goes_low_unexplained
    voltage_goes_low_unexplained_0 true = 1 -> voltage := low, limit_KV_Low, count_as_fault;
    voltage_goes_low_unexplained_1 true = 1 -> voltage := low, limit_KV_Low_5, count_as_fault;
    voltage_goes_low_unexplained_2 true = 1 -> voltage := low, limit_KV_Low_4, count_as_fault;
    voltage_goes_low_unexplained_3 true = 1 -> voltage := low, limit_KV_Low_3, count_as_fault;
    voltage_goes_low_unexplained_4 true = 1 -> voltage := low, limit_KV_Low_2, count_as_fault;
    voltage_goes_low_unexplained_5 true = 1 -> voltage := low, limit_KV_Low_1, count_as_fault;
  transition iso_state_changed_timeout
    iso_state_changed_timeout_0 true = 1 -> iso_state_changed := false;
  triggeredby [0.0..15.0] iso_state_changed = true;
  transition become_not_isolated
    become_not_isolated_0 true = 1 -> isolated := false, iso_state_changed := true;
  triggeredby set_isolated_false;
  transition become_isolated
    become_isolated_0 true = 1 -> isolated := true, iso_state_changed := true;
  triggeredby set_isolated_true;
}
component Bus_X117 = {
  var mvar : {zero,high,low,normal};
  var mw : {zero,high,low,normal};
  var voltage : {zero,high,low,normal};
  var iso_state_changed : [0..1];
  var isolated : [0..1];
  event check_generators_off;
  event check_switched_in;
  event check_switched_out;
  event count_as_fault;
  event set_isolated_false;
  event set_isolated_true;
  event mvar_zero;
  event mvar_normal;
  event mvar_high;
  event mvar_low;
  event mw_zero;
  event mw_normal;
  event mw_high;
  event mw_low;
  event voltage_zero;
  event voltage_normal;
  event voltage_high;
  event voltage_low;
  event entered_zero_zone_MVAR;
  event limit_MVAR_High;
  event limit_MVAR_High_5;
  event limit_MVAR_High_4;
  event limit_MVAR_High_3;
  event limit_MVAR_High_2;
  event limit_MVAR_High_1;
  event limit_MVAR_Low;
  event limit_MVAR_Low_5;
  event limit_MVAR_Low_4;
  event limit_MVAR_Low_3;
  event limit_MVAR_Low_2;
  event limit_MVAR_Low_1;
  event limit_MVAR_Normal;
  event entered_zero_zone_MW;
  event limit_MW_High;
  event limit_MW_High_5;
  event limit_MW_High_4;
  event limit_MW_High_3;
  event limit_MW_High_2;
  event limit_MW_High_1;
  event limit_MW_Low;
  event limit_MW_Low_5;
  event limit_MW_Low_4;
  event limit_MW_Low_3;
  event limit_MW_Low_2;
  event limit_MW_Low_1;
  event limit_MW_Normal;
  event entered_zero_zone_KV;
  event limit_KV_High;
  event limit_KV_High_5;
  event limit_KV_High_4;
  event limit_KV_High_3;
  event limit_KV_High_2;
  event limit_KV_High_1;
  event limit_KV_Low;
  event limit_KV_Low_5;
  event limit_KV_Low_4;
  event limit_KV_Low_3;
  event limit_KV_Low_2;
  event limit_KV_Low_1;
  event limit_KV_Normal;
  transition mvar_goes_to_zero
    mvar_goes_to_zero_0 true = 1 -> mvar := zero, entered_zero_zone_MVAR;
  triggeredby mvar_zero;
  transition mvar_goes_normal
    mvar_goes_normal_0 true = 1 -> mvar := normal, limit_MVAR_Normal;
  triggeredby mvar_normal;
  transition mvar_goes_high
    mvar_goes_high_0 true = 1 -> mvar := high, limit_MVAR_High;
    mvar_goes_high_1 true = 1 -> mvar := high, limit_MVAR_High_5;
    mvar_goes_high_2 true = 1 -> mvar := high, limit_MVAR_High_4;
    mvar_goes_high_3 true = 1 -> mvar := high, limit_MVAR_High_3;
    mvar_goes_high_4 true = 1 -> mvar := high, limit_MVAR_High_2;
    mvar_goes_high_5 true = 1 -> mvar := high, limit_MVAR_High_1;
  triggeredby mvar_high;
  transition mvar_goes_low
    mvar_goes_low_0 true = 1 -> mvar := low, limit_MVAR_Low;
    mvar_goes_low_1 true = 1 -> mvar := low, limit_MVAR_Low_5;
    mvar_goes_low_2 true = 1 -> mvar := low, limit_MVAR_Low_4;
    mvar_goes_low_3 true = 1 -> mvar := low, limit_MVAR_Low_3;
    mvar_goes_low_4 true = 1 -> mvar := low, limit_MVAR_Low_2;
    mvar_goes_low_5 true = 1 -> mvar := low, limit_MVAR_Low_1;
  triggeredby mvar_low;
  transition mvar_goes_to_zero_unexplained
    mvar_goes_to_zero_unexplained_0 true = 1 -> mvar := zero, entered_zero_zone_MVAR, count_as_fault;
  transition mvar_goes_normal_unexplained
    mvar_goes_normal_unexplained_0 true = 1 -> mvar := normal, limit_MVAR_Normal, count_as_fault;
  transition mvar_goes_high_unexplained
    mvar_goes_high_unexplained_0 true = 1 -> mvar := high, limit_MVAR_High, count_as_fault;
    mvar_goes_high_unexplained_1 true = 1 -> mvar := high, limit_MVAR_High_5, count_as_fault;
    mvar_goes_high_unexplained_2 true = 1 -> mvar := high, limit_MVAR_High_4, count_as_fault;
    mvar_goes_high_unexplained_3 true = 1 -> mvar := high, limit_MVAR_High_3, count_as_fault;
    mvar_goes_high_unexplained_4 true = 1 -> mvar := high, limit_MVAR_High_2, count_as_fault;
    mvar_goes_high_unexplained_5 true = 1 -> mvar := high, limit_MVAR_High_1, count_as_fault;
  transition mvar_goes_low_unexplained
    mvar_goes_low_unexplained_0 true = 1 -> mvar := low, limit_MVAR_Low, count_as_fault;
    mvar_goes_low_unexplained_1 true = 1 -> mvar := low, limit_MVAR_Low_5, count_as_fault;
    mvar_goes_low_unexplained_2 true = 1 -> mvar := low, limit_MVAR_Low_4, count_as_fault;
    mvar_goes_low_unexplained_3 true = 1 -> mvar := low, limit_MVAR_Low_3, count_as_fault;
    mvar_goes_low_unexplained_4 true = 1 -> mvar := low, limit_MVAR_Low_2, count_as_fault;
    mvar_goes_low_unexplained_5 true = 1 -> mvar := low, limit_MVAR_Low_1, count_as_fault;
  transition mw_goes_normal_when_reenergised
    mw_goes_normal_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> mw := normal, limit_MW_Normal;
  transition mw_goes_high_when_reenergised
    mw_goes_high_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High;
    mw_goes_high_when_reenergised_1 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_5;
    mw_goes_high_when_reenergised_2 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_4;
    mw_goes_high_when_reenergised_3 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_3;
    mw_goes_high_when_reenergised_4 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_2;
    mw_goes_high_when_reenergised_5 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_1;
  transition mw_goes_low_when_reenergised
    mw_goes_low_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low;
    mw_goes_low_when_reenergised_1 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_5;
    mw_goes_low_when_reenergised_2 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_4;
    mw_goes_low_when_reenergised_3 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_3;
    mw_goes_low_when_reenergised_4 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_2;
    mw_goes_low_when_reenergised_5 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_1;
  transition mw_goes_to_zero_when_isolated
    mw_goes_to_zero_when_isolated_0 (isolated = true AND iso_state_changed = true) -> mw := zero, entered_zero_zone_MW, check_generators_off;
  transition mw_goes_low_when_isolated
    mw_goes_low_when_isolated_0 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low, check_generators_off;
    mw_goes_low_when_isolated_1 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_5, check_generators_off;
    mw_goes_low_when_isolated_2 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_4, check_generators_off;
    mw_goes_low_when_isolated_3 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_3, check_generators_off;
    mw_goes_low_when_isolated_4 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_2, check_generators_off;
    mw_goes_low_when_isolated_5 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_1, check_generators_off;
  transition mw_goes_to_zero
    mw_goes_to_zero_0 true = 1 -> mw := zero, entered_zero_zone_MW;
  triggeredby mw_zero;
  transition mw_goes_normal
    mw_goes_normal_0 true = 1 -> mw := normal, limit_MW_Normal;
  triggeredby mw_normal;
  transition mw_goes_high
    mw_goes_high_0 true = 1 -> mw := high, limit_MW_High;
    mw_goes_high_1 true = 1 -> mw := high, limit_MW_High_5;
    mw_goes_high_2 true = 1 -> mw := high, limit_MW_High_4;
    mw_goes_high_3 true = 1 -> mw := high, limit_MW_High_3;
    mw_goes_high_4 true = 1 -> mw := high, limit_MW_High_2;
    mw_goes_high_5 true = 1 -> mw := high, limit_MW_High_1;
  triggeredby mw_high;
  transition mw_goes_low
    mw_goes_low_0 true = 1 -> mw := low, limit_MW_Low;
    mw_goes_low_1 true = 1 -> mw := low, limit_MW_Low_5;
    mw_goes_low_2 true = 1 -> mw := low, limit_MW_Low_4;
    mw_goes_low_3 true = 1 -> mw := low, limit_MW_Low_3;
    mw_goes_low_4 true = 1 -> mw := low, limit_MW_Low_2;
    mw_goes_low_5 true = 1 -> mw := low, limit_MW_Low_1;
  triggeredby mw_low;
  transition mw_goes_to_zero_unexplained
    mw_goes_to_zero_unexplained_0 true = 1 -> mw := zero, entered_zero_zone_MW, count_as_fault;
  transition mw_goes_normal_unexplained
    mw_goes_normal_unexplained_0 true = 1 -> mw := normal, limit_MW_Normal, count_as_fault;
  transition mw_goes_high_unexplained
    mw_goes_high_unexplained_0 true = 1 -> mw := high, limit_MW_High, count_as_fault;
    mw_goes_high_unexplained_1 true = 1 -> mw := high, limit_MW_High_5, count_as_fault;
    mw_goes_high_unexplained_2 true = 1 -> mw := high, limit_MW_High_4, count_as_fault;
    mw_goes_high_unexplained_3 true = 1 -> mw := high, limit_MW_High_3, count_as_fault;
    mw_goes_high_unexplained_4 true = 1 -> mw := high, limit_MW_High_2, count_as_fault;
    mw_goes_high_unexplained_5 true = 1 -> mw := high, limit_MW_High_1, count_as_fault;
  transition mw_goes_low_unexplained
    mw_goes_low_unexplained_0 true = 1 -> mw := low, limit_MW_Low, count_as_fault;
    mw_goes_low_unexplained_1 true = 1 -> mw := low, limit_MW_Low_5, count_as_fault;
    mw_goes_low_unexplained_2 true = 1 -> mw := low, limit_MW_Low_4, count_as_fault;
    mw_goes_low_unexplained_3 true = 1 -> mw := low, limit_MW_Low_3, count_as_fault;
    mw_goes_low_unexplained_4 true = 1 -> mw := low, limit_MW_Low_2, count_as_fault;
    mw_goes_low_unexplained_5 true = 1 -> mw := low, limit_MW_Low_1, count_as_fault;
  transition voltage_goes_normal_when_caps_in
    voltage_goes_normal_when_caps_in_0 (voltage = low AND isolated = false) -> voltage := normal, limit_KV_Normal, check_switched_in;
  transition voltage_goes_normal_when_caps_out
    voltage_goes_normal_when_caps_out_0 (voltage = high AND isolated = false) -> voltage := normal, limit_KV_Normal, check_switched_out;
  transition voltage_goes_normal_when_reenergised
    voltage_goes_normal_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> voltage := normal, limit_KV_Normal;
  transition voltage_goes_high_when_reenergised
    voltage_goes_high_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High;
    voltage_goes_high_when_reenergised_1 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_5;
    voltage_goes_high_when_reenergised_2 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_4;
    voltage_goes_high_when_reenergised_3 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_3;
    voltage_goes_high_when_reenergised_4 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_2;
    voltage_goes_high_when_reenergised_5 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_1;
  transition voltage_goes_Low_when_reenergised
    voltage_goes_Low_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low;
    voltage_goes_Low_when_reenergised_1 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_5;
    voltage_goes_Low_when_reenergised_2 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_4;
    voltage_goes_Low_when_reenergised_3 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_3;
    voltage_goes_Low_when_reenergised_4 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_2;
    voltage_goes_Low_when_reenergised_5 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_1;
  transition voltage_goes_to_zero_when_isolated
    voltage_goes_to_zero_when_isolated_0 (isolated = true AND iso_state_changed = true) -> voltage := zero, entered_zero_zone_KV, check_generators_off;
  transition voltage_goes_low_when_isolated
    voltage_goes_low_when_isolated_0 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low, check_generators_off;
    voltage_goes_low_when_isolated_1 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_5, check_generators_off;
    voltage_goes_low_when_isolated_2 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_4, check_generators_off;
    voltage_goes_low_when_isolated_3 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_3, check_generators_off;
    voltage_goes_low_when_isolated_4 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_2, check_generators_off;
    voltage_goes_low_when_isolated_5 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_1, check_generators_off;
  transition voltage_goes_to_zero
    voltage_goes_to_zero_0 true = 1 -> voltage := zero, entered_zero_zone_KV;
  triggeredby voltage_zero;
  transition voltage_goes_normal
    voltage_goes_normal_0 true = 1 -> voltage := normal, limit_KV_Normal;
  triggeredby voltage_normal;
  transition voltage_goes_high
    voltage_goes_high_0 true = 1 -> voltage := high, limit_KV_High;
    voltage_goes_high_1 true = 1 -> voltage := high, limit_KV_High_5;
    voltage_goes_high_2 true = 1 -> voltage := high, limit_KV_High_4;
    voltage_goes_high_3 true = 1 -> voltage := high, limit_KV_High_3;
    voltage_goes_high_4 true = 1 -> voltage := high, limit_KV_High_2;
    voltage_goes_high_5 true = 1 -> voltage := high, limit_KV_High_1;
  triggeredby voltage_high;
  transition voltage_goes_low
    voltage_goes_low_0 true = 1 -> voltage := low, limit_KV_Low;
    voltage_goes_low_1 true = 1 -> voltage := low, limit_KV_Low_5;
    voltage_goes_low_2 true = 1 -> voltage := low, limit_KV_Low_4;
    voltage_goes_low_3 true = 1 -> voltage := low, limit_KV_Low_3;
    voltage_goes_low_4 true = 1 -> voltage := low, limit_KV_Low_2;
    voltage_goes_low_5 true = 1 -> voltage := low, limit_KV_Low_1;
  triggeredby voltage_low;
  transition voltage_goes_to_zero_unexplained
    voltage_goes_to_zero_unexplained_0 true = 1 -> voltage := zero, entered_zero_zone_KV, count_as_fault;
  transition voltage_goes_normal_unexplained
    voltage_goes_normal_unexplained_0 true = 1 -> voltage := normal, limit_KV_Normal, count_as_fault;
  transition voltage_goes_high_unexplained
    voltage_goes_high_unexplained_0 true = 1 -> voltage := high, limit_KV_High, count_as_fault;
    voltage_goes_high_unexplained_1 true = 1 -> voltage := high, limit_KV_High_5, count_as_fault;
    voltage_goes_high_unexplained_2 true = 1 -> voltage := high, limit_KV_High_4, count_as_fault;
    voltage_goes_high_unexplained_3 true = 1 -> voltage := high, limit_KV_High_3, count_as_fault;
    voltage_goes_high_unexplained_4 true = 1 -> voltage := high, limit_KV_High_2, count_as_fault;
    voltage_goes_high_unexplained_5 true = 1 -> voltage := high, limit_KV_High_1, count_as_fault;
  transition voltage_goes_low_unexplained
    voltage_goes_low_unexplained_0 true = 1 -> voltage := low, limit_KV_Low, count_as_fault;
    voltage_goes_low_unexplained_1 true = 1 -> voltage := low, limit_KV_Low_5, count_as_fault;
    voltage_goes_low_unexplained_2 true = 1 -> voltage := low, limit_KV_Low_4, count_as_fault;
    voltage_goes_low_unexplained_3 true = 1 -> voltage := low, limit_KV_Low_3, count_as_fault;
    voltage_goes_low_unexplained_4 true = 1 -> voltage := low, limit_KV_Low_2, count_as_fault;
    voltage_goes_low_unexplained_5 true = 1 -> voltage := low, limit_KV_Low_1, count_as_fault;
  transition iso_state_changed_timeout
    iso_state_changed_timeout_0 true = 1 -> iso_state_changed := false;
  triggeredby [0.0..15.0] iso_state_changed = true;
  transition become_not_isolated
    become_not_isolated_0 true = 1 -> isolated := false, iso_state_changed := true;
  triggeredby set_isolated_false;
  transition become_isolated
    become_isolated_0 true = 1 -> isolated := true, iso_state_changed := true;
  triggeredby set_isolated_true;
}
component Bus_X126 = {
  var mvar : {zero,high,low,normal};
  var mw : {zero,high,low,normal};
  var voltage : {zero,high,low,normal};
  var iso_state_changed : [0..1];
  var isolated : [0..1];
  event check_generators_off;
  event check_switched_in;
  event check_switched_out;
  event count_as_fault;
  event set_isolated_false;
  event set_isolated_true;
  event mvar_zero;
  event mvar_normal;
  event mvar_high;
  event mvar_low;
  event mw_zero;
  event mw_normal;
  event mw_high;
  event mw_low;
  event voltage_zero;
  event voltage_normal;
  event voltage_high;
  event voltage_low;
  event entered_zero_zone_MVAR;
  event limit_MVAR_High;
  event limit_MVAR_High_5;
  event limit_MVAR_High_4;
  event limit_MVAR_High_3;
  event limit_MVAR_High_2;
  event limit_MVAR_High_1;
  event limit_MVAR_Low;
  event limit_MVAR_Low_5;
  event limit_MVAR_Low_4;
  event limit_MVAR_Low_3;
  event limit_MVAR_Low_2;
  event limit_MVAR_Low_1;
  event limit_MVAR_Normal;
  event entered_zero_zone_MW;
  event limit_MW_High;
  event limit_MW_High_5;
  event limit_MW_High_4;
  event limit_MW_High_3;
  event limit_MW_High_2;
  event limit_MW_High_1;
  event limit_MW_Low;
  event limit_MW_Low_5;
  event limit_MW_Low_4;
  event limit_MW_Low_3;
  event limit_MW_Low_2;
  event limit_MW_Low_1;
  event limit_MW_Normal;
  event entered_zero_zone_KV;
  event limit_KV_High;
  event limit_KV_High_5;
  event limit_KV_High_4;
  event limit_KV_High_3;
  event limit_KV_High_2;
  event limit_KV_High_1;
  event limit_KV_Low;
  event limit_KV_Low_5;
  event limit_KV_Low_4;
  event limit_KV_Low_3;
  event limit_KV_Low_2;
  event limit_KV_Low_1;
  event limit_KV_Normal;
  transition mvar_goes_to_zero
    mvar_goes_to_zero_0 true = 1 -> mvar := zero, entered_zero_zone_MVAR;
  triggeredby mvar_zero;
  transition mvar_goes_normal
    mvar_goes_normal_0 true = 1 -> mvar := normal, limit_MVAR_Normal;
  triggeredby mvar_normal;
  transition mvar_goes_high
    mvar_goes_high_0 true = 1 -> mvar := high, limit_MVAR_High;
    mvar_goes_high_1 true = 1 -> mvar := high, limit_MVAR_High_5;
    mvar_goes_high_2 true = 1 -> mvar := high, limit_MVAR_High_4;
    mvar_goes_high_3 true = 1 -> mvar := high, limit_MVAR_High_3;
    mvar_goes_high_4 true = 1 -> mvar := high, limit_MVAR_High_2;
    mvar_goes_high_5 true = 1 -> mvar := high, limit_MVAR_High_1;
  triggeredby mvar_high;
  transition mvar_goes_low
    mvar_goes_low_0 true = 1 -> mvar := low, limit_MVAR_Low;
    mvar_goes_low_1 true = 1 -> mvar := low, limit_MVAR_Low_5;
    mvar_goes_low_2 true = 1 -> mvar := low, limit_MVAR_Low_4;
    mvar_goes_low_3 true = 1 -> mvar := low, limit_MVAR_Low_3;
    mvar_goes_low_4 true = 1 -> mvar := low, limit_MVAR_Low_2;
    mvar_goes_low_5 true = 1 -> mvar := low, limit_MVAR_Low_1;
  triggeredby mvar_low;
  transition mvar_goes_to_zero_unexplained
    mvar_goes_to_zero_unexplained_0 true = 1 -> mvar := zero, entered_zero_zone_MVAR, count_as_fault;
  transition mvar_goes_normal_unexplained
    mvar_goes_normal_unexplained_0 true = 1 -> mvar := normal, limit_MVAR_Normal, count_as_fault;
  transition mvar_goes_high_unexplained
    mvar_goes_high_unexplained_0 true = 1 -> mvar := high, limit_MVAR_High, count_as_fault;
    mvar_goes_high_unexplained_1 true = 1 -> mvar := high, limit_MVAR_High_5, count_as_fault;
    mvar_goes_high_unexplained_2 true = 1 -> mvar := high, limit_MVAR_High_4, count_as_fault;
    mvar_goes_high_unexplained_3 true = 1 -> mvar := high, limit_MVAR_High_3, count_as_fault;
    mvar_goes_high_unexplained_4 true = 1 -> mvar := high, limit_MVAR_High_2, count_as_fault;
    mvar_goes_high_unexplained_5 true = 1 -> mvar := high, limit_MVAR_High_1, count_as_fault;
  transition mvar_goes_low_unexplained
    mvar_goes_low_unexplained_0 true = 1 -> mvar := low, limit_MVAR_Low, count_as_fault;
    mvar_goes_low_unexplained_1 true = 1 -> mvar := low, limit_MVAR_Low_5, count_as_fault;
    mvar_goes_low_unexplained_2 true = 1 -> mvar := low, limit_MVAR_Low_4, count_as_fault;
    mvar_goes_low_unexplained_3 true = 1 -> mvar := low, limit_MVAR_Low_3, count_as_fault;
    mvar_goes_low_unexplained_4 true = 1 -> mvar := low, limit_MVAR_Low_2, count_as_fault;
    mvar_goes_low_unexplained_5 true = 1 -> mvar := low, limit_MVAR_Low_1, count_as_fault;
  transition mw_goes_normal_when_reenergised
    mw_goes_normal_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> mw := normal, limit_MW_Normal;
  transition mw_goes_high_when_reenergised
    mw_goes_high_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High;
    mw_goes_high_when_reenergised_1 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_5;
    mw_goes_high_when_reenergised_2 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_4;
    mw_goes_high_when_reenergised_3 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_3;
    mw_goes_high_when_reenergised_4 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_2;
    mw_goes_high_when_reenergised_5 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_1;
  transition mw_goes_low_when_reenergised
    mw_goes_low_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low;
    mw_goes_low_when_reenergised_1 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_5;
    mw_goes_low_when_reenergised_2 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_4;
    mw_goes_low_when_reenergised_3 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_3;
    mw_goes_low_when_reenergised_4 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_2;
    mw_goes_low_when_reenergised_5 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_1;
  transition mw_goes_to_zero_when_isolated
    mw_goes_to_zero_when_isolated_0 (isolated = true AND iso_state_changed = true) -> mw := zero, entered_zero_zone_MW, check_generators_off;
  transition mw_goes_low_when_isolated
    mw_goes_low_when_isolated_0 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low, check_generators_off;
    mw_goes_low_when_isolated_1 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_5, check_generators_off;
    mw_goes_low_when_isolated_2 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_4, check_generators_off;
    mw_goes_low_when_isolated_3 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_3, check_generators_off;
    mw_goes_low_when_isolated_4 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_2, check_generators_off;
    mw_goes_low_when_isolated_5 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_1, check_generators_off;
  transition mw_goes_to_zero
    mw_goes_to_zero_0 true = 1 -> mw := zero, entered_zero_zone_MW;
  triggeredby mw_zero;
  transition mw_goes_normal
    mw_goes_normal_0 true = 1 -> mw := normal, limit_MW_Normal;
  triggeredby mw_normal;
  transition mw_goes_high
    mw_goes_high_0 true = 1 -> mw := high, limit_MW_High;
    mw_goes_high_1 true = 1 -> mw := high, limit_MW_High_5;
    mw_goes_high_2 true = 1 -> mw := high, limit_MW_High_4;
    mw_goes_high_3 true = 1 -> mw := high, limit_MW_High_3;
    mw_goes_high_4 true = 1 -> mw := high, limit_MW_High_2;
    mw_goes_high_5 true = 1 -> mw := high, limit_MW_High_1;
  triggeredby mw_high;
  transition mw_goes_low
    mw_goes_low_0 true = 1 -> mw := low, limit_MW_Low;
    mw_goes_low_1 true = 1 -> mw := low, limit_MW_Low_5;
    mw_goes_low_2 true = 1 -> mw := low, limit_MW_Low_4;
    mw_goes_low_3 true = 1 -> mw := low, limit_MW_Low_3;
    mw_goes_low_4 true = 1 -> mw := low, limit_MW_Low_2;
    mw_goes_low_5 true = 1 -> mw := low, limit_MW_Low_1;
  triggeredby mw_low;
  transition mw_goes_to_zero_unexplained
    mw_goes_to_zero_unexplained_0 true = 1 -> mw := zero, entered_zero_zone_MW, count_as_fault;
  transition mw_goes_normal_unexplained
    mw_goes_normal_unexplained_0 true = 1 -> mw := normal, limit_MW_Normal, count_as_fault;
  transition mw_goes_high_unexplained
    mw_goes_high_unexplained_0 true = 1 -> mw := high, limit_MW_High, count_as_fault;
    mw_goes_high_unexplained_1 true = 1 -> mw := high, limit_MW_High_5, count_as_fault;
    mw_goes_high_unexplained_2 true = 1 -> mw := high, limit_MW_High_4, count_as_fault;
    mw_goes_high_unexplained_3 true = 1 -> mw := high, limit_MW_High_3, count_as_fault;
    mw_goes_high_unexplained_4 true = 1 -> mw := high, limit_MW_High_2, count_as_fault;
    mw_goes_high_unexplained_5 true = 1 -> mw := high, limit_MW_High_1, count_as_fault;
  transition mw_goes_low_unexplained
    mw_goes_low_unexplained_0 true = 1 -> mw := low, limit_MW_Low, count_as_fault;
    mw_goes_low_unexplained_1 true = 1 -> mw := low, limit_MW_Low_5, count_as_fault;
    mw_goes_low_unexplained_2 true = 1 -> mw := low, limit_MW_Low_4, count_as_fault;
    mw_goes_low_unexplained_3 true = 1 -> mw := low, limit_MW_Low_3, count_as_fault;
    mw_goes_low_unexplained_4 true = 1 -> mw := low, limit_MW_Low_2, count_as_fault;
    mw_goes_low_unexplained_5 true = 1 -> mw := low, limit_MW_Low_1, count_as_fault;
  transition voltage_goes_normal_when_caps_in
    voltage_goes_normal_when_caps_in_0 (voltage = low AND isolated = false) -> voltage := normal, limit_KV_Normal, check_switched_in;
  transition voltage_goes_normal_when_caps_out
    voltage_goes_normal_when_caps_out_0 (voltage = high AND isolated = false) -> voltage := normal, limit_KV_Normal, check_switched_out;
  transition voltage_goes_normal_when_reenergised
    voltage_goes_normal_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> voltage := normal, limit_KV_Normal;
  transition voltage_goes_high_when_reenergised
    voltage_goes_high_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High;
    voltage_goes_high_when_reenergised_1 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_5;
    voltage_goes_high_when_reenergised_2 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_4;
    voltage_goes_high_when_reenergised_3 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_3;
    voltage_goes_high_when_reenergised_4 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_2;
    voltage_goes_high_when_reenergised_5 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_1;
  transition voltage_goes_Low_when_reenergised
    voltage_goes_Low_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low;
    voltage_goes_Low_when_reenergised_1 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_5;
    voltage_goes_Low_when_reenergised_2 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_4;
    voltage_goes_Low_when_reenergised_3 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_3;
    voltage_goes_Low_when_reenergised_4 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_2;
    voltage_goes_Low_when_reenergised_5 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_1;
  transition voltage_goes_to_zero_when_isolated
    voltage_goes_to_zero_when_isolated_0 (isolated = true AND iso_state_changed = true) -> voltage := zero, entered_zero_zone_KV, check_generators_off;
  transition voltage_goes_low_when_isolated
    voltage_goes_low_when_isolated_0 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low, check_generators_off;
    voltage_goes_low_when_isolated_1 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_5, check_generators_off;
    voltage_goes_low_when_isolated_2 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_4, check_generators_off;
    voltage_goes_low_when_isolated_3 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_3, check_generators_off;
    voltage_goes_low_when_isolated_4 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_2, check_generators_off;
    voltage_goes_low_when_isolated_5 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_1, check_generators_off;
  transition voltage_goes_to_zero
    voltage_goes_to_zero_0 true = 1 -> voltage := zero, entered_zero_zone_KV;
  triggeredby voltage_zero;
  transition voltage_goes_normal
    voltage_goes_normal_0 true = 1 -> voltage := normal, limit_KV_Normal;
  triggeredby voltage_normal;
  transition voltage_goes_high
    voltage_goes_high_0 true = 1 -> voltage := high, limit_KV_High;
    voltage_goes_high_1 true = 1 -> voltage := high, limit_KV_High_5;
    voltage_goes_high_2 true = 1 -> voltage := high, limit_KV_High_4;
    voltage_goes_high_3 true = 1 -> voltage := high, limit_KV_High_3;
    voltage_goes_high_4 true = 1 -> voltage := high, limit_KV_High_2;
    voltage_goes_high_5 true = 1 -> voltage := high, limit_KV_High_1;
  triggeredby voltage_high;
  transition voltage_goes_low
    voltage_goes_low_0 true = 1 -> voltage := low, limit_KV_Low;
    voltage_goes_low_1 true = 1 -> voltage := low, limit_KV_Low_5;
    voltage_goes_low_2 true = 1 -> voltage := low, limit_KV_Low_4;
    voltage_goes_low_3 true = 1 -> voltage := low, limit_KV_Low_3;
    voltage_goes_low_4 true = 1 -> voltage := low, limit_KV_Low_2;
    voltage_goes_low_5 true = 1 -> voltage := low, limit_KV_Low_1;
  triggeredby voltage_low;
  transition voltage_goes_to_zero_unexplained
    voltage_goes_to_zero_unexplained_0 true = 1 -> voltage := zero, entered_zero_zone_KV, count_as_fault;
  transition voltage_goes_normal_unexplained
    voltage_goes_normal_unexplained_0 true = 1 -> voltage := normal, limit_KV_Normal, count_as_fault;
  transition voltage_goes_high_unexplained
    voltage_goes_high_unexplained_0 true = 1 -> voltage := high, limit_KV_High, count_as_fault;
    voltage_goes_high_unexplained_1 true = 1 -> voltage := high, limit_KV_High_5, count_as_fault;
    voltage_goes_high_unexplained_2 true = 1 -> voltage := high, limit_KV_High_4, count_as_fault;
    voltage_goes_high_unexplained_3 true = 1 -> voltage := high, limit_KV_High_3, count_as_fault;
    voltage_goes_high_unexplained_4 true = 1 -> voltage := high, limit_KV_High_2, count_as_fault;
    voltage_goes_high_unexplained_5 true = 1 -> voltage := high, limit_KV_High_1, count_as_fault;
  transition voltage_goes_low_unexplained
    voltage_goes_low_unexplained_0 true = 1 -> voltage := low, limit_KV_Low, count_as_fault;
    voltage_goes_low_unexplained_1 true = 1 -> voltage := low, limit_KV_Low_5, count_as_fault;
    voltage_goes_low_unexplained_2 true = 1 -> voltage := low, limit_KV_Low_4, count_as_fault;
    voltage_goes_low_unexplained_3 true = 1 -> voltage := low, limit_KV_Low_3, count_as_fault;
    voltage_goes_low_unexplained_4 true = 1 -> voltage := low, limit_KV_Low_2, count_as_fault;
    voltage_goes_low_unexplained_5 true = 1 -> voltage := low, limit_KV_Low_1, count_as_fault;
  transition iso_state_changed_timeout
    iso_state_changed_timeout_0 true = 1 -> iso_state_changed := false;
  triggeredby [0.0..15.0] iso_state_changed = true;
  transition become_not_isolated
    become_not_isolated_0 true = 1 -> isolated := false, iso_state_changed := true;
  triggeredby set_isolated_false;
  transition become_isolated
    become_isolated_0 true = 1 -> isolated := true, iso_state_changed := true;
  triggeredby set_isolated_true;
}
component Bus_X76 = {
  connection generatorsXYZ0 : attached = Generator_X100;
  var mvar : {zero,high,low,normal};
  var mw : {zero,high,low,normal};
  var voltage : {zero,high,low,normal};
  var iso_state_changed : [0..1];
  var isolated : [0..1];
  event check_generators_off;
  event check_switched_in;
  event check_switched_out;
  event count_as_fault;
  event set_isolated_false;
  event set_isolated_true;
  event mvar_zero;
  event mvar_normal;
  event mvar_high;
  event mvar_low;
  event mw_zero;
  event mw_normal;
  event mw_high;
  event mw_low;
  event voltage_zero;
  event voltage_normal;
  event voltage_high;
  event voltage_low;
  event entered_zero_zone_MVAR;
  event limit_MVAR_High;
  event limit_MVAR_High_5;
  event limit_MVAR_High_4;
  event limit_MVAR_High_3;
  event limit_MVAR_High_2;
  event limit_MVAR_High_1;
  event limit_MVAR_Low;
  event limit_MVAR_Low_5;
  event limit_MVAR_Low_4;
  event limit_MVAR_Low_3;
  event limit_MVAR_Low_2;
  event limit_MVAR_Low_1;
  event limit_MVAR_Normal;
  event entered_zero_zone_MW;
  event limit_MW_High;
  event limit_MW_High_5;
  event limit_MW_High_4;
  event limit_MW_High_3;
  event limit_MW_High_2;
  event limit_MW_High_1;
  event limit_MW_Low;
  event limit_MW_Low_5;
  event limit_MW_Low_4;
  event limit_MW_Low_3;
  event limit_MW_Low_2;
  event limit_MW_Low_1;
  event limit_MW_Normal;
  event entered_zero_zone_KV;
  event limit_KV_High;
  event limit_KV_High_5;
  event limit_KV_High_4;
  event limit_KV_High_3;
  event limit_KV_High_2;
  event limit_KV_High_1;
  event limit_KV_Low;
  event limit_KV_Low_5;
  event limit_KV_Low_4;
  event limit_KV_Low_3;
  event limit_KV_Low_2;
  event limit_KV_Low_1;
  event limit_KV_Normal;
  transition mvar_goes_to_zero
    mvar_goes_to_zero_0 true = 1 -> mvar := zero, entered_zero_zone_MVAR;
  triggeredby mvar_zero;
  transition mvar_goes_normal
    mvar_goes_normal_0 true = 1 -> mvar := normal, limit_MVAR_Normal;
  triggeredby mvar_normal;
  transition mvar_goes_high
    mvar_goes_high_0 true = 1 -> mvar := high, limit_MVAR_High;
    mvar_goes_high_1 true = 1 -> mvar := high, limit_MVAR_High_5;
    mvar_goes_high_2 true = 1 -> mvar := high, limit_MVAR_High_4;
    mvar_goes_high_3 true = 1 -> mvar := high, limit_MVAR_High_3;
    mvar_goes_high_4 true = 1 -> mvar := high, limit_MVAR_High_2;
    mvar_goes_high_5 true = 1 -> mvar := high, limit_MVAR_High_1;
  triggeredby mvar_high;
  transition mvar_goes_low
    mvar_goes_low_0 true = 1 -> mvar := low, limit_MVAR_Low;
    mvar_goes_low_1 true = 1 -> mvar := low, limit_MVAR_Low_5;
    mvar_goes_low_2 true = 1 -> mvar := low, limit_MVAR_Low_4;
    mvar_goes_low_3 true = 1 -> mvar := low, limit_MVAR_Low_3;
    mvar_goes_low_4 true = 1 -> mvar := low, limit_MVAR_Low_2;
    mvar_goes_low_5 true = 1 -> mvar := low, limit_MVAR_Low_1;
  triggeredby mvar_low;
  transition mvar_goes_to_zero_unexplained
    mvar_goes_to_zero_unexplained_0 true = 1 -> mvar := zero, entered_zero_zone_MVAR, count_as_fault;
  transition mvar_goes_normal_unexplained
    mvar_goes_normal_unexplained_0 true = 1 -> mvar := normal, limit_MVAR_Normal, count_as_fault;
  transition mvar_goes_high_unexplained
    mvar_goes_high_unexplained_0 true = 1 -> mvar := high, limit_MVAR_High, count_as_fault;
    mvar_goes_high_unexplained_1 true = 1 -> mvar := high, limit_MVAR_High_5, count_as_fault;
    mvar_goes_high_unexplained_2 true = 1 -> mvar := high, limit_MVAR_High_4, count_as_fault;
    mvar_goes_high_unexplained_3 true = 1 -> mvar := high, limit_MVAR_High_3, count_as_fault;
    mvar_goes_high_unexplained_4 true = 1 -> mvar := high, limit_MVAR_High_2, count_as_fault;
    mvar_goes_high_unexplained_5 true = 1 -> mvar := high, limit_MVAR_High_1, count_as_fault;
  transition mvar_goes_low_unexplained
    mvar_goes_low_unexplained_0 true = 1 -> mvar := low, limit_MVAR_Low, count_as_fault;
    mvar_goes_low_unexplained_1 true = 1 -> mvar := low, limit_MVAR_Low_5, count_as_fault;
    mvar_goes_low_unexplained_2 true = 1 -> mvar := low, limit_MVAR_Low_4, count_as_fault;
    mvar_goes_low_unexplained_3 true = 1 -> mvar := low, limit_MVAR_Low_3, count_as_fault;
    mvar_goes_low_unexplained_4 true = 1 -> mvar := low, limit_MVAR_Low_2, count_as_fault;
    mvar_goes_low_unexplained_5 true = 1 -> mvar := low, limit_MVAR_Low_1, count_as_fault;
  transition mw_goes_normal_when_reenergised
    mw_goes_normal_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> mw := normal, limit_MW_Normal;
  transition mw_goes_high_when_reenergised
    mw_goes_high_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High;
    mw_goes_high_when_reenergised_1 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_5;
    mw_goes_high_when_reenergised_2 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_4;
    mw_goes_high_when_reenergised_3 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_3;
    mw_goes_high_when_reenergised_4 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_2;
    mw_goes_high_when_reenergised_5 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_1;
  transition mw_goes_low_when_reenergised
    mw_goes_low_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low;
    mw_goes_low_when_reenergised_1 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_5;
    mw_goes_low_when_reenergised_2 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_4;
    mw_goes_low_when_reenergised_3 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_3;
    mw_goes_low_when_reenergised_4 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_2;
    mw_goes_low_when_reenergised_5 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_1;
  transition mw_goes_to_zero_when_isolated
    mw_goes_to_zero_when_isolated_0 (isolated = true AND iso_state_changed = true) -> mw := zero, entered_zero_zone_MW, check_generators_off;
  transition mw_goes_low_when_isolated
    mw_goes_low_when_isolated_0 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low, check_generators_off;
    mw_goes_low_when_isolated_1 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_5, check_generators_off;
    mw_goes_low_when_isolated_2 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_4, check_generators_off;
    mw_goes_low_when_isolated_3 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_3, check_generators_off;
    mw_goes_low_when_isolated_4 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_2, check_generators_off;
    mw_goes_low_when_isolated_5 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_1, check_generators_off;
  transition mw_goes_to_zero
    mw_goes_to_zero_0 true = 1 -> mw := zero, entered_zero_zone_MW;
  triggeredby mw_zero;
  transition mw_goes_normal
    mw_goes_normal_0 true = 1 -> mw := normal, limit_MW_Normal;
  triggeredby mw_normal;
  transition mw_goes_high
    mw_goes_high_0 true = 1 -> mw := high, limit_MW_High;
    mw_goes_high_1 true = 1 -> mw := high, limit_MW_High_5;
    mw_goes_high_2 true = 1 -> mw := high, limit_MW_High_4;
    mw_goes_high_3 true = 1 -> mw := high, limit_MW_High_3;
    mw_goes_high_4 true = 1 -> mw := high, limit_MW_High_2;
    mw_goes_high_5 true = 1 -> mw := high, limit_MW_High_1;
  triggeredby mw_high;
  transition mw_goes_low
    mw_goes_low_0 true = 1 -> mw := low, limit_MW_Low;
    mw_goes_low_1 true = 1 -> mw := low, limit_MW_Low_5;
    mw_goes_low_2 true = 1 -> mw := low, limit_MW_Low_4;
    mw_goes_low_3 true = 1 -> mw := low, limit_MW_Low_3;
    mw_goes_low_4 true = 1 -> mw := low, limit_MW_Low_2;
    mw_goes_low_5 true = 1 -> mw := low, limit_MW_Low_1;
  triggeredby mw_low;
  transition mw_goes_to_zero_unexplained
    mw_goes_to_zero_unexplained_0 true = 1 -> mw := zero, entered_zero_zone_MW, count_as_fault;
  transition mw_goes_normal_unexplained
    mw_goes_normal_unexplained_0 true = 1 -> mw := normal, limit_MW_Normal, count_as_fault;
  transition mw_goes_high_unexplained
    mw_goes_high_unexplained_0 true = 1 -> mw := high, limit_MW_High, count_as_fault;
    mw_goes_high_unexplained_1 true = 1 -> mw := high, limit_MW_High_5, count_as_fault;
    mw_goes_high_unexplained_2 true = 1 -> mw := high, limit_MW_High_4, count_as_fault;
    mw_goes_high_unexplained_3 true = 1 -> mw := high, limit_MW_High_3, count_as_fault;
    mw_goes_high_unexplained_4 true = 1 -> mw := high, limit_MW_High_2, count_as_fault;
    mw_goes_high_unexplained_5 true = 1 -> mw := high, limit_MW_High_1, count_as_fault;
  transition mw_goes_low_unexplained
    mw_goes_low_unexplained_0 true = 1 -> mw := low, limit_MW_Low, count_as_fault;
    mw_goes_low_unexplained_1 true = 1 -> mw := low, limit_MW_Low_5, count_as_fault;
    mw_goes_low_unexplained_2 true = 1 -> mw := low, limit_MW_Low_4, count_as_fault;
    mw_goes_low_unexplained_3 true = 1 -> mw := low, limit_MW_Low_3, count_as_fault;
    mw_goes_low_unexplained_4 true = 1 -> mw := low, limit_MW_Low_2, count_as_fault;
    mw_goes_low_unexplained_5 true = 1 -> mw := low, limit_MW_Low_1, count_as_fault;
  transition voltage_goes_normal_when_caps_in
    voltage_goes_normal_when_caps_in_0 (voltage = low AND isolated = false) -> voltage := normal, limit_KV_Normal, check_switched_in;
  transition voltage_goes_normal_when_caps_out
    voltage_goes_normal_when_caps_out_0 (voltage = high AND isolated = false) -> voltage := normal, limit_KV_Normal, check_switched_out;
  transition voltage_goes_normal_when_reenergised
    voltage_goes_normal_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> voltage := normal, limit_KV_Normal;
  transition voltage_goes_high_when_reenergised
    voltage_goes_high_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High;
    voltage_goes_high_when_reenergised_1 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_5;
    voltage_goes_high_when_reenergised_2 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_4;
    voltage_goes_high_when_reenergised_3 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_3;
    voltage_goes_high_when_reenergised_4 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_2;
    voltage_goes_high_when_reenergised_5 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_1;
  transition voltage_goes_Low_when_reenergised
    voltage_goes_Low_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low;
    voltage_goes_Low_when_reenergised_1 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_5;
    voltage_goes_Low_when_reenergised_2 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_4;
    voltage_goes_Low_when_reenergised_3 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_3;
    voltage_goes_Low_when_reenergised_4 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_2;
    voltage_goes_Low_when_reenergised_5 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_1;
  transition voltage_goes_to_zero_when_isolated
    voltage_goes_to_zero_when_isolated_0 (isolated = true AND iso_state_changed = true) -> voltage := zero, entered_zero_zone_KV, check_generators_off;
  transition voltage_goes_low_when_isolated
    voltage_goes_low_when_isolated_0 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low, check_generators_off;
    voltage_goes_low_when_isolated_1 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_5, check_generators_off;
    voltage_goes_low_when_isolated_2 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_4, check_generators_off;
    voltage_goes_low_when_isolated_3 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_3, check_generators_off;
    voltage_goes_low_when_isolated_4 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_2, check_generators_off;
    voltage_goes_low_when_isolated_5 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_1, check_generators_off;
  transition voltage_goes_to_zero
    voltage_goes_to_zero_0 true = 1 -> voltage := zero, entered_zero_zone_KV;
  triggeredby voltage_zero;
  transition voltage_goes_normal
    voltage_goes_normal_0 true = 1 -> voltage := normal, limit_KV_Normal;
  triggeredby voltage_normal;
  transition voltage_goes_high
    voltage_goes_high_0 true = 1 -> voltage := high, limit_KV_High;
    voltage_goes_high_1 true = 1 -> voltage := high, limit_KV_High_5;
    voltage_goes_high_2 true = 1 -> voltage := high, limit_KV_High_4;
    voltage_goes_high_3 true = 1 -> voltage := high, limit_KV_High_3;
    voltage_goes_high_4 true = 1 -> voltage := high, limit_KV_High_2;
    voltage_goes_high_5 true = 1 -> voltage := high, limit_KV_High_1;
  triggeredby voltage_high;
  transition voltage_goes_low
    voltage_goes_low_0 true = 1 -> voltage := low, limit_KV_Low;
    voltage_goes_low_1 true = 1 -> voltage := low, limit_KV_Low_5;
    voltage_goes_low_2 true = 1 -> voltage := low, limit_KV_Low_4;
    voltage_goes_low_3 true = 1 -> voltage := low, limit_KV_Low_3;
    voltage_goes_low_4 true = 1 -> voltage := low, limit_KV_Low_2;
    voltage_goes_low_5 true = 1 -> voltage := low, limit_KV_Low_1;
  triggeredby voltage_low;
  transition voltage_goes_to_zero_unexplained
    voltage_goes_to_zero_unexplained_0 true = 1 -> voltage := zero, entered_zero_zone_KV, count_as_fault;
  transition voltage_goes_normal_unexplained
    voltage_goes_normal_unexplained_0 true = 1 -> voltage := normal, limit_KV_Normal, count_as_fault;
  transition voltage_goes_high_unexplained
    voltage_goes_high_unexplained_0 true = 1 -> voltage := high, limit_KV_High, count_as_fault;
    voltage_goes_high_unexplained_1 true = 1 -> voltage := high, limit_KV_High_5, count_as_fault;
    voltage_goes_high_unexplained_2 true = 1 -> voltage := high, limit_KV_High_4, count_as_fault;
    voltage_goes_high_unexplained_3 true = 1 -> voltage := high, limit_KV_High_3, count_as_fault;
    voltage_goes_high_unexplained_4 true = 1 -> voltage := high, limit_KV_High_2, count_as_fault;
    voltage_goes_high_unexplained_5 true = 1 -> voltage := high, limit_KV_High_1, count_as_fault;
  transition voltage_goes_low_unexplained
    voltage_goes_low_unexplained_0 true = 1 -> voltage := low, limit_KV_Low, count_as_fault;
    voltage_goes_low_unexplained_1 true = 1 -> voltage := low, limit_KV_Low_5, count_as_fault;
    voltage_goes_low_unexplained_2 true = 1 -> voltage := low, limit_KV_Low_4, count_as_fault;
    voltage_goes_low_unexplained_3 true = 1 -> voltage := low, limit_KV_Low_3, count_as_fault;
    voltage_goes_low_unexplained_4 true = 1 -> voltage := low, limit_KV_Low_2, count_as_fault;
    voltage_goes_low_unexplained_5 true = 1 -> voltage := low, limit_KV_Low_1, count_as_fault;
  transition iso_state_changed_timeout
    iso_state_changed_timeout_0 true = 1 -> iso_state_changed := false;
  triggeredby [0.0..15.0] iso_state_changed = true;
  transition become_not_isolated
    become_not_isolated_0 true = 1 -> isolated := false, iso_state_changed := true;
  triggeredby set_isolated_false;
  transition become_isolated
    become_isolated_0 true = 1 -> isolated := true, iso_state_changed := true;
  triggeredby set_isolated_true;
}
component Bus_X127 = {
  var mvar : {zero,high,low,normal};
  var mw : {zero,high,low,normal};
  var voltage : {zero,high,low,normal};
  var iso_state_changed : [0..1];
  var isolated : [0..1];
  event check_generators_off;
  event check_switched_in;
  event check_switched_out;
  event count_as_fault;
  event set_isolated_false;
  event set_isolated_true;
  event mvar_zero;
  event mvar_normal;
  event mvar_high;
  event mvar_low;
  event mw_zero;
  event mw_normal;
  event mw_high;
  event mw_low;
  event voltage_zero;
  event voltage_normal;
  event voltage_high;
  event voltage_low;
  event entered_zero_zone_MVAR;
  event limit_MVAR_High;
  event limit_MVAR_High_5;
  event limit_MVAR_High_4;
  event limit_MVAR_High_3;
  event limit_MVAR_High_2;
  event limit_MVAR_High_1;
  event limit_MVAR_Low;
  event limit_MVAR_Low_5;
  event limit_MVAR_Low_4;
  event limit_MVAR_Low_3;
  event limit_MVAR_Low_2;
  event limit_MVAR_Low_1;
  event limit_MVAR_Normal;
  event entered_zero_zone_MW;
  event limit_MW_High;
  event limit_MW_High_5;
  event limit_MW_High_4;
  event limit_MW_High_3;
  event limit_MW_High_2;
  event limit_MW_High_1;
  event limit_MW_Low;
  event limit_MW_Low_5;
  event limit_MW_Low_4;
  event limit_MW_Low_3;
  event limit_MW_Low_2;
  event limit_MW_Low_1;
  event limit_MW_Normal;
  event entered_zero_zone_KV;
  event limit_KV_High;
  event limit_KV_High_5;
  event limit_KV_High_4;
  event limit_KV_High_3;
  event limit_KV_High_2;
  event limit_KV_High_1;
  event limit_KV_Low;
  event limit_KV_Low_5;
  event limit_KV_Low_4;
  event limit_KV_Low_3;
  event limit_KV_Low_2;
  event limit_KV_Low_1;
  event limit_KV_Normal;
  transition mvar_goes_to_zero
    mvar_goes_to_zero_0 true = 1 -> mvar := zero, entered_zero_zone_MVAR;
  triggeredby mvar_zero;
  transition mvar_goes_normal
    mvar_goes_normal_0 true = 1 -> mvar := normal, limit_MVAR_Normal;
  triggeredby mvar_normal;
  transition mvar_goes_high
    mvar_goes_high_0 true = 1 -> mvar := high, limit_MVAR_High;
    mvar_goes_high_1 true = 1 -> mvar := high, limit_MVAR_High_5;
    mvar_goes_high_2 true = 1 -> mvar := high, limit_MVAR_High_4;
    mvar_goes_high_3 true = 1 -> mvar := high, limit_MVAR_High_3;
    mvar_goes_high_4 true = 1 -> mvar := high, limit_MVAR_High_2;
    mvar_goes_high_5 true = 1 -> mvar := high, limit_MVAR_High_1;
  triggeredby mvar_high;
  transition mvar_goes_low
    mvar_goes_low_0 true = 1 -> mvar := low, limit_MVAR_Low;
    mvar_goes_low_1 true = 1 -> mvar := low, limit_MVAR_Low_5;
    mvar_goes_low_2 true = 1 -> mvar := low, limit_MVAR_Low_4;
    mvar_goes_low_3 true = 1 -> mvar := low, limit_MVAR_Low_3;
    mvar_goes_low_4 true = 1 -> mvar := low, limit_MVAR_Low_2;
    mvar_goes_low_5 true = 1 -> mvar := low, limit_MVAR_Low_1;
  triggeredby mvar_low;
  transition mvar_goes_to_zero_unexplained
    mvar_goes_to_zero_unexplained_0 true = 1 -> mvar := zero, entered_zero_zone_MVAR, count_as_fault;
  transition mvar_goes_normal_unexplained
    mvar_goes_normal_unexplained_0 true = 1 -> mvar := normal, limit_MVAR_Normal, count_as_fault;
  transition mvar_goes_high_unexplained
    mvar_goes_high_unexplained_0 true = 1 -> mvar := high, limit_MVAR_High, count_as_fault;
    mvar_goes_high_unexplained_1 true = 1 -> mvar := high, limit_MVAR_High_5, count_as_fault;
    mvar_goes_high_unexplained_2 true = 1 -> mvar := high, limit_MVAR_High_4, count_as_fault;
    mvar_goes_high_unexplained_3 true = 1 -> mvar := high, limit_MVAR_High_3, count_as_fault;
    mvar_goes_high_unexplained_4 true = 1 -> mvar := high, limit_MVAR_High_2, count_as_fault;
    mvar_goes_high_unexplained_5 true = 1 -> mvar := high, limit_MVAR_High_1, count_as_fault;
  transition mvar_goes_low_unexplained
    mvar_goes_low_unexplained_0 true = 1 -> mvar := low, limit_MVAR_Low, count_as_fault;
    mvar_goes_low_unexplained_1 true = 1 -> mvar := low, limit_MVAR_Low_5, count_as_fault;
    mvar_goes_low_unexplained_2 true = 1 -> mvar := low, limit_MVAR_Low_4, count_as_fault;
    mvar_goes_low_unexplained_3 true = 1 -> mvar := low, limit_MVAR_Low_3, count_as_fault;
    mvar_goes_low_unexplained_4 true = 1 -> mvar := low, limit_MVAR_Low_2, count_as_fault;
    mvar_goes_low_unexplained_5 true = 1 -> mvar := low, limit_MVAR_Low_1, count_as_fault;
  transition mw_goes_normal_when_reenergised
    mw_goes_normal_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> mw := normal, limit_MW_Normal;
  transition mw_goes_high_when_reenergised
    mw_goes_high_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High;
    mw_goes_high_when_reenergised_1 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_5;
    mw_goes_high_when_reenergised_2 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_4;
    mw_goes_high_when_reenergised_3 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_3;
    mw_goes_high_when_reenergised_4 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_2;
    mw_goes_high_when_reenergised_5 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_1;
  transition mw_goes_low_when_reenergised
    mw_goes_low_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low;
    mw_goes_low_when_reenergised_1 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_5;
    mw_goes_low_when_reenergised_2 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_4;
    mw_goes_low_when_reenergised_3 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_3;
    mw_goes_low_when_reenergised_4 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_2;
    mw_goes_low_when_reenergised_5 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_1;
  transition mw_goes_to_zero_when_isolated
    mw_goes_to_zero_when_isolated_0 (isolated = true AND iso_state_changed = true) -> mw := zero, entered_zero_zone_MW, check_generators_off;
  transition mw_goes_low_when_isolated
    mw_goes_low_when_isolated_0 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low, check_generators_off;
    mw_goes_low_when_isolated_1 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_5, check_generators_off;
    mw_goes_low_when_isolated_2 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_4, check_generators_off;
    mw_goes_low_when_isolated_3 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_3, check_generators_off;
    mw_goes_low_when_isolated_4 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_2, check_generators_off;
    mw_goes_low_when_isolated_5 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_1, check_generators_off;
  transition mw_goes_to_zero
    mw_goes_to_zero_0 true = 1 -> mw := zero, entered_zero_zone_MW;
  triggeredby mw_zero;
  transition mw_goes_normal
    mw_goes_normal_0 true = 1 -> mw := normal, limit_MW_Normal;
  triggeredby mw_normal;
  transition mw_goes_high
    mw_goes_high_0 true = 1 -> mw := high, limit_MW_High;
    mw_goes_high_1 true = 1 -> mw := high, limit_MW_High_5;
    mw_goes_high_2 true = 1 -> mw := high, limit_MW_High_4;
    mw_goes_high_3 true = 1 -> mw := high, limit_MW_High_3;
    mw_goes_high_4 true = 1 -> mw := high, limit_MW_High_2;
    mw_goes_high_5 true = 1 -> mw := high, limit_MW_High_1;
  triggeredby mw_high;
  transition mw_goes_low
    mw_goes_low_0 true = 1 -> mw := low, limit_MW_Low;
    mw_goes_low_1 true = 1 -> mw := low, limit_MW_Low_5;
    mw_goes_low_2 true = 1 -> mw := low, limit_MW_Low_4;
    mw_goes_low_3 true = 1 -> mw := low, limit_MW_Low_3;
    mw_goes_low_4 true = 1 -> mw := low, limit_MW_Low_2;
    mw_goes_low_5 true = 1 -> mw := low, limit_MW_Low_1;
  triggeredby mw_low;
  transition mw_goes_to_zero_unexplained
    mw_goes_to_zero_unexplained_0 true = 1 -> mw := zero, entered_zero_zone_MW, count_as_fault;
  transition mw_goes_normal_unexplained
    mw_goes_normal_unexplained_0 true = 1 -> mw := normal, limit_MW_Normal, count_as_fault;
  transition mw_goes_high_unexplained
    mw_goes_high_unexplained_0 true = 1 -> mw := high, limit_MW_High, count_as_fault;
    mw_goes_high_unexplained_1 true = 1 -> mw := high, limit_MW_High_5, count_as_fault;
    mw_goes_high_unexplained_2 true = 1 -> mw := high, limit_MW_High_4, count_as_fault;
    mw_goes_high_unexplained_3 true = 1 -> mw := high, limit_MW_High_3, count_as_fault;
    mw_goes_high_unexplained_4 true = 1 -> mw := high, limit_MW_High_2, count_as_fault;
    mw_goes_high_unexplained_5 true = 1 -> mw := high, limit_MW_High_1, count_as_fault;
  transition mw_goes_low_unexplained
    mw_goes_low_unexplained_0 true = 1 -> mw := low, limit_MW_Low, count_as_fault;
    mw_goes_low_unexplained_1 true = 1 -> mw := low, limit_MW_Low_5, count_as_fault;
    mw_goes_low_unexplained_2 true = 1 -> mw := low, limit_MW_Low_4, count_as_fault;
    mw_goes_low_unexplained_3 true = 1 -> mw := low, limit_MW_Low_3, count_as_fault;
    mw_goes_low_unexplained_4 true = 1 -> mw := low, limit_MW_Low_2, count_as_fault;
    mw_goes_low_unexplained_5 true = 1 -> mw := low, limit_MW_Low_1, count_as_fault;
  transition voltage_goes_normal_when_caps_in
    voltage_goes_normal_when_caps_in_0 (voltage = low AND isolated = false) -> voltage := normal, limit_KV_Normal, check_switched_in;
  transition voltage_goes_normal_when_caps_out
    voltage_goes_normal_when_caps_out_0 (voltage = high AND isolated = false) -> voltage := normal, limit_KV_Normal, check_switched_out;
  transition voltage_goes_normal_when_reenergised
    voltage_goes_normal_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> voltage := normal, limit_KV_Normal;
  transition voltage_goes_high_when_reenergised
    voltage_goes_high_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High;
    voltage_goes_high_when_reenergised_1 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_5;
    voltage_goes_high_when_reenergised_2 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_4;
    voltage_goes_high_when_reenergised_3 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_3;
    voltage_goes_high_when_reenergised_4 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_2;
    voltage_goes_high_when_reenergised_5 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_1;
  transition voltage_goes_Low_when_reenergised
    voltage_goes_Low_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low;
    voltage_goes_Low_when_reenergised_1 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_5;
    voltage_goes_Low_when_reenergised_2 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_4;
    voltage_goes_Low_when_reenergised_3 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_3;
    voltage_goes_Low_when_reenergised_4 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_2;
    voltage_goes_Low_when_reenergised_5 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_1;
  transition voltage_goes_to_zero_when_isolated
    voltage_goes_to_zero_when_isolated_0 (isolated = true AND iso_state_changed = true) -> voltage := zero, entered_zero_zone_KV, check_generators_off;
  transition voltage_goes_low_when_isolated
    voltage_goes_low_when_isolated_0 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low, check_generators_off;
    voltage_goes_low_when_isolated_1 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_5, check_generators_off;
    voltage_goes_low_when_isolated_2 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_4, check_generators_off;
    voltage_goes_low_when_isolated_3 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_3, check_generators_off;
    voltage_goes_low_when_isolated_4 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_2, check_generators_off;
    voltage_goes_low_when_isolated_5 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_1, check_generators_off;
  transition voltage_goes_to_zero
    voltage_goes_to_zero_0 true = 1 -> voltage := zero, entered_zero_zone_KV;
  triggeredby voltage_zero;
  transition voltage_goes_normal
    voltage_goes_normal_0 true = 1 -> voltage := normal, limit_KV_Normal;
  triggeredby voltage_normal;
  transition voltage_goes_high
    voltage_goes_high_0 true = 1 -> voltage := high, limit_KV_High;
    voltage_goes_high_1 true = 1 -> voltage := high, limit_KV_High_5;
    voltage_goes_high_2 true = 1 -> voltage := high, limit_KV_High_4;
    voltage_goes_high_3 true = 1 -> voltage := high, limit_KV_High_3;
    voltage_goes_high_4 true = 1 -> voltage := high, limit_KV_High_2;
    voltage_goes_high_5 true = 1 -> voltage := high, limit_KV_High_1;
  triggeredby voltage_high;
  transition voltage_goes_low
    voltage_goes_low_0 true = 1 -> voltage := low, limit_KV_Low;
    voltage_goes_low_1 true = 1 -> voltage := low, limit_KV_Low_5;
    voltage_goes_low_2 true = 1 -> voltage := low, limit_KV_Low_4;
    voltage_goes_low_3 true = 1 -> voltage := low, limit_KV_Low_3;
    voltage_goes_low_4 true = 1 -> voltage := low, limit_KV_Low_2;
    voltage_goes_low_5 true = 1 -> voltage := low, limit_KV_Low_1;
  triggeredby voltage_low;
  transition voltage_goes_to_zero_unexplained
    voltage_goes_to_zero_unexplained_0 true = 1 -> voltage := zero, entered_zero_zone_KV, count_as_fault;
  transition voltage_goes_normal_unexplained
    voltage_goes_normal_unexplained_0 true = 1 -> voltage := normal, limit_KV_Normal, count_as_fault;
  transition voltage_goes_high_unexplained
    voltage_goes_high_unexplained_0 true = 1 -> voltage := high, limit_KV_High, count_as_fault;
    voltage_goes_high_unexplained_1 true = 1 -> voltage := high, limit_KV_High_5, count_as_fault;
    voltage_goes_high_unexplained_2 true = 1 -> voltage := high, limit_KV_High_4, count_as_fault;
    voltage_goes_high_unexplained_3 true = 1 -> voltage := high, limit_KV_High_3, count_as_fault;
    voltage_goes_high_unexplained_4 true = 1 -> voltage := high, limit_KV_High_2, count_as_fault;
    voltage_goes_high_unexplained_5 true = 1 -> voltage := high, limit_KV_High_1, count_as_fault;
  transition voltage_goes_low_unexplained
    voltage_goes_low_unexplained_0 true = 1 -> voltage := low, limit_KV_Low, count_as_fault;
    voltage_goes_low_unexplained_1 true = 1 -> voltage := low, limit_KV_Low_5, count_as_fault;
    voltage_goes_low_unexplained_2 true = 1 -> voltage := low, limit_KV_Low_4, count_as_fault;
    voltage_goes_low_unexplained_3 true = 1 -> voltage := low, limit_KV_Low_3, count_as_fault;
    voltage_goes_low_unexplained_4 true = 1 -> voltage := low, limit_KV_Low_2, count_as_fault;
    voltage_goes_low_unexplained_5 true = 1 -> voltage := low, limit_KV_Low_1, count_as_fault;
  transition iso_state_changed_timeout
    iso_state_changed_timeout_0 true = 1 -> iso_state_changed := false;
  triggeredby [0.0..15.0] iso_state_changed = true;
  transition become_not_isolated
    become_not_isolated_0 true = 1 -> isolated := false, iso_state_changed := true;
  triggeredby set_isolated_false;
  transition become_isolated
    become_isolated_0 true = 1 -> isolated := true, iso_state_changed := true;
  triggeredby set_isolated_true;
}
component Bus_X111 = {
  var mvar : {zero,high,low,normal};
  var mw : {zero,high,low,normal};
  var voltage : {zero,high,low,normal};
  var iso_state_changed : [0..1];
  var isolated : [0..1];
  event check_generators_off;
  event check_switched_in;
  event check_switched_out;
  event count_as_fault;
  event set_isolated_false;
  event set_isolated_true;
  event mvar_zero;
  event mvar_normal;
  event mvar_high;
  event mvar_low;
  event mw_zero;
  event mw_normal;
  event mw_high;
  event mw_low;
  event voltage_zero;
  event voltage_normal;
  event voltage_high;
  event voltage_low;
  event entered_zero_zone_MVAR;
  event limit_MVAR_High;
  event limit_MVAR_High_5;
  event limit_MVAR_High_4;
  event limit_MVAR_High_3;
  event limit_MVAR_High_2;
  event limit_MVAR_High_1;
  event limit_MVAR_Low;
  event limit_MVAR_Low_5;
  event limit_MVAR_Low_4;
  event limit_MVAR_Low_3;
  event limit_MVAR_Low_2;
  event limit_MVAR_Low_1;
  event limit_MVAR_Normal;
  event entered_zero_zone_MW;
  event limit_MW_High;
  event limit_MW_High_5;
  event limit_MW_High_4;
  event limit_MW_High_3;
  event limit_MW_High_2;
  event limit_MW_High_1;
  event limit_MW_Low;
  event limit_MW_Low_5;
  event limit_MW_Low_4;
  event limit_MW_Low_3;
  event limit_MW_Low_2;
  event limit_MW_Low_1;
  event limit_MW_Normal;
  event entered_zero_zone_KV;
  event limit_KV_High;
  event limit_KV_High_5;
  event limit_KV_High_4;
  event limit_KV_High_3;
  event limit_KV_High_2;
  event limit_KV_High_1;
  event limit_KV_Low;
  event limit_KV_Low_5;
  event limit_KV_Low_4;
  event limit_KV_Low_3;
  event limit_KV_Low_2;
  event limit_KV_Low_1;
  event limit_KV_Normal;
  transition mvar_goes_to_zero
    mvar_goes_to_zero_0 true = 1 -> mvar := zero, entered_zero_zone_MVAR;
  triggeredby mvar_zero;
  transition mvar_goes_normal
    mvar_goes_normal_0 true = 1 -> mvar := normal, limit_MVAR_Normal;
  triggeredby mvar_normal;
  transition mvar_goes_high
    mvar_goes_high_0 true = 1 -> mvar := high, limit_MVAR_High;
    mvar_goes_high_1 true = 1 -> mvar := high, limit_MVAR_High_5;
    mvar_goes_high_2 true = 1 -> mvar := high, limit_MVAR_High_4;
    mvar_goes_high_3 true = 1 -> mvar := high, limit_MVAR_High_3;
    mvar_goes_high_4 true = 1 -> mvar := high, limit_MVAR_High_2;
    mvar_goes_high_5 true = 1 -> mvar := high, limit_MVAR_High_1;
  triggeredby mvar_high;
  transition mvar_goes_low
    mvar_goes_low_0 true = 1 -> mvar := low, limit_MVAR_Low;
    mvar_goes_low_1 true = 1 -> mvar := low, limit_MVAR_Low_5;
    mvar_goes_low_2 true = 1 -> mvar := low, limit_MVAR_Low_4;
    mvar_goes_low_3 true = 1 -> mvar := low, limit_MVAR_Low_3;
    mvar_goes_low_4 true = 1 -> mvar := low, limit_MVAR_Low_2;
    mvar_goes_low_5 true = 1 -> mvar := low, limit_MVAR_Low_1;
  triggeredby mvar_low;
  transition mvar_goes_to_zero_unexplained
    mvar_goes_to_zero_unexplained_0 true = 1 -> mvar := zero, entered_zero_zone_MVAR, count_as_fault;
  transition mvar_goes_normal_unexplained
    mvar_goes_normal_unexplained_0 true = 1 -> mvar := normal, limit_MVAR_Normal, count_as_fault;
  transition mvar_goes_high_unexplained
    mvar_goes_high_unexplained_0 true = 1 -> mvar := high, limit_MVAR_High, count_as_fault;
    mvar_goes_high_unexplained_1 true = 1 -> mvar := high, limit_MVAR_High_5, count_as_fault;
    mvar_goes_high_unexplained_2 true = 1 -> mvar := high, limit_MVAR_High_4, count_as_fault;
    mvar_goes_high_unexplained_3 true = 1 -> mvar := high, limit_MVAR_High_3, count_as_fault;
    mvar_goes_high_unexplained_4 true = 1 -> mvar := high, limit_MVAR_High_2, count_as_fault;
    mvar_goes_high_unexplained_5 true = 1 -> mvar := high, limit_MVAR_High_1, count_as_fault;
  transition mvar_goes_low_unexplained
    mvar_goes_low_unexplained_0 true = 1 -> mvar := low, limit_MVAR_Low, count_as_fault;
    mvar_goes_low_unexplained_1 true = 1 -> mvar := low, limit_MVAR_Low_5, count_as_fault;
    mvar_goes_low_unexplained_2 true = 1 -> mvar := low, limit_MVAR_Low_4, count_as_fault;
    mvar_goes_low_unexplained_3 true = 1 -> mvar := low, limit_MVAR_Low_3, count_as_fault;
    mvar_goes_low_unexplained_4 true = 1 -> mvar := low, limit_MVAR_Low_2, count_as_fault;
    mvar_goes_low_unexplained_5 true = 1 -> mvar := low, limit_MVAR_Low_1, count_as_fault;
  transition mw_goes_normal_when_reenergised
    mw_goes_normal_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> mw := normal, limit_MW_Normal;
  transition mw_goes_high_when_reenergised
    mw_goes_high_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High;
    mw_goes_high_when_reenergised_1 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_5;
    mw_goes_high_when_reenergised_2 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_4;
    mw_goes_high_when_reenergised_3 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_3;
    mw_goes_high_when_reenergised_4 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_2;
    mw_goes_high_when_reenergised_5 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_1;
  transition mw_goes_low_when_reenergised
    mw_goes_low_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low;
    mw_goes_low_when_reenergised_1 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_5;
    mw_goes_low_when_reenergised_2 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_4;
    mw_goes_low_when_reenergised_3 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_3;
    mw_goes_low_when_reenergised_4 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_2;
    mw_goes_low_when_reenergised_5 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_1;
  transition mw_goes_to_zero_when_isolated
    mw_goes_to_zero_when_isolated_0 (isolated = true AND iso_state_changed = true) -> mw := zero, entered_zero_zone_MW, check_generators_off;
  transition mw_goes_low_when_isolated
    mw_goes_low_when_isolated_0 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low, check_generators_off;
    mw_goes_low_when_isolated_1 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_5, check_generators_off;
    mw_goes_low_when_isolated_2 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_4, check_generators_off;
    mw_goes_low_when_isolated_3 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_3, check_generators_off;
    mw_goes_low_when_isolated_4 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_2, check_generators_off;
    mw_goes_low_when_isolated_5 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_1, check_generators_off;
  transition mw_goes_to_zero
    mw_goes_to_zero_0 true = 1 -> mw := zero, entered_zero_zone_MW;
  triggeredby mw_zero;
  transition mw_goes_normal
    mw_goes_normal_0 true = 1 -> mw := normal, limit_MW_Normal;
  triggeredby mw_normal;
  transition mw_goes_high
    mw_goes_high_0 true = 1 -> mw := high, limit_MW_High;
    mw_goes_high_1 true = 1 -> mw := high, limit_MW_High_5;
    mw_goes_high_2 true = 1 -> mw := high, limit_MW_High_4;
    mw_goes_high_3 true = 1 -> mw := high, limit_MW_High_3;
    mw_goes_high_4 true = 1 -> mw := high, limit_MW_High_2;
    mw_goes_high_5 true = 1 -> mw := high, limit_MW_High_1;
  triggeredby mw_high;
  transition mw_goes_low
    mw_goes_low_0 true = 1 -> mw := low, limit_MW_Low;
    mw_goes_low_1 true = 1 -> mw := low, limit_MW_Low_5;
    mw_goes_low_2 true = 1 -> mw := low, limit_MW_Low_4;
    mw_goes_low_3 true = 1 -> mw := low, limit_MW_Low_3;
    mw_goes_low_4 true = 1 -> mw := low, limit_MW_Low_2;
    mw_goes_low_5 true = 1 -> mw := low, limit_MW_Low_1;
  triggeredby mw_low;
  transition mw_goes_to_zero_unexplained
    mw_goes_to_zero_unexplained_0 true = 1 -> mw := zero, entered_zero_zone_MW, count_as_fault;
  transition mw_goes_normal_unexplained
    mw_goes_normal_unexplained_0 true = 1 -> mw := normal, limit_MW_Normal, count_as_fault;
  transition mw_goes_high_unexplained
    mw_goes_high_unexplained_0 true = 1 -> mw := high, limit_MW_High, count_as_fault;
    mw_goes_high_unexplained_1 true = 1 -> mw := high, limit_MW_High_5, count_as_fault;
    mw_goes_high_unexplained_2 true = 1 -> mw := high, limit_MW_High_4, count_as_fault;
    mw_goes_high_unexplained_3 true = 1 -> mw := high, limit_MW_High_3, count_as_fault;
    mw_goes_high_unexplained_4 true = 1 -> mw := high, limit_MW_High_2, count_as_fault;
    mw_goes_high_unexplained_5 true = 1 -> mw := high, limit_MW_High_1, count_as_fault;
  transition mw_goes_low_unexplained
    mw_goes_low_unexplained_0 true = 1 -> mw := low, limit_MW_Low, count_as_fault;
    mw_goes_low_unexplained_1 true = 1 -> mw := low, limit_MW_Low_5, count_as_fault;
    mw_goes_low_unexplained_2 true = 1 -> mw := low, limit_MW_Low_4, count_as_fault;
    mw_goes_low_unexplained_3 true = 1 -> mw := low, limit_MW_Low_3, count_as_fault;
    mw_goes_low_unexplained_4 true = 1 -> mw := low, limit_MW_Low_2, count_as_fault;
    mw_goes_low_unexplained_5 true = 1 -> mw := low, limit_MW_Low_1, count_as_fault;
  transition voltage_goes_normal_when_caps_in
    voltage_goes_normal_when_caps_in_0 (voltage = low AND isolated = false) -> voltage := normal, limit_KV_Normal, check_switched_in;
  transition voltage_goes_normal_when_caps_out
    voltage_goes_normal_when_caps_out_0 (voltage = high AND isolated = false) -> voltage := normal, limit_KV_Normal, check_switched_out;
  transition voltage_goes_normal_when_reenergised
    voltage_goes_normal_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> voltage := normal, limit_KV_Normal;
  transition voltage_goes_high_when_reenergised
    voltage_goes_high_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High;
    voltage_goes_high_when_reenergised_1 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_5;
    voltage_goes_high_when_reenergised_2 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_4;
    voltage_goes_high_when_reenergised_3 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_3;
    voltage_goes_high_when_reenergised_4 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_2;
    voltage_goes_high_when_reenergised_5 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_1;
  transition voltage_goes_Low_when_reenergised
    voltage_goes_Low_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low;
    voltage_goes_Low_when_reenergised_1 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_5;
    voltage_goes_Low_when_reenergised_2 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_4;
    voltage_goes_Low_when_reenergised_3 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_3;
    voltage_goes_Low_when_reenergised_4 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_2;
    voltage_goes_Low_when_reenergised_5 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_1;
  transition voltage_goes_to_zero_when_isolated
    voltage_goes_to_zero_when_isolated_0 (isolated = true AND iso_state_changed = true) -> voltage := zero, entered_zero_zone_KV, check_generators_off;
  transition voltage_goes_low_when_isolated
    voltage_goes_low_when_isolated_0 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low, check_generators_off;
    voltage_goes_low_when_isolated_1 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_5, check_generators_off;
    voltage_goes_low_when_isolated_2 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_4, check_generators_off;
    voltage_goes_low_when_isolated_3 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_3, check_generators_off;
    voltage_goes_low_when_isolated_4 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_2, check_generators_off;
    voltage_goes_low_when_isolated_5 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_1, check_generators_off;
  transition voltage_goes_to_zero
    voltage_goes_to_zero_0 true = 1 -> voltage := zero, entered_zero_zone_KV;
  triggeredby voltage_zero;
  transition voltage_goes_normal
    voltage_goes_normal_0 true = 1 -> voltage := normal, limit_KV_Normal;
  triggeredby voltage_normal;
  transition voltage_goes_high
    voltage_goes_high_0 true = 1 -> voltage := high, limit_KV_High;
    voltage_goes_high_1 true = 1 -> voltage := high, limit_KV_High_5;
    voltage_goes_high_2 true = 1 -> voltage := high, limit_KV_High_4;
    voltage_goes_high_3 true = 1 -> voltage := high, limit_KV_High_3;
    voltage_goes_high_4 true = 1 -> voltage := high, limit_KV_High_2;
    voltage_goes_high_5 true = 1 -> voltage := high, limit_KV_High_1;
  triggeredby voltage_high;
  transition voltage_goes_low
    voltage_goes_low_0 true = 1 -> voltage := low, limit_KV_Low;
    voltage_goes_low_1 true = 1 -> voltage := low, limit_KV_Low_5;
    voltage_goes_low_2 true = 1 -> voltage := low, limit_KV_Low_4;
    voltage_goes_low_3 true = 1 -> voltage := low, limit_KV_Low_3;
    voltage_goes_low_4 true = 1 -> voltage := low, limit_KV_Low_2;
    voltage_goes_low_5 true = 1 -> voltage := low, limit_KV_Low_1;
  triggeredby voltage_low;
  transition voltage_goes_to_zero_unexplained
    voltage_goes_to_zero_unexplained_0 true = 1 -> voltage := zero, entered_zero_zone_KV, count_as_fault;
  transition voltage_goes_normal_unexplained
    voltage_goes_normal_unexplained_0 true = 1 -> voltage := normal, limit_KV_Normal, count_as_fault;
  transition voltage_goes_high_unexplained
    voltage_goes_high_unexplained_0 true = 1 -> voltage := high, limit_KV_High, count_as_fault;
    voltage_goes_high_unexplained_1 true = 1 -> voltage := high, limit_KV_High_5, count_as_fault;
    voltage_goes_high_unexplained_2 true = 1 -> voltage := high, limit_KV_High_4, count_as_fault;
    voltage_goes_high_unexplained_3 true = 1 -> voltage := high, limit_KV_High_3, count_as_fault;
    voltage_goes_high_unexplained_4 true = 1 -> voltage := high, limit_KV_High_2, count_as_fault;
    voltage_goes_high_unexplained_5 true = 1 -> voltage := high, limit_KV_High_1, count_as_fault;
  transition voltage_goes_low_unexplained
    voltage_goes_low_unexplained_0 true = 1 -> voltage := low, limit_KV_Low, count_as_fault;
    voltage_goes_low_unexplained_1 true = 1 -> voltage := low, limit_KV_Low_5, count_as_fault;
    voltage_goes_low_unexplained_2 true = 1 -> voltage := low, limit_KV_Low_4, count_as_fault;
    voltage_goes_low_unexplained_3 true = 1 -> voltage := low, limit_KV_Low_3, count_as_fault;
    voltage_goes_low_unexplained_4 true = 1 -> voltage := low, limit_KV_Low_2, count_as_fault;
    voltage_goes_low_unexplained_5 true = 1 -> voltage := low, limit_KV_Low_1, count_as_fault;
  transition iso_state_changed_timeout
    iso_state_changed_timeout_0 true = 1 -> iso_state_changed := false;
  triggeredby [0.0..15.0] iso_state_changed = true;
  transition become_not_isolated
    become_not_isolated_0 true = 1 -> isolated := false, iso_state_changed := true;
  triggeredby set_isolated_false;
  transition become_isolated
    become_isolated_0 true = 1 -> isolated := true, iso_state_changed := true;
  triggeredby set_isolated_true;
}
component Bus_X128 = {
  var mvar : {zero,high,low,normal};
  var mw : {zero,high,low,normal};
  var voltage : {zero,high,low,normal};
  var iso_state_changed : [0..1];
  var isolated : [0..1];
  event check_generators_off;
  event check_switched_in;
  event check_switched_out;
  event count_as_fault;
  event set_isolated_false;
  event set_isolated_true;
  event mvar_zero;
  event mvar_normal;
  event mvar_high;
  event mvar_low;
  event mw_zero;
  event mw_normal;
  event mw_high;
  event mw_low;
  event voltage_zero;
  event voltage_normal;
  event voltage_high;
  event voltage_low;
  event entered_zero_zone_MVAR;
  event limit_MVAR_High;
  event limit_MVAR_High_5;
  event limit_MVAR_High_4;
  event limit_MVAR_High_3;
  event limit_MVAR_High_2;
  event limit_MVAR_High_1;
  event limit_MVAR_Low;
  event limit_MVAR_Low_5;
  event limit_MVAR_Low_4;
  event limit_MVAR_Low_3;
  event limit_MVAR_Low_2;
  event limit_MVAR_Low_1;
  event limit_MVAR_Normal;
  event entered_zero_zone_MW;
  event limit_MW_High;
  event limit_MW_High_5;
  event limit_MW_High_4;
  event limit_MW_High_3;
  event limit_MW_High_2;
  event limit_MW_High_1;
  event limit_MW_Low;
  event limit_MW_Low_5;
  event limit_MW_Low_4;
  event limit_MW_Low_3;
  event limit_MW_Low_2;
  event limit_MW_Low_1;
  event limit_MW_Normal;
  event entered_zero_zone_KV;
  event limit_KV_High;
  event limit_KV_High_5;
  event limit_KV_High_4;
  event limit_KV_High_3;
  event limit_KV_High_2;
  event limit_KV_High_1;
  event limit_KV_Low;
  event limit_KV_Low_5;
  event limit_KV_Low_4;
  event limit_KV_Low_3;
  event limit_KV_Low_2;
  event limit_KV_Low_1;
  event limit_KV_Normal;
  transition mvar_goes_to_zero
    mvar_goes_to_zero_0 true = 1 -> mvar := zero, entered_zero_zone_MVAR;
  triggeredby mvar_zero;
  transition mvar_goes_normal
    mvar_goes_normal_0 true = 1 -> mvar := normal, limit_MVAR_Normal;
  triggeredby mvar_normal;
  transition mvar_goes_high
    mvar_goes_high_0 true = 1 -> mvar := high, limit_MVAR_High;
    mvar_goes_high_1 true = 1 -> mvar := high, limit_MVAR_High_5;
    mvar_goes_high_2 true = 1 -> mvar := high, limit_MVAR_High_4;
    mvar_goes_high_3 true = 1 -> mvar := high, limit_MVAR_High_3;
    mvar_goes_high_4 true = 1 -> mvar := high, limit_MVAR_High_2;
    mvar_goes_high_5 true = 1 -> mvar := high, limit_MVAR_High_1;
  triggeredby mvar_high;
  transition mvar_goes_low
    mvar_goes_low_0 true = 1 -> mvar := low, limit_MVAR_Low;
    mvar_goes_low_1 true = 1 -> mvar := low, limit_MVAR_Low_5;
    mvar_goes_low_2 true = 1 -> mvar := low, limit_MVAR_Low_4;
    mvar_goes_low_3 true = 1 -> mvar := low, limit_MVAR_Low_3;
    mvar_goes_low_4 true = 1 -> mvar := low, limit_MVAR_Low_2;
    mvar_goes_low_5 true = 1 -> mvar := low, limit_MVAR_Low_1;
  triggeredby mvar_low;
  transition mvar_goes_to_zero_unexplained
    mvar_goes_to_zero_unexplained_0 true = 1 -> mvar := zero, entered_zero_zone_MVAR, count_as_fault;
  transition mvar_goes_normal_unexplained
    mvar_goes_normal_unexplained_0 true = 1 -> mvar := normal, limit_MVAR_Normal, count_as_fault;
  transition mvar_goes_high_unexplained
    mvar_goes_high_unexplained_0 true = 1 -> mvar := high, limit_MVAR_High, count_as_fault;
    mvar_goes_high_unexplained_1 true = 1 -> mvar := high, limit_MVAR_High_5, count_as_fault;
    mvar_goes_high_unexplained_2 true = 1 -> mvar := high, limit_MVAR_High_4, count_as_fault;
    mvar_goes_high_unexplained_3 true = 1 -> mvar := high, limit_MVAR_High_3, count_as_fault;
    mvar_goes_high_unexplained_4 true = 1 -> mvar := high, limit_MVAR_High_2, count_as_fault;
    mvar_goes_high_unexplained_5 true = 1 -> mvar := high, limit_MVAR_High_1, count_as_fault;
  transition mvar_goes_low_unexplained
    mvar_goes_low_unexplained_0 true = 1 -> mvar := low, limit_MVAR_Low, count_as_fault;
    mvar_goes_low_unexplained_1 true = 1 -> mvar := low, limit_MVAR_Low_5, count_as_fault;
    mvar_goes_low_unexplained_2 true = 1 -> mvar := low, limit_MVAR_Low_4, count_as_fault;
    mvar_goes_low_unexplained_3 true = 1 -> mvar := low, limit_MVAR_Low_3, count_as_fault;
    mvar_goes_low_unexplained_4 true = 1 -> mvar := low, limit_MVAR_Low_2, count_as_fault;
    mvar_goes_low_unexplained_5 true = 1 -> mvar := low, limit_MVAR_Low_1, count_as_fault;
  transition mw_goes_normal_when_reenergised
    mw_goes_normal_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> mw := normal, limit_MW_Normal;
  transition mw_goes_high_when_reenergised
    mw_goes_high_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High;
    mw_goes_high_when_reenergised_1 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_5;
    mw_goes_high_when_reenergised_2 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_4;
    mw_goes_high_when_reenergised_3 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_3;
    mw_goes_high_when_reenergised_4 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_2;
    mw_goes_high_when_reenergised_5 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_1;
  transition mw_goes_low_when_reenergised
    mw_goes_low_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low;
    mw_goes_low_when_reenergised_1 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_5;
    mw_goes_low_when_reenergised_2 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_4;
    mw_goes_low_when_reenergised_3 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_3;
    mw_goes_low_when_reenergised_4 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_2;
    mw_goes_low_when_reenergised_5 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_1;
  transition mw_goes_to_zero_when_isolated
    mw_goes_to_zero_when_isolated_0 (isolated = true AND iso_state_changed = true) -> mw := zero, entered_zero_zone_MW, check_generators_off;
  transition mw_goes_low_when_isolated
    mw_goes_low_when_isolated_0 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low, check_generators_off;
    mw_goes_low_when_isolated_1 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_5, check_generators_off;
    mw_goes_low_when_isolated_2 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_4, check_generators_off;
    mw_goes_low_when_isolated_3 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_3, check_generators_off;
    mw_goes_low_when_isolated_4 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_2, check_generators_off;
    mw_goes_low_when_isolated_5 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_1, check_generators_off;
  transition mw_goes_to_zero
    mw_goes_to_zero_0 true = 1 -> mw := zero, entered_zero_zone_MW;
  triggeredby mw_zero;
  transition mw_goes_normal
    mw_goes_normal_0 true = 1 -> mw := normal, limit_MW_Normal;
  triggeredby mw_normal;
  transition mw_goes_high
    mw_goes_high_0 true = 1 -> mw := high, limit_MW_High;
    mw_goes_high_1 true = 1 -> mw := high, limit_MW_High_5;
    mw_goes_high_2 true = 1 -> mw := high, limit_MW_High_4;
    mw_goes_high_3 true = 1 -> mw := high, limit_MW_High_3;
    mw_goes_high_4 true = 1 -> mw := high, limit_MW_High_2;
    mw_goes_high_5 true = 1 -> mw := high, limit_MW_High_1;
  triggeredby mw_high;
  transition mw_goes_low
    mw_goes_low_0 true = 1 -> mw := low, limit_MW_Low;
    mw_goes_low_1 true = 1 -> mw := low, limit_MW_Low_5;
    mw_goes_low_2 true = 1 -> mw := low, limit_MW_Low_4;
    mw_goes_low_3 true = 1 -> mw := low, limit_MW_Low_3;
    mw_goes_low_4 true = 1 -> mw := low, limit_MW_Low_2;
    mw_goes_low_5 true = 1 -> mw := low, limit_MW_Low_1;
  triggeredby mw_low;
  transition mw_goes_to_zero_unexplained
    mw_goes_to_zero_unexplained_0 true = 1 -> mw := zero, entered_zero_zone_MW, count_as_fault;
  transition mw_goes_normal_unexplained
    mw_goes_normal_unexplained_0 true = 1 -> mw := normal, limit_MW_Normal, count_as_fault;
  transition mw_goes_high_unexplained
    mw_goes_high_unexplained_0 true = 1 -> mw := high, limit_MW_High, count_as_fault;
    mw_goes_high_unexplained_1 true = 1 -> mw := high, limit_MW_High_5, count_as_fault;
    mw_goes_high_unexplained_2 true = 1 -> mw := high, limit_MW_High_4, count_as_fault;
    mw_goes_high_unexplained_3 true = 1 -> mw := high, limit_MW_High_3, count_as_fault;
    mw_goes_high_unexplained_4 true = 1 -> mw := high, limit_MW_High_2, count_as_fault;
    mw_goes_high_unexplained_5 true = 1 -> mw := high, limit_MW_High_1, count_as_fault;
  transition mw_goes_low_unexplained
    mw_goes_low_unexplained_0 true = 1 -> mw := low, limit_MW_Low, count_as_fault;
    mw_goes_low_unexplained_1 true = 1 -> mw := low, limit_MW_Low_5, count_as_fault;
    mw_goes_low_unexplained_2 true = 1 -> mw := low, limit_MW_Low_4, count_as_fault;
    mw_goes_low_unexplained_3 true = 1 -> mw := low, limit_MW_Low_3, count_as_fault;
    mw_goes_low_unexplained_4 true = 1 -> mw := low, limit_MW_Low_2, count_as_fault;
    mw_goes_low_unexplained_5 true = 1 -> mw := low, limit_MW_Low_1, count_as_fault;
  transition voltage_goes_normal_when_caps_in
    voltage_goes_normal_when_caps_in_0 (voltage = low AND isolated = false) -> voltage := normal, limit_KV_Normal, check_switched_in;
  transition voltage_goes_normal_when_caps_out
    voltage_goes_normal_when_caps_out_0 (voltage = high AND isolated = false) -> voltage := normal, limit_KV_Normal, check_switched_out;
  transition voltage_goes_normal_when_reenergised
    voltage_goes_normal_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> voltage := normal, limit_KV_Normal;
  transition voltage_goes_high_when_reenergised
    voltage_goes_high_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High;
    voltage_goes_high_when_reenergised_1 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_5;
    voltage_goes_high_when_reenergised_2 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_4;
    voltage_goes_high_when_reenergised_3 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_3;
    voltage_goes_high_when_reenergised_4 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_2;
    voltage_goes_high_when_reenergised_5 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_1;
  transition voltage_goes_Low_when_reenergised
    voltage_goes_Low_when_reenergised_0 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low;
    voltage_goes_Low_when_reenergised_1 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_5;
    voltage_goes_Low_when_reenergised_2 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_4;
    voltage_goes_Low_when_reenergised_3 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_3;
    voltage_goes_Low_when_reenergised_4 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_2;
    voltage_goes_Low_when_reenergised_5 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_1;
  transition voltage_goes_to_zero_when_isolated
    voltage_goes_to_zero_when_isolated_0 (isolated = true AND iso_state_changed = true) -> voltage := zero, entered_zero_zone_KV, check_generators_off;
  transition voltage_goes_low_when_isolated
    voltage_goes_low_when_isolated_0 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low, check_generators_off;
    voltage_goes_low_when_isolated_1 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_5, check_generators_off;
    voltage_goes_low_when_isolated_2 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_4, check_generators_off;
    voltage_goes_low_when_isolated_3 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_3, check_generators_off;
    voltage_goes_low_when_isolated_4 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_2, check_generators_off;
    voltage_goes_low_when_isolated_5 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_1, check_generators_off;
  transition voltage_goes_to_zero
    voltage_goes_to_zero_0 true = 1 -> voltage := zero, entered_zero_zone_KV;
  triggeredby voltage_zero;
  transition voltage_goes_normal
    voltage_goes_normal_0 true = 1 -> voltage := normal, limit_KV_Normal;
  triggeredby voltage_normal;
  transition voltage_goes_high
    voltage_goes_high_0 true = 1 -> voltage := high, limit_KV_High;
    voltage_goes_high_1 true = 1 -> voltage := high, limit_KV_High_5;
    voltage_goes_high_2 true = 1 -> voltage := high, limit_KV_High_4;
    voltage_goes_high_3 true = 1 -> voltage := high, limit_KV_High_3;
    voltage_goes_high_4 true = 1 -> voltage := high, limit_KV_High_2;
    voltage_goes_high_5 true = 1 -> voltage := high, limit_KV_High_1;
  triggeredby voltage_high;
  transition voltage_goes_low
    voltage_goes_low_0 true = 1 -> voltage := low, limit_KV_Low;
    voltage_goes_low_1 true = 1 -> voltage := low, limit_KV_Low_5;
    voltage_goes_low_2 true = 1 -> voltage := low, limit_KV_Low_4;
    voltage_goes_low_3 true = 1 -> voltage := low, limit_KV_Low_3;
    voltage_goes_low_4 true = 1 -> voltage := low, limit_KV_Low_2;
    voltage_goes_low_5 true = 1 -> voltage := low, limit_KV_Low_1;
  triggeredby voltage_low;
  transition voltage_goes_to_zero_unexplained
    voltage_goes_to_zero_unexplained_0 true = 1 -> voltage := zero, entered_zero_zone_KV, count_as_fault;
  transition voltage_goes_normal_unexplained
    voltage_goes_normal_unexplained_0 true = 1 -> voltage := normal, limit_KV_Normal, count_as_fault;
  transition voltage_goes_high_unexplained
    voltage_goes_high_unexplained_0 true = 1 -> voltage := high, limit_KV_High, count_as_fault;
    voltage_goes_high_unexplained_1 true = 1 -> voltage := high, limit_KV_High_5, count_as_fault;
    voltage_goes_high_unexplained_2 true = 1 -> voltage := high, limit_KV_High_4, count_as_fault;
    voltage_goes_high_unexplained_3 true = 1 -> voltage := high, limit_KV_High_3, count_as_fault;
    voltage_goes_high_unexplained_4 true = 1 -> voltage := high, limit_KV_High_2, count_as_fault;
    voltage_goes_high_unexplained_5 true = 1 -> voltage := high, limit_KV_High_1, count_as_fault;
  transition voltage_goes_low_unexplained
    voltage_goes_low_unexplained_0 true = 1 -> voltage := low, limit_KV_Low, count_as_fault;
    voltage_goes_low_unexplained_1 true = 1 -> voltage := low, limit_KV_Low_5, count_as_fault;
    voltage_goes_low_unexplained_2 true = 1 -> voltage := low, limit_KV_Low_4, count_as_fault;
    voltage_goes_low_unexplained_3 true = 1 -> voltage := low, limit_KV_Low_3, count_as_fault;
    voltage_goes_low_unexplained_4 true = 1 -> voltage := low, limit_KV_Low_2, count_as_fault;
    voltage_goes_low_unexplained_5 true = 1 -> voltage := low, limit_KV_Low_1, count_as_fault;
  transition iso_state_changed_timeout
    iso_state_changed_timeout_0 true = 1 -> iso_state_changed := false;
  triggeredby [0.0..15.0] iso_state_changed = true;
  transition become_not_isolated
    become_not_isolated_0 true = 1 -> isolated := false, iso_state_changed := true;
  triggeredby set_isolated_false;
  transition become_isolated
    become_isolated_0 true = 1 -> isolated := true, iso_state_changed := true;
  triggeredby set_isolated_true;
}
component Disconnector_X85_X19 = {
  var commanded_closed : [0..1];
  var commanded_open : [0..1];
  var state : {open,closed};
  event state_change_close;
  event state_change_open;
  event count_as_fault;
  event close;
  event open;
  event command_sw_state_closed;
  event command_sw_state_open;
  event sw_command_fail;
  event sw_state_not_responding;
  event sw_state_abnormal;
  event sw_state_closed;
  event sw_state_open;
  transition commanded_closed_timeout
    commanded_closed_timeout_0 true = 1 -> commanded_closed := false;
  triggeredby [0.0..45.0] commanded_closed = true;
  transition commanded_open_timeout
    commanded_open_timeout_0 true = 1 -> commanded_open := false;
  triggeredby [0.0..45.0] commanded_open = true;
  transition not_responding
    not_responding_0 true = 1 -> sw_state_not_responding, count_as_fault;
  transition command_close_fail
    command_close_fail_0 commanded_closed = true -> sw_command_fail;
  transition close_on_command
    close_on_command_0 (state = open AND commanded_closed = true) -> state := closed, sw_state_closed, state_change_close;
  transition command_close
    command_close_0 true = 1 -> commanded_closed := true, command_sw_state_closed;
  transition command_open_fail
    command_open_fail_0 commanded_open = true -> sw_command_fail;
  transition open_on_command
    open_on_command_0 (state = closed AND commanded_open = true) -> state := open, sw_state_open, state_change_open;
  transition command_open
    command_open_0 true = 1 -> commanded_open := true, command_sw_state_open;
  transition close_unexplained
    close_unexplained_0 state = open -> state := closed, sw_state_closed, state_change_close, count_as_fault;
  transition close1
    close1_0 state = open -> state := closed, sw_state_closed, state_change_close;
  triggeredby close;
  transition open_unexplained
    open_unexplained_0 state = closed -> state := open, sw_state_open, state_change_open, count_as_fault;
  transition open1
    open1_0 state = closed -> state := open, sw_state_open, state_change_open;
  triggeredby open;
}
component Disconnector_X86_X87 = {
  var commanded_closed : [0..1];
  var commanded_open : [0..1];
  var state : {open,closed};
  event state_change_close;
  event state_change_open;
  event count_as_fault;
  event close;
  event open;
  event command_sw_state_closed;
  event command_sw_state_open;
  event sw_command_fail;
  event sw_state_not_responding;
  event sw_state_abnormal;
  event sw_state_closed;
  event sw_state_open;
  transition commanded_closed_timeout
    commanded_closed_timeout_0 true = 1 -> commanded_closed := false;
  triggeredby [0.0..45.0] commanded_closed = true;
  transition commanded_open_timeout
    commanded_open_timeout_0 true = 1 -> commanded_open := false;
  triggeredby [0.0..45.0] commanded_open = true;
  transition not_responding
    not_responding_0 true = 1 -> sw_state_not_responding, count_as_fault;
  transition command_close_fail
    command_close_fail_0 commanded_closed = true -> sw_command_fail;
  transition close_on_command
    close_on_command_0 (state = open AND commanded_closed = true) -> state := closed, sw_state_closed, state_change_close;
  transition command_close
    command_close_0 true = 1 -> commanded_closed := true, command_sw_state_closed;
  transition command_open_fail
    command_open_fail_0 commanded_open = true -> sw_command_fail;
  transition open_on_command
    open_on_command_0 (state = closed AND commanded_open = true) -> state := open, sw_state_open, state_change_open;
  transition command_open
    command_open_0 true = 1 -> commanded_open := true, command_sw_state_open;
  transition close_unexplained
    close_unexplained_0 state = open -> state := closed, sw_state_closed, state_change_close, count_as_fault;
  transition close1
    close1_0 state = open -> state := closed, sw_state_closed, state_change_close;
  triggeredby close;
  transition open_unexplained
    open_unexplained_0 state = closed -> state := open, sw_state_open, state_change_open, count_as_fault;
  transition open1
    open1_0 state = closed -> state := open, sw_state_open, state_change_open;
  triggeredby open;
}
component Disconnector_X86_X88 = {
  var commanded_closed : [0..1];
  var commanded_open : [0..1];
  var state : {open,closed};
  event state_change_close;
  event state_change_open;
  event count_as_fault;
  event close;
  event open;
  event command_sw_state_closed;
  event command_sw_state_open;
  event sw_command_fail;
  event sw_state_not_responding;
  event sw_state_abnormal;
  event sw_state_closed;
  event sw_state_open;
  transition commanded_closed_timeout
    commanded_closed_timeout_0 true = 1 -> commanded_closed := false;
  triggeredby [0.0..45.0] commanded_closed = true;
  transition commanded_open_timeout
    commanded_open_timeout_0 true = 1 -> commanded_open := false;
  triggeredby [0.0..45.0] commanded_open = true;
  transition not_responding
    not_responding_0 true = 1 -> sw_state_not_responding, count_as_fault;
  transition command_close_fail
    command_close_fail_0 commanded_closed = true -> sw_command_fail;
  transition close_on_command
    close_on_command_0 (state = open AND commanded_closed = true) -> state := closed, sw_state_closed, state_change_close;
  transition command_close
    command_close_0 true = 1 -> commanded_closed := true, command_sw_state_closed;
  transition command_open_fail
    command_open_fail_0 commanded_open = true -> sw_command_fail;
  transition open_on_command
    open_on_command_0 (state = closed AND commanded_open = true) -> state := open, sw_state_open, state_change_open;
  transition command_open
    command_open_0 true = 1 -> commanded_open := true, command_sw_state_open;
  transition close_unexplained
    close_unexplained_0 state = open -> state := closed, sw_state_closed, state_change_close, count_as_fault;
  transition close1
    close1_0 state = open -> state := closed, sw_state_closed, state_change_close;
  triggeredby close;
  transition open_unexplained
    open_unexplained_0 state = closed -> state := open, sw_state_open, state_change_open, count_as_fault;
  transition open1
    open1_0 state = closed -> state := open, sw_state_open, state_change_open;
  triggeredby open;
}
component Disconnector_X89_X90 = {
  var commanded_closed : [0..1];
  var commanded_open : [0..1];
  var state : {open,closed};
  event state_change_close;
  event state_change_open;
  event count_as_fault;
  event close;
  event open;
  event command_sw_state_closed;
  event command_sw_state_open;
  event sw_command_fail;
  event sw_state_not_responding;
  event sw_state_abnormal;
  event sw_state_closed;
  event sw_state_open;
  transition commanded_closed_timeout
    commanded_closed_timeout_0 true = 1 -> commanded_closed := false;
  triggeredby [0.0..45.0] commanded_closed = true;
  transition commanded_open_timeout
    commanded_open_timeout_0 true = 1 -> commanded_open := false;
  triggeredby [0.0..45.0] commanded_open = true;
  transition not_responding
    not_responding_0 true = 1 -> sw_state_not_responding, count_as_fault;
  transition command_close_fail
    command_close_fail_0 commanded_closed = true -> sw_command_fail;
  transition close_on_command
    close_on_command_0 (state = open AND commanded_closed = true) -> state := closed, sw_state_closed, state_change_close;
  transition command_close
    command_close_0 true = 1 -> commanded_closed := true, command_sw_state_closed;
  transition command_open_fail
    command_open_fail_0 commanded_open = true -> sw_command_fail;
  transition open_on_command
    open_on_command_0 (state = closed AND commanded_open = true) -> state := open, sw_state_open, state_change_open;
  transition command_open
    command_open_0 true = 1 -> commanded_open := true, command_sw_state_open;
  transition close_unexplained
    close_unexplained_0 state = open -> state := closed, sw_state_closed, state_change_close, count_as_fault;
  transition close1
    close1_0 state = open -> state := closed, sw_state_closed, state_change_close;
  triggeredby close;
  transition open_unexplained
    open_unexplained_0 state = closed -> state := open, sw_state_open, state_change_open, count_as_fault;
  transition open1
    open1_0 state = closed -> state := open, sw_state_open, state_change_open;
  triggeredby open;
}
component Generator_X91 = {
  var runback : [0..1];
  var status_changing : [0..1];
  var status : {on,off};
  event isolator_close;
  event isolator_open;
  event count_as_fault;
  event check_generator_off;
  event IMPOSSIBLE;
  event unit_status_OFF;
  event unit_status_ON;
  event runback_reset;
  event runback_alarm;
  transition check_generator_off_transition
    check_generator_off_transition_0 NOT status = off -> IMPOSSIBLE;
    check_generator_off_transition_1 status = off -> status := off;
  triggeredby check_generator_off;
  transition runback_reset_when_off
    runback_reset_when_off_0 status = off -> runback := false, runback_reset;
  transition runback_reset_unexplained
    runback_reset_unexplained_0 true = 1 -> runback := false, runback_reset, count_as_fault;
  transition runback_alarm_unexplained
    runback_alarm_unexplained_0 true = 1 -> runback := true, runback_alarm, count_as_fault;
  transition startup_complete
    startup_complete_0 (status = off AND status_changing = true) -> status := on, status_changing := false;
  transition startup_turn_on
    startup_turn_on_0 (status = off AND status_changing = true) -> unit_status_ON;
  transition startup_breaker_close
    startup_breaker_close_0 (status = off AND status_changing = true) -> isolator_close;
  transition begin_startup
    begin_startup_0 (status = off AND status_changing = false) -> status_changing := true, count_as_fault;
  transition shutdown_complete
    shutdown_complete_0 (status = on AND status_changing = true) -> status := off, status_changing := false;
  transition shutdown_turn_off
    shutdown_turn_off_0 (status = on AND status_changing = true) -> unit_status_OFF;
  transition shutdown_breaker_open
    shutdown_breaker_open_0 (status = on AND status_changing = true) -> isolator_open;
  transition begin_shutdown
    begin_shutdown_0 (status = on AND status_changing = false) -> status_changing := true, count_as_fault;
}
component Generator_X92 = {
  var runback : [0..1];
  var status_changing : [0..1];
  var status : {on,off};
  event isolator_close;
  event isolator_open;
  event count_as_fault;
  event check_generator_off;
  event IMPOSSIBLE;
  event unit_status_OFF;
  event unit_status_ON;
  event runback_reset;
  event runback_alarm;
  transition check_generator_off_transition
    check_generator_off_transition_0 NOT status = off -> IMPOSSIBLE;
    check_generator_off_transition_1 status = off -> status := off;
  triggeredby check_generator_off;
  transition runback_reset_when_off
    runback_reset_when_off_0 status = off -> runback := false, runback_reset;
  transition runback_reset_unexplained
    runback_reset_unexplained_0 true = 1 -> runback := false, runback_reset, count_as_fault;
  transition runback_alarm_unexplained
    runback_alarm_unexplained_0 true = 1 -> runback := true, runback_alarm, count_as_fault;
  transition startup_complete
    startup_complete_0 (status = off AND status_changing = true) -> status := on, status_changing := false;
  transition startup_turn_on
    startup_turn_on_0 (status = off AND status_changing = true) -> unit_status_ON;
  transition startup_breaker_close
    startup_breaker_close_0 (status = off AND status_changing = true) -> isolator_close;
  transition begin_startup
    begin_startup_0 (status = off AND status_changing = false) -> status_changing := true, count_as_fault;
  transition shutdown_complete
    shutdown_complete_0 (status = on AND status_changing = true) -> status := off, status_changing := false;
  transition shutdown_turn_off
    shutdown_turn_off_0 (status = on AND status_changing = true) -> unit_status_OFF;
  transition shutdown_breaker_open
    shutdown_breaker_open_0 (status = on AND status_changing = true) -> isolator_open;
  transition begin_shutdown
    begin_shutdown_0 (status = on AND status_changing = false) -> status_changing := true, count_as_fault;
}
component Generator_X93 = {
  var runback : [0..1];
  var status_changing : [0..1];
  var status : {on,off};
  event isolator_close;
  event isolator_open;
  event count_as_fault;
  event check_generator_off;
  event IMPOSSIBLE;
  event unit_status_OFF;
  event unit_status_ON;
  event runback_reset;
  event runback_alarm;
  transition check_generator_off_transition
    check_generator_off_transition_0 NOT status = off -> IMPOSSIBLE;
    check_generator_off_transition_1 status = off -> status := off;
  triggeredby check_generator_off;
  transition runback_reset_when_off
    runback_reset_when_off_0 status = off -> runback := false, runback_reset;
  transition runback_reset_unexplained
    runback_reset_unexplained_0 true = 1 -> runback := false, runback_reset, count_as_fault;
  transition runback_alarm_unexplained
    runback_alarm_unexplained_0 true = 1 -> runback := true, runback_alarm, count_as_fault;
  transition startup_complete
    startup_complete_0 (status = off AND status_changing = true) -> status := on, status_changing := false;
  transition startup_turn_on
    startup_turn_on_0 (status = off AND status_changing = true) -> unit_status_ON;
  transition startup_breaker_close
    startup_breaker_close_0 (status = off AND status_changing = true) -> isolator_close;
  transition begin_startup
    begin_startup_0 (status = off AND status_changing = false) -> status_changing := true, count_as_fault;
  transition shutdown_complete
    shutdown_complete_0 (status = on AND status_changing = true) -> status := off, status_changing := false;
  transition shutdown_turn_off
    shutdown_turn_off_0 (status = on AND status_changing = true) -> unit_status_OFF;
  transition shutdown_breaker_open
    shutdown_breaker_open_0 (status = on AND status_changing = true) -> isolator_open;
  transition begin_shutdown
    begin_shutdown_0 (status = on AND status_changing = false) -> status_changing := true, count_as_fault;
}
component Generator_X94 = {
  var runback : [0..1];
  var status_changing : [0..1];
  var status : {on,off};
  event isolator_close;
  event isolator_open;
  event count_as_fault;
  event check_generator_off;
  event IMPOSSIBLE;
  event unit_status_OFF;
  event unit_status_ON;
  event runback_reset;
  event runback_alarm;
  transition check_generator_off_transition
    check_generator_off_transition_0 NOT status = off -> IMPOSSIBLE;
    check_generator_off_transition_1 status = off -> status := off;
  triggeredby check_generator_off;
  transition runback_reset_when_off
    runback_reset_when_off_0 status = off -> runback := false, runback_reset;
  transition runback_reset_unexplained
    runback_reset_unexplained_0 true = 1 -> runback := false, runback_reset, count_as_fault;
  transition runback_alarm_unexplained
    runback_alarm_unexplained_0 true = 1 -> runback := true, runback_alarm, count_as_fault;
  transition startup_complete
    startup_complete_0 (status = off AND status_changing = true) -> status := on, status_changing := false;
  transition startup_turn_on
    startup_turn_on_0 (status = off AND status_changing = true) -> unit_status_ON;
  transition startup_breaker_close
    startup_breaker_close_0 (status = off AND status_changing = true) -> isolator_close;
  transition begin_startup
    begin_startup_0 (status = off AND status_changing = false) -> status_changing := true, count_as_fault;
  transition shutdown_complete
    shutdown_complete_0 (status = on AND status_changing = true) -> status := off, status_changing := false;
  transition shutdown_turn_off
    shutdown_turn_off_0 (status = on AND status_changing = true) -> unit_status_OFF;
  transition shutdown_breaker_open
    shutdown_breaker_open_0 (status = on AND status_changing = true) -> isolator_open;
  transition begin_shutdown
    begin_shutdown_0 (status = on AND status_changing = false) -> status_changing := true, count_as_fault;
}
component Generator_X95 = {
  var runback : [0..1];
  var status_changing : [0..1];
  var status : {on,off};
  event isolator_close;
  event isolator_open;
  event count_as_fault;
  event check_generator_off;
  event IMPOSSIBLE;
  event unit_status_OFF;
  event unit_status_ON;
  event runback_reset;
  event runback_alarm;
  transition check_generator_off_transition
    check_generator_off_transition_0 NOT status = off -> IMPOSSIBLE;
    check_generator_off_transition_1 status = off -> status := off;
  triggeredby check_generator_off;
  transition runback_reset_when_off
    runback_reset_when_off_0 status = off -> runback := false, runback_reset;
  transition runback_reset_unexplained
    runback_reset_unexplained_0 true = 1 -> runback := false, runback_reset, count_as_fault;
  transition runback_alarm_unexplained
    runback_alarm_unexplained_0 true = 1 -> runback := true, runback_alarm, count_as_fault;
  transition startup_complete
    startup_complete_0 (status = off AND status_changing = true) -> status := on, status_changing := false;
  transition startup_turn_on
    startup_turn_on_0 (status = off AND status_changing = true) -> unit_status_ON;
  transition startup_breaker_close
    startup_breaker_close_0 (status = off AND status_changing = true) -> isolator_close;
  transition begin_startup
    begin_startup_0 (status = off AND status_changing = false) -> status_changing := true, count_as_fault;
  transition shutdown_complete
    shutdown_complete_0 (status = on AND status_changing = true) -> status := off, status_changing := false;
  transition shutdown_turn_off
    shutdown_turn_off_0 (status = on AND status_changing = true) -> unit_status_OFF;
  transition shutdown_breaker_open
    shutdown_breaker_open_0 (status = on AND status_changing = true) -> isolator_open;
  transition begin_shutdown
    begin_shutdown_0 (status = on AND status_changing = false) -> status_changing := true, count_as_fault;
}
component Generator_X96 = {
  var runback : [0..1];
  var status_changing : [0..1];
  var status : {on,off};
  event isolator_close;
  event isolator_open;
  event count_as_fault;
  event check_generator_off;
  event IMPOSSIBLE;
  event unit_status_OFF;
  event unit_status_ON;
  event runback_reset;
  event runback_alarm;
  transition check_generator_off_transition
    check_generator_off_transition_0 NOT status = off -> IMPOSSIBLE;
    check_generator_off_transition_1 status = off -> status := off;
  triggeredby check_generator_off;
  transition runback_reset_when_off
    runback_reset_when_off_0 status = off -> runback := false, runback_reset;
  transition runback_reset_unexplained
    runback_reset_unexplained_0 true = 1 -> runback := false, runback_reset, count_as_fault;
  transition runback_alarm_unexplained
    runback_alarm_unexplained_0 true = 1 -> runback := true, runback_alarm, count_as_fault;
  transition startup_complete
    startup_complete_0 (status = off AND status_changing = true) -> status := on, status_changing := false;
  transition startup_turn_on
    startup_turn_on_0 (status = off AND status_changing = true) -> unit_status_ON;
  transition startup_breaker_close
    startup_breaker_close_0 (status = off AND status_changing = true) -> isolator_close;
  transition begin_startup
    begin_startup_0 (status = off AND status_changing = false) -> status_changing := true, count_as_fault;
  transition shutdown_complete
    shutdown_complete_0 (status = on AND status_changing = true) -> status := off, status_changing := false;
  transition shutdown_turn_off
    shutdown_turn_off_0 (status = on AND status_changing = true) -> unit_status_OFF;
  transition shutdown_breaker_open
    shutdown_breaker_open_0 (status = on AND status_changing = true) -> isolator_open;
  transition begin_shutdown
    begin_shutdown_0 (status = on AND status_changing = false) -> status_changing := true, count_as_fault;
}
component Generator_X97 = {
  var runback : [0..1];
  var status_changing : [0..1];
  var status : {on,off};
  event isolator_close;
  event isolator_open;
  event count_as_fault;
  event check_generator_off;
  event IMPOSSIBLE;
  event unit_status_OFF;
  event unit_status_ON;
  event runback_reset;
  event runback_alarm;
  transition check_generator_off_transition
    check_generator_off_transition_0 NOT status = off -> IMPOSSIBLE;
    check_generator_off_transition_1 status = off -> status := off;
  triggeredby check_generator_off;
  transition runback_reset_when_off
    runback_reset_when_off_0 status = off -> runback := false, runback_reset;
  transition runback_reset_unexplained
    runback_reset_unexplained_0 true = 1 -> runback := false, runback_reset, count_as_fault;
  transition runback_alarm_unexplained
    runback_alarm_unexplained_0 true = 1 -> runback := true, runback_alarm, count_as_fault;
  transition startup_complete
    startup_complete_0 (status = off AND status_changing = true) -> status := on, status_changing := false;
  transition startup_turn_on
    startup_turn_on_0 (status = off AND status_changing = true) -> unit_status_ON;
  transition startup_breaker_close
    startup_breaker_close_0 (status = off AND status_changing = true) -> isolator_close;
  transition begin_startup
    begin_startup_0 (status = off AND status_changing = false) -> status_changing := true, count_as_fault;
  transition shutdown_complete
    shutdown_complete_0 (status = on AND status_changing = true) -> status := off, status_changing := false;
  transition shutdown_turn_off
    shutdown_turn_off_0 (status = on AND status_changing = true) -> unit_status_OFF;
  transition shutdown_breaker_open
    shutdown_breaker_open_0 (status = on AND status_changing = true) -> isolator_open;
  transition begin_shutdown
    begin_shutdown_0 (status = on AND status_changing = false) -> status_changing := true, count_as_fault;
}
component Generator_X98 = {
  var runback : [0..1];
  var status_changing : [0..1];
  var status : {on,off};
  event isolator_close;
  event isolator_open;
  event count_as_fault;
  event check_generator_off;
  event IMPOSSIBLE;
  event unit_status_OFF;
  event unit_status_ON;
  event runback_reset;
  event runback_alarm;
  transition check_generator_off_transition
    check_generator_off_transition_0 NOT status = off -> IMPOSSIBLE;
    check_generator_off_transition_1 status = off -> status := off;
  triggeredby check_generator_off;
  transition runback_reset_when_off
    runback_reset_when_off_0 status = off -> runback := false, runback_reset;
  transition runback_reset_unexplained
    runback_reset_unexplained_0 true = 1 -> runback := false, runback_reset, count_as_fault;
  transition runback_alarm_unexplained
    runback_alarm_unexplained_0 true = 1 -> runback := true, runback_alarm, count_as_fault;
  transition startup_complete
    startup_complete_0 (status = off AND status_changing = true) -> status := on, status_changing := false;
  transition startup_turn_on
    startup_turn_on_0 (status = off AND status_changing = true) -> unit_status_ON;
  transition startup_breaker_close
    startup_breaker_close_0 (status = off AND status_changing = true) -> isolator_close;
  transition begin_startup
    begin_startup_0 (status = off AND status_changing = false) -> status_changing := true, count_as_fault;
  transition shutdown_complete
    shutdown_complete_0 (status = on AND status_changing = true) -> status := off, status_changing := false;
  transition shutdown_turn_off
    shutdown_turn_off_0 (status = on AND status_changing = true) -> unit_status_OFF;
  transition shutdown_breaker_open
    shutdown_breaker_open_0 (status = on AND status_changing = true) -> isolator_open;
  transition begin_shutdown
    begin_shutdown_0 (status = on AND status_changing = false) -> status_changing := true, count_as_fault;
}
component Generator_X99 = {
  var runback : [0..1];
  var status_changing : [0..1];
  var status : {on,off};
  event isolator_close;
  event isolator_open;
  event count_as_fault;
  event check_generator_off;
  event IMPOSSIBLE;
  event unit_status_OFF;
  event unit_status_ON;
  event runback_reset;
  event runback_alarm;
  transition check_generator_off_transition
    check_generator_off_transition_0 NOT status = off -> IMPOSSIBLE;
    check_generator_off_transition_1 status = off -> status := off;
  triggeredby check_generator_off;
  transition runback_reset_when_off
    runback_reset_when_off_0 status = off -> runback := false, runback_reset;
  transition runback_reset_unexplained
    runback_reset_unexplained_0 true = 1 -> runback := false, runback_reset, count_as_fault;
  transition runback_alarm_unexplained
    runback_alarm_unexplained_0 true = 1 -> runback := true, runback_alarm, count_as_fault;
  transition startup_complete
    startup_complete_0 (status = off AND status_changing = true) -> status := on, status_changing := false;
  transition startup_turn_on
    startup_turn_on_0 (status = off AND status_changing = true) -> unit_status_ON;
  transition startup_breaker_close
    startup_breaker_close_0 (status = off AND status_changing = true) -> isolator_close;
  transition begin_startup
    begin_startup_0 (status = off AND status_changing = false) -> status_changing := true, count_as_fault;
  transition shutdown_complete
    shutdown_complete_0 (status = on AND status_changing = true) -> status := off, status_changing := false;
  transition shutdown_turn_off
    shutdown_turn_off_0 (status = on AND status_changing = true) -> unit_status_OFF;
  transition shutdown_breaker_open
    shutdown_breaker_open_0 (status = on AND status_changing = true) -> isolator_open;
  transition begin_shutdown
    begin_shutdown_0 (status = on AND status_changing = false) -> status_changing := true, count_as_fault;
}
component Generator_X100 = {
  var runback : [0..1];
  var status_changing : [0..1];
  var status : {on,off};
  event isolator_close;
  event isolator_open;
  event count_as_fault;
  event check_generator_off;
  event IMPOSSIBLE;
  event unit_status_OFF;
  event unit_status_ON;
  event runback_reset;
  event runback_alarm;
  transition check_generator_off_transition
    check_generator_off_transition_0 NOT status = off -> IMPOSSIBLE;
    check_generator_off_transition_1 status = off -> status := off;
  triggeredby check_generator_off;
  transition runback_reset_when_off
    runback_reset_when_off_0 status = off -> runback := false, runback_reset;
  transition runback_reset_unexplained
    runback_reset_unexplained_0 true = 1 -> runback := false, runback_reset, count_as_fault;
  transition runback_alarm_unexplained
    runback_alarm_unexplained_0 true = 1 -> runback := true, runback_alarm, count_as_fault;
  transition startup_complete
    startup_complete_0 (status = off AND status_changing = true) -> status := on, status_changing := false;
  transition startup_turn_on
    startup_turn_on_0 (status = off AND status_changing = true) -> unit_status_ON;
  transition startup_breaker_close
    startup_breaker_close_0 (status = off AND status_changing = true) -> isolator_close;
  transition begin_startup
    begin_startup_0 (status = off AND status_changing = false) -> status_changing := true, count_as_fault;
  transition shutdown_complete
    shutdown_complete_0 (status = on AND status_changing = true) -> status := off, status_changing := false;
  transition shutdown_turn_off
    shutdown_turn_off_0 (status = on AND status_changing = true) -> unit_status_OFF;
  transition shutdown_breaker_open
    shutdown_breaker_open_0 (status = on AND status_changing = true) -> isolator_open;
  transition begin_shutdown
    begin_shutdown_0 (status = on AND status_changing = false) -> status_changing := true, count_as_fault;
}
component Line_X101_X102 = {
  connection bus2 : attached = Bus_X102;
  connection bus1 : attached = Bus_X101;
  var mvar : {zero,high,low,normal};
  var mw : {zero,high,low,normal};
  var voltage : {zero,high,low,normal};
  var iso_trip_in_progress : [0..1];
  var iso_state_may_have_changed : [0..1];
  var iso_state_changed : [0..1];
  var isolated : [0..1];
  event some_breaker_is_closed;
  event check_isolators_open;
  event check_switched_out;
  event check_switched_in;
  event trip4;
  event trip3;
  event trip2;
  event trip1;
  event bus2_mvar_zero;
  event bus2_mvar_normal;
  event bus2_mvar_high;
  event bus2_mvar_low;
  event bus2_mw_zero;
  event bus2_mw_normal;
  event bus2_mw_high;
  event bus2_mw_low;
  event bus2_voltage_zero;
  event bus2_voltage_normal;
  event bus2_voltage_high;
  event bus2_voltage_low;
  event bus1_mvar_zero;
  event bus1_mvar_normal;
  event bus1_mvar_high;
  event bus1_mvar_low;
  event bus1_mw_zero;
  event bus1_mw_normal;
  event bus1_mw_high;
  event bus1_mw_low;
  event bus1_voltage_zero;
  event bus1_voltage_normal;
  event bus1_voltage_high;
  event bus1_voltage_low;
  event count_as_fault;
  event isolator_closed;
  event isolator_opened;
  event no_way;
  event entered_zero_zone_MVAR;
  event limit_MVAR_High;
  event limit_MVAR_High_5;
  event limit_MVAR_High_4;
  event limit_MVAR_High_3;
  event limit_MVAR_High_2;
  event limit_MVAR_High_1;
  event limit_MVAR_Low;
  event limit_MVAR_Low_5;
  event limit_MVAR_Low_4;
  event limit_MVAR_Low_3;
  event limit_MVAR_Low_2;
  event limit_MVAR_Low_1;
  event limit_MVAR_Normal;
  event entered_zero_zone_MW;
  event limit_MW_High;
  event limit_MW_High_5;
  event limit_MW_High_4;
  event limit_MW_High_3;
  event limit_MW_High_2;
  event limit_MW_High_1;
  event limit_MW_Low;
  event limit_MW_Low_5;
  event limit_MW_Low_4;
  event limit_MW_Low_3;
  event limit_MW_Low_2;
  event limit_MW_Low_1;
  event limit_MW_Normal;
  event entered_zero_zone_KV;
  event limit_KV_High;
  event limit_KV_High_5;
  event limit_KV_High_4;
  event limit_KV_High_3;
  event limit_KV_High_2;
  event limit_KV_High_1;
  event limit_KV_Low;
  event limit_KV_Low_5;
  event limit_KV_Low_4;
  event limit_KV_Low_3;
  event limit_KV_Low_2;
  event limit_KV_Low_1;
  event limit_KV_Normal;
  transition mvar_goes_to_zero_unexplained
    mvar_goes_to_zero_unexplained_0 true = 1 -> mvar := zero, bus2_mvar_zero, count_as_fault;
    mvar_goes_to_zero_unexplained_1 true = 1 -> mvar := zero, bus1_mvar_zero, count_as_fault;
    mvar_goes_to_zero_unexplained_2 true = 1 -> mvar := zero, entered_zero_zone_MVAR, count_as_fault;
  transition mvar_goes_normal_unexplained
    mvar_goes_normal_unexplained_0 true = 1 -> mvar := normal, bus2_mvar_normal, count_as_fault;
    mvar_goes_normal_unexplained_1 true = 1 -> mvar := normal, bus1_mvar_normal, count_as_fault;
    mvar_goes_normal_unexplained_2 true = 1 -> mvar := normal, limit_MVAR_Normal, count_as_fault;
  transition mvar_goes_high_unexplained
    mvar_goes_high_unexplained_0 true = 1 -> mvar := high, bus2_mvar_high, count_as_fault;
    mvar_goes_high_unexplained_1 true = 1 -> mvar := high, bus1_mvar_high, count_as_fault;
    mvar_goes_high_unexplained_2 true = 1 -> mvar := high, limit_MVAR_High, count_as_fault;
    mvar_goes_high_unexplained_3 true = 1 -> mvar := high, limit_MVAR_High_5, count_as_fault;
    mvar_goes_high_unexplained_4 true = 1 -> mvar := high, limit_MVAR_High_4, count_as_fault;
    mvar_goes_high_unexplained_5 true = 1 -> mvar := high, limit_MVAR_High_3, count_as_fault;
    mvar_goes_high_unexplained_6 true = 1 -> mvar := high, limit_MVAR_High_2, count_as_fault;
    mvar_goes_high_unexplained_7 true = 1 -> mvar := high, limit_MVAR_High_1, count_as_fault;
  transition mvar_goes_low_unexplained
    mvar_goes_low_unexplained_0 true = 1 -> mvar := low, bus2_mvar_low, count_as_fault;
    mvar_goes_low_unexplained_1 true = 1 -> mvar := low, bus1_mvar_low, count_as_fault;
    mvar_goes_low_unexplained_2 true = 1 -> mvar := low, limit_MVAR_Low, count_as_fault;
    mvar_goes_low_unexplained_3 true = 1 -> mvar := low, limit_MVAR_Low_5, count_as_fault;
    mvar_goes_low_unexplained_4 true = 1 -> mvar := low, limit_MVAR_Low_4, count_as_fault;
    mvar_goes_low_unexplained_5 true = 1 -> mvar := low, limit_MVAR_Low_3, count_as_fault;
    mvar_goes_low_unexplained_6 true = 1 -> mvar := low, limit_MVAR_Low_2, count_as_fault;
    mvar_goes_low_unexplained_7 true = 1 -> mvar := low, limit_MVAR_Low_1, count_as_fault;
  transition mw_goes_normal_when_re_energised
    mw_goes_normal_when_re_energised_0 (isolated = false AND iso_state_changed = true) -> mw := high, bus2_mw_normal;
    mw_goes_normal_when_re_energised_1 (isolated = false AND iso_state_changed = true) -> mw := high, bus1_mw_normal;
    mw_goes_normal_when_re_energised_2 (isolated = false AND iso_state_changed = true) -> mw := normal, limit_MW_Normal;
  transition mw_goes_high_when_re_energised
    mw_goes_high_when_re_energised_0 (isolated = false AND iso_state_changed = true) -> mw := high, bus2_mw_high;
    mw_goes_high_when_re_energised_1 (isolated = false AND iso_state_changed = true) -> mw := high, bus1_mw_high;
    mw_goes_high_when_re_energised_2 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High;
    mw_goes_high_when_re_energised_3 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_5;
    mw_goes_high_when_re_energised_4 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_4;
    mw_goes_high_when_re_energised_5 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_3;
    mw_goes_high_when_re_energised_6 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_2;
    mw_goes_high_when_re_energised_7 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_1;
  transition mw_goes_low_when_re_energised
    mw_goes_low_when_re_energised_0 (isolated = false AND iso_state_changed = true) -> mw := low, bus2_mw_low;
    mw_goes_low_when_re_energised_1 (isolated = false AND iso_state_changed = true) -> mw := low, bus1_mw_low;
    mw_goes_low_when_re_energised_2 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low;
    mw_goes_low_when_re_energised_3 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_5;
    mw_goes_low_when_re_energised_4 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_4;
    mw_goes_low_when_re_energised_5 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_3;
    mw_goes_low_when_re_energised_6 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_2;
    mw_goes_low_when_re_energised_7 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_1;
  transition mw_goes_to_zero_when_isolated
    mw_goes_to_zero_when_isolated_0 (isolated = true AND iso_state_changed = true) -> mw := zero, bus2_mw_zero;
    mw_goes_to_zero_when_isolated_1 (isolated = true AND iso_state_changed = true) -> mw := zero, bus1_mw_zero;
    mw_goes_to_zero_when_isolated_2 (isolated = true AND iso_state_changed = true) -> mw := zero, entered_zero_zone_MW;
  transition mw_goes_low_when_isolated
    mw_goes_low_when_isolated_0 (isolated = true AND iso_state_changed = true) -> mw := low, bus2_mw_low;
    mw_goes_low_when_isolated_1 (isolated = true AND iso_state_changed = true) -> mw := low, bus1_mw_low;
    mw_goes_low_when_isolated_2 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low;
    mw_goes_low_when_isolated_3 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_5;
    mw_goes_low_when_isolated_4 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_4;
    mw_goes_low_when_isolated_5 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_3;
    mw_goes_low_when_isolated_6 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_2;
    mw_goes_low_when_isolated_7 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_1;
  transition mw_goes_to_zero_unexplained
    mw_goes_to_zero_unexplained_0 true = 1 -> mw := zero, bus2_mw_zero, count_as_fault;
    mw_goes_to_zero_unexplained_1 true = 1 -> mw := zero, bus1_mw_zero, count_as_fault;
    mw_goes_to_zero_unexplained_2 true = 1 -> mw := zero, entered_zero_zone_MW, count_as_fault;
  transition mw_goes_normal_unexplained
    mw_goes_normal_unexplained_0 true = 1 -> mw := normal, bus2_mw_normal, count_as_fault;
    mw_goes_normal_unexplained_1 true = 1 -> mw := normal, bus1_mw_normal, count_as_fault;
    mw_goes_normal_unexplained_2 true = 1 -> mw := normal, limit_MW_Normal, count_as_fault;
  transition mw_goes_high_unexplained
    mw_goes_high_unexplained_0 true = 1 -> mw := high, bus2_mw_high, count_as_fault;
    mw_goes_high_unexplained_1 true = 1 -> mw := high, bus1_mw_high, count_as_fault;
    mw_goes_high_unexplained_2 true = 1 -> mw := high, limit_MW_High, count_as_fault;
    mw_goes_high_unexplained_3 true = 1 -> mw := high, limit_MW_High_5, count_as_fault;
    mw_goes_high_unexplained_4 true = 1 -> mw := high, limit_MW_High_4, count_as_fault;
    mw_goes_high_unexplained_5 true = 1 -> mw := high, limit_MW_High_3, count_as_fault;
    mw_goes_high_unexplained_6 true = 1 -> mw := high, limit_MW_High_2, count_as_fault;
    mw_goes_high_unexplained_7 true = 1 -> mw := high, limit_MW_High_1, count_as_fault;
  transition mw_goes_low_unexplained
    mw_goes_low_unexplained_0 true = 1 -> mw := low, bus2_mw_low, count_as_fault;
    mw_goes_low_unexplained_1 true = 1 -> mw := low, bus1_mw_low, count_as_fault;
    mw_goes_low_unexplained_2 true = 1 -> mw := low, limit_MW_Low, count_as_fault;
    mw_goes_low_unexplained_3 true = 1 -> mw := low, limit_MW_Low_5, count_as_fault;
    mw_goes_low_unexplained_4 true = 1 -> mw := low, limit_MW_Low_4, count_as_fault;
    mw_goes_low_unexplained_5 true = 1 -> mw := low, limit_MW_Low_3, count_as_fault;
    mw_goes_low_unexplained_6 true = 1 -> mw := low, limit_MW_Low_2, count_as_fault;
    mw_goes_low_unexplained_7 true = 1 -> mw := low, limit_MW_Low_1, count_as_fault;
  transition voltage_goes_normal_when_caps_in
    voltage_goes_normal_when_caps_in_0 (isolated = false AND voltage = low) -> voltage := normal, bus2_voltage_normal, check_switched_in;
    voltage_goes_normal_when_caps_in_1 (isolated = false AND voltage = low) -> voltage := normal, bus1_voltage_normal, check_switched_in;
    voltage_goes_normal_when_caps_in_2 (isolated = false AND voltage = low) -> voltage := normal, limit_KV_Normal, check_switched_in;
  transition voltage_goes_normal_when_caps_out
    voltage_goes_normal_when_caps_out_0 (isolated = false AND voltage = high) -> voltage := normal, bus2_voltage_normal, check_switched_out;
    voltage_goes_normal_when_caps_out_1 (isolated = false AND voltage = high) -> voltage := normal, bus1_voltage_normal, check_switched_out;
    voltage_goes_normal_when_caps_out_2 (isolated = false AND voltage = high) -> voltage := normal, limit_KV_Normal, check_switched_out;
  transition voltage_goes_normal_when_re_energised
    voltage_goes_normal_when_re_energised_0 (isolated = false AND iso_state_changed = true) -> voltage := high, bus2_voltage_normal;
    voltage_goes_normal_when_re_energised_1 (isolated = false AND iso_state_changed = true) -> voltage := high, bus1_voltage_normal;
    voltage_goes_normal_when_re_energised_2 (isolated = false AND iso_state_changed = true) -> voltage := normal, limit_KV_Normal;
  transition voltage_goes_high_when_re_energised
    voltage_goes_high_when_re_energised_0 (isolated = false AND iso_state_changed = true) -> voltage := high, bus2_voltage_high;
    voltage_goes_high_when_re_energised_1 (isolated = false AND iso_state_changed = true) -> voltage := high, bus1_voltage_high;
    voltage_goes_high_when_re_energised_2 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High;
    voltage_goes_high_when_re_energised_3 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_5;
    voltage_goes_high_when_re_energised_4 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_4;
    voltage_goes_high_when_re_energised_5 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_3;
    voltage_goes_high_when_re_energised_6 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_2;
    voltage_goes_high_when_re_energised_7 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_1;
  transition voltage_goes_low_when_re_energised
    voltage_goes_low_when_re_energised_0 (isolated = false AND iso_state_changed = true) -> voltage := low, bus2_voltage_low;
    voltage_goes_low_when_re_energised_1 (isolated = false AND iso_state_changed = true) -> voltage := low, bus1_voltage_low;
    voltage_goes_low_when_re_energised_2 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low;
    voltage_goes_low_when_re_energised_3 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_5;
    voltage_goes_low_when_re_energised_4 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_4;
    voltage_goes_low_when_re_energised_5 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_3;
    voltage_goes_low_when_re_energised_6 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_2;
    voltage_goes_low_when_re_energised_7 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_1;
  transition voltage_goes_to_zero_when_isolated
    voltage_goes_to_zero_when_isolated_0 (isolated = true AND iso_state_changed = true) -> voltage := zero, bus2_voltage_zero;
    voltage_goes_to_zero_when_isolated_1 (isolated = true AND iso_state_changed = true) -> voltage := zero, bus1_voltage_zero;
    voltage_goes_to_zero_when_isolated_2 (isolated = true AND iso_state_changed = true) -> voltage := zero, entered_zero_zone_KV;
  transition voltage_goes_low_when_isolated
    voltage_goes_low_when_isolated_0 (isolated = true AND iso_state_changed = true) -> voltage := low, bus2_voltage_low;
    voltage_goes_low_when_isolated_1 (isolated = true AND iso_state_changed = true) -> voltage := low, bus1_voltage_low;
    voltage_goes_low_when_isolated_2 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low;
    voltage_goes_low_when_isolated_3 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_5;
    voltage_goes_low_when_isolated_4 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_4;
    voltage_goes_low_when_isolated_5 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_3;
    voltage_goes_low_when_isolated_6 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_2;
    voltage_goes_low_when_isolated_7 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_1;
  transition voltage_goes_to_zero_unexplained
    voltage_goes_to_zero_unexplained_0 true = 1 -> voltage := zero, bus2_voltage_zero, count_as_fault;
    voltage_goes_to_zero_unexplained_1 true = 1 -> voltage := zero, bus1_voltage_zero, count_as_fault;
    voltage_goes_to_zero_unexplained_2 true = 1 -> voltage := zero, entered_zero_zone_KV, count_as_fault;
  transition voltage_goes_normal_unexplained
    voltage_goes_normal_unexplained_0 true = 1 -> voltage := normal, bus2_voltage_normal, count_as_fault;
    voltage_goes_normal_unexplained_1 true = 1 -> voltage := normal, bus1_voltage_normal, count_as_fault;
    voltage_goes_normal_unexplained_2 true = 1 -> voltage := normal, limit_KV_Normal, count_as_fault;
  transition voltage_goes_high_unexplained
    voltage_goes_high_unexplained_0 true = 1 -> voltage := high, bus2_voltage_high, count_as_fault;
    voltage_goes_high_unexplained_1 true = 1 -> voltage := high, bus1_voltage_high, count_as_fault;
    voltage_goes_high_unexplained_2 true = 1 -> voltage := high, limit_KV_High, count_as_fault;
    voltage_goes_high_unexplained_3 true = 1 -> voltage := high, limit_KV_High_5, count_as_fault;
    voltage_goes_high_unexplained_4 true = 1 -> voltage := high, limit_KV_High_4, count_as_fault;
    voltage_goes_high_unexplained_5 true = 1 -> voltage := high, limit_KV_High_3, count_as_fault;
    voltage_goes_high_unexplained_6 true = 1 -> voltage := high, limit_KV_High_2, count_as_fault;
    voltage_goes_high_unexplained_7 true = 1 -> voltage := high, limit_KV_High_1, count_as_fault;
  transition voltage_goes_low_unexplained
    voltage_goes_low_unexplained_0 true = 1 -> voltage := low, bus2_voltage_low, count_as_fault;
    voltage_goes_low_unexplained_1 true = 1 -> voltage := low, bus1_voltage_low, count_as_fault;
    voltage_goes_low_unexplained_2 true = 1 -> voltage := low, limit_KV_Low, count_as_fault;
    voltage_goes_low_unexplained_3 true = 1 -> voltage := low, limit_KV_Low_5, count_as_fault;
    voltage_goes_low_unexplained_4 true = 1 -> voltage := low, limit_KV_Low_4, count_as_fault;
    voltage_goes_low_unexplained_5 true = 1 -> voltage := low, limit_KV_Low_3, count_as_fault;
    voltage_goes_low_unexplained_6 true = 1 -> voltage := low, limit_KV_Low_2, count_as_fault;
    voltage_goes_low_unexplained_7 true = 1 -> voltage := low, limit_KV_Low_1, count_as_fault;
  transition iso_state_changed_timeout
    iso_state_changed_timeout_0 true = 1 -> iso_state_changed := false;
  triggeredby [0.0..15.0] iso_state_changed = true;
  transition iso_state_may_have_changed_timeout
    iso_state_may_have_changed_timeout_0 true = 1 -> iso_state_may_have_changed := false;
  triggeredby [0.0..15.0] iso_state_may_have_changed = true;
  transition isolator_state_change
    isolator_state_change_0 true = 1 -> iso_state_may_have_changed := true;
  triggeredby isolator_opened, isolator_closed;
  transition re_energise_isolated
    re_energise_isolated_0 (isolated = true AND iso_state_may_have_changed = true) -> isolated := false, iso_state_changed := true;
  triggeredby some_breaker_is_closed;
  transition init_state_isolated
    init_state_isolated_0 true = 1 -> isolated := true, check_isolators_open;
  transition set_state_isolated
    set_state_isolated_0 iso_state_may_have_changed = true -> isolated := true, iso_state_changed := true, check_isolators_open;
  transition finish_iso_trip
    finish_iso_trip_0 true = 1 -> no_way;
    finish_iso_trip_1 true = 1 -> iso_trip_in_progress := false, isolated := true, iso_state_changed := true, check_isolators_open;
  triggeredby [0.0..1.0] iso_trip_in_progress = true;
  transition iso_trip4
    iso_trip4_0 true = 1 -> trip4;
  triggeredby [0.0..1.0] iso_trip_in_progress = true;
  transition iso_trip3
    iso_trip3_0 true = 1 -> trip3;
  triggeredby [0.0..1.0] iso_trip_in_progress = true;
  transition iso_trip2
    iso_trip2_0 true = 1 -> trip2;
  triggeredby [0.0..1.0] iso_trip_in_progress = true;
  transition iso_trip1
    iso_trip1_0 true = 1 -> trip1;
  triggeredby [0.0..1.0] iso_trip_in_progress = true;
  transition begin_iso_trip
    begin_iso_trip_0 iso_trip_in_progress = false -> iso_trip_in_progress := true, count_as_fault;
  triggeredby some_breaker_is_closed;
}
component Line_X115_X116 = {
  connection isolatorsXYZ0 : isolator = Breaker_X5_X6;
  connection isolatorsXYZ1 : isolator = Breaker_X7_X8;
  connection isolatorsXYZ2 : isolator = Breaker_X45_X46;
  connection isolatorsXYZ3 : isolator = Breaker_X83_X84;
  connection bus2 : attached = Bus_X116;
  connection bus1 : attached = Bus_X115;
  var mvar : {zero,high,low,normal};
  var mw : {zero,high,low,normal};
  var voltage : {zero,high,low,normal};
  var iso_trip_in_progress : [0..1];
  var iso_state_may_have_changed : [0..1];
  var iso_state_changed : [0..1];
  var isolated : [0..1];
  event some_breaker_is_closed;
  event check_isolators_open;
  event check_switched_out;
  event check_switched_in;
  event trip4;
  event trip3;
  event trip2;
  event trip1;
  event bus2_mvar_zero;
  event bus2_mvar_normal;
  event bus2_mvar_high;
  event bus2_mvar_low;
  event bus2_mw_zero;
  event bus2_mw_normal;
  event bus2_mw_high;
  event bus2_mw_low;
  event bus2_voltage_zero;
  event bus2_voltage_normal;
  event bus2_voltage_high;
  event bus2_voltage_low;
  event bus1_mvar_zero;
  event bus1_mvar_normal;
  event bus1_mvar_high;
  event bus1_mvar_low;
  event bus1_mw_zero;
  event bus1_mw_normal;
  event bus1_mw_high;
  event bus1_mw_low;
  event bus1_voltage_zero;
  event bus1_voltage_normal;
  event bus1_voltage_high;
  event bus1_voltage_low;
  event count_as_fault;
  event isolator_closed;
  event isolator_opened;
  event no_way;
  event entered_zero_zone_MVAR;
  event limit_MVAR_High;
  event limit_MVAR_High_5;
  event limit_MVAR_High_4;
  event limit_MVAR_High_3;
  event limit_MVAR_High_2;
  event limit_MVAR_High_1;
  event limit_MVAR_Low;
  event limit_MVAR_Low_5;
  event limit_MVAR_Low_4;
  event limit_MVAR_Low_3;
  event limit_MVAR_Low_2;
  event limit_MVAR_Low_1;
  event limit_MVAR_Normal;
  event entered_zero_zone_MW;
  event limit_MW_High;
  event limit_MW_High_5;
  event limit_MW_High_4;
  event limit_MW_High_3;
  event limit_MW_High_2;
  event limit_MW_High_1;
  event limit_MW_Low;
  event limit_MW_Low_5;
  event limit_MW_Low_4;
  event limit_MW_Low_3;
  event limit_MW_Low_2;
  event limit_MW_Low_1;
  event limit_MW_Normal;
  event entered_zero_zone_KV;
  event limit_KV_High;
  event limit_KV_High_5;
  event limit_KV_High_4;
  event limit_KV_High_3;
  event limit_KV_High_2;
  event limit_KV_High_1;
  event limit_KV_Low;
  event limit_KV_Low_5;
  event limit_KV_Low_4;
  event limit_KV_Low_3;
  event limit_KV_Low_2;
  event limit_KV_Low_1;
  event limit_KV_Normal;
  transition mvar_goes_to_zero_unexplained
    mvar_goes_to_zero_unexplained_0 true = 1 -> mvar := zero, bus2_mvar_zero, count_as_fault;
    mvar_goes_to_zero_unexplained_1 true = 1 -> mvar := zero, bus1_mvar_zero, count_as_fault;
    mvar_goes_to_zero_unexplained_2 true = 1 -> mvar := zero, entered_zero_zone_MVAR, count_as_fault;
  transition mvar_goes_normal_unexplained
    mvar_goes_normal_unexplained_0 true = 1 -> mvar := normal, bus2_mvar_normal, count_as_fault;
    mvar_goes_normal_unexplained_1 true = 1 -> mvar := normal, bus1_mvar_normal, count_as_fault;
    mvar_goes_normal_unexplained_2 true = 1 -> mvar := normal, limit_MVAR_Normal, count_as_fault;
  transition mvar_goes_high_unexplained
    mvar_goes_high_unexplained_0 true = 1 -> mvar := high, bus2_mvar_high, count_as_fault;
    mvar_goes_high_unexplained_1 true = 1 -> mvar := high, bus1_mvar_high, count_as_fault;
    mvar_goes_high_unexplained_2 true = 1 -> mvar := high, limit_MVAR_High, count_as_fault;
    mvar_goes_high_unexplained_3 true = 1 -> mvar := high, limit_MVAR_High_5, count_as_fault;
    mvar_goes_high_unexplained_4 true = 1 -> mvar := high, limit_MVAR_High_4, count_as_fault;
    mvar_goes_high_unexplained_5 true = 1 -> mvar := high, limit_MVAR_High_3, count_as_fault;
    mvar_goes_high_unexplained_6 true = 1 -> mvar := high, limit_MVAR_High_2, count_as_fault;
    mvar_goes_high_unexplained_7 true = 1 -> mvar := high, limit_MVAR_High_1, count_as_fault;
  transition mvar_goes_low_unexplained
    mvar_goes_low_unexplained_0 true = 1 -> mvar := low, bus2_mvar_low, count_as_fault;
    mvar_goes_low_unexplained_1 true = 1 -> mvar := low, bus1_mvar_low, count_as_fault;
    mvar_goes_low_unexplained_2 true = 1 -> mvar := low, limit_MVAR_Low, count_as_fault;
    mvar_goes_low_unexplained_3 true = 1 -> mvar := low, limit_MVAR_Low_5, count_as_fault;
    mvar_goes_low_unexplained_4 true = 1 -> mvar := low, limit_MVAR_Low_4, count_as_fault;
    mvar_goes_low_unexplained_5 true = 1 -> mvar := low, limit_MVAR_Low_3, count_as_fault;
    mvar_goes_low_unexplained_6 true = 1 -> mvar := low, limit_MVAR_Low_2, count_as_fault;
    mvar_goes_low_unexplained_7 true = 1 -> mvar := low, limit_MVAR_Low_1, count_as_fault;
  transition mw_goes_normal_when_re_energised
    mw_goes_normal_when_re_energised_0 (isolated = false AND iso_state_changed = true) -> mw := high, bus2_mw_normal;
    mw_goes_normal_when_re_energised_1 (isolated = false AND iso_state_changed = true) -> mw := high, bus1_mw_normal;
    mw_goes_normal_when_re_energised_2 (isolated = false AND iso_state_changed = true) -> mw := normal, limit_MW_Normal;
  transition mw_goes_high_when_re_energised
    mw_goes_high_when_re_energised_0 (isolated = false AND iso_state_changed = true) -> mw := high, bus2_mw_high;
    mw_goes_high_when_re_energised_1 (isolated = false AND iso_state_changed = true) -> mw := high, bus1_mw_high;
    mw_goes_high_when_re_energised_2 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High;
    mw_goes_high_when_re_energised_3 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_5;
    mw_goes_high_when_re_energised_4 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_4;
    mw_goes_high_when_re_energised_5 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_3;
    mw_goes_high_when_re_energised_6 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_2;
    mw_goes_high_when_re_energised_7 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_1;
  transition mw_goes_low_when_re_energised
    mw_goes_low_when_re_energised_0 (isolated = false AND iso_state_changed = true) -> mw := low, bus2_mw_low;
    mw_goes_low_when_re_energised_1 (isolated = false AND iso_state_changed = true) -> mw := low, bus1_mw_low;
    mw_goes_low_when_re_energised_2 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low;
    mw_goes_low_when_re_energised_3 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_5;
    mw_goes_low_when_re_energised_4 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_4;
    mw_goes_low_when_re_energised_5 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_3;
    mw_goes_low_when_re_energised_6 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_2;
    mw_goes_low_when_re_energised_7 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_1;
  transition mw_goes_to_zero_when_isolated
    mw_goes_to_zero_when_isolated_0 (isolated = true AND iso_state_changed = true) -> mw := zero, bus2_mw_zero;
    mw_goes_to_zero_when_isolated_1 (isolated = true AND iso_state_changed = true) -> mw := zero, bus1_mw_zero;
    mw_goes_to_zero_when_isolated_2 (isolated = true AND iso_state_changed = true) -> mw := zero, entered_zero_zone_MW;
  transition mw_goes_low_when_isolated
    mw_goes_low_when_isolated_0 (isolated = true AND iso_state_changed = true) -> mw := low, bus2_mw_low;
    mw_goes_low_when_isolated_1 (isolated = true AND iso_state_changed = true) -> mw := low, bus1_mw_low;
    mw_goes_low_when_isolated_2 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low;
    mw_goes_low_when_isolated_3 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_5;
    mw_goes_low_when_isolated_4 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_4;
    mw_goes_low_when_isolated_5 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_3;
    mw_goes_low_when_isolated_6 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_2;
    mw_goes_low_when_isolated_7 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_1;
  transition mw_goes_to_zero_unexplained
    mw_goes_to_zero_unexplained_0 true = 1 -> mw := zero, bus2_mw_zero, count_as_fault;
    mw_goes_to_zero_unexplained_1 true = 1 -> mw := zero, bus1_mw_zero, count_as_fault;
    mw_goes_to_zero_unexplained_2 true = 1 -> mw := zero, entered_zero_zone_MW, count_as_fault;
  transition mw_goes_normal_unexplained
    mw_goes_normal_unexplained_0 true = 1 -> mw := normal, bus2_mw_normal, count_as_fault;
    mw_goes_normal_unexplained_1 true = 1 -> mw := normal, bus1_mw_normal, count_as_fault;
    mw_goes_normal_unexplained_2 true = 1 -> mw := normal, limit_MW_Normal, count_as_fault;
  transition mw_goes_high_unexplained
    mw_goes_high_unexplained_0 true = 1 -> mw := high, bus2_mw_high, count_as_fault;
    mw_goes_high_unexplained_1 true = 1 -> mw := high, bus1_mw_high, count_as_fault;
    mw_goes_high_unexplained_2 true = 1 -> mw := high, limit_MW_High, count_as_fault;
    mw_goes_high_unexplained_3 true = 1 -> mw := high, limit_MW_High_5, count_as_fault;
    mw_goes_high_unexplained_4 true = 1 -> mw := high, limit_MW_High_4, count_as_fault;
    mw_goes_high_unexplained_5 true = 1 -> mw := high, limit_MW_High_3, count_as_fault;
    mw_goes_high_unexplained_6 true = 1 -> mw := high, limit_MW_High_2, count_as_fault;
    mw_goes_high_unexplained_7 true = 1 -> mw := high, limit_MW_High_1, count_as_fault;
  transition mw_goes_low_unexplained
    mw_goes_low_unexplained_0 true = 1 -> mw := low, bus2_mw_low, count_as_fault;
    mw_goes_low_unexplained_1 true = 1 -> mw := low, bus1_mw_low, count_as_fault;
    mw_goes_low_unexplained_2 true = 1 -> mw := low, limit_MW_Low, count_as_fault;
    mw_goes_low_unexplained_3 true = 1 -> mw := low, limit_MW_Low_5, count_as_fault;
    mw_goes_low_unexplained_4 true = 1 -> mw := low, limit_MW_Low_4, count_as_fault;
    mw_goes_low_unexplained_5 true = 1 -> mw := low, limit_MW_Low_3, count_as_fault;
    mw_goes_low_unexplained_6 true = 1 -> mw := low, limit_MW_Low_2, count_as_fault;
    mw_goes_low_unexplained_7 true = 1 -> mw := low, limit_MW_Low_1, count_as_fault;
  transition voltage_goes_normal_when_caps_in
    voltage_goes_normal_when_caps_in_0 (isolated = false AND voltage = low) -> voltage := normal, bus2_voltage_normal, check_switched_in;
    voltage_goes_normal_when_caps_in_1 (isolated = false AND voltage = low) -> voltage := normal, bus1_voltage_normal, check_switched_in;
    voltage_goes_normal_when_caps_in_2 (isolated = false AND voltage = low) -> voltage := normal, limit_KV_Normal, check_switched_in;
  transition voltage_goes_normal_when_caps_out
    voltage_goes_normal_when_caps_out_0 (isolated = false AND voltage = high) -> voltage := normal, bus2_voltage_normal, check_switched_out;
    voltage_goes_normal_when_caps_out_1 (isolated = false AND voltage = high) -> voltage := normal, bus1_voltage_normal, check_switched_out;
    voltage_goes_normal_when_caps_out_2 (isolated = false AND voltage = high) -> voltage := normal, limit_KV_Normal, check_switched_out;
  transition voltage_goes_normal_when_re_energised
    voltage_goes_normal_when_re_energised_0 (isolated = false AND iso_state_changed = true) -> voltage := high, bus2_voltage_normal;
    voltage_goes_normal_when_re_energised_1 (isolated = false AND iso_state_changed = true) -> voltage := high, bus1_voltage_normal;
    voltage_goes_normal_when_re_energised_2 (isolated = false AND iso_state_changed = true) -> voltage := normal, limit_KV_Normal;
  transition voltage_goes_high_when_re_energised
    voltage_goes_high_when_re_energised_0 (isolated = false AND iso_state_changed = true) -> voltage := high, bus2_voltage_high;
    voltage_goes_high_when_re_energised_1 (isolated = false AND iso_state_changed = true) -> voltage := high, bus1_voltage_high;
    voltage_goes_high_when_re_energised_2 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High;
    voltage_goes_high_when_re_energised_3 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_5;
    voltage_goes_high_when_re_energised_4 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_4;
    voltage_goes_high_when_re_energised_5 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_3;
    voltage_goes_high_when_re_energised_6 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_2;
    voltage_goes_high_when_re_energised_7 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_1;
  transition voltage_goes_low_when_re_energised
    voltage_goes_low_when_re_energised_0 (isolated = false AND iso_state_changed = true) -> voltage := low, bus2_voltage_low;
    voltage_goes_low_when_re_energised_1 (isolated = false AND iso_state_changed = true) -> voltage := low, bus1_voltage_low;
    voltage_goes_low_when_re_energised_2 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low;
    voltage_goes_low_when_re_energised_3 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_5;
    voltage_goes_low_when_re_energised_4 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_4;
    voltage_goes_low_when_re_energised_5 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_3;
    voltage_goes_low_when_re_energised_6 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_2;
    voltage_goes_low_when_re_energised_7 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_1;
  transition voltage_goes_to_zero_when_isolated
    voltage_goes_to_zero_when_isolated_0 (isolated = true AND iso_state_changed = true) -> voltage := zero, bus2_voltage_zero;
    voltage_goes_to_zero_when_isolated_1 (isolated = true AND iso_state_changed = true) -> voltage := zero, bus1_voltage_zero;
    voltage_goes_to_zero_when_isolated_2 (isolated = true AND iso_state_changed = true) -> voltage := zero, entered_zero_zone_KV;
  transition voltage_goes_low_when_isolated
    voltage_goes_low_when_isolated_0 (isolated = true AND iso_state_changed = true) -> voltage := low, bus2_voltage_low;
    voltage_goes_low_when_isolated_1 (isolated = true AND iso_state_changed = true) -> voltage := low, bus1_voltage_low;
    voltage_goes_low_when_isolated_2 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low;
    voltage_goes_low_when_isolated_3 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_5;
    voltage_goes_low_when_isolated_4 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_4;
    voltage_goes_low_when_isolated_5 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_3;
    voltage_goes_low_when_isolated_6 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_2;
    voltage_goes_low_when_isolated_7 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_1;
  transition voltage_goes_to_zero_unexplained
    voltage_goes_to_zero_unexplained_0 true = 1 -> voltage := zero, bus2_voltage_zero, count_as_fault;
    voltage_goes_to_zero_unexplained_1 true = 1 -> voltage := zero, bus1_voltage_zero, count_as_fault;
    voltage_goes_to_zero_unexplained_2 true = 1 -> voltage := zero, entered_zero_zone_KV, count_as_fault;
  transition voltage_goes_normal_unexplained
    voltage_goes_normal_unexplained_0 true = 1 -> voltage := normal, bus2_voltage_normal, count_as_fault;
    voltage_goes_normal_unexplained_1 true = 1 -> voltage := normal, bus1_voltage_normal, count_as_fault;
    voltage_goes_normal_unexplained_2 true = 1 -> voltage := normal, limit_KV_Normal, count_as_fault;
  transition voltage_goes_high_unexplained
    voltage_goes_high_unexplained_0 true = 1 -> voltage := high, bus2_voltage_high, count_as_fault;
    voltage_goes_high_unexplained_1 true = 1 -> voltage := high, bus1_voltage_high, count_as_fault;
    voltage_goes_high_unexplained_2 true = 1 -> voltage := high, limit_KV_High, count_as_fault;
    voltage_goes_high_unexplained_3 true = 1 -> voltage := high, limit_KV_High_5, count_as_fault;
    voltage_goes_high_unexplained_4 true = 1 -> voltage := high, limit_KV_High_4, count_as_fault;
    voltage_goes_high_unexplained_5 true = 1 -> voltage := high, limit_KV_High_3, count_as_fault;
    voltage_goes_high_unexplained_6 true = 1 -> voltage := high, limit_KV_High_2, count_as_fault;
    voltage_goes_high_unexplained_7 true = 1 -> voltage := high, limit_KV_High_1, count_as_fault;
  transition voltage_goes_low_unexplained
    voltage_goes_low_unexplained_0 true = 1 -> voltage := low, bus2_voltage_low, count_as_fault;
    voltage_goes_low_unexplained_1 true = 1 -> voltage := low, bus1_voltage_low, count_as_fault;
    voltage_goes_low_unexplained_2 true = 1 -> voltage := low, limit_KV_Low, count_as_fault;
    voltage_goes_low_unexplained_3 true = 1 -> voltage := low, limit_KV_Low_5, count_as_fault;
    voltage_goes_low_unexplained_4 true = 1 -> voltage := low, limit_KV_Low_4, count_as_fault;
    voltage_goes_low_unexplained_5 true = 1 -> voltage := low, limit_KV_Low_3, count_as_fault;
    voltage_goes_low_unexplained_6 true = 1 -> voltage := low, limit_KV_Low_2, count_as_fault;
    voltage_goes_low_unexplained_7 true = 1 -> voltage := low, limit_KV_Low_1, count_as_fault;
  transition iso_state_changed_timeout
    iso_state_changed_timeout_0 true = 1 -> iso_state_changed := false;
  triggeredby [0.0..15.0] iso_state_changed = true;
  transition iso_state_may_have_changed_timeout
    iso_state_may_have_changed_timeout_0 true = 1 -> iso_state_may_have_changed := false;
  triggeredby [0.0..15.0] iso_state_may_have_changed = true;
  transition isolator_state_change
    isolator_state_change_0 true = 1 -> iso_state_may_have_changed := true;
  triggeredby isolator_opened, isolator_closed;
  transition re_energise_isolated
    re_energise_isolated_0 (isolated = true AND iso_state_may_have_changed = true) -> isolated := false, iso_state_changed := true;
  triggeredby some_breaker_is_closed;
  transition init_state_isolated
    init_state_isolated_0 true = 1 -> isolated := true, check_isolators_open;
  transition set_state_isolated
    set_state_isolated_0 iso_state_may_have_changed = true -> isolated := true, iso_state_changed := true, check_isolators_open;
  transition finish_iso_trip
    finish_iso_trip_0 true = 1 -> no_way;
    finish_iso_trip_1 true = 1 -> iso_trip_in_progress := false, isolated := true, iso_state_changed := true, check_isolators_open;
  triggeredby [0.0..1.0] iso_trip_in_progress = true;
  transition iso_trip4
    iso_trip4_0 true = 1 -> trip4;
  triggeredby [0.0..1.0] iso_trip_in_progress = true;
  transition iso_trip3
    iso_trip3_0 true = 1 -> trip3;
  triggeredby [0.0..1.0] iso_trip_in_progress = true;
  transition iso_trip2
    iso_trip2_0 true = 1 -> trip2;
  triggeredby [0.0..1.0] iso_trip_in_progress = true;
  transition iso_trip1
    iso_trip1_0 true = 1 -> trip1;
  triggeredby [0.0..1.0] iso_trip_in_progress = true;
  transition begin_iso_trip
    begin_iso_trip_0 iso_trip_in_progress = false -> iso_trip_in_progress := true, count_as_fault;
  triggeredby some_breaker_is_closed;
}
component Line_X113_X114 = {
  connection isolatorsXYZ0 : isolator = Breaker_X77_X78;
  connection isolatorsXYZ1 : isolator = Breaker_X79_X80;
  connection isolatorsXYZ2 : isolator = Breaker_X47_X48;
  connection isolatorsXYZ3 : isolator = Breaker_X81_X82;
  connection bus2 : attached = Bus_X114;
  connection bus1 : attached = Bus_X113;
  var mvar : {zero,high,low,normal};
  var mw : {zero,high,low,normal};
  var voltage : {zero,high,low,normal};
  var iso_trip_in_progress : [0..1];
  var iso_state_may_have_changed : [0..1];
  var iso_state_changed : [0..1];
  var isolated : [0..1];
  event some_breaker_is_closed;
  event check_isolators_open;
  event check_switched_out;
  event check_switched_in;
  event trip4;
  event trip3;
  event trip2;
  event trip1;
  event bus2_mvar_zero;
  event bus2_mvar_normal;
  event bus2_mvar_high;
  event bus2_mvar_low;
  event bus2_mw_zero;
  event bus2_mw_normal;
  event bus2_mw_high;
  event bus2_mw_low;
  event bus2_voltage_zero;
  event bus2_voltage_normal;
  event bus2_voltage_high;
  event bus2_voltage_low;
  event bus1_mvar_zero;
  event bus1_mvar_normal;
  event bus1_mvar_high;
  event bus1_mvar_low;
  event bus1_mw_zero;
  event bus1_mw_normal;
  event bus1_mw_high;
  event bus1_mw_low;
  event bus1_voltage_zero;
  event bus1_voltage_normal;
  event bus1_voltage_high;
  event bus1_voltage_low;
  event count_as_fault;
  event isolator_closed;
  event isolator_opened;
  event no_way;
  event entered_zero_zone_MVAR;
  event limit_MVAR_High;
  event limit_MVAR_High_5;
  event limit_MVAR_High_4;
  event limit_MVAR_High_3;
  event limit_MVAR_High_2;
  event limit_MVAR_High_1;
  event limit_MVAR_Low;
  event limit_MVAR_Low_5;
  event limit_MVAR_Low_4;
  event limit_MVAR_Low_3;
  event limit_MVAR_Low_2;
  event limit_MVAR_Low_1;
  event limit_MVAR_Normal;
  event entered_zero_zone_MW;
  event limit_MW_High;
  event limit_MW_High_5;
  event limit_MW_High_4;
  event limit_MW_High_3;
  event limit_MW_High_2;
  event limit_MW_High_1;
  event limit_MW_Low;
  event limit_MW_Low_5;
  event limit_MW_Low_4;
  event limit_MW_Low_3;
  event limit_MW_Low_2;
  event limit_MW_Low_1;
  event limit_MW_Normal;
  event entered_zero_zone_KV;
  event limit_KV_High;
  event limit_KV_High_5;
  event limit_KV_High_4;
  event limit_KV_High_3;
  event limit_KV_High_2;
  event limit_KV_High_1;
  event limit_KV_Low;
  event limit_KV_Low_5;
  event limit_KV_Low_4;
  event limit_KV_Low_3;
  event limit_KV_Low_2;
  event limit_KV_Low_1;
  event limit_KV_Normal;
  transition mvar_goes_to_zero_unexplained
    mvar_goes_to_zero_unexplained_0 true = 1 -> mvar := zero, bus2_mvar_zero, count_as_fault;
    mvar_goes_to_zero_unexplained_1 true = 1 -> mvar := zero, bus1_mvar_zero, count_as_fault;
    mvar_goes_to_zero_unexplained_2 true = 1 -> mvar := zero, entered_zero_zone_MVAR, count_as_fault;
  transition mvar_goes_normal_unexplained
    mvar_goes_normal_unexplained_0 true = 1 -> mvar := normal, bus2_mvar_normal, count_as_fault;
    mvar_goes_normal_unexplained_1 true = 1 -> mvar := normal, bus1_mvar_normal, count_as_fault;
    mvar_goes_normal_unexplained_2 true = 1 -> mvar := normal, limit_MVAR_Normal, count_as_fault;
  transition mvar_goes_high_unexplained
    mvar_goes_high_unexplained_0 true = 1 -> mvar := high, bus2_mvar_high, count_as_fault;
    mvar_goes_high_unexplained_1 true = 1 -> mvar := high, bus1_mvar_high, count_as_fault;
    mvar_goes_high_unexplained_2 true = 1 -> mvar := high, limit_MVAR_High, count_as_fault;
    mvar_goes_high_unexplained_3 true = 1 -> mvar := high, limit_MVAR_High_5, count_as_fault;
    mvar_goes_high_unexplained_4 true = 1 -> mvar := high, limit_MVAR_High_4, count_as_fault;
    mvar_goes_high_unexplained_5 true = 1 -> mvar := high, limit_MVAR_High_3, count_as_fault;
    mvar_goes_high_unexplained_6 true = 1 -> mvar := high, limit_MVAR_High_2, count_as_fault;
    mvar_goes_high_unexplained_7 true = 1 -> mvar := high, limit_MVAR_High_1, count_as_fault;
  transition mvar_goes_low_unexplained
    mvar_goes_low_unexplained_0 true = 1 -> mvar := low, bus2_mvar_low, count_as_fault;
    mvar_goes_low_unexplained_1 true = 1 -> mvar := low, bus1_mvar_low, count_as_fault;
    mvar_goes_low_unexplained_2 true = 1 -> mvar := low, limit_MVAR_Low, count_as_fault;
    mvar_goes_low_unexplained_3 true = 1 -> mvar := low, limit_MVAR_Low_5, count_as_fault;
    mvar_goes_low_unexplained_4 true = 1 -> mvar := low, limit_MVAR_Low_4, count_as_fault;
    mvar_goes_low_unexplained_5 true = 1 -> mvar := low, limit_MVAR_Low_3, count_as_fault;
    mvar_goes_low_unexplained_6 true = 1 -> mvar := low, limit_MVAR_Low_2, count_as_fault;
    mvar_goes_low_unexplained_7 true = 1 -> mvar := low, limit_MVAR_Low_1, count_as_fault;
  transition mw_goes_normal_when_re_energised
    mw_goes_normal_when_re_energised_0 (isolated = false AND iso_state_changed = true) -> mw := high, bus2_mw_normal;
    mw_goes_normal_when_re_energised_1 (isolated = false AND iso_state_changed = true) -> mw := high, bus1_mw_normal;
    mw_goes_normal_when_re_energised_2 (isolated = false AND iso_state_changed = true) -> mw := normal, limit_MW_Normal;
  transition mw_goes_high_when_re_energised
    mw_goes_high_when_re_energised_0 (isolated = false AND iso_state_changed = true) -> mw := high, bus2_mw_high;
    mw_goes_high_when_re_energised_1 (isolated = false AND iso_state_changed = true) -> mw := high, bus1_mw_high;
    mw_goes_high_when_re_energised_2 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High;
    mw_goes_high_when_re_energised_3 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_5;
    mw_goes_high_when_re_energised_4 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_4;
    mw_goes_high_when_re_energised_5 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_3;
    mw_goes_high_when_re_energised_6 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_2;
    mw_goes_high_when_re_energised_7 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_1;
  transition mw_goes_low_when_re_energised
    mw_goes_low_when_re_energised_0 (isolated = false AND iso_state_changed = true) -> mw := low, bus2_mw_low;
    mw_goes_low_when_re_energised_1 (isolated = false AND iso_state_changed = true) -> mw := low, bus1_mw_low;
    mw_goes_low_when_re_energised_2 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low;
    mw_goes_low_when_re_energised_3 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_5;
    mw_goes_low_when_re_energised_4 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_4;
    mw_goes_low_when_re_energised_5 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_3;
    mw_goes_low_when_re_energised_6 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_2;
    mw_goes_low_when_re_energised_7 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_1;
  transition mw_goes_to_zero_when_isolated
    mw_goes_to_zero_when_isolated_0 (isolated = true AND iso_state_changed = true) -> mw := zero, bus2_mw_zero;
    mw_goes_to_zero_when_isolated_1 (isolated = true AND iso_state_changed = true) -> mw := zero, bus1_mw_zero;
    mw_goes_to_zero_when_isolated_2 (isolated = true AND iso_state_changed = true) -> mw := zero, entered_zero_zone_MW;
  transition mw_goes_low_when_isolated
    mw_goes_low_when_isolated_0 (isolated = true AND iso_state_changed = true) -> mw := low, bus2_mw_low;
    mw_goes_low_when_isolated_1 (isolated = true AND iso_state_changed = true) -> mw := low, bus1_mw_low;
    mw_goes_low_when_isolated_2 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low;
    mw_goes_low_when_isolated_3 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_5;
    mw_goes_low_when_isolated_4 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_4;
    mw_goes_low_when_isolated_5 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_3;
    mw_goes_low_when_isolated_6 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_2;
    mw_goes_low_when_isolated_7 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_1;
  transition mw_goes_to_zero_unexplained
    mw_goes_to_zero_unexplained_0 true = 1 -> mw := zero, bus2_mw_zero, count_as_fault;
    mw_goes_to_zero_unexplained_1 true = 1 -> mw := zero, bus1_mw_zero, count_as_fault;
    mw_goes_to_zero_unexplained_2 true = 1 -> mw := zero, entered_zero_zone_MW, count_as_fault;
  transition mw_goes_normal_unexplained
    mw_goes_normal_unexplained_0 true = 1 -> mw := normal, bus2_mw_normal, count_as_fault;
    mw_goes_normal_unexplained_1 true = 1 -> mw := normal, bus1_mw_normal, count_as_fault;
    mw_goes_normal_unexplained_2 true = 1 -> mw := normal, limit_MW_Normal, count_as_fault;
  transition mw_goes_high_unexplained
    mw_goes_high_unexplained_0 true = 1 -> mw := high, bus2_mw_high, count_as_fault;
    mw_goes_high_unexplained_1 true = 1 -> mw := high, bus1_mw_high, count_as_fault;
    mw_goes_high_unexplained_2 true = 1 -> mw := high, limit_MW_High, count_as_fault;
    mw_goes_high_unexplained_3 true = 1 -> mw := high, limit_MW_High_5, count_as_fault;
    mw_goes_high_unexplained_4 true = 1 -> mw := high, limit_MW_High_4, count_as_fault;
    mw_goes_high_unexplained_5 true = 1 -> mw := high, limit_MW_High_3, count_as_fault;
    mw_goes_high_unexplained_6 true = 1 -> mw := high, limit_MW_High_2, count_as_fault;
    mw_goes_high_unexplained_7 true = 1 -> mw := high, limit_MW_High_1, count_as_fault;
  transition mw_goes_low_unexplained
    mw_goes_low_unexplained_0 true = 1 -> mw := low, bus2_mw_low, count_as_fault;
    mw_goes_low_unexplained_1 true = 1 -> mw := low, bus1_mw_low, count_as_fault;
    mw_goes_low_unexplained_2 true = 1 -> mw := low, limit_MW_Low, count_as_fault;
    mw_goes_low_unexplained_3 true = 1 -> mw := low, limit_MW_Low_5, count_as_fault;
    mw_goes_low_unexplained_4 true = 1 -> mw := low, limit_MW_Low_4, count_as_fault;
    mw_goes_low_unexplained_5 true = 1 -> mw := low, limit_MW_Low_3, count_as_fault;
    mw_goes_low_unexplained_6 true = 1 -> mw := low, limit_MW_Low_2, count_as_fault;
    mw_goes_low_unexplained_7 true = 1 -> mw := low, limit_MW_Low_1, count_as_fault;
  transition voltage_goes_normal_when_caps_in
    voltage_goes_normal_when_caps_in_0 (isolated = false AND voltage = low) -> voltage := normal, bus2_voltage_normal, check_switched_in;
    voltage_goes_normal_when_caps_in_1 (isolated = false AND voltage = low) -> voltage := normal, bus1_voltage_normal, check_switched_in;
    voltage_goes_normal_when_caps_in_2 (isolated = false AND voltage = low) -> voltage := normal, limit_KV_Normal, check_switched_in;
  transition voltage_goes_normal_when_caps_out
    voltage_goes_normal_when_caps_out_0 (isolated = false AND voltage = high) -> voltage := normal, bus2_voltage_normal, check_switched_out;
    voltage_goes_normal_when_caps_out_1 (isolated = false AND voltage = high) -> voltage := normal, bus1_voltage_normal, check_switched_out;
    voltage_goes_normal_when_caps_out_2 (isolated = false AND voltage = high) -> voltage := normal, limit_KV_Normal, check_switched_out;
  transition voltage_goes_normal_when_re_energised
    voltage_goes_normal_when_re_energised_0 (isolated = false AND iso_state_changed = true) -> voltage := high, bus2_voltage_normal;
    voltage_goes_normal_when_re_energised_1 (isolated = false AND iso_state_changed = true) -> voltage := high, bus1_voltage_normal;
    voltage_goes_normal_when_re_energised_2 (isolated = false AND iso_state_changed = true) -> voltage := normal, limit_KV_Normal;
  transition voltage_goes_high_when_re_energised
    voltage_goes_high_when_re_energised_0 (isolated = false AND iso_state_changed = true) -> voltage := high, bus2_voltage_high;
    voltage_goes_high_when_re_energised_1 (isolated = false AND iso_state_changed = true) -> voltage := high, bus1_voltage_high;
    voltage_goes_high_when_re_energised_2 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High;
    voltage_goes_high_when_re_energised_3 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_5;
    voltage_goes_high_when_re_energised_4 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_4;
    voltage_goes_high_when_re_energised_5 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_3;
    voltage_goes_high_when_re_energised_6 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_2;
    voltage_goes_high_when_re_energised_7 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_1;
  transition voltage_goes_low_when_re_energised
    voltage_goes_low_when_re_energised_0 (isolated = false AND iso_state_changed = true) -> voltage := low, bus2_voltage_low;
    voltage_goes_low_when_re_energised_1 (isolated = false AND iso_state_changed = true) -> voltage := low, bus1_voltage_low;
    voltage_goes_low_when_re_energised_2 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low;
    voltage_goes_low_when_re_energised_3 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_5;
    voltage_goes_low_when_re_energised_4 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_4;
    voltage_goes_low_when_re_energised_5 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_3;
    voltage_goes_low_when_re_energised_6 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_2;
    voltage_goes_low_when_re_energised_7 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_1;
  transition voltage_goes_to_zero_when_isolated
    voltage_goes_to_zero_when_isolated_0 (isolated = true AND iso_state_changed = true) -> voltage := zero, bus2_voltage_zero;
    voltage_goes_to_zero_when_isolated_1 (isolated = true AND iso_state_changed = true) -> voltage := zero, bus1_voltage_zero;
    voltage_goes_to_zero_when_isolated_2 (isolated = true AND iso_state_changed = true) -> voltage := zero, entered_zero_zone_KV;
  transition voltage_goes_low_when_isolated
    voltage_goes_low_when_isolated_0 (isolated = true AND iso_state_changed = true) -> voltage := low, bus2_voltage_low;
    voltage_goes_low_when_isolated_1 (isolated = true AND iso_state_changed = true) -> voltage := low, bus1_voltage_low;
    voltage_goes_low_when_isolated_2 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low;
    voltage_goes_low_when_isolated_3 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_5;
    voltage_goes_low_when_isolated_4 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_4;
    voltage_goes_low_when_isolated_5 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_3;
    voltage_goes_low_when_isolated_6 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_2;
    voltage_goes_low_when_isolated_7 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_1;
  transition voltage_goes_to_zero_unexplained
    voltage_goes_to_zero_unexplained_0 true = 1 -> voltage := zero, bus2_voltage_zero, count_as_fault;
    voltage_goes_to_zero_unexplained_1 true = 1 -> voltage := zero, bus1_voltage_zero, count_as_fault;
    voltage_goes_to_zero_unexplained_2 true = 1 -> voltage := zero, entered_zero_zone_KV, count_as_fault;
  transition voltage_goes_normal_unexplained
    voltage_goes_normal_unexplained_0 true = 1 -> voltage := normal, bus2_voltage_normal, count_as_fault;
    voltage_goes_normal_unexplained_1 true = 1 -> voltage := normal, bus1_voltage_normal, count_as_fault;
    voltage_goes_normal_unexplained_2 true = 1 -> voltage := normal, limit_KV_Normal, count_as_fault;
  transition voltage_goes_high_unexplained
    voltage_goes_high_unexplained_0 true = 1 -> voltage := high, bus2_voltage_high, count_as_fault;
    voltage_goes_high_unexplained_1 true = 1 -> voltage := high, bus1_voltage_high, count_as_fault;
    voltage_goes_high_unexplained_2 true = 1 -> voltage := high, limit_KV_High, count_as_fault;
    voltage_goes_high_unexplained_3 true = 1 -> voltage := high, limit_KV_High_5, count_as_fault;
    voltage_goes_high_unexplained_4 true = 1 -> voltage := high, limit_KV_High_4, count_as_fault;
    voltage_goes_high_unexplained_5 true = 1 -> voltage := high, limit_KV_High_3, count_as_fault;
    voltage_goes_high_unexplained_6 true = 1 -> voltage := high, limit_KV_High_2, count_as_fault;
    voltage_goes_high_unexplained_7 true = 1 -> voltage := high, limit_KV_High_1, count_as_fault;
  transition voltage_goes_low_unexplained
    voltage_goes_low_unexplained_0 true = 1 -> voltage := low, bus2_voltage_low, count_as_fault;
    voltage_goes_low_unexplained_1 true = 1 -> voltage := low, bus1_voltage_low, count_as_fault;
    voltage_goes_low_unexplained_2 true = 1 -> voltage := low, limit_KV_Low, count_as_fault;
    voltage_goes_low_unexplained_3 true = 1 -> voltage := low, limit_KV_Low_5, count_as_fault;
    voltage_goes_low_unexplained_4 true = 1 -> voltage := low, limit_KV_Low_4, count_as_fault;
    voltage_goes_low_unexplained_5 true = 1 -> voltage := low, limit_KV_Low_3, count_as_fault;
    voltage_goes_low_unexplained_6 true = 1 -> voltage := low, limit_KV_Low_2, count_as_fault;
    voltage_goes_low_unexplained_7 true = 1 -> voltage := low, limit_KV_Low_1, count_as_fault;
  transition iso_state_changed_timeout
    iso_state_changed_timeout_0 true = 1 -> iso_state_changed := false;
  triggeredby [0.0..15.0] iso_state_changed = true;
  transition iso_state_may_have_changed_timeout
    iso_state_may_have_changed_timeout_0 true = 1 -> iso_state_may_have_changed := false;
  triggeredby [0.0..15.0] iso_state_may_have_changed = true;
  transition isolator_state_change
    isolator_state_change_0 true = 1 -> iso_state_may_have_changed := true;
  triggeredby isolator_opened, isolator_closed;
  transition re_energise_isolated
    re_energise_isolated_0 (isolated = true AND iso_state_may_have_changed = true) -> isolated := false, iso_state_changed := true;
  triggeredby some_breaker_is_closed;
  transition init_state_isolated
    init_state_isolated_0 true = 1 -> isolated := true, check_isolators_open;
  transition set_state_isolated
    set_state_isolated_0 iso_state_may_have_changed = true -> isolated := true, iso_state_changed := true, check_isolators_open;
  transition finish_iso_trip
    finish_iso_trip_0 true = 1 -> no_way;
    finish_iso_trip_1 true = 1 -> iso_trip_in_progress := false, isolated := true, iso_state_changed := true, check_isolators_open;
  triggeredby [0.0..1.0] iso_trip_in_progress = true;
  transition iso_trip4
    iso_trip4_0 true = 1 -> trip4;
  triggeredby [0.0..1.0] iso_trip_in_progress = true;
  transition iso_trip3
    iso_trip3_0 true = 1 -> trip3;
  triggeredby [0.0..1.0] iso_trip_in_progress = true;
  transition iso_trip2
    iso_trip2_0 true = 1 -> trip2;
  triggeredby [0.0..1.0] iso_trip_in_progress = true;
  transition iso_trip1
    iso_trip1_0 true = 1 -> trip1;
  triggeredby [0.0..1.0] iso_trip_in_progress = true;
  transition begin_iso_trip
    begin_iso_trip_0 iso_trip_in_progress = false -> iso_trip_in_progress := true, count_as_fault;
  triggeredby some_breaker_is_closed;
}
component Line_X103_X104 = {
  connection bus2 : attached = Bus_X104;
  connection bus1 : attached = Bus_X103;
  var mvar : {zero,high,low,normal};
  var mw : {zero,high,low,normal};
  var voltage : {zero,high,low,normal};
  var iso_trip_in_progress : [0..1];
  var iso_state_may_have_changed : [0..1];
  var iso_state_changed : [0..1];
  var isolated : [0..1];
  event some_breaker_is_closed;
  event check_isolators_open;
  event check_switched_out;
  event check_switched_in;
  event trip4;
  event trip3;
  event trip2;
  event trip1;
  event bus2_mvar_zero;
  event bus2_mvar_normal;
  event bus2_mvar_high;
  event bus2_mvar_low;
  event bus2_mw_zero;
  event bus2_mw_normal;
  event bus2_mw_high;
  event bus2_mw_low;
  event bus2_voltage_zero;
  event bus2_voltage_normal;
  event bus2_voltage_high;
  event bus2_voltage_low;
  event bus1_mvar_zero;
  event bus1_mvar_normal;
  event bus1_mvar_high;
  event bus1_mvar_low;
  event bus1_mw_zero;
  event bus1_mw_normal;
  event bus1_mw_high;
  event bus1_mw_low;
  event bus1_voltage_zero;
  event bus1_voltage_normal;
  event bus1_voltage_high;
  event bus1_voltage_low;
  event count_as_fault;
  event isolator_closed;
  event isolator_opened;
  event no_way;
  event entered_zero_zone_MVAR;
  event limit_MVAR_High;
  event limit_MVAR_High_5;
  event limit_MVAR_High_4;
  event limit_MVAR_High_3;
  event limit_MVAR_High_2;
  event limit_MVAR_High_1;
  event limit_MVAR_Low;
  event limit_MVAR_Low_5;
  event limit_MVAR_Low_4;
  event limit_MVAR_Low_3;
  event limit_MVAR_Low_2;
  event limit_MVAR_Low_1;
  event limit_MVAR_Normal;
  event entered_zero_zone_MW;
  event limit_MW_High;
  event limit_MW_High_5;
  event limit_MW_High_4;
  event limit_MW_High_3;
  event limit_MW_High_2;
  event limit_MW_High_1;
  event limit_MW_Low;
  event limit_MW_Low_5;
  event limit_MW_Low_4;
  event limit_MW_Low_3;
  event limit_MW_Low_2;
  event limit_MW_Low_1;
  event limit_MW_Normal;
  event entered_zero_zone_KV;
  event limit_KV_High;
  event limit_KV_High_5;
  event limit_KV_High_4;
  event limit_KV_High_3;
  event limit_KV_High_2;
  event limit_KV_High_1;
  event limit_KV_Low;
  event limit_KV_Low_5;
  event limit_KV_Low_4;
  event limit_KV_Low_3;
  event limit_KV_Low_2;
  event limit_KV_Low_1;
  event limit_KV_Normal;
  transition mvar_goes_to_zero_unexplained
    mvar_goes_to_zero_unexplained_0 true = 1 -> mvar := zero, bus2_mvar_zero, count_as_fault;
    mvar_goes_to_zero_unexplained_1 true = 1 -> mvar := zero, bus1_mvar_zero, count_as_fault;
    mvar_goes_to_zero_unexplained_2 true = 1 -> mvar := zero, entered_zero_zone_MVAR, count_as_fault;
  transition mvar_goes_normal_unexplained
    mvar_goes_normal_unexplained_0 true = 1 -> mvar := normal, bus2_mvar_normal, count_as_fault;
    mvar_goes_normal_unexplained_1 true = 1 -> mvar := normal, bus1_mvar_normal, count_as_fault;
    mvar_goes_normal_unexplained_2 true = 1 -> mvar := normal, limit_MVAR_Normal, count_as_fault;
  transition mvar_goes_high_unexplained
    mvar_goes_high_unexplained_0 true = 1 -> mvar := high, bus2_mvar_high, count_as_fault;
    mvar_goes_high_unexplained_1 true = 1 -> mvar := high, bus1_mvar_high, count_as_fault;
    mvar_goes_high_unexplained_2 true = 1 -> mvar := high, limit_MVAR_High, count_as_fault;
    mvar_goes_high_unexplained_3 true = 1 -> mvar := high, limit_MVAR_High_5, count_as_fault;
    mvar_goes_high_unexplained_4 true = 1 -> mvar := high, limit_MVAR_High_4, count_as_fault;
    mvar_goes_high_unexplained_5 true = 1 -> mvar := high, limit_MVAR_High_3, count_as_fault;
    mvar_goes_high_unexplained_6 true = 1 -> mvar := high, limit_MVAR_High_2, count_as_fault;
    mvar_goes_high_unexplained_7 true = 1 -> mvar := high, limit_MVAR_High_1, count_as_fault;
  transition mvar_goes_low_unexplained
    mvar_goes_low_unexplained_0 true = 1 -> mvar := low, bus2_mvar_low, count_as_fault;
    mvar_goes_low_unexplained_1 true = 1 -> mvar := low, bus1_mvar_low, count_as_fault;
    mvar_goes_low_unexplained_2 true = 1 -> mvar := low, limit_MVAR_Low, count_as_fault;
    mvar_goes_low_unexplained_3 true = 1 -> mvar := low, limit_MVAR_Low_5, count_as_fault;
    mvar_goes_low_unexplained_4 true = 1 -> mvar := low, limit_MVAR_Low_4, count_as_fault;
    mvar_goes_low_unexplained_5 true = 1 -> mvar := low, limit_MVAR_Low_3, count_as_fault;
    mvar_goes_low_unexplained_6 true = 1 -> mvar := low, limit_MVAR_Low_2, count_as_fault;
    mvar_goes_low_unexplained_7 true = 1 -> mvar := low, limit_MVAR_Low_1, count_as_fault;
  transition mw_goes_normal_when_re_energised
    mw_goes_normal_when_re_energised_0 (isolated = false AND iso_state_changed = true) -> mw := high, bus2_mw_normal;
    mw_goes_normal_when_re_energised_1 (isolated = false AND iso_state_changed = true) -> mw := high, bus1_mw_normal;
    mw_goes_normal_when_re_energised_2 (isolated = false AND iso_state_changed = true) -> mw := normal, limit_MW_Normal;
  transition mw_goes_high_when_re_energised
    mw_goes_high_when_re_energised_0 (isolated = false AND iso_state_changed = true) -> mw := high, bus2_mw_high;
    mw_goes_high_when_re_energised_1 (isolated = false AND iso_state_changed = true) -> mw := high, bus1_mw_high;
    mw_goes_high_when_re_energised_2 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High;
    mw_goes_high_when_re_energised_3 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_5;
    mw_goes_high_when_re_energised_4 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_4;
    mw_goes_high_when_re_energised_5 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_3;
    mw_goes_high_when_re_energised_6 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_2;
    mw_goes_high_when_re_energised_7 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_1;
  transition mw_goes_low_when_re_energised
    mw_goes_low_when_re_energised_0 (isolated = false AND iso_state_changed = true) -> mw := low, bus2_mw_low;
    mw_goes_low_when_re_energised_1 (isolated = false AND iso_state_changed = true) -> mw := low, bus1_mw_low;
    mw_goes_low_when_re_energised_2 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low;
    mw_goes_low_when_re_energised_3 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_5;
    mw_goes_low_when_re_energised_4 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_4;
    mw_goes_low_when_re_energised_5 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_3;
    mw_goes_low_when_re_energised_6 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_2;
    mw_goes_low_when_re_energised_7 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_1;
  transition mw_goes_to_zero_when_isolated
    mw_goes_to_zero_when_isolated_0 (isolated = true AND iso_state_changed = true) -> mw := zero, bus2_mw_zero;
    mw_goes_to_zero_when_isolated_1 (isolated = true AND iso_state_changed = true) -> mw := zero, bus1_mw_zero;
    mw_goes_to_zero_when_isolated_2 (isolated = true AND iso_state_changed = true) -> mw := zero, entered_zero_zone_MW;
  transition mw_goes_low_when_isolated
    mw_goes_low_when_isolated_0 (isolated = true AND iso_state_changed = true) -> mw := low, bus2_mw_low;
    mw_goes_low_when_isolated_1 (isolated = true AND iso_state_changed = true) -> mw := low, bus1_mw_low;
    mw_goes_low_when_isolated_2 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low;
    mw_goes_low_when_isolated_3 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_5;
    mw_goes_low_when_isolated_4 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_4;
    mw_goes_low_when_isolated_5 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_3;
    mw_goes_low_when_isolated_6 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_2;
    mw_goes_low_when_isolated_7 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_1;
  transition mw_goes_to_zero_unexplained
    mw_goes_to_zero_unexplained_0 true = 1 -> mw := zero, bus2_mw_zero, count_as_fault;
    mw_goes_to_zero_unexplained_1 true = 1 -> mw := zero, bus1_mw_zero, count_as_fault;
    mw_goes_to_zero_unexplained_2 true = 1 -> mw := zero, entered_zero_zone_MW, count_as_fault;
  transition mw_goes_normal_unexplained
    mw_goes_normal_unexplained_0 true = 1 -> mw := normal, bus2_mw_normal, count_as_fault;
    mw_goes_normal_unexplained_1 true = 1 -> mw := normal, bus1_mw_normal, count_as_fault;
    mw_goes_normal_unexplained_2 true = 1 -> mw := normal, limit_MW_Normal, count_as_fault;
  transition mw_goes_high_unexplained
    mw_goes_high_unexplained_0 true = 1 -> mw := high, bus2_mw_high, count_as_fault;
    mw_goes_high_unexplained_1 true = 1 -> mw := high, bus1_mw_high, count_as_fault;
    mw_goes_high_unexplained_2 true = 1 -> mw := high, limit_MW_High, count_as_fault;
    mw_goes_high_unexplained_3 true = 1 -> mw := high, limit_MW_High_5, count_as_fault;
    mw_goes_high_unexplained_4 true = 1 -> mw := high, limit_MW_High_4, count_as_fault;
    mw_goes_high_unexplained_5 true = 1 -> mw := high, limit_MW_High_3, count_as_fault;
    mw_goes_high_unexplained_6 true = 1 -> mw := high, limit_MW_High_2, count_as_fault;
    mw_goes_high_unexplained_7 true = 1 -> mw := high, limit_MW_High_1, count_as_fault;
  transition mw_goes_low_unexplained
    mw_goes_low_unexplained_0 true = 1 -> mw := low, bus2_mw_low, count_as_fault;
    mw_goes_low_unexplained_1 true = 1 -> mw := low, bus1_mw_low, count_as_fault;
    mw_goes_low_unexplained_2 true = 1 -> mw := low, limit_MW_Low, count_as_fault;
    mw_goes_low_unexplained_3 true = 1 -> mw := low, limit_MW_Low_5, count_as_fault;
    mw_goes_low_unexplained_4 true = 1 -> mw := low, limit_MW_Low_4, count_as_fault;
    mw_goes_low_unexplained_5 true = 1 -> mw := low, limit_MW_Low_3, count_as_fault;
    mw_goes_low_unexplained_6 true = 1 -> mw := low, limit_MW_Low_2, count_as_fault;
    mw_goes_low_unexplained_7 true = 1 -> mw := low, limit_MW_Low_1, count_as_fault;
  transition voltage_goes_normal_when_caps_in
    voltage_goes_normal_when_caps_in_0 (isolated = false AND voltage = low) -> voltage := normal, bus2_voltage_normal, check_switched_in;
    voltage_goes_normal_when_caps_in_1 (isolated = false AND voltage = low) -> voltage := normal, bus1_voltage_normal, check_switched_in;
    voltage_goes_normal_when_caps_in_2 (isolated = false AND voltage = low) -> voltage := normal, limit_KV_Normal, check_switched_in;
  transition voltage_goes_normal_when_caps_out
    voltage_goes_normal_when_caps_out_0 (isolated = false AND voltage = high) -> voltage := normal, bus2_voltage_normal, check_switched_out;
    voltage_goes_normal_when_caps_out_1 (isolated = false AND voltage = high) -> voltage := normal, bus1_voltage_normal, check_switched_out;
    voltage_goes_normal_when_caps_out_2 (isolated = false AND voltage = high) -> voltage := normal, limit_KV_Normal, check_switched_out;
  transition voltage_goes_normal_when_re_energised
    voltage_goes_normal_when_re_energised_0 (isolated = false AND iso_state_changed = true) -> voltage := high, bus2_voltage_normal;
    voltage_goes_normal_when_re_energised_1 (isolated = false AND iso_state_changed = true) -> voltage := high, bus1_voltage_normal;
    voltage_goes_normal_when_re_energised_2 (isolated = false AND iso_state_changed = true) -> voltage := normal, limit_KV_Normal;
  transition voltage_goes_high_when_re_energised
    voltage_goes_high_when_re_energised_0 (isolated = false AND iso_state_changed = true) -> voltage := high, bus2_voltage_high;
    voltage_goes_high_when_re_energised_1 (isolated = false AND iso_state_changed = true) -> voltage := high, bus1_voltage_high;
    voltage_goes_high_when_re_energised_2 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High;
    voltage_goes_high_when_re_energised_3 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_5;
    voltage_goes_high_when_re_energised_4 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_4;
    voltage_goes_high_when_re_energised_5 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_3;
    voltage_goes_high_when_re_energised_6 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_2;
    voltage_goes_high_when_re_energised_7 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_1;
  transition voltage_goes_low_when_re_energised
    voltage_goes_low_when_re_energised_0 (isolated = false AND iso_state_changed = true) -> voltage := low, bus2_voltage_low;
    voltage_goes_low_when_re_energised_1 (isolated = false AND iso_state_changed = true) -> voltage := low, bus1_voltage_low;
    voltage_goes_low_when_re_energised_2 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low;
    voltage_goes_low_when_re_energised_3 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_5;
    voltage_goes_low_when_re_energised_4 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_4;
    voltage_goes_low_when_re_energised_5 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_3;
    voltage_goes_low_when_re_energised_6 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_2;
    voltage_goes_low_when_re_energised_7 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_1;
  transition voltage_goes_to_zero_when_isolated
    voltage_goes_to_zero_when_isolated_0 (isolated = true AND iso_state_changed = true) -> voltage := zero, bus2_voltage_zero;
    voltage_goes_to_zero_when_isolated_1 (isolated = true AND iso_state_changed = true) -> voltage := zero, bus1_voltage_zero;
    voltage_goes_to_zero_when_isolated_2 (isolated = true AND iso_state_changed = true) -> voltage := zero, entered_zero_zone_KV;
  transition voltage_goes_low_when_isolated
    voltage_goes_low_when_isolated_0 (isolated = true AND iso_state_changed = true) -> voltage := low, bus2_voltage_low;
    voltage_goes_low_when_isolated_1 (isolated = true AND iso_state_changed = true) -> voltage := low, bus1_voltage_low;
    voltage_goes_low_when_isolated_2 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low;
    voltage_goes_low_when_isolated_3 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_5;
    voltage_goes_low_when_isolated_4 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_4;
    voltage_goes_low_when_isolated_5 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_3;
    voltage_goes_low_when_isolated_6 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_2;
    voltage_goes_low_when_isolated_7 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_1;
  transition voltage_goes_to_zero_unexplained
    voltage_goes_to_zero_unexplained_0 true = 1 -> voltage := zero, bus2_voltage_zero, count_as_fault;
    voltage_goes_to_zero_unexplained_1 true = 1 -> voltage := zero, bus1_voltage_zero, count_as_fault;
    voltage_goes_to_zero_unexplained_2 true = 1 -> voltage := zero, entered_zero_zone_KV, count_as_fault;
  transition voltage_goes_normal_unexplained
    voltage_goes_normal_unexplained_0 true = 1 -> voltage := normal, bus2_voltage_normal, count_as_fault;
    voltage_goes_normal_unexplained_1 true = 1 -> voltage := normal, bus1_voltage_normal, count_as_fault;
    voltage_goes_normal_unexplained_2 true = 1 -> voltage := normal, limit_KV_Normal, count_as_fault;
  transition voltage_goes_high_unexplained
    voltage_goes_high_unexplained_0 true = 1 -> voltage := high, bus2_voltage_high, count_as_fault;
    voltage_goes_high_unexplained_1 true = 1 -> voltage := high, bus1_voltage_high, count_as_fault;
    voltage_goes_high_unexplained_2 true = 1 -> voltage := high, limit_KV_High, count_as_fault;
    voltage_goes_high_unexplained_3 true = 1 -> voltage := high, limit_KV_High_5, count_as_fault;
    voltage_goes_high_unexplained_4 true = 1 -> voltage := high, limit_KV_High_4, count_as_fault;
    voltage_goes_high_unexplained_5 true = 1 -> voltage := high, limit_KV_High_3, count_as_fault;
    voltage_goes_high_unexplained_6 true = 1 -> voltage := high, limit_KV_High_2, count_as_fault;
    voltage_goes_high_unexplained_7 true = 1 -> voltage := high, limit_KV_High_1, count_as_fault;
  transition voltage_goes_low_unexplained
    voltage_goes_low_unexplained_0 true = 1 -> voltage := low, bus2_voltage_low, count_as_fault;
    voltage_goes_low_unexplained_1 true = 1 -> voltage := low, bus1_voltage_low, count_as_fault;
    voltage_goes_low_unexplained_2 true = 1 -> voltage := low, limit_KV_Low, count_as_fault;
    voltage_goes_low_unexplained_3 true = 1 -> voltage := low, limit_KV_Low_5, count_as_fault;
    voltage_goes_low_unexplained_4 true = 1 -> voltage := low, limit_KV_Low_4, count_as_fault;
    voltage_goes_low_unexplained_5 true = 1 -> voltage := low, limit_KV_Low_3, count_as_fault;
    voltage_goes_low_unexplained_6 true = 1 -> voltage := low, limit_KV_Low_2, count_as_fault;
    voltage_goes_low_unexplained_7 true = 1 -> voltage := low, limit_KV_Low_1, count_as_fault;
  transition iso_state_changed_timeout
    iso_state_changed_timeout_0 true = 1 -> iso_state_changed := false;
  triggeredby [0.0..15.0] iso_state_changed = true;
  transition iso_state_may_have_changed_timeout
    iso_state_may_have_changed_timeout_0 true = 1 -> iso_state_may_have_changed := false;
  triggeredby [0.0..15.0] iso_state_may_have_changed = true;
  transition isolator_state_change
    isolator_state_change_0 true = 1 -> iso_state_may_have_changed := true;
  triggeredby isolator_opened, isolator_closed;
  transition re_energise_isolated
    re_energise_isolated_0 (isolated = true AND iso_state_may_have_changed = true) -> isolated := false, iso_state_changed := true;
  triggeredby some_breaker_is_closed;
  transition init_state_isolated
    init_state_isolated_0 true = 1 -> isolated := true, check_isolators_open;
  transition set_state_isolated
    set_state_isolated_0 iso_state_may_have_changed = true -> isolated := true, iso_state_changed := true, check_isolators_open;
  transition finish_iso_trip
    finish_iso_trip_0 true = 1 -> no_way;
    finish_iso_trip_1 true = 1 -> iso_trip_in_progress := false, isolated := true, iso_state_changed := true, check_isolators_open;
  triggeredby [0.0..1.0] iso_trip_in_progress = true;
  transition iso_trip4
    iso_trip4_0 true = 1 -> trip4;
  triggeredby [0.0..1.0] iso_trip_in_progress = true;
  transition iso_trip3
    iso_trip3_0 true = 1 -> trip3;
  triggeredby [0.0..1.0] iso_trip_in_progress = true;
  transition iso_trip2
    iso_trip2_0 true = 1 -> trip2;
  triggeredby [0.0..1.0] iso_trip_in_progress = true;
  transition iso_trip1
    iso_trip1_0 true = 1 -> trip1;
  triggeredby [0.0..1.0] iso_trip_in_progress = true;
  transition begin_iso_trip
    begin_iso_trip_0 iso_trip_in_progress = false -> iso_trip_in_progress := true, count_as_fault;
  triggeredby some_breaker_is_closed;
}
component Line_X105_X106 = {
  connection bus2 : attached = Bus_X106;
  connection bus1 : attached = Bus_X105;
  var mvar : {zero,high,low,normal};
  var mw : {zero,high,low,normal};
  var voltage : {zero,high,low,normal};
  var iso_trip_in_progress : [0..1];
  var iso_state_may_have_changed : [0..1];
  var iso_state_changed : [0..1];
  var isolated : [0..1];
  event some_breaker_is_closed;
  event check_isolators_open;
  event check_switched_out;
  event check_switched_in;
  event trip4;
  event trip3;
  event trip2;
  event trip1;
  event bus2_mvar_zero;
  event bus2_mvar_normal;
  event bus2_mvar_high;
  event bus2_mvar_low;
  event bus2_mw_zero;
  event bus2_mw_normal;
  event bus2_mw_high;
  event bus2_mw_low;
  event bus2_voltage_zero;
  event bus2_voltage_normal;
  event bus2_voltage_high;
  event bus2_voltage_low;
  event bus1_mvar_zero;
  event bus1_mvar_normal;
  event bus1_mvar_high;
  event bus1_mvar_low;
  event bus1_mw_zero;
  event bus1_mw_normal;
  event bus1_mw_high;
  event bus1_mw_low;
  event bus1_voltage_zero;
  event bus1_voltage_normal;
  event bus1_voltage_high;
  event bus1_voltage_low;
  event count_as_fault;
  event isolator_closed;
  event isolator_opened;
  event no_way;
  event entered_zero_zone_MVAR;
  event limit_MVAR_High;
  event limit_MVAR_High_5;
  event limit_MVAR_High_4;
  event limit_MVAR_High_3;
  event limit_MVAR_High_2;
  event limit_MVAR_High_1;
  event limit_MVAR_Low;
  event limit_MVAR_Low_5;
  event limit_MVAR_Low_4;
  event limit_MVAR_Low_3;
  event limit_MVAR_Low_2;
  event limit_MVAR_Low_1;
  event limit_MVAR_Normal;
  event entered_zero_zone_MW;
  event limit_MW_High;
  event limit_MW_High_5;
  event limit_MW_High_4;
  event limit_MW_High_3;
  event limit_MW_High_2;
  event limit_MW_High_1;
  event limit_MW_Low;
  event limit_MW_Low_5;
  event limit_MW_Low_4;
  event limit_MW_Low_3;
  event limit_MW_Low_2;
  event limit_MW_Low_1;
  event limit_MW_Normal;
  event entered_zero_zone_KV;
  event limit_KV_High;
  event limit_KV_High_5;
  event limit_KV_High_4;
  event limit_KV_High_3;
  event limit_KV_High_2;
  event limit_KV_High_1;
  event limit_KV_Low;
  event limit_KV_Low_5;
  event limit_KV_Low_4;
  event limit_KV_Low_3;
  event limit_KV_Low_2;
  event limit_KV_Low_1;
  event limit_KV_Normal;
  transition mvar_goes_to_zero_unexplained
    mvar_goes_to_zero_unexplained_0 true = 1 -> mvar := zero, bus2_mvar_zero, count_as_fault;
    mvar_goes_to_zero_unexplained_1 true = 1 -> mvar := zero, bus1_mvar_zero, count_as_fault;
    mvar_goes_to_zero_unexplained_2 true = 1 -> mvar := zero, entered_zero_zone_MVAR, count_as_fault;
  transition mvar_goes_normal_unexplained
    mvar_goes_normal_unexplained_0 true = 1 -> mvar := normal, bus2_mvar_normal, count_as_fault;
    mvar_goes_normal_unexplained_1 true = 1 -> mvar := normal, bus1_mvar_normal, count_as_fault;
    mvar_goes_normal_unexplained_2 true = 1 -> mvar := normal, limit_MVAR_Normal, count_as_fault;
  transition mvar_goes_high_unexplained
    mvar_goes_high_unexplained_0 true = 1 -> mvar := high, bus2_mvar_high, count_as_fault;
    mvar_goes_high_unexplained_1 true = 1 -> mvar := high, bus1_mvar_high, count_as_fault;
    mvar_goes_high_unexplained_2 true = 1 -> mvar := high, limit_MVAR_High, count_as_fault;
    mvar_goes_high_unexplained_3 true = 1 -> mvar := high, limit_MVAR_High_5, count_as_fault;
    mvar_goes_high_unexplained_4 true = 1 -> mvar := high, limit_MVAR_High_4, count_as_fault;
    mvar_goes_high_unexplained_5 true = 1 -> mvar := high, limit_MVAR_High_3, count_as_fault;
    mvar_goes_high_unexplained_6 true = 1 -> mvar := high, limit_MVAR_High_2, count_as_fault;
    mvar_goes_high_unexplained_7 true = 1 -> mvar := high, limit_MVAR_High_1, count_as_fault;
  transition mvar_goes_low_unexplained
    mvar_goes_low_unexplained_0 true = 1 -> mvar := low, bus2_mvar_low, count_as_fault;
    mvar_goes_low_unexplained_1 true = 1 -> mvar := low, bus1_mvar_low, count_as_fault;
    mvar_goes_low_unexplained_2 true = 1 -> mvar := low, limit_MVAR_Low, count_as_fault;
    mvar_goes_low_unexplained_3 true = 1 -> mvar := low, limit_MVAR_Low_5, count_as_fault;
    mvar_goes_low_unexplained_4 true = 1 -> mvar := low, limit_MVAR_Low_4, count_as_fault;
    mvar_goes_low_unexplained_5 true = 1 -> mvar := low, limit_MVAR_Low_3, count_as_fault;
    mvar_goes_low_unexplained_6 true = 1 -> mvar := low, limit_MVAR_Low_2, count_as_fault;
    mvar_goes_low_unexplained_7 true = 1 -> mvar := low, limit_MVAR_Low_1, count_as_fault;
  transition mw_goes_normal_when_re_energised
    mw_goes_normal_when_re_energised_0 (isolated = false AND iso_state_changed = true) -> mw := high, bus2_mw_normal;
    mw_goes_normal_when_re_energised_1 (isolated = false AND iso_state_changed = true) -> mw := high, bus1_mw_normal;
    mw_goes_normal_when_re_energised_2 (isolated = false AND iso_state_changed = true) -> mw := normal, limit_MW_Normal;
  transition mw_goes_high_when_re_energised
    mw_goes_high_when_re_energised_0 (isolated = false AND iso_state_changed = true) -> mw := high, bus2_mw_high;
    mw_goes_high_when_re_energised_1 (isolated = false AND iso_state_changed = true) -> mw := high, bus1_mw_high;
    mw_goes_high_when_re_energised_2 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High;
    mw_goes_high_when_re_energised_3 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_5;
    mw_goes_high_when_re_energised_4 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_4;
    mw_goes_high_when_re_energised_5 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_3;
    mw_goes_high_when_re_energised_6 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_2;
    mw_goes_high_when_re_energised_7 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_1;
  transition mw_goes_low_when_re_energised
    mw_goes_low_when_re_energised_0 (isolated = false AND iso_state_changed = true) -> mw := low, bus2_mw_low;
    mw_goes_low_when_re_energised_1 (isolated = false AND iso_state_changed = true) -> mw := low, bus1_mw_low;
    mw_goes_low_when_re_energised_2 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low;
    mw_goes_low_when_re_energised_3 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_5;
    mw_goes_low_when_re_energised_4 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_4;
    mw_goes_low_when_re_energised_5 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_3;
    mw_goes_low_when_re_energised_6 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_2;
    mw_goes_low_when_re_energised_7 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_1;
  transition mw_goes_to_zero_when_isolated
    mw_goes_to_zero_when_isolated_0 (isolated = true AND iso_state_changed = true) -> mw := zero, bus2_mw_zero;
    mw_goes_to_zero_when_isolated_1 (isolated = true AND iso_state_changed = true) -> mw := zero, bus1_mw_zero;
    mw_goes_to_zero_when_isolated_2 (isolated = true AND iso_state_changed = true) -> mw := zero, entered_zero_zone_MW;
  transition mw_goes_low_when_isolated
    mw_goes_low_when_isolated_0 (isolated = true AND iso_state_changed = true) -> mw := low, bus2_mw_low;
    mw_goes_low_when_isolated_1 (isolated = true AND iso_state_changed = true) -> mw := low, bus1_mw_low;
    mw_goes_low_when_isolated_2 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low;
    mw_goes_low_when_isolated_3 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_5;
    mw_goes_low_when_isolated_4 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_4;
    mw_goes_low_when_isolated_5 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_3;
    mw_goes_low_when_isolated_6 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_2;
    mw_goes_low_when_isolated_7 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_1;
  transition mw_goes_to_zero_unexplained
    mw_goes_to_zero_unexplained_0 true = 1 -> mw := zero, bus2_mw_zero, count_as_fault;
    mw_goes_to_zero_unexplained_1 true = 1 -> mw := zero, bus1_mw_zero, count_as_fault;
    mw_goes_to_zero_unexplained_2 true = 1 -> mw := zero, entered_zero_zone_MW, count_as_fault;
  transition mw_goes_normal_unexplained
    mw_goes_normal_unexplained_0 true = 1 -> mw := normal, bus2_mw_normal, count_as_fault;
    mw_goes_normal_unexplained_1 true = 1 -> mw := normal, bus1_mw_normal, count_as_fault;
    mw_goes_normal_unexplained_2 true = 1 -> mw := normal, limit_MW_Normal, count_as_fault;
  transition mw_goes_high_unexplained
    mw_goes_high_unexplained_0 true = 1 -> mw := high, bus2_mw_high, count_as_fault;
    mw_goes_high_unexplained_1 true = 1 -> mw := high, bus1_mw_high, count_as_fault;
    mw_goes_high_unexplained_2 true = 1 -> mw := high, limit_MW_High, count_as_fault;
    mw_goes_high_unexplained_3 true = 1 -> mw := high, limit_MW_High_5, count_as_fault;
    mw_goes_high_unexplained_4 true = 1 -> mw := high, limit_MW_High_4, count_as_fault;
    mw_goes_high_unexplained_5 true = 1 -> mw := high, limit_MW_High_3, count_as_fault;
    mw_goes_high_unexplained_6 true = 1 -> mw := high, limit_MW_High_2, count_as_fault;
    mw_goes_high_unexplained_7 true = 1 -> mw := high, limit_MW_High_1, count_as_fault;
  transition mw_goes_low_unexplained
    mw_goes_low_unexplained_0 true = 1 -> mw := low, bus2_mw_low, count_as_fault;
    mw_goes_low_unexplained_1 true = 1 -> mw := low, bus1_mw_low, count_as_fault;
    mw_goes_low_unexplained_2 true = 1 -> mw := low, limit_MW_Low, count_as_fault;
    mw_goes_low_unexplained_3 true = 1 -> mw := low, limit_MW_Low_5, count_as_fault;
    mw_goes_low_unexplained_4 true = 1 -> mw := low, limit_MW_Low_4, count_as_fault;
    mw_goes_low_unexplained_5 true = 1 -> mw := low, limit_MW_Low_3, count_as_fault;
    mw_goes_low_unexplained_6 true = 1 -> mw := low, limit_MW_Low_2, count_as_fault;
    mw_goes_low_unexplained_7 true = 1 -> mw := low, limit_MW_Low_1, count_as_fault;
  transition voltage_goes_normal_when_caps_in
    voltage_goes_normal_when_caps_in_0 (isolated = false AND voltage = low) -> voltage := normal, bus2_voltage_normal, check_switched_in;
    voltage_goes_normal_when_caps_in_1 (isolated = false AND voltage = low) -> voltage := normal, bus1_voltage_normal, check_switched_in;
    voltage_goes_normal_when_caps_in_2 (isolated = false AND voltage = low) -> voltage := normal, limit_KV_Normal, check_switched_in;
  transition voltage_goes_normal_when_caps_out
    voltage_goes_normal_when_caps_out_0 (isolated = false AND voltage = high) -> voltage := normal, bus2_voltage_normal, check_switched_out;
    voltage_goes_normal_when_caps_out_1 (isolated = false AND voltage = high) -> voltage := normal, bus1_voltage_normal, check_switched_out;
    voltage_goes_normal_when_caps_out_2 (isolated = false AND voltage = high) -> voltage := normal, limit_KV_Normal, check_switched_out;
  transition voltage_goes_normal_when_re_energised
    voltage_goes_normal_when_re_energised_0 (isolated = false AND iso_state_changed = true) -> voltage := high, bus2_voltage_normal;
    voltage_goes_normal_when_re_energised_1 (isolated = false AND iso_state_changed = true) -> voltage := high, bus1_voltage_normal;
    voltage_goes_normal_when_re_energised_2 (isolated = false AND iso_state_changed = true) -> voltage := normal, limit_KV_Normal;
  transition voltage_goes_high_when_re_energised
    voltage_goes_high_when_re_energised_0 (isolated = false AND iso_state_changed = true) -> voltage := high, bus2_voltage_high;
    voltage_goes_high_when_re_energised_1 (isolated = false AND iso_state_changed = true) -> voltage := high, bus1_voltage_high;
    voltage_goes_high_when_re_energised_2 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High;
    voltage_goes_high_when_re_energised_3 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_5;
    voltage_goes_high_when_re_energised_4 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_4;
    voltage_goes_high_when_re_energised_5 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_3;
    voltage_goes_high_when_re_energised_6 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_2;
    voltage_goes_high_when_re_energised_7 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_1;
  transition voltage_goes_low_when_re_energised
    voltage_goes_low_when_re_energised_0 (isolated = false AND iso_state_changed = true) -> voltage := low, bus2_voltage_low;
    voltage_goes_low_when_re_energised_1 (isolated = false AND iso_state_changed = true) -> voltage := low, bus1_voltage_low;
    voltage_goes_low_when_re_energised_2 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low;
    voltage_goes_low_when_re_energised_3 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_5;
    voltage_goes_low_when_re_energised_4 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_4;
    voltage_goes_low_when_re_energised_5 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_3;
    voltage_goes_low_when_re_energised_6 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_2;
    voltage_goes_low_when_re_energised_7 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_1;
  transition voltage_goes_to_zero_when_isolated
    voltage_goes_to_zero_when_isolated_0 (isolated = true AND iso_state_changed = true) -> voltage := zero, bus2_voltage_zero;
    voltage_goes_to_zero_when_isolated_1 (isolated = true AND iso_state_changed = true) -> voltage := zero, bus1_voltage_zero;
    voltage_goes_to_zero_when_isolated_2 (isolated = true AND iso_state_changed = true) -> voltage := zero, entered_zero_zone_KV;
  transition voltage_goes_low_when_isolated
    voltage_goes_low_when_isolated_0 (isolated = true AND iso_state_changed = true) -> voltage := low, bus2_voltage_low;
    voltage_goes_low_when_isolated_1 (isolated = true AND iso_state_changed = true) -> voltage := low, bus1_voltage_low;
    voltage_goes_low_when_isolated_2 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low;
    voltage_goes_low_when_isolated_3 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_5;
    voltage_goes_low_when_isolated_4 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_4;
    voltage_goes_low_when_isolated_5 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_3;
    voltage_goes_low_when_isolated_6 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_2;
    voltage_goes_low_when_isolated_7 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_1;
  transition voltage_goes_to_zero_unexplained
    voltage_goes_to_zero_unexplained_0 true = 1 -> voltage := zero, bus2_voltage_zero, count_as_fault;
    voltage_goes_to_zero_unexplained_1 true = 1 -> voltage := zero, bus1_voltage_zero, count_as_fault;
    voltage_goes_to_zero_unexplained_2 true = 1 -> voltage := zero, entered_zero_zone_KV, count_as_fault;
  transition voltage_goes_normal_unexplained
    voltage_goes_normal_unexplained_0 true = 1 -> voltage := normal, bus2_voltage_normal, count_as_fault;
    voltage_goes_normal_unexplained_1 true = 1 -> voltage := normal, bus1_voltage_normal, count_as_fault;
    voltage_goes_normal_unexplained_2 true = 1 -> voltage := normal, limit_KV_Normal, count_as_fault;
  transition voltage_goes_high_unexplained
    voltage_goes_high_unexplained_0 true = 1 -> voltage := high, bus2_voltage_high, count_as_fault;
    voltage_goes_high_unexplained_1 true = 1 -> voltage := high, bus1_voltage_high, count_as_fault;
    voltage_goes_high_unexplained_2 true = 1 -> voltage := high, limit_KV_High, count_as_fault;
    voltage_goes_high_unexplained_3 true = 1 -> voltage := high, limit_KV_High_5, count_as_fault;
    voltage_goes_high_unexplained_4 true = 1 -> voltage := high, limit_KV_High_4, count_as_fault;
    voltage_goes_high_unexplained_5 true = 1 -> voltage := high, limit_KV_High_3, count_as_fault;
    voltage_goes_high_unexplained_6 true = 1 -> voltage := high, limit_KV_High_2, count_as_fault;
    voltage_goes_high_unexplained_7 true = 1 -> voltage := high, limit_KV_High_1, count_as_fault;
  transition voltage_goes_low_unexplained
    voltage_goes_low_unexplained_0 true = 1 -> voltage := low, bus2_voltage_low, count_as_fault;
    voltage_goes_low_unexplained_1 true = 1 -> voltage := low, bus1_voltage_low, count_as_fault;
    voltage_goes_low_unexplained_2 true = 1 -> voltage := low, limit_KV_Low, count_as_fault;
    voltage_goes_low_unexplained_3 true = 1 -> voltage := low, limit_KV_Low_5, count_as_fault;
    voltage_goes_low_unexplained_4 true = 1 -> voltage := low, limit_KV_Low_4, count_as_fault;
    voltage_goes_low_unexplained_5 true = 1 -> voltage := low, limit_KV_Low_3, count_as_fault;
    voltage_goes_low_unexplained_6 true = 1 -> voltage := low, limit_KV_Low_2, count_as_fault;
    voltage_goes_low_unexplained_7 true = 1 -> voltage := low, limit_KV_Low_1, count_as_fault;
  transition iso_state_changed_timeout
    iso_state_changed_timeout_0 true = 1 -> iso_state_changed := false;
  triggeredby [0.0..15.0] iso_state_changed = true;
  transition iso_state_may_have_changed_timeout
    iso_state_may_have_changed_timeout_0 true = 1 -> iso_state_may_have_changed := false;
  triggeredby [0.0..15.0] iso_state_may_have_changed = true;
  transition isolator_state_change
    isolator_state_change_0 true = 1 -> iso_state_may_have_changed := true;
  triggeredby isolator_opened, isolator_closed;
  transition re_energise_isolated
    re_energise_isolated_0 (isolated = true AND iso_state_may_have_changed = true) -> isolated := false, iso_state_changed := true;
  triggeredby some_breaker_is_closed;
  transition init_state_isolated
    init_state_isolated_0 true = 1 -> isolated := true, check_isolators_open;
  transition set_state_isolated
    set_state_isolated_0 iso_state_may_have_changed = true -> isolated := true, iso_state_changed := true, check_isolators_open;
  transition finish_iso_trip
    finish_iso_trip_0 true = 1 -> no_way;
    finish_iso_trip_1 true = 1 -> iso_trip_in_progress := false, isolated := true, iso_state_changed := true, check_isolators_open;
  triggeredby [0.0..1.0] iso_trip_in_progress = true;
  transition iso_trip4
    iso_trip4_0 true = 1 -> trip4;
  triggeredby [0.0..1.0] iso_trip_in_progress = true;
  transition iso_trip3
    iso_trip3_0 true = 1 -> trip3;
  triggeredby [0.0..1.0] iso_trip_in_progress = true;
  transition iso_trip2
    iso_trip2_0 true = 1 -> trip2;
  triggeredby [0.0..1.0] iso_trip_in_progress = true;
  transition iso_trip1
    iso_trip1_0 true = 1 -> trip1;
  triggeredby [0.0..1.0] iso_trip_in_progress = true;
  transition begin_iso_trip
    begin_iso_trip_0 iso_trip_in_progress = false -> iso_trip_in_progress := true, count_as_fault;
  triggeredby some_breaker_is_closed;
}
component Line_X107_X108 = {
  connection isolatorsXYZ0 : isolator = Breaker_X67_X68;
  connection isolatorsXYZ1 : isolator = Breaker_X65_X66;
  connection isolatorsXYZ2 : isolator = Breaker_X1_X2;
  connection isolatorsXYZ3 : isolator = Breaker_X9_X10;
  connection bus2 : attached = Bus_X108;
  connection bus1 : attached = Bus_X107;
  var mvar : {zero,high,low,normal};
  var mw : {zero,high,low,normal};
  var voltage : {zero,high,low,normal};
  var iso_trip_in_progress : [0..1];
  var iso_state_may_have_changed : [0..1];
  var iso_state_changed : [0..1];
  var isolated : [0..1];
  event some_breaker_is_closed;
  event check_isolators_open;
  event check_switched_out;
  event check_switched_in;
  event trip4;
  event trip3;
  event trip2;
  event trip1;
  event bus2_mvar_zero;
  event bus2_mvar_normal;
  event bus2_mvar_high;
  event bus2_mvar_low;
  event bus2_mw_zero;
  event bus2_mw_normal;
  event bus2_mw_high;
  event bus2_mw_low;
  event bus2_voltage_zero;
  event bus2_voltage_normal;
  event bus2_voltage_high;
  event bus2_voltage_low;
  event bus1_mvar_zero;
  event bus1_mvar_normal;
  event bus1_mvar_high;
  event bus1_mvar_low;
  event bus1_mw_zero;
  event bus1_mw_normal;
  event bus1_mw_high;
  event bus1_mw_low;
  event bus1_voltage_zero;
  event bus1_voltage_normal;
  event bus1_voltage_high;
  event bus1_voltage_low;
  event count_as_fault;
  event isolator_closed;
  event isolator_opened;
  event no_way;
  event entered_zero_zone_MVAR;
  event limit_MVAR_High;
  event limit_MVAR_High_5;
  event limit_MVAR_High_4;
  event limit_MVAR_High_3;
  event limit_MVAR_High_2;
  event limit_MVAR_High_1;
  event limit_MVAR_Low;
  event limit_MVAR_Low_5;
  event limit_MVAR_Low_4;
  event limit_MVAR_Low_3;
  event limit_MVAR_Low_2;
  event limit_MVAR_Low_1;
  event limit_MVAR_Normal;
  event entered_zero_zone_MW;
  event limit_MW_High;
  event limit_MW_High_5;
  event limit_MW_High_4;
  event limit_MW_High_3;
  event limit_MW_High_2;
  event limit_MW_High_1;
  event limit_MW_Low;
  event limit_MW_Low_5;
  event limit_MW_Low_4;
  event limit_MW_Low_3;
  event limit_MW_Low_2;
  event limit_MW_Low_1;
  event limit_MW_Normal;
  event entered_zero_zone_KV;
  event limit_KV_High;
  event limit_KV_High_5;
  event limit_KV_High_4;
  event limit_KV_High_3;
  event limit_KV_High_2;
  event limit_KV_High_1;
  event limit_KV_Low;
  event limit_KV_Low_5;
  event limit_KV_Low_4;
  event limit_KV_Low_3;
  event limit_KV_Low_2;
  event limit_KV_Low_1;
  event limit_KV_Normal;
  transition mvar_goes_to_zero_unexplained
    mvar_goes_to_zero_unexplained_0 true = 1 -> mvar := zero, bus2_mvar_zero, count_as_fault;
    mvar_goes_to_zero_unexplained_1 true = 1 -> mvar := zero, bus1_mvar_zero, count_as_fault;
    mvar_goes_to_zero_unexplained_2 true = 1 -> mvar := zero, entered_zero_zone_MVAR, count_as_fault;
  transition mvar_goes_normal_unexplained
    mvar_goes_normal_unexplained_0 true = 1 -> mvar := normal, bus2_mvar_normal, count_as_fault;
    mvar_goes_normal_unexplained_1 true = 1 -> mvar := normal, bus1_mvar_normal, count_as_fault;
    mvar_goes_normal_unexplained_2 true = 1 -> mvar := normal, limit_MVAR_Normal, count_as_fault;
  transition mvar_goes_high_unexplained
    mvar_goes_high_unexplained_0 true = 1 -> mvar := high, bus2_mvar_high, count_as_fault;
    mvar_goes_high_unexplained_1 true = 1 -> mvar := high, bus1_mvar_high, count_as_fault;
    mvar_goes_high_unexplained_2 true = 1 -> mvar := high, limit_MVAR_High, count_as_fault;
    mvar_goes_high_unexplained_3 true = 1 -> mvar := high, limit_MVAR_High_5, count_as_fault;
    mvar_goes_high_unexplained_4 true = 1 -> mvar := high, limit_MVAR_High_4, count_as_fault;
    mvar_goes_high_unexplained_5 true = 1 -> mvar := high, limit_MVAR_High_3, count_as_fault;
    mvar_goes_high_unexplained_6 true = 1 -> mvar := high, limit_MVAR_High_2, count_as_fault;
    mvar_goes_high_unexplained_7 true = 1 -> mvar := high, limit_MVAR_High_1, count_as_fault;
  transition mvar_goes_low_unexplained
    mvar_goes_low_unexplained_0 true = 1 -> mvar := low, bus2_mvar_low, count_as_fault;
    mvar_goes_low_unexplained_1 true = 1 -> mvar := low, bus1_mvar_low, count_as_fault;
    mvar_goes_low_unexplained_2 true = 1 -> mvar := low, limit_MVAR_Low, count_as_fault;
    mvar_goes_low_unexplained_3 true = 1 -> mvar := low, limit_MVAR_Low_5, count_as_fault;
    mvar_goes_low_unexplained_4 true = 1 -> mvar := low, limit_MVAR_Low_4, count_as_fault;
    mvar_goes_low_unexplained_5 true = 1 -> mvar := low, limit_MVAR_Low_3, count_as_fault;
    mvar_goes_low_unexplained_6 true = 1 -> mvar := low, limit_MVAR_Low_2, count_as_fault;
    mvar_goes_low_unexplained_7 true = 1 -> mvar := low, limit_MVAR_Low_1, count_as_fault;
  transition mw_goes_normal_when_re_energised
    mw_goes_normal_when_re_energised_0 (isolated = false AND iso_state_changed = true) -> mw := high, bus2_mw_normal;
    mw_goes_normal_when_re_energised_1 (isolated = false AND iso_state_changed = true) -> mw := high, bus1_mw_normal;
    mw_goes_normal_when_re_energised_2 (isolated = false AND iso_state_changed = true) -> mw := normal, limit_MW_Normal;
  transition mw_goes_high_when_re_energised
    mw_goes_high_when_re_energised_0 (isolated = false AND iso_state_changed = true) -> mw := high, bus2_mw_high;
    mw_goes_high_when_re_energised_1 (isolated = false AND iso_state_changed = true) -> mw := high, bus1_mw_high;
    mw_goes_high_when_re_energised_2 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High;
    mw_goes_high_when_re_energised_3 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_5;
    mw_goes_high_when_re_energised_4 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_4;
    mw_goes_high_when_re_energised_5 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_3;
    mw_goes_high_when_re_energised_6 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_2;
    mw_goes_high_when_re_energised_7 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_1;
  transition mw_goes_low_when_re_energised
    mw_goes_low_when_re_energised_0 (isolated = false AND iso_state_changed = true) -> mw := low, bus2_mw_low;
    mw_goes_low_when_re_energised_1 (isolated = false AND iso_state_changed = true) -> mw := low, bus1_mw_low;
    mw_goes_low_when_re_energised_2 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low;
    mw_goes_low_when_re_energised_3 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_5;
    mw_goes_low_when_re_energised_4 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_4;
    mw_goes_low_when_re_energised_5 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_3;
    mw_goes_low_when_re_energised_6 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_2;
    mw_goes_low_when_re_energised_7 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_1;
  transition mw_goes_to_zero_when_isolated
    mw_goes_to_zero_when_isolated_0 (isolated = true AND iso_state_changed = true) -> mw := zero, bus2_mw_zero;
    mw_goes_to_zero_when_isolated_1 (isolated = true AND iso_state_changed = true) -> mw := zero, bus1_mw_zero;
    mw_goes_to_zero_when_isolated_2 (isolated = true AND iso_state_changed = true) -> mw := zero, entered_zero_zone_MW;
  transition mw_goes_low_when_isolated
    mw_goes_low_when_isolated_0 (isolated = true AND iso_state_changed = true) -> mw := low, bus2_mw_low;
    mw_goes_low_when_isolated_1 (isolated = true AND iso_state_changed = true) -> mw := low, bus1_mw_low;
    mw_goes_low_when_isolated_2 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low;
    mw_goes_low_when_isolated_3 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_5;
    mw_goes_low_when_isolated_4 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_4;
    mw_goes_low_when_isolated_5 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_3;
    mw_goes_low_when_isolated_6 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_2;
    mw_goes_low_when_isolated_7 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_1;
  transition mw_goes_to_zero_unexplained
    mw_goes_to_zero_unexplained_0 true = 1 -> mw := zero, bus2_mw_zero, count_as_fault;
    mw_goes_to_zero_unexplained_1 true = 1 -> mw := zero, bus1_mw_zero, count_as_fault;
    mw_goes_to_zero_unexplained_2 true = 1 -> mw := zero, entered_zero_zone_MW, count_as_fault;
  transition mw_goes_normal_unexplained
    mw_goes_normal_unexplained_0 true = 1 -> mw := normal, bus2_mw_normal, count_as_fault;
    mw_goes_normal_unexplained_1 true = 1 -> mw := normal, bus1_mw_normal, count_as_fault;
    mw_goes_normal_unexplained_2 true = 1 -> mw := normal, limit_MW_Normal, count_as_fault;
  transition mw_goes_high_unexplained
    mw_goes_high_unexplained_0 true = 1 -> mw := high, bus2_mw_high, count_as_fault;
    mw_goes_high_unexplained_1 true = 1 -> mw := high, bus1_mw_high, count_as_fault;
    mw_goes_high_unexplained_2 true = 1 -> mw := high, limit_MW_High, count_as_fault;
    mw_goes_high_unexplained_3 true = 1 -> mw := high, limit_MW_High_5, count_as_fault;
    mw_goes_high_unexplained_4 true = 1 -> mw := high, limit_MW_High_4, count_as_fault;
    mw_goes_high_unexplained_5 true = 1 -> mw := high, limit_MW_High_3, count_as_fault;
    mw_goes_high_unexplained_6 true = 1 -> mw := high, limit_MW_High_2, count_as_fault;
    mw_goes_high_unexplained_7 true = 1 -> mw := high, limit_MW_High_1, count_as_fault;
  transition mw_goes_low_unexplained
    mw_goes_low_unexplained_0 true = 1 -> mw := low, bus2_mw_low, count_as_fault;
    mw_goes_low_unexplained_1 true = 1 -> mw := low, bus1_mw_low, count_as_fault;
    mw_goes_low_unexplained_2 true = 1 -> mw := low, limit_MW_Low, count_as_fault;
    mw_goes_low_unexplained_3 true = 1 -> mw := low, limit_MW_Low_5, count_as_fault;
    mw_goes_low_unexplained_4 true = 1 -> mw := low, limit_MW_Low_4, count_as_fault;
    mw_goes_low_unexplained_5 true = 1 -> mw := low, limit_MW_Low_3, count_as_fault;
    mw_goes_low_unexplained_6 true = 1 -> mw := low, limit_MW_Low_2, count_as_fault;
    mw_goes_low_unexplained_7 true = 1 -> mw := low, limit_MW_Low_1, count_as_fault;
  transition voltage_goes_normal_when_caps_in
    voltage_goes_normal_when_caps_in_0 (isolated = false AND voltage = low) -> voltage := normal, bus2_voltage_normal, check_switched_in;
    voltage_goes_normal_when_caps_in_1 (isolated = false AND voltage = low) -> voltage := normal, bus1_voltage_normal, check_switched_in;
    voltage_goes_normal_when_caps_in_2 (isolated = false AND voltage = low) -> voltage := normal, limit_KV_Normal, check_switched_in;
  transition voltage_goes_normal_when_caps_out
    voltage_goes_normal_when_caps_out_0 (isolated = false AND voltage = high) -> voltage := normal, bus2_voltage_normal, check_switched_out;
    voltage_goes_normal_when_caps_out_1 (isolated = false AND voltage = high) -> voltage := normal, bus1_voltage_normal, check_switched_out;
    voltage_goes_normal_when_caps_out_2 (isolated = false AND voltage = high) -> voltage := normal, limit_KV_Normal, check_switched_out;
  transition voltage_goes_normal_when_re_energised
    voltage_goes_normal_when_re_energised_0 (isolated = false AND iso_state_changed = true) -> voltage := high, bus2_voltage_normal;
    voltage_goes_normal_when_re_energised_1 (isolated = false AND iso_state_changed = true) -> voltage := high, bus1_voltage_normal;
    voltage_goes_normal_when_re_energised_2 (isolated = false AND iso_state_changed = true) -> voltage := normal, limit_KV_Normal;
  transition voltage_goes_high_when_re_energised
    voltage_goes_high_when_re_energised_0 (isolated = false AND iso_state_changed = true) -> voltage := high, bus2_voltage_high;
    voltage_goes_high_when_re_energised_1 (isolated = false AND iso_state_changed = true) -> voltage := high, bus1_voltage_high;
    voltage_goes_high_when_re_energised_2 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High;
    voltage_goes_high_when_re_energised_3 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_5;
    voltage_goes_high_when_re_energised_4 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_4;
    voltage_goes_high_when_re_energised_5 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_3;
    voltage_goes_high_when_re_energised_6 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_2;
    voltage_goes_high_when_re_energised_7 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_1;
  transition voltage_goes_low_when_re_energised
    voltage_goes_low_when_re_energised_0 (isolated = false AND iso_state_changed = true) -> voltage := low, bus2_voltage_low;
    voltage_goes_low_when_re_energised_1 (isolated = false AND iso_state_changed = true) -> voltage := low, bus1_voltage_low;
    voltage_goes_low_when_re_energised_2 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low;
    voltage_goes_low_when_re_energised_3 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_5;
    voltage_goes_low_when_re_energised_4 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_4;
    voltage_goes_low_when_re_energised_5 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_3;
    voltage_goes_low_when_re_energised_6 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_2;
    voltage_goes_low_when_re_energised_7 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_1;
  transition voltage_goes_to_zero_when_isolated
    voltage_goes_to_zero_when_isolated_0 (isolated = true AND iso_state_changed = true) -> voltage := zero, bus2_voltage_zero;
    voltage_goes_to_zero_when_isolated_1 (isolated = true AND iso_state_changed = true) -> voltage := zero, bus1_voltage_zero;
    voltage_goes_to_zero_when_isolated_2 (isolated = true AND iso_state_changed = true) -> voltage := zero, entered_zero_zone_KV;
  transition voltage_goes_low_when_isolated
    voltage_goes_low_when_isolated_0 (isolated = true AND iso_state_changed = true) -> voltage := low, bus2_voltage_low;
    voltage_goes_low_when_isolated_1 (isolated = true AND iso_state_changed = true) -> voltage := low, bus1_voltage_low;
    voltage_goes_low_when_isolated_2 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low;
    voltage_goes_low_when_isolated_3 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_5;
    voltage_goes_low_when_isolated_4 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_4;
    voltage_goes_low_when_isolated_5 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_3;
    voltage_goes_low_when_isolated_6 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_2;
    voltage_goes_low_when_isolated_7 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_1;
  transition voltage_goes_to_zero_unexplained
    voltage_goes_to_zero_unexplained_0 true = 1 -> voltage := zero, bus2_voltage_zero, count_as_fault;
    voltage_goes_to_zero_unexplained_1 true = 1 -> voltage := zero, bus1_voltage_zero, count_as_fault;
    voltage_goes_to_zero_unexplained_2 true = 1 -> voltage := zero, entered_zero_zone_KV, count_as_fault;
  transition voltage_goes_normal_unexplained
    voltage_goes_normal_unexplained_0 true = 1 -> voltage := normal, bus2_voltage_normal, count_as_fault;
    voltage_goes_normal_unexplained_1 true = 1 -> voltage := normal, bus1_voltage_normal, count_as_fault;
    voltage_goes_normal_unexplained_2 true = 1 -> voltage := normal, limit_KV_Normal, count_as_fault;
  transition voltage_goes_high_unexplained
    voltage_goes_high_unexplained_0 true = 1 -> voltage := high, bus2_voltage_high, count_as_fault;
    voltage_goes_high_unexplained_1 true = 1 -> voltage := high, bus1_voltage_high, count_as_fault;
    voltage_goes_high_unexplained_2 true = 1 -> voltage := high, limit_KV_High, count_as_fault;
    voltage_goes_high_unexplained_3 true = 1 -> voltage := high, limit_KV_High_5, count_as_fault;
    voltage_goes_high_unexplained_4 true = 1 -> voltage := high, limit_KV_High_4, count_as_fault;
    voltage_goes_high_unexplained_5 true = 1 -> voltage := high, limit_KV_High_3, count_as_fault;
    voltage_goes_high_unexplained_6 true = 1 -> voltage := high, limit_KV_High_2, count_as_fault;
    voltage_goes_high_unexplained_7 true = 1 -> voltage := high, limit_KV_High_1, count_as_fault;
  transition voltage_goes_low_unexplained
    voltage_goes_low_unexplained_0 true = 1 -> voltage := low, bus2_voltage_low, count_as_fault;
    voltage_goes_low_unexplained_1 true = 1 -> voltage := low, bus1_voltage_low, count_as_fault;
    voltage_goes_low_unexplained_2 true = 1 -> voltage := low, limit_KV_Low, count_as_fault;
    voltage_goes_low_unexplained_3 true = 1 -> voltage := low, limit_KV_Low_5, count_as_fault;
    voltage_goes_low_unexplained_4 true = 1 -> voltage := low, limit_KV_Low_4, count_as_fault;
    voltage_goes_low_unexplained_5 true = 1 -> voltage := low, limit_KV_Low_3, count_as_fault;
    voltage_goes_low_unexplained_6 true = 1 -> voltage := low, limit_KV_Low_2, count_as_fault;
    voltage_goes_low_unexplained_7 true = 1 -> voltage := low, limit_KV_Low_1, count_as_fault;
  transition iso_state_changed_timeout
    iso_state_changed_timeout_0 true = 1 -> iso_state_changed := false;
  triggeredby [0.0..15.0] iso_state_changed = true;
  transition iso_state_may_have_changed_timeout
    iso_state_may_have_changed_timeout_0 true = 1 -> iso_state_may_have_changed := false;
  triggeredby [0.0..15.0] iso_state_may_have_changed = true;
  transition isolator_state_change
    isolator_state_change_0 true = 1 -> iso_state_may_have_changed := true;
  triggeredby isolator_opened, isolator_closed;
  transition re_energise_isolated
    re_energise_isolated_0 (isolated = true AND iso_state_may_have_changed = true) -> isolated := false, iso_state_changed := true;
  triggeredby some_breaker_is_closed;
  transition init_state_isolated
    init_state_isolated_0 true = 1 -> isolated := true, check_isolators_open;
  transition set_state_isolated
    set_state_isolated_0 iso_state_may_have_changed = true -> isolated := true, iso_state_changed := true, check_isolators_open;
  transition finish_iso_trip
    finish_iso_trip_0 true = 1 -> no_way;
    finish_iso_trip_1 true = 1 -> iso_trip_in_progress := false, isolated := true, iso_state_changed := true, check_isolators_open;
  triggeredby [0.0..1.0] iso_trip_in_progress = true;
  transition iso_trip4
    iso_trip4_0 true = 1 -> trip4;
  triggeredby [0.0..1.0] iso_trip_in_progress = true;
  transition iso_trip3
    iso_trip3_0 true = 1 -> trip3;
  triggeredby [0.0..1.0] iso_trip_in_progress = true;
  transition iso_trip2
    iso_trip2_0 true = 1 -> trip2;
  triggeredby [0.0..1.0] iso_trip_in_progress = true;
  transition iso_trip1
    iso_trip1_0 true = 1 -> trip1;
  triggeredby [0.0..1.0] iso_trip_in_progress = true;
  transition begin_iso_trip
    begin_iso_trip_0 iso_trip_in_progress = false -> iso_trip_in_progress := true, count_as_fault;
  triggeredby some_breaker_is_closed;
}
component Line_X109_X110 = {
  connection bus2 : attached = Bus_X110;
  connection bus1 : attached = Bus_X109;
  var mvar : {zero,high,low,normal};
  var mw : {zero,high,low,normal};
  var voltage : {zero,high,low,normal};
  var iso_trip_in_progress : [0..1];
  var iso_state_may_have_changed : [0..1];
  var iso_state_changed : [0..1];
  var isolated : [0..1];
  event some_breaker_is_closed;
  event check_isolators_open;
  event check_switched_out;
  event check_switched_in;
  event trip4;
  event trip3;
  event trip2;
  event trip1;
  event bus2_mvar_zero;
  event bus2_mvar_normal;
  event bus2_mvar_high;
  event bus2_mvar_low;
  event bus2_mw_zero;
  event bus2_mw_normal;
  event bus2_mw_high;
  event bus2_mw_low;
  event bus2_voltage_zero;
  event bus2_voltage_normal;
  event bus2_voltage_high;
  event bus2_voltage_low;
  event bus1_mvar_zero;
  event bus1_mvar_normal;
  event bus1_mvar_high;
  event bus1_mvar_low;
  event bus1_mw_zero;
  event bus1_mw_normal;
  event bus1_mw_high;
  event bus1_mw_low;
  event bus1_voltage_zero;
  event bus1_voltage_normal;
  event bus1_voltage_high;
  event bus1_voltage_low;
  event count_as_fault;
  event isolator_closed;
  event isolator_opened;
  event no_way;
  event entered_zero_zone_MVAR;
  event limit_MVAR_High;
  event limit_MVAR_High_5;
  event limit_MVAR_High_4;
  event limit_MVAR_High_3;
  event limit_MVAR_High_2;
  event limit_MVAR_High_1;
  event limit_MVAR_Low;
  event limit_MVAR_Low_5;
  event limit_MVAR_Low_4;
  event limit_MVAR_Low_3;
  event limit_MVAR_Low_2;
  event limit_MVAR_Low_1;
  event limit_MVAR_Normal;
  event entered_zero_zone_MW;
  event limit_MW_High;
  event limit_MW_High_5;
  event limit_MW_High_4;
  event limit_MW_High_3;
  event limit_MW_High_2;
  event limit_MW_High_1;
  event limit_MW_Low;
  event limit_MW_Low_5;
  event limit_MW_Low_4;
  event limit_MW_Low_3;
  event limit_MW_Low_2;
  event limit_MW_Low_1;
  event limit_MW_Normal;
  event entered_zero_zone_KV;
  event limit_KV_High;
  event limit_KV_High_5;
  event limit_KV_High_4;
  event limit_KV_High_3;
  event limit_KV_High_2;
  event limit_KV_High_1;
  event limit_KV_Low;
  event limit_KV_Low_5;
  event limit_KV_Low_4;
  event limit_KV_Low_3;
  event limit_KV_Low_2;
  event limit_KV_Low_1;
  event limit_KV_Normal;
  transition mvar_goes_to_zero_unexplained
    mvar_goes_to_zero_unexplained_0 true = 1 -> mvar := zero, bus2_mvar_zero, count_as_fault;
    mvar_goes_to_zero_unexplained_1 true = 1 -> mvar := zero, bus1_mvar_zero, count_as_fault;
    mvar_goes_to_zero_unexplained_2 true = 1 -> mvar := zero, entered_zero_zone_MVAR, count_as_fault;
  transition mvar_goes_normal_unexplained
    mvar_goes_normal_unexplained_0 true = 1 -> mvar := normal, bus2_mvar_normal, count_as_fault;
    mvar_goes_normal_unexplained_1 true = 1 -> mvar := normal, bus1_mvar_normal, count_as_fault;
    mvar_goes_normal_unexplained_2 true = 1 -> mvar := normal, limit_MVAR_Normal, count_as_fault;
  transition mvar_goes_high_unexplained
    mvar_goes_high_unexplained_0 true = 1 -> mvar := high, bus2_mvar_high, count_as_fault;
    mvar_goes_high_unexplained_1 true = 1 -> mvar := high, bus1_mvar_high, count_as_fault;
    mvar_goes_high_unexplained_2 true = 1 -> mvar := high, limit_MVAR_High, count_as_fault;
    mvar_goes_high_unexplained_3 true = 1 -> mvar := high, limit_MVAR_High_5, count_as_fault;
    mvar_goes_high_unexplained_4 true = 1 -> mvar := high, limit_MVAR_High_4, count_as_fault;
    mvar_goes_high_unexplained_5 true = 1 -> mvar := high, limit_MVAR_High_3, count_as_fault;
    mvar_goes_high_unexplained_6 true = 1 -> mvar := high, limit_MVAR_High_2, count_as_fault;
    mvar_goes_high_unexplained_7 true = 1 -> mvar := high, limit_MVAR_High_1, count_as_fault;
  transition mvar_goes_low_unexplained
    mvar_goes_low_unexplained_0 true = 1 -> mvar := low, bus2_mvar_low, count_as_fault;
    mvar_goes_low_unexplained_1 true = 1 -> mvar := low, bus1_mvar_low, count_as_fault;
    mvar_goes_low_unexplained_2 true = 1 -> mvar := low, limit_MVAR_Low, count_as_fault;
    mvar_goes_low_unexplained_3 true = 1 -> mvar := low, limit_MVAR_Low_5, count_as_fault;
    mvar_goes_low_unexplained_4 true = 1 -> mvar := low, limit_MVAR_Low_4, count_as_fault;
    mvar_goes_low_unexplained_5 true = 1 -> mvar := low, limit_MVAR_Low_3, count_as_fault;
    mvar_goes_low_unexplained_6 true = 1 -> mvar := low, limit_MVAR_Low_2, count_as_fault;
    mvar_goes_low_unexplained_7 true = 1 -> mvar := low, limit_MVAR_Low_1, count_as_fault;
  transition mw_goes_normal_when_re_energised
    mw_goes_normal_when_re_energised_0 (isolated = false AND iso_state_changed = true) -> mw := high, bus2_mw_normal;
    mw_goes_normal_when_re_energised_1 (isolated = false AND iso_state_changed = true) -> mw := high, bus1_mw_normal;
    mw_goes_normal_when_re_energised_2 (isolated = false AND iso_state_changed = true) -> mw := normal, limit_MW_Normal;
  transition mw_goes_high_when_re_energised
    mw_goes_high_when_re_energised_0 (isolated = false AND iso_state_changed = true) -> mw := high, bus2_mw_high;
    mw_goes_high_when_re_energised_1 (isolated = false AND iso_state_changed = true) -> mw := high, bus1_mw_high;
    mw_goes_high_when_re_energised_2 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High;
    mw_goes_high_when_re_energised_3 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_5;
    mw_goes_high_when_re_energised_4 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_4;
    mw_goes_high_when_re_energised_5 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_3;
    mw_goes_high_when_re_energised_6 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_2;
    mw_goes_high_when_re_energised_7 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_1;
  transition mw_goes_low_when_re_energised
    mw_goes_low_when_re_energised_0 (isolated = false AND iso_state_changed = true) -> mw := low, bus2_mw_low;
    mw_goes_low_when_re_energised_1 (isolated = false AND iso_state_changed = true) -> mw := low, bus1_mw_low;
    mw_goes_low_when_re_energised_2 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low;
    mw_goes_low_when_re_energised_3 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_5;
    mw_goes_low_when_re_energised_4 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_4;
    mw_goes_low_when_re_energised_5 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_3;
    mw_goes_low_when_re_energised_6 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_2;
    mw_goes_low_when_re_energised_7 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_1;
  transition mw_goes_to_zero_when_isolated
    mw_goes_to_zero_when_isolated_0 (isolated = true AND iso_state_changed = true) -> mw := zero, bus2_mw_zero;
    mw_goes_to_zero_when_isolated_1 (isolated = true AND iso_state_changed = true) -> mw := zero, bus1_mw_zero;
    mw_goes_to_zero_when_isolated_2 (isolated = true AND iso_state_changed = true) -> mw := zero, entered_zero_zone_MW;
  transition mw_goes_low_when_isolated
    mw_goes_low_when_isolated_0 (isolated = true AND iso_state_changed = true) -> mw := low, bus2_mw_low;
    mw_goes_low_when_isolated_1 (isolated = true AND iso_state_changed = true) -> mw := low, bus1_mw_low;
    mw_goes_low_when_isolated_2 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low;
    mw_goes_low_when_isolated_3 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_5;
    mw_goes_low_when_isolated_4 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_4;
    mw_goes_low_when_isolated_5 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_3;
    mw_goes_low_when_isolated_6 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_2;
    mw_goes_low_when_isolated_7 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_1;
  transition mw_goes_to_zero_unexplained
    mw_goes_to_zero_unexplained_0 true = 1 -> mw := zero, bus2_mw_zero, count_as_fault;
    mw_goes_to_zero_unexplained_1 true = 1 -> mw := zero, bus1_mw_zero, count_as_fault;
    mw_goes_to_zero_unexplained_2 true = 1 -> mw := zero, entered_zero_zone_MW, count_as_fault;
  transition mw_goes_normal_unexplained
    mw_goes_normal_unexplained_0 true = 1 -> mw := normal, bus2_mw_normal, count_as_fault;
    mw_goes_normal_unexplained_1 true = 1 -> mw := normal, bus1_mw_normal, count_as_fault;
    mw_goes_normal_unexplained_2 true = 1 -> mw := normal, limit_MW_Normal, count_as_fault;
  transition mw_goes_high_unexplained
    mw_goes_high_unexplained_0 true = 1 -> mw := high, bus2_mw_high, count_as_fault;
    mw_goes_high_unexplained_1 true = 1 -> mw := high, bus1_mw_high, count_as_fault;
    mw_goes_high_unexplained_2 true = 1 -> mw := high, limit_MW_High, count_as_fault;
    mw_goes_high_unexplained_3 true = 1 -> mw := high, limit_MW_High_5, count_as_fault;
    mw_goes_high_unexplained_4 true = 1 -> mw := high, limit_MW_High_4, count_as_fault;
    mw_goes_high_unexplained_5 true = 1 -> mw := high, limit_MW_High_3, count_as_fault;
    mw_goes_high_unexplained_6 true = 1 -> mw := high, limit_MW_High_2, count_as_fault;
    mw_goes_high_unexplained_7 true = 1 -> mw := high, limit_MW_High_1, count_as_fault;
  transition mw_goes_low_unexplained
    mw_goes_low_unexplained_0 true = 1 -> mw := low, bus2_mw_low, count_as_fault;
    mw_goes_low_unexplained_1 true = 1 -> mw := low, bus1_mw_low, count_as_fault;
    mw_goes_low_unexplained_2 true = 1 -> mw := low, limit_MW_Low, count_as_fault;
    mw_goes_low_unexplained_3 true = 1 -> mw := low, limit_MW_Low_5, count_as_fault;
    mw_goes_low_unexplained_4 true = 1 -> mw := low, limit_MW_Low_4, count_as_fault;
    mw_goes_low_unexplained_5 true = 1 -> mw := low, limit_MW_Low_3, count_as_fault;
    mw_goes_low_unexplained_6 true = 1 -> mw := low, limit_MW_Low_2, count_as_fault;
    mw_goes_low_unexplained_7 true = 1 -> mw := low, limit_MW_Low_1, count_as_fault;
  transition voltage_goes_normal_when_caps_in
    voltage_goes_normal_when_caps_in_0 (isolated = false AND voltage = low) -> voltage := normal, bus2_voltage_normal, check_switched_in;
    voltage_goes_normal_when_caps_in_1 (isolated = false AND voltage = low) -> voltage := normal, bus1_voltage_normal, check_switched_in;
    voltage_goes_normal_when_caps_in_2 (isolated = false AND voltage = low) -> voltage := normal, limit_KV_Normal, check_switched_in;
  transition voltage_goes_normal_when_caps_out
    voltage_goes_normal_when_caps_out_0 (isolated = false AND voltage = high) -> voltage := normal, bus2_voltage_normal, check_switched_out;
    voltage_goes_normal_when_caps_out_1 (isolated = false AND voltage = high) -> voltage := normal, bus1_voltage_normal, check_switched_out;
    voltage_goes_normal_when_caps_out_2 (isolated = false AND voltage = high) -> voltage := normal, limit_KV_Normal, check_switched_out;
  transition voltage_goes_normal_when_re_energised
    voltage_goes_normal_when_re_energised_0 (isolated = false AND iso_state_changed = true) -> voltage := high, bus2_voltage_normal;
    voltage_goes_normal_when_re_energised_1 (isolated = false AND iso_state_changed = true) -> voltage := high, bus1_voltage_normal;
    voltage_goes_normal_when_re_energised_2 (isolated = false AND iso_state_changed = true) -> voltage := normal, limit_KV_Normal;
  transition voltage_goes_high_when_re_energised
    voltage_goes_high_when_re_energised_0 (isolated = false AND iso_state_changed = true) -> voltage := high, bus2_voltage_high;
    voltage_goes_high_when_re_energised_1 (isolated = false AND iso_state_changed = true) -> voltage := high, bus1_voltage_high;
    voltage_goes_high_when_re_energised_2 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High;
    voltage_goes_high_when_re_energised_3 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_5;
    voltage_goes_high_when_re_energised_4 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_4;
    voltage_goes_high_when_re_energised_5 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_3;
    voltage_goes_high_when_re_energised_6 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_2;
    voltage_goes_high_when_re_energised_7 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_1;
  transition voltage_goes_low_when_re_energised
    voltage_goes_low_when_re_energised_0 (isolated = false AND iso_state_changed = true) -> voltage := low, bus2_voltage_low;
    voltage_goes_low_when_re_energised_1 (isolated = false AND iso_state_changed = true) -> voltage := low, bus1_voltage_low;
    voltage_goes_low_when_re_energised_2 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low;
    voltage_goes_low_when_re_energised_3 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_5;
    voltage_goes_low_when_re_energised_4 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_4;
    voltage_goes_low_when_re_energised_5 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_3;
    voltage_goes_low_when_re_energised_6 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_2;
    voltage_goes_low_when_re_energised_7 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_1;
  transition voltage_goes_to_zero_when_isolated
    voltage_goes_to_zero_when_isolated_0 (isolated = true AND iso_state_changed = true) -> voltage := zero, bus2_voltage_zero;
    voltage_goes_to_zero_when_isolated_1 (isolated = true AND iso_state_changed = true) -> voltage := zero, bus1_voltage_zero;
    voltage_goes_to_zero_when_isolated_2 (isolated = true AND iso_state_changed = true) -> voltage := zero, entered_zero_zone_KV;
  transition voltage_goes_low_when_isolated
    voltage_goes_low_when_isolated_0 (isolated = true AND iso_state_changed = true) -> voltage := low, bus2_voltage_low;
    voltage_goes_low_when_isolated_1 (isolated = true AND iso_state_changed = true) -> voltage := low, bus1_voltage_low;
    voltage_goes_low_when_isolated_2 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low;
    voltage_goes_low_when_isolated_3 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_5;
    voltage_goes_low_when_isolated_4 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_4;
    voltage_goes_low_when_isolated_5 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_3;
    voltage_goes_low_when_isolated_6 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_2;
    voltage_goes_low_when_isolated_7 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_1;
  transition voltage_goes_to_zero_unexplained
    voltage_goes_to_zero_unexplained_0 true = 1 -> voltage := zero, bus2_voltage_zero, count_as_fault;
    voltage_goes_to_zero_unexplained_1 true = 1 -> voltage := zero, bus1_voltage_zero, count_as_fault;
    voltage_goes_to_zero_unexplained_2 true = 1 -> voltage := zero, entered_zero_zone_KV, count_as_fault;
  transition voltage_goes_normal_unexplained
    voltage_goes_normal_unexplained_0 true = 1 -> voltage := normal, bus2_voltage_normal, count_as_fault;
    voltage_goes_normal_unexplained_1 true = 1 -> voltage := normal, bus1_voltage_normal, count_as_fault;
    voltage_goes_normal_unexplained_2 true = 1 -> voltage := normal, limit_KV_Normal, count_as_fault;
  transition voltage_goes_high_unexplained
    voltage_goes_high_unexplained_0 true = 1 -> voltage := high, bus2_voltage_high, count_as_fault;
    voltage_goes_high_unexplained_1 true = 1 -> voltage := high, bus1_voltage_high, count_as_fault;
    voltage_goes_high_unexplained_2 true = 1 -> voltage := high, limit_KV_High, count_as_fault;
    voltage_goes_high_unexplained_3 true = 1 -> voltage := high, limit_KV_High_5, count_as_fault;
    voltage_goes_high_unexplained_4 true = 1 -> voltage := high, limit_KV_High_4, count_as_fault;
    voltage_goes_high_unexplained_5 true = 1 -> voltage := high, limit_KV_High_3, count_as_fault;
    voltage_goes_high_unexplained_6 true = 1 -> voltage := high, limit_KV_High_2, count_as_fault;
    voltage_goes_high_unexplained_7 true = 1 -> voltage := high, limit_KV_High_1, count_as_fault;
  transition voltage_goes_low_unexplained
    voltage_goes_low_unexplained_0 true = 1 -> voltage := low, bus2_voltage_low, count_as_fault;
    voltage_goes_low_unexplained_1 true = 1 -> voltage := low, bus1_voltage_low, count_as_fault;
    voltage_goes_low_unexplained_2 true = 1 -> voltage := low, limit_KV_Low, count_as_fault;
    voltage_goes_low_unexplained_3 true = 1 -> voltage := low, limit_KV_Low_5, count_as_fault;
    voltage_goes_low_unexplained_4 true = 1 -> voltage := low, limit_KV_Low_4, count_as_fault;
    voltage_goes_low_unexplained_5 true = 1 -> voltage := low, limit_KV_Low_3, count_as_fault;
    voltage_goes_low_unexplained_6 true = 1 -> voltage := low, limit_KV_Low_2, count_as_fault;
    voltage_goes_low_unexplained_7 true = 1 -> voltage := low, limit_KV_Low_1, count_as_fault;
  transition iso_state_changed_timeout
    iso_state_changed_timeout_0 true = 1 -> iso_state_changed := false;
  triggeredby [0.0..15.0] iso_state_changed = true;
  transition iso_state_may_have_changed_timeout
    iso_state_may_have_changed_timeout_0 true = 1 -> iso_state_may_have_changed := false;
  triggeredby [0.0..15.0] iso_state_may_have_changed = true;
  transition isolator_state_change
    isolator_state_change_0 true = 1 -> iso_state_may_have_changed := true;
  triggeredby isolator_opened, isolator_closed;
  transition re_energise_isolated
    re_energise_isolated_0 (isolated = true AND iso_state_may_have_changed = true) -> isolated := false, iso_state_changed := true;
  triggeredby some_breaker_is_closed;
  transition init_state_isolated
    init_state_isolated_0 true = 1 -> isolated := true, check_isolators_open;
  transition set_state_isolated
    set_state_isolated_0 iso_state_may_have_changed = true -> isolated := true, iso_state_changed := true, check_isolators_open;
  transition finish_iso_trip
    finish_iso_trip_0 true = 1 -> no_way;
    finish_iso_trip_1 true = 1 -> iso_trip_in_progress := false, isolated := true, iso_state_changed := true, check_isolators_open;
  triggeredby [0.0..1.0] iso_trip_in_progress = true;
  transition iso_trip4
    iso_trip4_0 true = 1 -> trip4;
  triggeredby [0.0..1.0] iso_trip_in_progress = true;
  transition iso_trip3
    iso_trip3_0 true = 1 -> trip3;
  triggeredby [0.0..1.0] iso_trip_in_progress = true;
  transition iso_trip2
    iso_trip2_0 true = 1 -> trip2;
  triggeredby [0.0..1.0] iso_trip_in_progress = true;
  transition iso_trip1
    iso_trip1_0 true = 1 -> trip1;
  triggeredby [0.0..1.0] iso_trip_in_progress = true;
  transition begin_iso_trip
    begin_iso_trip_0 iso_trip_in_progress = false -> iso_trip_in_progress := true, count_as_fault;
  triggeredby some_breaker_is_closed;
}
component Line_X117_X118 = {
  connection isolatorsXYZ0 : isolator = Breaker_X69_X70;
  connection isolatorsXYZ1 : isolator = Breaker_X71_X72;
  connection isolatorsXYZ2 : isolator = Breaker_X3_X4;
  connection isolatorsXYZ3 : isolator = Breaker_X11_X12;
  connection bus2 : attached = Bus_X118;
  connection bus1 : attached = Bus_X117;
  var mvar : {zero,high,low,normal};
  var mw : {zero,high,low,normal};
  var voltage : {zero,high,low,normal};
  var iso_trip_in_progress : [0..1];
  var iso_state_may_have_changed : [0..1];
  var iso_state_changed : [0..1];
  var isolated : [0..1];
  event some_breaker_is_closed;
  event check_isolators_open;
  event check_switched_out;
  event check_switched_in;
  event trip4;
  event trip3;
  event trip2;
  event trip1;
  event bus2_mvar_zero;
  event bus2_mvar_normal;
  event bus2_mvar_high;
  event bus2_mvar_low;
  event bus2_mw_zero;
  event bus2_mw_normal;
  event bus2_mw_high;
  event bus2_mw_low;
  event bus2_voltage_zero;
  event bus2_voltage_normal;
  event bus2_voltage_high;
  event bus2_voltage_low;
  event bus1_mvar_zero;
  event bus1_mvar_normal;
  event bus1_mvar_high;
  event bus1_mvar_low;
  event bus1_mw_zero;
  event bus1_mw_normal;
  event bus1_mw_high;
  event bus1_mw_low;
  event bus1_voltage_zero;
  event bus1_voltage_normal;
  event bus1_voltage_high;
  event bus1_voltage_low;
  event count_as_fault;
  event isolator_closed;
  event isolator_opened;
  event no_way;
  event entered_zero_zone_MVAR;
  event limit_MVAR_High;
  event limit_MVAR_High_5;
  event limit_MVAR_High_4;
  event limit_MVAR_High_3;
  event limit_MVAR_High_2;
  event limit_MVAR_High_1;
  event limit_MVAR_Low;
  event limit_MVAR_Low_5;
  event limit_MVAR_Low_4;
  event limit_MVAR_Low_3;
  event limit_MVAR_Low_2;
  event limit_MVAR_Low_1;
  event limit_MVAR_Normal;
  event entered_zero_zone_MW;
  event limit_MW_High;
  event limit_MW_High_5;
  event limit_MW_High_4;
  event limit_MW_High_3;
  event limit_MW_High_2;
  event limit_MW_High_1;
  event limit_MW_Low;
  event limit_MW_Low_5;
  event limit_MW_Low_4;
  event limit_MW_Low_3;
  event limit_MW_Low_2;
  event limit_MW_Low_1;
  event limit_MW_Normal;
  event entered_zero_zone_KV;
  event limit_KV_High;
  event limit_KV_High_5;
  event limit_KV_High_4;
  event limit_KV_High_3;
  event limit_KV_High_2;
  event limit_KV_High_1;
  event limit_KV_Low;
  event limit_KV_Low_5;
  event limit_KV_Low_4;
  event limit_KV_Low_3;
  event limit_KV_Low_2;
  event limit_KV_Low_1;
  event limit_KV_Normal;
  transition mvar_goes_to_zero_unexplained
    mvar_goes_to_zero_unexplained_0 true = 1 -> mvar := zero, bus2_mvar_zero, count_as_fault;
    mvar_goes_to_zero_unexplained_1 true = 1 -> mvar := zero, bus1_mvar_zero, count_as_fault;
    mvar_goes_to_zero_unexplained_2 true = 1 -> mvar := zero, entered_zero_zone_MVAR, count_as_fault;
  transition mvar_goes_normal_unexplained
    mvar_goes_normal_unexplained_0 true = 1 -> mvar := normal, bus2_mvar_normal, count_as_fault;
    mvar_goes_normal_unexplained_1 true = 1 -> mvar := normal, bus1_mvar_normal, count_as_fault;
    mvar_goes_normal_unexplained_2 true = 1 -> mvar := normal, limit_MVAR_Normal, count_as_fault;
  transition mvar_goes_high_unexplained
    mvar_goes_high_unexplained_0 true = 1 -> mvar := high, bus2_mvar_high, count_as_fault;
    mvar_goes_high_unexplained_1 true = 1 -> mvar := high, bus1_mvar_high, count_as_fault;
    mvar_goes_high_unexplained_2 true = 1 -> mvar := high, limit_MVAR_High, count_as_fault;
    mvar_goes_high_unexplained_3 true = 1 -> mvar := high, limit_MVAR_High_5, count_as_fault;
    mvar_goes_high_unexplained_4 true = 1 -> mvar := high, limit_MVAR_High_4, count_as_fault;
    mvar_goes_high_unexplained_5 true = 1 -> mvar := high, limit_MVAR_High_3, count_as_fault;
    mvar_goes_high_unexplained_6 true = 1 -> mvar := high, limit_MVAR_High_2, count_as_fault;
    mvar_goes_high_unexplained_7 true = 1 -> mvar := high, limit_MVAR_High_1, count_as_fault;
  transition mvar_goes_low_unexplained
    mvar_goes_low_unexplained_0 true = 1 -> mvar := low, bus2_mvar_low, count_as_fault;
    mvar_goes_low_unexplained_1 true = 1 -> mvar := low, bus1_mvar_low, count_as_fault;
    mvar_goes_low_unexplained_2 true = 1 -> mvar := low, limit_MVAR_Low, count_as_fault;
    mvar_goes_low_unexplained_3 true = 1 -> mvar := low, limit_MVAR_Low_5, count_as_fault;
    mvar_goes_low_unexplained_4 true = 1 -> mvar := low, limit_MVAR_Low_4, count_as_fault;
    mvar_goes_low_unexplained_5 true = 1 -> mvar := low, limit_MVAR_Low_3, count_as_fault;
    mvar_goes_low_unexplained_6 true = 1 -> mvar := low, limit_MVAR_Low_2, count_as_fault;
    mvar_goes_low_unexplained_7 true = 1 -> mvar := low, limit_MVAR_Low_1, count_as_fault;
  transition mw_goes_normal_when_re_energised
    mw_goes_normal_when_re_energised_0 (isolated = false AND iso_state_changed = true) -> mw := high, bus2_mw_normal;
    mw_goes_normal_when_re_energised_1 (isolated = false AND iso_state_changed = true) -> mw := high, bus1_mw_normal;
    mw_goes_normal_when_re_energised_2 (isolated = false AND iso_state_changed = true) -> mw := normal, limit_MW_Normal;
  transition mw_goes_high_when_re_energised
    mw_goes_high_when_re_energised_0 (isolated = false AND iso_state_changed = true) -> mw := high, bus2_mw_high;
    mw_goes_high_when_re_energised_1 (isolated = false AND iso_state_changed = true) -> mw := high, bus1_mw_high;
    mw_goes_high_when_re_energised_2 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High;
    mw_goes_high_when_re_energised_3 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_5;
    mw_goes_high_when_re_energised_4 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_4;
    mw_goes_high_when_re_energised_5 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_3;
    mw_goes_high_when_re_energised_6 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_2;
    mw_goes_high_when_re_energised_7 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_1;
  transition mw_goes_low_when_re_energised
    mw_goes_low_when_re_energised_0 (isolated = false AND iso_state_changed = true) -> mw := low, bus2_mw_low;
    mw_goes_low_when_re_energised_1 (isolated = false AND iso_state_changed = true) -> mw := low, bus1_mw_low;
    mw_goes_low_when_re_energised_2 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low;
    mw_goes_low_when_re_energised_3 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_5;
    mw_goes_low_when_re_energised_4 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_4;
    mw_goes_low_when_re_energised_5 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_3;
    mw_goes_low_when_re_energised_6 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_2;
    mw_goes_low_when_re_energised_7 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_1;
  transition mw_goes_to_zero_when_isolated
    mw_goes_to_zero_when_isolated_0 (isolated = true AND iso_state_changed = true) -> mw := zero, bus2_mw_zero;
    mw_goes_to_zero_when_isolated_1 (isolated = true AND iso_state_changed = true) -> mw := zero, bus1_mw_zero;
    mw_goes_to_zero_when_isolated_2 (isolated = true AND iso_state_changed = true) -> mw := zero, entered_zero_zone_MW;
  transition mw_goes_low_when_isolated
    mw_goes_low_when_isolated_0 (isolated = true AND iso_state_changed = true) -> mw := low, bus2_mw_low;
    mw_goes_low_when_isolated_1 (isolated = true AND iso_state_changed = true) -> mw := low, bus1_mw_low;
    mw_goes_low_when_isolated_2 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low;
    mw_goes_low_when_isolated_3 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_5;
    mw_goes_low_when_isolated_4 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_4;
    mw_goes_low_when_isolated_5 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_3;
    mw_goes_low_when_isolated_6 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_2;
    mw_goes_low_when_isolated_7 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_1;
  transition mw_goes_to_zero_unexplained
    mw_goes_to_zero_unexplained_0 true = 1 -> mw := zero, bus2_mw_zero, count_as_fault;
    mw_goes_to_zero_unexplained_1 true = 1 -> mw := zero, bus1_mw_zero, count_as_fault;
    mw_goes_to_zero_unexplained_2 true = 1 -> mw := zero, entered_zero_zone_MW, count_as_fault;
  transition mw_goes_normal_unexplained
    mw_goes_normal_unexplained_0 true = 1 -> mw := normal, bus2_mw_normal, count_as_fault;
    mw_goes_normal_unexplained_1 true = 1 -> mw := normal, bus1_mw_normal, count_as_fault;
    mw_goes_normal_unexplained_2 true = 1 -> mw := normal, limit_MW_Normal, count_as_fault;
  transition mw_goes_high_unexplained
    mw_goes_high_unexplained_0 true = 1 -> mw := high, bus2_mw_high, count_as_fault;
    mw_goes_high_unexplained_1 true = 1 -> mw := high, bus1_mw_high, count_as_fault;
    mw_goes_high_unexplained_2 true = 1 -> mw := high, limit_MW_High, count_as_fault;
    mw_goes_high_unexplained_3 true = 1 -> mw := high, limit_MW_High_5, count_as_fault;
    mw_goes_high_unexplained_4 true = 1 -> mw := high, limit_MW_High_4, count_as_fault;
    mw_goes_high_unexplained_5 true = 1 -> mw := high, limit_MW_High_3, count_as_fault;
    mw_goes_high_unexplained_6 true = 1 -> mw := high, limit_MW_High_2, count_as_fault;
    mw_goes_high_unexplained_7 true = 1 -> mw := high, limit_MW_High_1, count_as_fault;
  transition mw_goes_low_unexplained
    mw_goes_low_unexplained_0 true = 1 -> mw := low, bus2_mw_low, count_as_fault;
    mw_goes_low_unexplained_1 true = 1 -> mw := low, bus1_mw_low, count_as_fault;
    mw_goes_low_unexplained_2 true = 1 -> mw := low, limit_MW_Low, count_as_fault;
    mw_goes_low_unexplained_3 true = 1 -> mw := low, limit_MW_Low_5, count_as_fault;
    mw_goes_low_unexplained_4 true = 1 -> mw := low, limit_MW_Low_4, count_as_fault;
    mw_goes_low_unexplained_5 true = 1 -> mw := low, limit_MW_Low_3, count_as_fault;
    mw_goes_low_unexplained_6 true = 1 -> mw := low, limit_MW_Low_2, count_as_fault;
    mw_goes_low_unexplained_7 true = 1 -> mw := low, limit_MW_Low_1, count_as_fault;
  transition voltage_goes_normal_when_caps_in
    voltage_goes_normal_when_caps_in_0 (isolated = false AND voltage = low) -> voltage := normal, bus2_voltage_normal, check_switched_in;
    voltage_goes_normal_when_caps_in_1 (isolated = false AND voltage = low) -> voltage := normal, bus1_voltage_normal, check_switched_in;
    voltage_goes_normal_when_caps_in_2 (isolated = false AND voltage = low) -> voltage := normal, limit_KV_Normal, check_switched_in;
  transition voltage_goes_normal_when_caps_out
    voltage_goes_normal_when_caps_out_0 (isolated = false AND voltage = high) -> voltage := normal, bus2_voltage_normal, check_switched_out;
    voltage_goes_normal_when_caps_out_1 (isolated = false AND voltage = high) -> voltage := normal, bus1_voltage_normal, check_switched_out;
    voltage_goes_normal_when_caps_out_2 (isolated = false AND voltage = high) -> voltage := normal, limit_KV_Normal, check_switched_out;
  transition voltage_goes_normal_when_re_energised
    voltage_goes_normal_when_re_energised_0 (isolated = false AND iso_state_changed = true) -> voltage := high, bus2_voltage_normal;
    voltage_goes_normal_when_re_energised_1 (isolated = false AND iso_state_changed = true) -> voltage := high, bus1_voltage_normal;
    voltage_goes_normal_when_re_energised_2 (isolated = false AND iso_state_changed = true) -> voltage := normal, limit_KV_Normal;
  transition voltage_goes_high_when_re_energised
    voltage_goes_high_when_re_energised_0 (isolated = false AND iso_state_changed = true) -> voltage := high, bus2_voltage_high;
    voltage_goes_high_when_re_energised_1 (isolated = false AND iso_state_changed = true) -> voltage := high, bus1_voltage_high;
    voltage_goes_high_when_re_energised_2 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High;
    voltage_goes_high_when_re_energised_3 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_5;
    voltage_goes_high_when_re_energised_4 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_4;
    voltage_goes_high_when_re_energised_5 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_3;
    voltage_goes_high_when_re_energised_6 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_2;
    voltage_goes_high_when_re_energised_7 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_1;
  transition voltage_goes_low_when_re_energised
    voltage_goes_low_when_re_energised_0 (isolated = false AND iso_state_changed = true) -> voltage := low, bus2_voltage_low;
    voltage_goes_low_when_re_energised_1 (isolated = false AND iso_state_changed = true) -> voltage := low, bus1_voltage_low;
    voltage_goes_low_when_re_energised_2 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low;
    voltage_goes_low_when_re_energised_3 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_5;
    voltage_goes_low_when_re_energised_4 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_4;
    voltage_goes_low_when_re_energised_5 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_3;
    voltage_goes_low_when_re_energised_6 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_2;
    voltage_goes_low_when_re_energised_7 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_1;
  transition voltage_goes_to_zero_when_isolated
    voltage_goes_to_zero_when_isolated_0 (isolated = true AND iso_state_changed = true) -> voltage := zero, bus2_voltage_zero;
    voltage_goes_to_zero_when_isolated_1 (isolated = true AND iso_state_changed = true) -> voltage := zero, bus1_voltage_zero;
    voltage_goes_to_zero_when_isolated_2 (isolated = true AND iso_state_changed = true) -> voltage := zero, entered_zero_zone_KV;
  transition voltage_goes_low_when_isolated
    voltage_goes_low_when_isolated_0 (isolated = true AND iso_state_changed = true) -> voltage := low, bus2_voltage_low;
    voltage_goes_low_when_isolated_1 (isolated = true AND iso_state_changed = true) -> voltage := low, bus1_voltage_low;
    voltage_goes_low_when_isolated_2 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low;
    voltage_goes_low_when_isolated_3 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_5;
    voltage_goes_low_when_isolated_4 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_4;
    voltage_goes_low_when_isolated_5 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_3;
    voltage_goes_low_when_isolated_6 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_2;
    voltage_goes_low_when_isolated_7 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_1;
  transition voltage_goes_to_zero_unexplained
    voltage_goes_to_zero_unexplained_0 true = 1 -> voltage := zero, bus2_voltage_zero, count_as_fault;
    voltage_goes_to_zero_unexplained_1 true = 1 -> voltage := zero, bus1_voltage_zero, count_as_fault;
    voltage_goes_to_zero_unexplained_2 true = 1 -> voltage := zero, entered_zero_zone_KV, count_as_fault;
  transition voltage_goes_normal_unexplained
    voltage_goes_normal_unexplained_0 true = 1 -> voltage := normal, bus2_voltage_normal, count_as_fault;
    voltage_goes_normal_unexplained_1 true = 1 -> voltage := normal, bus1_voltage_normal, count_as_fault;
    voltage_goes_normal_unexplained_2 true = 1 -> voltage := normal, limit_KV_Normal, count_as_fault;
  transition voltage_goes_high_unexplained
    voltage_goes_high_unexplained_0 true = 1 -> voltage := high, bus2_voltage_high, count_as_fault;
    voltage_goes_high_unexplained_1 true = 1 -> voltage := high, bus1_voltage_high, count_as_fault;
    voltage_goes_high_unexplained_2 true = 1 -> voltage := high, limit_KV_High, count_as_fault;
    voltage_goes_high_unexplained_3 true = 1 -> voltage := high, limit_KV_High_5, count_as_fault;
    voltage_goes_high_unexplained_4 true = 1 -> voltage := high, limit_KV_High_4, count_as_fault;
    voltage_goes_high_unexplained_5 true = 1 -> voltage := high, limit_KV_High_3, count_as_fault;
    voltage_goes_high_unexplained_6 true = 1 -> voltage := high, limit_KV_High_2, count_as_fault;
    voltage_goes_high_unexplained_7 true = 1 -> voltage := high, limit_KV_High_1, count_as_fault;
  transition voltage_goes_low_unexplained
    voltage_goes_low_unexplained_0 true = 1 -> voltage := low, bus2_voltage_low, count_as_fault;
    voltage_goes_low_unexplained_1 true = 1 -> voltage := low, bus1_voltage_low, count_as_fault;
    voltage_goes_low_unexplained_2 true = 1 -> voltage := low, limit_KV_Low, count_as_fault;
    voltage_goes_low_unexplained_3 true = 1 -> voltage := low, limit_KV_Low_5, count_as_fault;
    voltage_goes_low_unexplained_4 true = 1 -> voltage := low, limit_KV_Low_4, count_as_fault;
    voltage_goes_low_unexplained_5 true = 1 -> voltage := low, limit_KV_Low_3, count_as_fault;
    voltage_goes_low_unexplained_6 true = 1 -> voltage := low, limit_KV_Low_2, count_as_fault;
    voltage_goes_low_unexplained_7 true = 1 -> voltage := low, limit_KV_Low_1, count_as_fault;
  transition iso_state_changed_timeout
    iso_state_changed_timeout_0 true = 1 -> iso_state_changed := false;
  triggeredby [0.0..15.0] iso_state_changed = true;
  transition iso_state_may_have_changed_timeout
    iso_state_may_have_changed_timeout_0 true = 1 -> iso_state_may_have_changed := false;
  triggeredby [0.0..15.0] iso_state_may_have_changed = true;
  transition isolator_state_change
    isolator_state_change_0 true = 1 -> iso_state_may_have_changed := true;
  triggeredby isolator_opened, isolator_closed;
  transition re_energise_isolated
    re_energise_isolated_0 (isolated = true AND iso_state_may_have_changed = true) -> isolated := false, iso_state_changed := true;
  triggeredby some_breaker_is_closed;
  transition init_state_isolated
    init_state_isolated_0 true = 1 -> isolated := true, check_isolators_open;
  transition set_state_isolated
    set_state_isolated_0 iso_state_may_have_changed = true -> isolated := true, iso_state_changed := true, check_isolators_open;
  transition finish_iso_trip
    finish_iso_trip_0 true = 1 -> no_way;
    finish_iso_trip_1 true = 1 -> iso_trip_in_progress := false, isolated := true, iso_state_changed := true, check_isolators_open;
  triggeredby [0.0..1.0] iso_trip_in_progress = true;
  transition iso_trip4
    iso_trip4_0 true = 1 -> trip4;
  triggeredby [0.0..1.0] iso_trip_in_progress = true;
  transition iso_trip3
    iso_trip3_0 true = 1 -> trip3;
  triggeredby [0.0..1.0] iso_trip_in_progress = true;
  transition iso_trip2
    iso_trip2_0 true = 1 -> trip2;
  triggeredby [0.0..1.0] iso_trip_in_progress = true;
  transition iso_trip1
    iso_trip1_0 true = 1 -> trip1;
  triggeredby [0.0..1.0] iso_trip_in_progress = true;
  transition begin_iso_trip
    begin_iso_trip_0 iso_trip_in_progress = false -> iso_trip_in_progress := true, count_as_fault;
  triggeredby some_breaker_is_closed;
}
component Line_X111_X112 = {
  connection bus2 : attached = Bus_X112;
  connection bus1 : attached = Bus_X111;
  var mvar : {zero,high,low,normal};
  var mw : {zero,high,low,normal};
  var voltage : {zero,high,low,normal};
  var iso_trip_in_progress : [0..1];
  var iso_state_may_have_changed : [0..1];
  var iso_state_changed : [0..1];
  var isolated : [0..1];
  event some_breaker_is_closed;
  event check_isolators_open;
  event check_switched_out;
  event check_switched_in;
  event trip4;
  event trip3;
  event trip2;
  event trip1;
  event bus2_mvar_zero;
  event bus2_mvar_normal;
  event bus2_mvar_high;
  event bus2_mvar_low;
  event bus2_mw_zero;
  event bus2_mw_normal;
  event bus2_mw_high;
  event bus2_mw_low;
  event bus2_voltage_zero;
  event bus2_voltage_normal;
  event bus2_voltage_high;
  event bus2_voltage_low;
  event bus1_mvar_zero;
  event bus1_mvar_normal;
  event bus1_mvar_high;
  event bus1_mvar_low;
  event bus1_mw_zero;
  event bus1_mw_normal;
  event bus1_mw_high;
  event bus1_mw_low;
  event bus1_voltage_zero;
  event bus1_voltage_normal;
  event bus1_voltage_high;
  event bus1_voltage_low;
  event count_as_fault;
  event isolator_closed;
  event isolator_opened;
  event no_way;
  event entered_zero_zone_MVAR;
  event limit_MVAR_High;
  event limit_MVAR_High_5;
  event limit_MVAR_High_4;
  event limit_MVAR_High_3;
  event limit_MVAR_High_2;
  event limit_MVAR_High_1;
  event limit_MVAR_Low;
  event limit_MVAR_Low_5;
  event limit_MVAR_Low_4;
  event limit_MVAR_Low_3;
  event limit_MVAR_Low_2;
  event limit_MVAR_Low_1;
  event limit_MVAR_Normal;
  event entered_zero_zone_MW;
  event limit_MW_High;
  event limit_MW_High_5;
  event limit_MW_High_4;
  event limit_MW_High_3;
  event limit_MW_High_2;
  event limit_MW_High_1;
  event limit_MW_Low;
  event limit_MW_Low_5;
  event limit_MW_Low_4;
  event limit_MW_Low_3;
  event limit_MW_Low_2;
  event limit_MW_Low_1;
  event limit_MW_Normal;
  event entered_zero_zone_KV;
  event limit_KV_High;
  event limit_KV_High_5;
  event limit_KV_High_4;
  event limit_KV_High_3;
  event limit_KV_High_2;
  event limit_KV_High_1;
  event limit_KV_Low;
  event limit_KV_Low_5;
  event limit_KV_Low_4;
  event limit_KV_Low_3;
  event limit_KV_Low_2;
  event limit_KV_Low_1;
  event limit_KV_Normal;
  transition mvar_goes_to_zero_unexplained
    mvar_goes_to_zero_unexplained_0 true = 1 -> mvar := zero, bus2_mvar_zero, count_as_fault;
    mvar_goes_to_zero_unexplained_1 true = 1 -> mvar := zero, bus1_mvar_zero, count_as_fault;
    mvar_goes_to_zero_unexplained_2 true = 1 -> mvar := zero, entered_zero_zone_MVAR, count_as_fault;
  transition mvar_goes_normal_unexplained
    mvar_goes_normal_unexplained_0 true = 1 -> mvar := normal, bus2_mvar_normal, count_as_fault;
    mvar_goes_normal_unexplained_1 true = 1 -> mvar := normal, bus1_mvar_normal, count_as_fault;
    mvar_goes_normal_unexplained_2 true = 1 -> mvar := normal, limit_MVAR_Normal, count_as_fault;
  transition mvar_goes_high_unexplained
    mvar_goes_high_unexplained_0 true = 1 -> mvar := high, bus2_mvar_high, count_as_fault;
    mvar_goes_high_unexplained_1 true = 1 -> mvar := high, bus1_mvar_high, count_as_fault;
    mvar_goes_high_unexplained_2 true = 1 -> mvar := high, limit_MVAR_High, count_as_fault;
    mvar_goes_high_unexplained_3 true = 1 -> mvar := high, limit_MVAR_High_5, count_as_fault;
    mvar_goes_high_unexplained_4 true = 1 -> mvar := high, limit_MVAR_High_4, count_as_fault;
    mvar_goes_high_unexplained_5 true = 1 -> mvar := high, limit_MVAR_High_3, count_as_fault;
    mvar_goes_high_unexplained_6 true = 1 -> mvar := high, limit_MVAR_High_2, count_as_fault;
    mvar_goes_high_unexplained_7 true = 1 -> mvar := high, limit_MVAR_High_1, count_as_fault;
  transition mvar_goes_low_unexplained
    mvar_goes_low_unexplained_0 true = 1 -> mvar := low, bus2_mvar_low, count_as_fault;
    mvar_goes_low_unexplained_1 true = 1 -> mvar := low, bus1_mvar_low, count_as_fault;
    mvar_goes_low_unexplained_2 true = 1 -> mvar := low, limit_MVAR_Low, count_as_fault;
    mvar_goes_low_unexplained_3 true = 1 -> mvar := low, limit_MVAR_Low_5, count_as_fault;
    mvar_goes_low_unexplained_4 true = 1 -> mvar := low, limit_MVAR_Low_4, count_as_fault;
    mvar_goes_low_unexplained_5 true = 1 -> mvar := low, limit_MVAR_Low_3, count_as_fault;
    mvar_goes_low_unexplained_6 true = 1 -> mvar := low, limit_MVAR_Low_2, count_as_fault;
    mvar_goes_low_unexplained_7 true = 1 -> mvar := low, limit_MVAR_Low_1, count_as_fault;
  transition mw_goes_normal_when_re_energised
    mw_goes_normal_when_re_energised_0 (isolated = false AND iso_state_changed = true) -> mw := high, bus2_mw_normal;
    mw_goes_normal_when_re_energised_1 (isolated = false AND iso_state_changed = true) -> mw := high, bus1_mw_normal;
    mw_goes_normal_when_re_energised_2 (isolated = false AND iso_state_changed = true) -> mw := normal, limit_MW_Normal;
  transition mw_goes_high_when_re_energised
    mw_goes_high_when_re_energised_0 (isolated = false AND iso_state_changed = true) -> mw := high, bus2_mw_high;
    mw_goes_high_when_re_energised_1 (isolated = false AND iso_state_changed = true) -> mw := high, bus1_mw_high;
    mw_goes_high_when_re_energised_2 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High;
    mw_goes_high_when_re_energised_3 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_5;
    mw_goes_high_when_re_energised_4 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_4;
    mw_goes_high_when_re_energised_5 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_3;
    mw_goes_high_when_re_energised_6 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_2;
    mw_goes_high_when_re_energised_7 (isolated = false AND iso_state_changed = true) -> mw := high, limit_MW_High_1;
  transition mw_goes_low_when_re_energised
    mw_goes_low_when_re_energised_0 (isolated = false AND iso_state_changed = true) -> mw := low, bus2_mw_low;
    mw_goes_low_when_re_energised_1 (isolated = false AND iso_state_changed = true) -> mw := low, bus1_mw_low;
    mw_goes_low_when_re_energised_2 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low;
    mw_goes_low_when_re_energised_3 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_5;
    mw_goes_low_when_re_energised_4 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_4;
    mw_goes_low_when_re_energised_5 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_3;
    mw_goes_low_when_re_energised_6 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_2;
    mw_goes_low_when_re_energised_7 (isolated = false AND iso_state_changed = true) -> mw := low, limit_MW_Low_1;
  transition mw_goes_to_zero_when_isolated
    mw_goes_to_zero_when_isolated_0 (isolated = true AND iso_state_changed = true) -> mw := zero, bus2_mw_zero;
    mw_goes_to_zero_when_isolated_1 (isolated = true AND iso_state_changed = true) -> mw := zero, bus1_mw_zero;
    mw_goes_to_zero_when_isolated_2 (isolated = true AND iso_state_changed = true) -> mw := zero, entered_zero_zone_MW;
  transition mw_goes_low_when_isolated
    mw_goes_low_when_isolated_0 (isolated = true AND iso_state_changed = true) -> mw := low, bus2_mw_low;
    mw_goes_low_when_isolated_1 (isolated = true AND iso_state_changed = true) -> mw := low, bus1_mw_low;
    mw_goes_low_when_isolated_2 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low;
    mw_goes_low_when_isolated_3 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_5;
    mw_goes_low_when_isolated_4 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_4;
    mw_goes_low_when_isolated_5 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_3;
    mw_goes_low_when_isolated_6 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_2;
    mw_goes_low_when_isolated_7 (isolated = true AND iso_state_changed = true) -> mw := low, limit_MW_Low_1;
  transition mw_goes_to_zero_unexplained
    mw_goes_to_zero_unexplained_0 true = 1 -> mw := zero, bus2_mw_zero, count_as_fault;
    mw_goes_to_zero_unexplained_1 true = 1 -> mw := zero, bus1_mw_zero, count_as_fault;
    mw_goes_to_zero_unexplained_2 true = 1 -> mw := zero, entered_zero_zone_MW, count_as_fault;
  transition mw_goes_normal_unexplained
    mw_goes_normal_unexplained_0 true = 1 -> mw := normal, bus2_mw_normal, count_as_fault;
    mw_goes_normal_unexplained_1 true = 1 -> mw := normal, bus1_mw_normal, count_as_fault;
    mw_goes_normal_unexplained_2 true = 1 -> mw := normal, limit_MW_Normal, count_as_fault;
  transition mw_goes_high_unexplained
    mw_goes_high_unexplained_0 true = 1 -> mw := high, bus2_mw_high, count_as_fault;
    mw_goes_high_unexplained_1 true = 1 -> mw := high, bus1_mw_high, count_as_fault;
    mw_goes_high_unexplained_2 true = 1 -> mw := high, limit_MW_High, count_as_fault;
    mw_goes_high_unexplained_3 true = 1 -> mw := high, limit_MW_High_5, count_as_fault;
    mw_goes_high_unexplained_4 true = 1 -> mw := high, limit_MW_High_4, count_as_fault;
    mw_goes_high_unexplained_5 true = 1 -> mw := high, limit_MW_High_3, count_as_fault;
    mw_goes_high_unexplained_6 true = 1 -> mw := high, limit_MW_High_2, count_as_fault;
    mw_goes_high_unexplained_7 true = 1 -> mw := high, limit_MW_High_1, count_as_fault;
  transition mw_goes_low_unexplained
    mw_goes_low_unexplained_0 true = 1 -> mw := low, bus2_mw_low, count_as_fault;
    mw_goes_low_unexplained_1 true = 1 -> mw := low, bus1_mw_low, count_as_fault;
    mw_goes_low_unexplained_2 true = 1 -> mw := low, limit_MW_Low, count_as_fault;
    mw_goes_low_unexplained_3 true = 1 -> mw := low, limit_MW_Low_5, count_as_fault;
    mw_goes_low_unexplained_4 true = 1 -> mw := low, limit_MW_Low_4, count_as_fault;
    mw_goes_low_unexplained_5 true = 1 -> mw := low, limit_MW_Low_3, count_as_fault;
    mw_goes_low_unexplained_6 true = 1 -> mw := low, limit_MW_Low_2, count_as_fault;
    mw_goes_low_unexplained_7 true = 1 -> mw := low, limit_MW_Low_1, count_as_fault;
  transition voltage_goes_normal_when_caps_in
    voltage_goes_normal_when_caps_in_0 (isolated = false AND voltage = low) -> voltage := normal, bus2_voltage_normal, check_switched_in;
    voltage_goes_normal_when_caps_in_1 (isolated = false AND voltage = low) -> voltage := normal, bus1_voltage_normal, check_switched_in;
    voltage_goes_normal_when_caps_in_2 (isolated = false AND voltage = low) -> voltage := normal, limit_KV_Normal, check_switched_in;
  transition voltage_goes_normal_when_caps_out
    voltage_goes_normal_when_caps_out_0 (isolated = false AND voltage = high) -> voltage := normal, bus2_voltage_normal, check_switched_out;
    voltage_goes_normal_when_caps_out_1 (isolated = false AND voltage = high) -> voltage := normal, bus1_voltage_normal, check_switched_out;
    voltage_goes_normal_when_caps_out_2 (isolated = false AND voltage = high) -> voltage := normal, limit_KV_Normal, check_switched_out;
  transition voltage_goes_normal_when_re_energised
    voltage_goes_normal_when_re_energised_0 (isolated = false AND iso_state_changed = true) -> voltage := high, bus2_voltage_normal;
    voltage_goes_normal_when_re_energised_1 (isolated = false AND iso_state_changed = true) -> voltage := high, bus1_voltage_normal;
    voltage_goes_normal_when_re_energised_2 (isolated = false AND iso_state_changed = true) -> voltage := normal, limit_KV_Normal;
  transition voltage_goes_high_when_re_energised
    voltage_goes_high_when_re_energised_0 (isolated = false AND iso_state_changed = true) -> voltage := high, bus2_voltage_high;
    voltage_goes_high_when_re_energised_1 (isolated = false AND iso_state_changed = true) -> voltage := high, bus1_voltage_high;
    voltage_goes_high_when_re_energised_2 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High;
    voltage_goes_high_when_re_energised_3 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_5;
    voltage_goes_high_when_re_energised_4 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_4;
    voltage_goes_high_when_re_energised_5 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_3;
    voltage_goes_high_when_re_energised_6 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_2;
    voltage_goes_high_when_re_energised_7 (isolated = false AND iso_state_changed = true) -> voltage := high, limit_KV_High_1;
  transition voltage_goes_low_when_re_energised
    voltage_goes_low_when_re_energised_0 (isolated = false AND iso_state_changed = true) -> voltage := low, bus2_voltage_low;
    voltage_goes_low_when_re_energised_1 (isolated = false AND iso_state_changed = true) -> voltage := low, bus1_voltage_low;
    voltage_goes_low_when_re_energised_2 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low;
    voltage_goes_low_when_re_energised_3 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_5;
    voltage_goes_low_when_re_energised_4 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_4;
    voltage_goes_low_when_re_energised_5 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_3;
    voltage_goes_low_when_re_energised_6 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_2;
    voltage_goes_low_when_re_energised_7 (isolated = false AND iso_state_changed = true) -> voltage := low, limit_KV_Low_1;
  transition voltage_goes_to_zero_when_isolated
    voltage_goes_to_zero_when_isolated_0 (isolated = true AND iso_state_changed = true) -> voltage := zero, bus2_voltage_zero;
    voltage_goes_to_zero_when_isolated_1 (isolated = true AND iso_state_changed = true) -> voltage := zero, bus1_voltage_zero;
    voltage_goes_to_zero_when_isolated_2 (isolated = true AND iso_state_changed = true) -> voltage := zero, entered_zero_zone_KV;
  transition voltage_goes_low_when_isolated
    voltage_goes_low_when_isolated_0 (isolated = true AND iso_state_changed = true) -> voltage := low, bus2_voltage_low;
    voltage_goes_low_when_isolated_1 (isolated = true AND iso_state_changed = true) -> voltage := low, bus1_voltage_low;
    voltage_goes_low_when_isolated_2 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low;
    voltage_goes_low_when_isolated_3 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_5;
    voltage_goes_low_when_isolated_4 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_4;
    voltage_goes_low_when_isolated_5 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_3;
    voltage_goes_low_when_isolated_6 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_2;
    voltage_goes_low_when_isolated_7 (isolated = true AND iso_state_changed = true) -> voltage := low, limit_KV_Low_1;
  transition voltage_goes_to_zero_unexplained
    voltage_goes_to_zero_unexplained_0 true = 1 -> voltage := zero, bus2_voltage_zero, count_as_fault;
    voltage_goes_to_zero_unexplained_1 true = 1 -> voltage := zero, bus1_voltage_zero, count_as_fault;
    voltage_goes_to_zero_unexplained_2 true = 1 -> voltage := zero, entered_zero_zone_KV, count_as_fault;
  transition voltage_goes_normal_unexplained
    voltage_goes_normal_unexplained_0 true = 1 -> voltage := normal, bus2_voltage_normal, count_as_fault;
    voltage_goes_normal_unexplained_1 true = 1 -> voltage := normal, bus1_voltage_normal, count_as_fault;
    voltage_goes_normal_unexplained_2 true = 1 -> voltage := normal, limit_KV_Normal, count_as_fault;
  transition voltage_goes_high_unexplained
    voltage_goes_high_unexplained_0 true = 1 -> voltage := high, bus2_voltage_high, count_as_fault;
    voltage_goes_high_unexplained_1 true = 1 -> voltage := high, bus1_voltage_high, count_as_fault;
    voltage_goes_high_unexplained_2 true = 1 -> voltage := high, limit_KV_High, count_as_fault;
    voltage_goes_high_unexplained_3 true = 1 -> voltage := high, limit_KV_High_5, count_as_fault;
    voltage_goes_high_unexplained_4 true = 1 -> voltage := high, limit_KV_High_4, count_as_fault;
    voltage_goes_high_unexplained_5 true = 1 -> voltage := high, limit_KV_High_3, count_as_fault;
    voltage_goes_high_unexplained_6 true = 1 -> voltage := high, limit_KV_High_2, count_as_fault;
    voltage_goes_high_unexplained_7 true = 1 -> voltage := high, limit_KV_High_1, count_as_fault;
  transition voltage_goes_low_unexplained
    voltage_goes_low_unexplained_0 true = 1 -> voltage := low, bus2_voltage_low, count_as_fault;
    voltage_goes_low_unexplained_1 true = 1 -> voltage := low, bus1_voltage_low, count_as_fault;
    voltage_goes_low_unexplained_2 true = 1 -> voltage := low, limit_KV_Low, count_as_fault;
    voltage_goes_low_unexplained_3 true = 1 -> voltage := low, limit_KV_Low_5, count_as_fault;
    voltage_goes_low_unexplained_4 true = 1 -> voltage := low, limit_KV_Low_4, count_as_fault;
    voltage_goes_low_unexplained_5 true = 1 -> voltage := low, limit_KV_Low_3, count_as_fault;
    voltage_goes_low_unexplained_6 true = 1 -> voltage := low, limit_KV_Low_2, count_as_fault;
    voltage_goes_low_unexplained_7 true = 1 -> voltage := low, limit_KV_Low_1, count_as_fault;
  transition iso_state_changed_timeout
    iso_state_changed_timeout_0 true = 1 -> iso_state_changed := false;
  triggeredby [0.0..15.0] iso_state_changed = true;
  transition iso_state_may_have_changed_timeout
    iso_state_may_have_changed_timeout_0 true = 1 -> iso_state_may_have_changed := false;
  triggeredby [0.0..15.0] iso_state_may_have_changed = true;
  transition isolator_state_change
    isolator_state_change_0 true = 1 -> iso_state_may_have_changed := true;
  triggeredby isolator_opened, isolator_closed;
  transition re_energise_isolated
    re_energise_isolated_0 (isolated = true AND iso_state_may_have_changed = true) -> isolated := false, iso_state_changed := true;
  triggeredby some_breaker_is_closed;
  transition init_state_isolated
    init_state_isolated_0 true = 1 -> isolated := true, check_isolators_open;
  transition set_state_isolated
    set_state_isolated_0 iso_state_may_have_changed = true -> isolated := true, iso_state_changed := true, check_isolators_open;
  transition finish_iso_trip
    finish_iso_trip_0 true = 1 -> no_way;
    finish_iso_trip_1 true = 1 -> iso_trip_in_progress := false, isolated := true, iso_state_changed := true, check_isolators_open;
  triggeredby [0.0..1.0] iso_trip_in_progress = true;
  transition iso_trip4
    iso_trip4_0 true = 1 -> trip4;
  triggeredby [0.0..1.0] iso_trip_in_progress = true;
  transition iso_trip3
    iso_trip3_0 true = 1 -> trip3;
  triggeredby [0.0..1.0] iso_trip_in_progress = true;
  transition iso_trip2
    iso_trip2_0 true = 1 -> trip2;
  triggeredby [0.0..1.0] iso_trip_in_progress = true;
  transition iso_trip1
    iso_trip1_0 true = 1 -> trip1;
  triggeredby [0.0..1.0] iso_trip_in_progress = true;
  transition begin_iso_trip
    begin_iso_trip_0 iso_trip_in_progress = false -> iso_trip_in_progress := true, count_as_fault;
  triggeredby some_breaker_is_closed;
}
component network = {
  var reactor_switched_in_ff : [0..1];
  var reactor_switched_out_ff : [0..1];
  var capacitor_switched_in_ff : [0..1];
  var capacitor_switched_out_ff : [0..1];
  var reactor_switched_in : [0..1];
  var reactor_switched_out : [0..1];
  var capacitor_switched_in : [0..1];
  var capacitor_switched_out : [0..1];
  event check_switched_out;
  event check_switched_in;
  event reactor_isolator_close;
  event reactor_isolator_open;
  event capacitor_isolator_close;
  event capacitor_isolator_open;
  event IMPOSSIBLE;
  transition check_switched_out_transition
    check_switched_out_transition_0 NOT capacitor_switched_out = true -> IMPOSSIBLE;
    check_switched_out_transition_1 capacitor_switched_out = true -> capacitor_switched_out := true;
  triggeredby check_switched_out;
  transition check_switched_in_transition
    check_switched_in_transition_0 NOT capacitor_switched_in = true -> IMPOSSIBLE;
    check_switched_in_transition_1 capacitor_switched_in = true -> capacitor_switched_in := true;
  triggeredby check_switched_in;
  transition reactor_switched_in_timeout
    reactor_switched_in_timeout_0 true = 1 -> reactor_switched_in := false;
  triggeredby [0.0..15.0] reactor_switched_in = true;
  transition reactor_switched_out_timeout
    reactor_switched_out_timeout_0 true = 1 -> reactor_switched_out := false;
  triggeredby [0.0..15.0] reactor_switched_out = true;
  transition capacitor_switched_in_timeout
    capacitor_switched_in_timeout_0 true = 1 -> capacitor_switched_in := false;
  triggeredby [0.0..15.0] capacitor_switched_in = true;
  transition capacitor_switched_out_timeout
    capacitor_switched_out_timeout_0 true = 1 -> capacitor_switched_out := false;
  triggeredby [0.0..15.0] capacitor_switched_out = true;
  transition reactor_switch_in
    reactor_switch_in_0 reactor_switched_in_ff = false -> reactor_switched_in := true, reactor_switched_in_ff := true;
    reactor_switch_in_1 reactor_switched_in_ff = true -> reactor_switched_in := true, reactor_switched_in_ff := false;
  triggeredby reactor_isolator_close;
  transition reactor_switch_out
    reactor_switch_out_0 reactor_switched_out_ff = false -> reactor_switched_out := true, reactor_switched_out_ff := true;
    reactor_switch_out_1 reactor_switched_out_ff = true -> reactor_switched_out := true, reactor_switched_out_ff := false;
  triggeredby reactor_isolator_open;
  transition capacitor_switch_in
    capacitor_switch_in_0 capacitor_switched_in_ff = false -> capacitor_switched_in := true, capacitor_switched_in_ff := true;
    capacitor_switch_in_1 capacitor_switched_in_ff = true -> capacitor_switched_in := true, capacitor_switched_in_ff := false;
  triggeredby capacitor_isolator_close;
  transition capacitor_switch_out
    capacitor_switch_out_0 capacitor_switched_out_ff = false -> capacitor_switched_out := true, capacitor_switched_out_ff := true;
    capacitor_switch_out_1 capacitor_switched_out_ff = true -> capacitor_switched_out := true, capacitor_switched_out_ff := false;
  triggeredby capacitor_isolator_open;
}
synchronize Breaker_X43_X44.state_change_close,network.reactor_isolator_close;
synchronize Breaker_X43_X44.state_change_open,network.reactor_isolator_open;
synchronize Breaker_X31_X32.state_change_close,network.reactor_isolator_close;
synchronize Breaker_X31_X32.state_change_open,network.reactor_isolator_open;
synchronize Breaker_X29_X30.state_change_close,network.reactor_isolator_close;
synchronize Breaker_X29_X30.state_change_open,network.reactor_isolator_open;
synchronize Breaker_X27_X28.state_change_close,network.reactor_isolator_close;
synchronize Breaker_X27_X28.state_change_open,network.reactor_isolator_open;
synchronize Breaker_X25_X26.state_change_close,network.reactor_isolator_close;
synchronize Breaker_X25_X26.state_change_open,network.reactor_isolator_open;
synchronize Breaker_X73_X74.state_change_close,network.capacitor_isolator_close;
synchronize Breaker_X73_X74.state_change_open,network.capacitor_isolator_open;
synchronize Breaker_X63_X64.state_change_close,network.capacitor_isolator_close;
synchronize Breaker_X63_X64.state_change_open,network.capacitor_isolator_open;
synchronize Breaker_X41_X42.state_change_close,network.capacitor_isolator_close;
synchronize Breaker_X41_X42.state_change_open,network.capacitor_isolator_open;
synchronize Bus_X76.check_generators_off,Generator_X100.check_generator_off;
synchronize Breaker_X75_X76.state_change_close,Bus_X76.set_isolated_false;
synchronize Breaker_X75_X76.state_change_open,Bus_X76.set_isolated_true;
synchronize Generator_X100.isolator_close,Breaker_X75_X76.close;
synchronize Generator_X100.isolator_open,Breaker_X75_X76.open;
synchronize Bus_X60.check_generators_off,Generator_X99.check_generator_off;
synchronize Breaker_X59_X60.state_change_close,Bus_X60.set_isolated_false;
synchronize Breaker_X59_X60.state_change_open,Bus_X60.set_isolated_true;
synchronize Generator_X99.isolator_close,Breaker_X59_X60.close;
synchronize Generator_X99.isolator_open,Breaker_X59_X60.open;
synchronize Bus_X58.check_generators_off,Generator_X98.check_generator_off;
synchronize Breaker_X57_X58.state_change_close,Bus_X58.set_isolated_false;
synchronize Breaker_X57_X58.state_change_open,Bus_X58.set_isolated_true;
synchronize Generator_X98.isolator_close,Breaker_X57_X58.close;
synchronize Generator_X98.isolator_open,Breaker_X57_X58.open;
synchronize Bus_X56.check_generators_off,Generator_X97.check_generator_off;
synchronize Breaker_X55_X56.state_change_close,Bus_X56.set_isolated_false;
synchronize Breaker_X55_X56.state_change_open,Bus_X56.set_isolated_true;
synchronize Generator_X97.isolator_close,Breaker_X55_X56.close;
synchronize Generator_X97.isolator_open,Breaker_X55_X56.open;
synchronize Bus_X54.check_generators_off,Generator_X96.check_generator_off;
synchronize Breaker_X53_X54.state_change_close,Bus_X54.set_isolated_false;
synchronize Breaker_X53_X54.state_change_open,Bus_X54.set_isolated_true;
synchronize Generator_X96.isolator_close,Breaker_X53_X54.close;
synchronize Generator_X96.isolator_open,Breaker_X53_X54.open;
synchronize Bus_X52.check_generators_off,Generator_X95.check_generator_off;
synchronize Breaker_X51_X52.state_change_close,Bus_X52.set_isolated_false;
synchronize Breaker_X51_X52.state_change_open,Bus_X52.set_isolated_true;
synchronize Generator_X95.isolator_close,Breaker_X51_X52.close;
synchronize Generator_X95.isolator_open,Breaker_X51_X52.open;
synchronize Bus_X40.check_generators_off,Generator_X94.check_generator_off;
synchronize Breaker_X39_X40.state_change_close,Bus_X40.set_isolated_false;
synchronize Breaker_X39_X40.state_change_open,Bus_X40.set_isolated_true;
synchronize Generator_X94.isolator_close,Breaker_X39_X40.close;
synchronize Generator_X94.isolator_open,Breaker_X39_X40.open;
synchronize Bus_X38.check_generators_off,Generator_X93.check_generator_off;
synchronize Breaker_X37_X38.state_change_close,Bus_X38.set_isolated_false;
synchronize Breaker_X37_X38.state_change_open,Bus_X38.set_isolated_true;
synchronize Generator_X93.isolator_close,Breaker_X37_X38.close;
synchronize Generator_X93.isolator_open,Breaker_X37_X38.open;
synchronize Bus_X36.check_generators_off,Generator_X92.check_generator_off;
synchronize Breaker_X35_X36.state_change_close,Bus_X36.set_isolated_false;
synchronize Breaker_X35_X36.state_change_open,Bus_X36.set_isolated_true;
synchronize Generator_X92.isolator_close,Breaker_X35_X36.close;
synchronize Generator_X92.isolator_open,Breaker_X35_X36.open;
synchronize Bus_X34.check_generators_off,Generator_X91.check_generator_off;
synchronize Breaker_X33_X34.state_change_close,Bus_X34.set_isolated_false;
synchronize Breaker_X33_X34.state_change_open,Bus_X34.set_isolated_true;
synchronize Generator_X91.isolator_close,Breaker_X33_X34.close;
synchronize Generator_X91.isolator_open,Breaker_X33_X34.open;
synchronize Line_X117_X118.bus2_mvar_zero,Bus_X118.mvar_zero;
synchronize Line_X117_X118.bus2_mvar_normal,Bus_X118.mvar_normal;
synchronize Line_X117_X118.bus2_mvar_high,Bus_X118.mvar_high;
synchronize Line_X117_X118.bus2_mvar_low,Bus_X118.mvar_low;
synchronize Line_X117_X118.bus2_mw_zero,Bus_X118.mw_zero;
synchronize Line_X117_X118.bus2_mw_normal,Bus_X118.mw_normal;
synchronize Line_X117_X118.bus2_mw_high,Bus_X118.mw_high;
synchronize Line_X117_X118.bus2_mw_low,Bus_X118.mw_low;
synchronize Line_X117_X118.bus2_voltage_zero,Bus_X118.voltage_zero;
synchronize Line_X117_X118.bus2_voltage_normal,Bus_X118.voltage_normal;
synchronize Line_X117_X118.bus2_voltage_high,Bus_X118.voltage_high;
synchronize Line_X117_X118.bus2_voltage_low,Bus_X118.voltage_low;
synchronize Line_X117_X118.bus1_mvar_zero,Bus_X117.mvar_zero;
synchronize Line_X117_X118.bus1_mvar_normal,Bus_X117.mvar_normal;
synchronize Line_X117_X118.bus1_mvar_high,Bus_X117.mvar_high;
synchronize Line_X117_X118.bus1_mvar_low,Bus_X117.mvar_low;
synchronize Line_X117_X118.bus1_mw_zero,Bus_X117.mw_zero;
synchronize Line_X117_X118.bus1_mw_normal,Bus_X117.mw_normal;
synchronize Line_X117_X118.bus1_mw_high,Bus_X117.mw_high;
synchronize Line_X117_X118.bus1_mw_low,Bus_X117.mw_low;
synchronize Line_X117_X118.bus1_voltage_zero,Bus_X117.voltage_zero;
synchronize Line_X117_X118.bus1_voltage_normal,Bus_X117.voltage_normal;
synchronize Line_X117_X118.bus1_voltage_high,Bus_X117.voltage_high;
synchronize Line_X117_X118.bus1_voltage_low,Bus_X117.voltage_low;
synchronize Line_X115_X116.bus2_mvar_zero,Bus_X116.mvar_zero;
synchronize Line_X115_X116.bus2_mvar_normal,Bus_X116.mvar_normal;
synchronize Line_X115_X116.bus2_mvar_high,Bus_X116.mvar_high;
synchronize Line_X115_X116.bus2_mvar_low,Bus_X116.mvar_low;
synchronize Line_X115_X116.bus2_mw_zero,Bus_X116.mw_zero;
synchronize Line_X115_X116.bus2_mw_normal,Bus_X116.mw_normal;
synchronize Line_X115_X116.bus2_mw_high,Bus_X116.mw_high;
synchronize Line_X115_X116.bus2_mw_low,Bus_X116.mw_low;
synchronize Line_X115_X116.bus2_voltage_zero,Bus_X116.voltage_zero;
synchronize Line_X115_X116.bus2_voltage_normal,Bus_X116.voltage_normal;
synchronize Line_X115_X116.bus2_voltage_high,Bus_X116.voltage_high;
synchronize Line_X115_X116.bus2_voltage_low,Bus_X116.voltage_low;
synchronize Line_X115_X116.bus1_mvar_zero,Bus_X115.mvar_zero;
synchronize Line_X115_X116.bus1_mvar_normal,Bus_X115.mvar_normal;
synchronize Line_X115_X116.bus1_mvar_high,Bus_X115.mvar_high;
synchronize Line_X115_X116.bus1_mvar_low,Bus_X115.mvar_low;
synchronize Line_X115_X116.bus1_mw_zero,Bus_X115.mw_zero;
synchronize Line_X115_X116.bus1_mw_normal,Bus_X115.mw_normal;
synchronize Line_X115_X116.bus1_mw_high,Bus_X115.mw_high;
synchronize Line_X115_X116.bus1_mw_low,Bus_X115.mw_low;
synchronize Line_X115_X116.bus1_voltage_zero,Bus_X115.voltage_zero;
synchronize Line_X115_X116.bus1_voltage_normal,Bus_X115.voltage_normal;
synchronize Line_X115_X116.bus1_voltage_high,Bus_X115.voltage_high;
synchronize Line_X115_X116.bus1_voltage_low,Bus_X115.voltage_low;
synchronize Line_X113_X114.bus2_mvar_zero,Bus_X114.mvar_zero;
synchronize Line_X113_X114.bus2_mvar_normal,Bus_X114.mvar_normal;
synchronize Line_X113_X114.bus2_mvar_high,Bus_X114.mvar_high;
synchronize Line_X113_X114.bus2_mvar_low,Bus_X114.mvar_low;
synchronize Line_X113_X114.bus2_mw_zero,Bus_X114.mw_zero;
synchronize Line_X113_X114.bus2_mw_normal,Bus_X114.mw_normal;
synchronize Line_X113_X114.bus2_mw_high,Bus_X114.mw_high;
synchronize Line_X113_X114.bus2_mw_low,Bus_X114.mw_low;
synchronize Line_X113_X114.bus2_voltage_zero,Bus_X114.voltage_zero;
synchronize Line_X113_X114.bus2_voltage_normal,Bus_X114.voltage_normal;
synchronize Line_X113_X114.bus2_voltage_high,Bus_X114.voltage_high;
synchronize Line_X113_X114.bus2_voltage_low,Bus_X114.voltage_low;
synchronize Line_X113_X114.bus1_mvar_zero,Bus_X113.mvar_zero;
synchronize Line_X113_X114.bus1_mvar_normal,Bus_X113.mvar_normal;
synchronize Line_X113_X114.bus1_mvar_high,Bus_X113.mvar_high;
synchronize Line_X113_X114.bus1_mvar_low,Bus_X113.mvar_low;
synchronize Line_X113_X114.bus1_mw_zero,Bus_X113.mw_zero;
synchronize Line_X113_X114.bus1_mw_normal,Bus_X113.mw_normal;
synchronize Line_X113_X114.bus1_mw_high,Bus_X113.mw_high;
synchronize Line_X113_X114.bus1_mw_low,Bus_X113.mw_low;
synchronize Line_X113_X114.bus1_voltage_zero,Bus_X113.voltage_zero;
synchronize Line_X113_X114.bus1_voltage_normal,Bus_X113.voltage_normal;
synchronize Line_X113_X114.bus1_voltage_high,Bus_X113.voltage_high;
synchronize Line_X113_X114.bus1_voltage_low,Bus_X113.voltage_low;
synchronize Line_X111_X112.bus2_mvar_zero,Bus_X112.mvar_zero;
synchronize Line_X111_X112.bus2_mvar_normal,Bus_X112.mvar_normal;
synchronize Line_X111_X112.bus2_mvar_high,Bus_X112.mvar_high;
synchronize Line_X111_X112.bus2_mvar_low,Bus_X112.mvar_low;
synchronize Line_X111_X112.bus2_mw_zero,Bus_X112.mw_zero;
synchronize Line_X111_X112.bus2_mw_normal,Bus_X112.mw_normal;
synchronize Line_X111_X112.bus2_mw_high,Bus_X112.mw_high;
synchronize Line_X111_X112.bus2_mw_low,Bus_X112.mw_low;
synchronize Line_X111_X112.bus2_voltage_zero,Bus_X112.voltage_zero;
synchronize Line_X111_X112.bus2_voltage_normal,Bus_X112.voltage_normal;
synchronize Line_X111_X112.bus2_voltage_high,Bus_X112.voltage_high;
synchronize Line_X111_X112.bus2_voltage_low,Bus_X112.voltage_low;
synchronize Line_X111_X112.bus1_mvar_zero,Bus_X111.mvar_zero;
synchronize Line_X111_X112.bus1_mvar_normal,Bus_X111.mvar_normal;
synchronize Line_X111_X112.bus1_mvar_high,Bus_X111.mvar_high;
synchronize Line_X111_X112.bus1_mvar_low,Bus_X111.mvar_low;
synchronize Line_X111_X112.bus1_mw_zero,Bus_X111.mw_zero;
synchronize Line_X111_X112.bus1_mw_normal,Bus_X111.mw_normal;
synchronize Line_X111_X112.bus1_mw_high,Bus_X111.mw_high;
synchronize Line_X111_X112.bus1_mw_low,Bus_X111.mw_low;
synchronize Line_X111_X112.bus1_voltage_zero,Bus_X111.voltage_zero;
synchronize Line_X111_X112.bus1_voltage_normal,Bus_X111.voltage_normal;
synchronize Line_X111_X112.bus1_voltage_high,Bus_X111.voltage_high;
synchronize Line_X111_X112.bus1_voltage_low,Bus_X111.voltage_low;
synchronize Line_X109_X110.bus2_mvar_zero,Bus_X110.mvar_zero;
synchronize Line_X109_X110.bus2_mvar_normal,Bus_X110.mvar_normal;
synchronize Line_X109_X110.bus2_mvar_high,Bus_X110.mvar_high;
synchronize Line_X109_X110.bus2_mvar_low,Bus_X110.mvar_low;
synchronize Line_X109_X110.bus2_mw_zero,Bus_X110.mw_zero;
synchronize Line_X109_X110.bus2_mw_normal,Bus_X110.mw_normal;
synchronize Line_X109_X110.bus2_mw_high,Bus_X110.mw_high;
synchronize Line_X109_X110.bus2_mw_low,Bus_X110.mw_low;
synchronize Line_X109_X110.bus2_voltage_zero,Bus_X110.voltage_zero;
synchronize Line_X109_X110.bus2_voltage_normal,Bus_X110.voltage_normal;
synchronize Line_X109_X110.bus2_voltage_high,Bus_X110.voltage_high;
synchronize Line_X109_X110.bus2_voltage_low,Bus_X110.voltage_low;
synchronize Line_X109_X110.bus1_mvar_zero,Bus_X109.mvar_zero;
synchronize Line_X109_X110.bus1_mvar_normal,Bus_X109.mvar_normal;
synchronize Line_X109_X110.bus1_mvar_high,Bus_X109.mvar_high;
synchronize Line_X109_X110.bus1_mvar_low,Bus_X109.mvar_low;
synchronize Line_X109_X110.bus1_mw_zero,Bus_X109.mw_zero;
synchronize Line_X109_X110.bus1_mw_normal,Bus_X109.mw_normal;
synchronize Line_X109_X110.bus1_mw_high,Bus_X109.mw_high;
synchronize Line_X109_X110.bus1_mw_low,Bus_X109.mw_low;
synchronize Line_X109_X110.bus1_voltage_zero,Bus_X109.voltage_zero;
synchronize Line_X109_X110.bus1_voltage_normal,Bus_X109.voltage_normal;
synchronize Line_X109_X110.bus1_voltage_high,Bus_X109.voltage_high;
synchronize Line_X109_X110.bus1_voltage_low,Bus_X109.voltage_low;
synchronize Line_X107_X108.bus2_mvar_zero,Bus_X108.mvar_zero;
synchronize Line_X107_X108.bus2_mvar_normal,Bus_X108.mvar_normal;
synchronize Line_X107_X108.bus2_mvar_high,Bus_X108.mvar_high;
synchronize Line_X107_X108.bus2_mvar_low,Bus_X108.mvar_low;
synchronize Line_X107_X108.bus2_mw_zero,Bus_X108.mw_zero;
synchronize Line_X107_X108.bus2_mw_normal,Bus_X108.mw_normal;
synchronize Line_X107_X108.bus2_mw_high,Bus_X108.mw_high;
synchronize Line_X107_X108.bus2_mw_low,Bus_X108.mw_low;
synchronize Line_X107_X108.bus2_voltage_zero,Bus_X108.voltage_zero;
synchronize Line_X107_X108.bus2_voltage_normal,Bus_X108.voltage_normal;
synchronize Line_X107_X108.bus2_voltage_high,Bus_X108.voltage_high;
synchronize Line_X107_X108.bus2_voltage_low,Bus_X108.voltage_low;
synchronize Line_X107_X108.bus1_mvar_zero,Bus_X107.mvar_zero;
synchronize Line_X107_X108.bus1_mvar_normal,Bus_X107.mvar_normal;
synchronize Line_X107_X108.bus1_mvar_high,Bus_X107.mvar_high;
synchronize Line_X107_X108.bus1_mvar_low,Bus_X107.mvar_low;
synchronize Line_X107_X108.bus1_mw_zero,Bus_X107.mw_zero;
synchronize Line_X107_X108.bus1_mw_normal,Bus_X107.mw_normal;
synchronize Line_X107_X108.bus1_mw_high,Bus_X107.mw_high;
synchronize Line_X107_X108.bus1_mw_low,Bus_X107.mw_low;
synchronize Line_X107_X108.bus1_voltage_zero,Bus_X107.voltage_zero;
synchronize Line_X107_X108.bus1_voltage_normal,Bus_X107.voltage_normal;
synchronize Line_X107_X108.bus1_voltage_high,Bus_X107.voltage_high;
synchronize Line_X107_X108.bus1_voltage_low,Bus_X107.voltage_low;
synchronize Line_X105_X106.bus2_mvar_zero,Bus_X106.mvar_zero;
synchronize Line_X105_X106.bus2_mvar_normal,Bus_X106.mvar_normal;
synchronize Line_X105_X106.bus2_mvar_high,Bus_X106.mvar_high;
synchronize Line_X105_X106.bus2_mvar_low,Bus_X106.mvar_low;
synchronize Line_X105_X106.bus2_mw_zero,Bus_X106.mw_zero;
synchronize Line_X105_X106.bus2_mw_normal,Bus_X106.mw_normal;
synchronize Line_X105_X106.bus2_mw_high,Bus_X106.mw_high;
synchronize Line_X105_X106.bus2_mw_low,Bus_X106.mw_low;
synchronize Line_X105_X106.bus2_voltage_zero,Bus_X106.voltage_zero;
synchronize Line_X105_X106.bus2_voltage_normal,Bus_X106.voltage_normal;
synchronize Line_X105_X106.bus2_voltage_high,Bus_X106.voltage_high;
synchronize Line_X105_X106.bus2_voltage_low,Bus_X106.voltage_low;
synchronize Line_X105_X106.bus1_mvar_zero,Bus_X105.mvar_zero;
synchronize Line_X105_X106.bus1_mvar_normal,Bus_X105.mvar_normal;
synchronize Line_X105_X106.bus1_mvar_high,Bus_X105.mvar_high;
synchronize Line_X105_X106.bus1_mvar_low,Bus_X105.mvar_low;
synchronize Line_X105_X106.bus1_mw_zero,Bus_X105.mw_zero;
synchronize Line_X105_X106.bus1_mw_normal,Bus_X105.mw_normal;
synchronize Line_X105_X106.bus1_mw_high,Bus_X105.mw_high;
synchronize Line_X105_X106.bus1_mw_low,Bus_X105.mw_low;
synchronize Line_X105_X106.bus1_voltage_zero,Bus_X105.voltage_zero;
synchronize Line_X105_X106.bus1_voltage_normal,Bus_X105.voltage_normal;
synchronize Line_X105_X106.bus1_voltage_high,Bus_X105.voltage_high;
synchronize Line_X105_X106.bus1_voltage_low,Bus_X105.voltage_low;
synchronize Line_X103_X104.bus2_mvar_zero,Bus_X104.mvar_zero;
synchronize Line_X103_X104.bus2_mvar_normal,Bus_X104.mvar_normal;
synchronize Line_X103_X104.bus2_mvar_high,Bus_X104.mvar_high;
synchronize Line_X103_X104.bus2_mvar_low,Bus_X104.mvar_low;
synchronize Line_X103_X104.bus2_mw_zero,Bus_X104.mw_zero;
synchronize Line_X103_X104.bus2_mw_normal,Bus_X104.mw_normal;
synchronize Line_X103_X104.bus2_mw_high,Bus_X104.mw_high;
synchronize Line_X103_X104.bus2_mw_low,Bus_X104.mw_low;
synchronize Line_X103_X104.bus2_voltage_zero,Bus_X104.voltage_zero;
synchronize Line_X103_X104.bus2_voltage_normal,Bus_X104.voltage_normal;
synchronize Line_X103_X104.bus2_voltage_high,Bus_X104.voltage_high;
synchronize Line_X103_X104.bus2_voltage_low,Bus_X104.voltage_low;
synchronize Line_X103_X104.bus1_mvar_zero,Bus_X103.mvar_zero;
synchronize Line_X103_X104.bus1_mvar_normal,Bus_X103.mvar_normal;
synchronize Line_X103_X104.bus1_mvar_high,Bus_X103.mvar_high;
synchronize Line_X103_X104.bus1_mvar_low,Bus_X103.mvar_low;
synchronize Line_X103_X104.bus1_mw_zero,Bus_X103.mw_zero;
synchronize Line_X103_X104.bus1_mw_normal,Bus_X103.mw_normal;
synchronize Line_X103_X104.bus1_mw_high,Bus_X103.mw_high;
synchronize Line_X103_X104.bus1_mw_low,Bus_X103.mw_low;
synchronize Line_X103_X104.bus1_voltage_zero,Bus_X103.voltage_zero;
synchronize Line_X103_X104.bus1_voltage_normal,Bus_X103.voltage_normal;
synchronize Line_X103_X104.bus1_voltage_high,Bus_X103.voltage_high;
synchronize Line_X103_X104.bus1_voltage_low,Bus_X103.voltage_low;
synchronize Line_X101_X102.bus2_mvar_zero,Bus_X102.mvar_zero;
synchronize Line_X101_X102.bus2_mvar_normal,Bus_X102.mvar_normal;
synchronize Line_X101_X102.bus2_mvar_high,Bus_X102.mvar_high;
synchronize Line_X101_X102.bus2_mvar_low,Bus_X102.mvar_low;
synchronize Line_X101_X102.bus2_mw_zero,Bus_X102.mw_zero;
synchronize Line_X101_X102.bus2_mw_normal,Bus_X102.mw_normal;
synchronize Line_X101_X102.bus2_mw_high,Bus_X102.mw_high;
synchronize Line_X101_X102.bus2_mw_low,Bus_X102.mw_low;
synchronize Line_X101_X102.bus2_voltage_zero,Bus_X102.voltage_zero;
synchronize Line_X101_X102.bus2_voltage_normal,Bus_X102.voltage_normal;
synchronize Line_X101_X102.bus2_voltage_high,Bus_X102.voltage_high;
synchronize Line_X101_X102.bus2_voltage_low,Bus_X102.voltage_low;
synchronize Line_X101_X102.bus1_mvar_zero,Bus_X101.mvar_zero;
synchronize Line_X101_X102.bus1_mvar_normal,Bus_X101.mvar_normal;
synchronize Line_X101_X102.bus1_mvar_high,Bus_X101.mvar_high;
synchronize Line_X101_X102.bus1_mvar_low,Bus_X101.mvar_low;
synchronize Line_X101_X102.bus1_mw_zero,Bus_X101.mw_zero;
synchronize Line_X101_X102.bus1_mw_normal,Bus_X101.mw_normal;
synchronize Line_X101_X102.bus1_mw_high,Bus_X101.mw_high;
synchronize Line_X101_X102.bus1_mw_low,Bus_X101.mw_low;
synchronize Line_X101_X102.bus1_voltage_zero,Bus_X101.voltage_zero;
synchronize Line_X101_X102.bus1_voltage_normal,Bus_X101.voltage_normal;
synchronize Line_X101_X102.bus1_voltage_high,Bus_X101.voltage_high;
synchronize Line_X101_X102.bus1_voltage_low,Bus_X101.voltage_low;
synchronize Breaker_X11_X12.breaker_is_closed,Line_X117_X118.some_breaker_is_closed;
synchronize Breaker_X3_X4.breaker_is_closed,Line_X117_X118.some_breaker_is_closed;
synchronize Breaker_X71_X72.breaker_is_closed,Line_X117_X118.some_breaker_is_closed;
synchronize Breaker_X69_X70.breaker_is_closed,Line_X117_X118.some_breaker_is_closed;
synchronize Line_X117_X118.check_isolators_open,Breaker_X69_X70.check_isolator_open,Breaker_X71_X72.check_isolator_open,Breaker_X3_X4.check_isolator_open,Breaker_X11_X12.check_isolator_open;
synchronize Line_X117_X118.trip4,Breaker_X11_X12.simple_trip;
synchronize Line_X117_X118.trip3,Breaker_X3_X4.simple_trip;
synchronize Line_X117_X118.trip2,Breaker_X71_X72.simple_trip;
synchronize Line_X117_X118.trip1,Breaker_X69_X70.simple_trip;
synchronize Breaker_X11_X12.state_change_close,Line_X117_X118.isolator_closed;
synchronize Breaker_X11_X12.state_change_open,Line_X117_X118.isolator_opened;
synchronize Breaker_X3_X4.state_change_close,Line_X117_X118.isolator_closed;
synchronize Breaker_X3_X4.state_change_open,Line_X117_X118.isolator_opened;
synchronize Breaker_X71_X72.state_change_close,Line_X117_X118.isolator_closed;
synchronize Breaker_X71_X72.state_change_open,Line_X117_X118.isolator_opened;
synchronize Breaker_X69_X70.state_change_close,Line_X117_X118.isolator_closed;
synchronize Breaker_X69_X70.state_change_open,Line_X117_X118.isolator_opened;
synchronize Breaker_X9_X10.breaker_is_closed,Line_X107_X108.some_breaker_is_closed;
synchronize Breaker_X1_X2.breaker_is_closed,Line_X107_X108.some_breaker_is_closed;
synchronize Breaker_X65_X66.breaker_is_closed,Line_X107_X108.some_breaker_is_closed;
synchronize Breaker_X67_X68.breaker_is_closed,Line_X107_X108.some_breaker_is_closed;
synchronize Line_X107_X108.check_isolators_open,Breaker_X67_X68.check_isolator_open,Breaker_X65_X66.check_isolator_open,Breaker_X1_X2.check_isolator_open,Breaker_X9_X10.check_isolator_open;
synchronize Line_X107_X108.trip4,Breaker_X9_X10.simple_trip;
synchronize Line_X107_X108.trip3,Breaker_X1_X2.simple_trip;
synchronize Line_X107_X108.trip2,Breaker_X65_X66.simple_trip;
synchronize Line_X107_X108.trip1,Breaker_X67_X68.simple_trip;
synchronize Breaker_X9_X10.state_change_close,Line_X107_X108.isolator_closed;
synchronize Breaker_X9_X10.state_change_open,Line_X107_X108.isolator_opened;
synchronize Breaker_X1_X2.state_change_close,Line_X107_X108.isolator_closed;
synchronize Breaker_X1_X2.state_change_open,Line_X107_X108.isolator_opened;
synchronize Breaker_X65_X66.state_change_close,Line_X107_X108.isolator_closed;
synchronize Breaker_X65_X66.state_change_open,Line_X107_X108.isolator_opened;
synchronize Breaker_X67_X68.state_change_close,Line_X107_X108.isolator_closed;
synchronize Breaker_X67_X68.state_change_open,Line_X107_X108.isolator_opened;
synchronize Breaker_X83_X84.breaker_is_closed,Line_X115_X116.some_breaker_is_closed;
synchronize Breaker_X45_X46.breaker_is_closed,Line_X115_X116.some_breaker_is_closed;
synchronize Breaker_X7_X8.breaker_is_closed,Line_X115_X116.some_breaker_is_closed;
synchronize Breaker_X5_X6.breaker_is_closed,Line_X115_X116.some_breaker_is_closed;
synchronize Line_X115_X116.check_isolators_open,Breaker_X5_X6.check_isolator_open,Breaker_X7_X8.check_isolator_open,Breaker_X45_X46.check_isolator_open,Breaker_X83_X84.check_isolator_open;
synchronize Line_X115_X116.trip4,Breaker_X83_X84.simple_trip;
synchronize Line_X115_X116.trip3,Breaker_X45_X46.simple_trip;
synchronize Line_X115_X116.trip2,Breaker_X7_X8.simple_trip;
synchronize Line_X115_X116.trip1,Breaker_X5_X6.simple_trip;
synchronize Breaker_X83_X84.state_change_close,Line_X115_X116.isolator_closed;
synchronize Breaker_X83_X84.state_change_open,Line_X115_X116.isolator_opened;
synchronize Breaker_X45_X46.state_change_close,Line_X115_X116.isolator_closed;
synchronize Breaker_X45_X46.state_change_open,Line_X115_X116.isolator_opened;
synchronize Breaker_X7_X8.state_change_close,Line_X115_X116.isolator_closed;
synchronize Breaker_X7_X8.state_change_open,Line_X115_X116.isolator_opened;
synchronize Breaker_X5_X6.state_change_close,Line_X115_X116.isolator_closed;
synchronize Breaker_X5_X6.state_change_open,Line_X115_X116.isolator_opened;
synchronize Breaker_X81_X82.breaker_is_closed,Line_X113_X114.some_breaker_is_closed;
synchronize Breaker_X47_X48.breaker_is_closed,Line_X113_X114.some_breaker_is_closed;
synchronize Breaker_X79_X80.breaker_is_closed,Line_X113_X114.some_breaker_is_closed;
synchronize Breaker_X77_X78.breaker_is_closed,Line_X113_X114.some_breaker_is_closed;
synchronize Line_X113_X114.check_isolators_open,Breaker_X77_X78.check_isolator_open,Breaker_X79_X80.check_isolator_open,Breaker_X47_X48.check_isolator_open,Breaker_X81_X82.check_isolator_open;
synchronize Line_X113_X114.trip4,Breaker_X81_X82.simple_trip;
synchronize Line_X113_X114.trip3,Breaker_X47_X48.simple_trip;
synchronize Line_X113_X114.trip2,Breaker_X79_X80.simple_trip;
synchronize Line_X113_X114.trip1,Breaker_X77_X78.simple_trip;
synchronize Breaker_X81_X82.state_change_close,Line_X113_X114.isolator_closed;
synchronize Breaker_X81_X82.state_change_open,Line_X113_X114.isolator_opened;
synchronize Breaker_X47_X48.state_change_close,Line_X113_X114.isolator_closed;
synchronize Breaker_X47_X48.state_change_open,Line_X113_X114.isolator_opened;
synchronize Breaker_X79_X80.state_change_close,Line_X113_X114.isolator_closed;
synchronize Breaker_X79_X80.state_change_open,Line_X113_X114.isolator_opened;
synchronize Breaker_X77_X78.state_change_close,Line_X113_X114.isolator_closed;
synchronize Breaker_X77_X78.state_change_open,Line_X113_X114.isolator_opened;
synchronize Bus_X128.check_switched_out,network.check_switched_out;
synchronize Bus_X128.check_switched_in,network.check_switched_in;
synchronize Bus_X111.check_switched_out,network.check_switched_out;
synchronize Bus_X111.check_switched_in,network.check_switched_in;
synchronize Bus_X127.check_switched_out,network.check_switched_out;
synchronize Bus_X127.check_switched_in,network.check_switched_in;
synchronize Bus_X76.check_switched_out,network.check_switched_out;
synchronize Bus_X76.check_switched_in,network.check_switched_in;
synchronize Bus_X126.check_switched_out,network.check_switched_out;
synchronize Bus_X126.check_switched_in,network.check_switched_in;
synchronize Bus_X117.check_switched_out,network.check_switched_out;
synchronize Bus_X117.check_switched_in,network.check_switched_in;
synchronize Bus_X109.check_switched_out,network.check_switched_out;
synchronize Bus_X109.check_switched_in,network.check_switched_in;
synchronize Bus_X107.check_switched_out,network.check_switched_out;
synchronize Bus_X107.check_switched_in,network.check_switched_in;
synchronize Bus_X104.check_switched_out,network.check_switched_out;
synchronize Bus_X104.check_switched_in,network.check_switched_in;
synchronize Bus_X106.check_switched_out,network.check_switched_out;
synchronize Bus_X106.check_switched_in,network.check_switched_in;
synchronize Bus_X112.check_switched_out,network.check_switched_out;
synchronize Bus_X112.check_switched_in,network.check_switched_in;
synchronize Bus_X125.check_switched_out,network.check_switched_out;
synchronize Bus_X125.check_switched_in,network.check_switched_in;
synchronize Bus_X60.check_switched_out,network.check_switched_out;
synchronize Bus_X60.check_switched_in,network.check_switched_in;
synchronize Bus_X58.check_switched_out,network.check_switched_out;
synchronize Bus_X58.check_switched_in,network.check_switched_in;
synchronize Bus_X56.check_switched_out,network.check_switched_out;
synchronize Bus_X56.check_switched_in,network.check_switched_in;
synchronize Bus_X54.check_switched_out,network.check_switched_out;
synchronize Bus_X54.check_switched_in,network.check_switched_in;
synchronize Bus_X52.check_switched_out,network.check_switched_out;
synchronize Bus_X52.check_switched_in,network.check_switched_in;
synchronize Bus_X105.check_switched_out,network.check_switched_out;
synchronize Bus_X105.check_switched_in,network.check_switched_in;
synchronize Bus_X114.check_switched_out,network.check_switched_out;
synchronize Bus_X114.check_switched_in,network.check_switched_in;
synchronize Bus_X116.check_switched_out,network.check_switched_out;
synchronize Bus_X116.check_switched_in,network.check_switched_in;
synchronize Bus_X124.check_switched_out,network.check_switched_out;
synchronize Bus_X124.check_switched_in,network.check_switched_in;
synchronize Bus_X123.check_switched_out,network.check_switched_out;
synchronize Bus_X123.check_switched_in,network.check_switched_in;
synchronize Bus_X102.check_switched_out,network.check_switched_out;
synchronize Bus_X102.check_switched_in,network.check_switched_in;
synchronize Bus_X103.check_switched_out,network.check_switched_out;
synchronize Bus_X103.check_switched_in,network.check_switched_in;
synchronize Bus_X40.check_switched_out,network.check_switched_out;
synchronize Bus_X40.check_switched_in,network.check_switched_in;
synchronize Bus_X38.check_switched_out,network.check_switched_out;
synchronize Bus_X38.check_switched_in,network.check_switched_in;
synchronize Bus_X36.check_switched_out,network.check_switched_out;
synchronize Bus_X36.check_switched_in,network.check_switched_in;
synchronize Bus_X34.check_switched_out,network.check_switched_out;
synchronize Bus_X34.check_switched_in,network.check_switched_in;
synchronize Bus_X110.check_switched_out,network.check_switched_out;
synchronize Bus_X110.check_switched_in,network.check_switched_in;
synchronize Bus_X122.check_switched_out,network.check_switched_out;
synchronize Bus_X122.check_switched_in,network.check_switched_in;
synchronize Bus_X121.check_switched_out,network.check_switched_out;
synchronize Bus_X121.check_switched_in,network.check_switched_in;
synchronize Bus_X85.check_switched_out,network.check_switched_out;
synchronize Bus_X85.check_switched_in,network.check_switched_in;
synchronize Bus_X120.check_switched_out,network.check_switched_out;
synchronize Bus_X120.check_switched_in,network.check_switched_in;
synchronize Bus_X113.check_switched_out,network.check_switched_out;
synchronize Bus_X113.check_switched_in,network.check_switched_in;
synchronize Bus_X115.check_switched_out,network.check_switched_out;
synchronize Bus_X115.check_switched_in,network.check_switched_in;
synchronize Bus_X118.check_switched_out,network.check_switched_out;
synchronize Bus_X118.check_switched_in,network.check_switched_in;
synchronize Bus_X108.check_switched_out,network.check_switched_out;
synchronize Bus_X108.check_switched_in,network.check_switched_in;
synchronize Bus_X101.check_switched_out,network.check_switched_out;
synchronize Bus_X101.check_switched_in,network.check_switched_in;
synchronize Bus_X119.check_switched_out,network.check_switched_out;
synchronize Bus_X119.check_switched_in,network.check_switched_in;
synchronize Line_X117_X118.check_switched_out,network.check_switched_out;
synchronize Line_X117_X118.check_switched_in,network.check_switched_in;
synchronize Line_X115_X116.check_switched_out,network.check_switched_out;
synchronize Line_X115_X116.check_switched_in,network.check_switched_in;
synchronize Line_X113_X114.check_switched_out,network.check_switched_out;
synchronize Line_X113_X114.check_switched_in,network.check_switched_in;
synchronize Line_X111_X112.check_switched_out,network.check_switched_out;
synchronize Line_X111_X112.check_switched_in,network.check_switched_in;
synchronize Line_X109_X110.check_switched_out,network.check_switched_out;
synchronize Line_X109_X110.check_switched_in,network.check_switched_in;
synchronize Line_X107_X108.check_switched_out,network.check_switched_out;
synchronize Line_X107_X108.check_switched_in,network.check_switched_in;
synchronize Line_X105_X106.check_switched_out,network.check_switched_out;
synchronize Line_X105_X106.check_switched_in,network.check_switched_in;
synchronize Line_X103_X104.check_switched_out,network.check_switched_out;
synchronize Line_X103_X104.check_switched_in,network.check_switched_in;
synchronize Line_X101_X102.check_switched_out,network.check_switched_out;
synchronize Line_X101_X102.check_switched_in,network.check_switched_in;
Bus_X128.iso_state_changed := false;
Bus_X128.isolated := false;
Bus_X111.iso_state_changed := false;
Bus_X111.isolated := false;
Bus_X127.iso_state_changed := false;
Bus_X127.isolated := false;
Bus_X76.iso_state_changed := false;
Bus_X76.isolated := false;
Bus_X126.iso_state_changed := false;
Bus_X126.isolated := false;
Bus_X117.iso_state_changed := false;
Bus_X117.isolated := false;
Bus_X109.iso_state_changed := false;
Bus_X109.isolated := false;
Bus_X107.iso_state_changed := false;
Bus_X107.isolated := false;
Bus_X104.iso_state_changed := false;
Bus_X104.isolated := false;
Bus_X106.iso_state_changed := false;
Bus_X106.isolated := false;
Bus_X112.iso_state_changed := false;
Bus_X112.isolated := false;
Bus_X125.iso_state_changed := false;
Bus_X125.isolated := false;
Bus_X60.iso_state_changed := false;
Bus_X60.isolated := false;
Bus_X58.iso_state_changed := false;
Bus_X58.isolated := false;
Bus_X56.iso_state_changed := false;
Bus_X56.isolated := false;
Bus_X54.iso_state_changed := false;
Bus_X54.isolated := false;
Bus_X52.iso_state_changed := false;
Bus_X52.isolated := false;
Bus_X105.iso_state_changed := false;
Bus_X105.isolated := false;
Bus_X114.iso_state_changed := false;
Bus_X114.isolated := false;
Bus_X116.iso_state_changed := false;
Bus_X116.isolated := false;
Bus_X124.iso_state_changed := false;
Bus_X124.isolated := false;
Bus_X123.iso_state_changed := false;
Bus_X123.isolated := false;
Bus_X102.iso_state_changed := false;
Bus_X102.isolated := false;
Bus_X103.iso_state_changed := false;
Bus_X103.isolated := false;
Bus_X40.iso_state_changed := false;
Bus_X40.isolated := false;
Bus_X38.iso_state_changed := false;
Bus_X38.isolated := false;
Bus_X36.iso_state_changed := false;
Bus_X36.isolated := false;
Bus_X34.iso_state_changed := false;
Bus_X34.isolated := false;
Bus_X110.iso_state_changed := false;
Bus_X110.isolated := false;
Bus_X122.iso_state_changed := false;
Bus_X122.isolated := false;
Bus_X121.iso_state_changed := false;
Bus_X121.isolated := false;
Bus_X85.iso_state_changed := false;
Bus_X85.isolated := false;
Bus_X120.iso_state_changed := false;
Bus_X120.isolated := false;
Bus_X113.iso_state_changed := false;
Bus_X113.isolated := false;
Bus_X115.iso_state_changed := false;
Bus_X115.isolated := false;
Bus_X118.iso_state_changed := false;
Bus_X118.isolated := false;
Bus_X108.iso_state_changed := false;
Bus_X108.isolated := false;
Bus_X101.iso_state_changed := false;
Bus_X101.isolated := false;
Bus_X119.iso_state_changed := false;
Bus_X119.isolated := false;
Line_X117_X118.iso_trip_in_progress := false;
Line_X117_X118.iso_state_may_have_changed := false;
Line_X117_X118.iso_state_changed := false;
Line_X117_X118.isolated := false;
Line_X115_X116.iso_trip_in_progress := false;
Line_X115_X116.iso_state_may_have_changed := false;
Line_X115_X116.iso_state_changed := false;
Line_X115_X116.isolated := false;
Line_X113_X114.iso_trip_in_progress := false;
Line_X113_X114.iso_state_may_have_changed := false;
Line_X113_X114.iso_state_changed := false;
Line_X113_X114.isolated := false;
Line_X111_X112.iso_trip_in_progress := false;
Line_X111_X112.iso_state_may_have_changed := false;
Line_X111_X112.iso_state_changed := false;
Line_X111_X112.isolated := false;
Line_X109_X110.iso_trip_in_progress := false;
Line_X109_X110.iso_state_may_have_changed := false;
Line_X109_X110.iso_state_changed := false;
Line_X109_X110.isolated := false;
Line_X107_X108.iso_trip_in_progress := false;
Line_X107_X108.iso_state_may_have_changed := false;
Line_X107_X108.iso_state_changed := false;
Line_X107_X108.isolated := false;
Line_X105_X106.iso_trip_in_progress := false;
Line_X105_X106.iso_state_may_have_changed := false;
Line_X105_X106.iso_state_changed := false;
Line_X105_X106.isolated := false;
Line_X103_X104.iso_trip_in_progress := false;
Line_X103_X104.iso_state_may_have_changed := false;
Line_X103_X104.iso_state_changed := false;
Line_X103_X104.isolated := false;
Line_X101_X102.iso_trip_in_progress := false;
Line_X101_X102.iso_state_may_have_changed := false;
Line_X101_X102.iso_state_changed := false;
Line_X101_X102.isolated := false;
Generator_X100.runback := false;
Generator_X100.status_changing := false;
Generator_X99.runback := false;
Generator_X99.status_changing := false;
Generator_X98.runback := false;
Generator_X98.status_changing := false;
Generator_X97.runback := false;
Generator_X97.status_changing := false;
Generator_X96.runback := false;
Generator_X96.status_changing := false;
Generator_X95.runback := false;
Generator_X95.status_changing := false;
Generator_X94.runback := false;
Generator_X94.status_changing := false;
Generator_X93.runback := false;
Generator_X93.status_changing := false;
Generator_X92.runback := false;
Generator_X92.status_changing := false;
Generator_X91.runback := false;
Generator_X91.status_changing := false;
Disconnector_X89_X90.commanded_closed := false;
Disconnector_X89_X90.commanded_open := false;
Disconnector_X86_X88.commanded_closed := false;
Disconnector_X86_X88.commanded_open := false;
Disconnector_X86_X87.commanded_closed := false;
Disconnector_X86_X87.commanded_open := false;
Disconnector_X85_X19.commanded_closed := false;
Disconnector_X85_X19.commanded_open := false;
Breaker_X83_X84.auto_reopen_wait := false;
Breaker_X83_X84.auto_reclose_wait := false;
Breaker_X83_X84.commanded_ar_non_auto := false;
Breaker_X83_X84.commanded_ar_auto := false;
Breaker_X83_X84.commanded_closed := false;
Breaker_X83_X84.commanded_open := false;
Breaker_X83_X84.lockout := false;
Breaker_X81_X82.auto_reopen_wait := false;
Breaker_X81_X82.auto_reclose_wait := false;
Breaker_X81_X82.commanded_ar_non_auto := false;
Breaker_X81_X82.commanded_ar_auto := false;
Breaker_X81_X82.commanded_closed := false;
Breaker_X81_X82.commanded_open := false;
Breaker_X81_X82.lockout := false;
Breaker_X79_X80.auto_reopen_wait := false;
Breaker_X79_X80.auto_reclose_wait := false;
Breaker_X79_X80.commanded_ar_non_auto := false;
Breaker_X79_X80.commanded_ar_auto := false;
Breaker_X79_X80.commanded_closed := false;
Breaker_X79_X80.commanded_open := false;
Breaker_X79_X80.lockout := false;
Breaker_X77_X78.auto_reopen_wait := false;
Breaker_X77_X78.auto_reclose_wait := false;
Breaker_X77_X78.commanded_ar_non_auto := false;
Breaker_X77_X78.commanded_ar_auto := false;
Breaker_X77_X78.commanded_closed := false;
Breaker_X77_X78.commanded_open := false;
Breaker_X77_X78.lockout := false;
Breaker_X75_X76.auto_reopen_wait := false;
Breaker_X75_X76.auto_reclose_wait := false;
Breaker_X75_X76.commanded_ar_non_auto := false;
Breaker_X75_X76.commanded_ar_auto := false;
Breaker_X75_X76.commanded_closed := false;
Breaker_X75_X76.commanded_open := false;
Breaker_X75_X76.lockout := false;
Breaker_X73_X74.auto_reopen_wait := false;
Breaker_X73_X74.auto_reclose_wait := false;
Breaker_X73_X74.commanded_ar_non_auto := false;
Breaker_X73_X74.commanded_ar_auto := false;
Breaker_X73_X74.commanded_closed := false;
Breaker_X73_X74.commanded_open := false;
Breaker_X73_X74.lockout := false;
Breaker_X71_X72.auto_reopen_wait := false;
Breaker_X71_X72.auto_reclose_wait := false;
Breaker_X71_X72.commanded_ar_non_auto := false;
Breaker_X71_X72.commanded_ar_auto := false;
Breaker_X71_X72.commanded_closed := false;
Breaker_X71_X72.commanded_open := false;
Breaker_X71_X72.lockout := false;
Breaker_X69_X70.auto_reopen_wait := false;
Breaker_X69_X70.auto_reclose_wait := false;
Breaker_X69_X70.commanded_ar_non_auto := false;
Breaker_X69_X70.commanded_ar_auto := false;
Breaker_X69_X70.commanded_closed := false;
Breaker_X69_X70.commanded_open := false;
Breaker_X69_X70.lockout := false;
Breaker_X67_X68.auto_reopen_wait := false;
Breaker_X67_X68.auto_reclose_wait := false;
Breaker_X67_X68.commanded_ar_non_auto := false;
Breaker_X67_X68.commanded_ar_auto := false;
Breaker_X67_X68.commanded_closed := false;
Breaker_X67_X68.commanded_open := false;
Breaker_X67_X68.lockout := false;
Breaker_X65_X66.auto_reopen_wait := false;
Breaker_X65_X66.auto_reclose_wait := false;
Breaker_X65_X66.commanded_ar_non_auto := false;
Breaker_X65_X66.commanded_ar_auto := false;
Breaker_X65_X66.commanded_closed := false;
Breaker_X65_X66.commanded_open := false;
Breaker_X65_X66.lockout := false;
Breaker_X63_X64.auto_reopen_wait := false;
Breaker_X63_X64.auto_reclose_wait := false;
Breaker_X63_X64.commanded_ar_non_auto := false;
Breaker_X63_X64.commanded_ar_auto := false;
Breaker_X63_X64.commanded_closed := false;
Breaker_X63_X64.commanded_open := false;
Breaker_X63_X64.lockout := false;
Breaker_X61_X62.auto_reopen_wait := false;
Breaker_X61_X62.auto_reclose_wait := false;
Breaker_X61_X62.commanded_ar_non_auto := false;
Breaker_X61_X62.commanded_ar_auto := false;
Breaker_X61_X62.commanded_closed := false;
Breaker_X61_X62.commanded_open := false;
Breaker_X61_X62.lockout := false;
Breaker_X59_X60.auto_reopen_wait := false;
Breaker_X59_X60.auto_reclose_wait := false;
Breaker_X59_X60.commanded_ar_non_auto := false;
Breaker_X59_X60.commanded_ar_auto := false;
Breaker_X59_X60.commanded_closed := false;
Breaker_X59_X60.commanded_open := false;
Breaker_X59_X60.lockout := false;
Breaker_X57_X58.auto_reopen_wait := false;
Breaker_X57_X58.auto_reclose_wait := false;
Breaker_X57_X58.commanded_ar_non_auto := false;
Breaker_X57_X58.commanded_ar_auto := false;
Breaker_X57_X58.commanded_closed := false;
Breaker_X57_X58.commanded_open := false;
Breaker_X57_X58.lockout := false;
Breaker_X55_X56.auto_reopen_wait := false;
Breaker_X55_X56.auto_reclose_wait := false;
Breaker_X55_X56.commanded_ar_non_auto := false;
Breaker_X55_X56.commanded_ar_auto := false;
Breaker_X55_X56.commanded_closed := false;
Breaker_X55_X56.commanded_open := false;
Breaker_X55_X56.lockout := false;
Breaker_X53_X54.auto_reopen_wait := false;
Breaker_X53_X54.auto_reclose_wait := false;
Breaker_X53_X54.commanded_ar_non_auto := false;
Breaker_X53_X54.commanded_ar_auto := false;
Breaker_X53_X54.commanded_closed := false;
Breaker_X53_X54.commanded_open := false;
Breaker_X53_X54.lockout := false;
Breaker_X51_X52.auto_reopen_wait := false;
Breaker_X51_X52.auto_reclose_wait := false;
Breaker_X51_X52.commanded_ar_non_auto := false;
Breaker_X51_X52.commanded_ar_auto := false;
Breaker_X51_X52.commanded_closed := false;
Breaker_X51_X52.commanded_open := false;
Breaker_X51_X52.lockout := false;
Breaker_X49_X50.auto_reopen_wait := false;
Breaker_X49_X50.auto_reclose_wait := false;
Breaker_X49_X50.commanded_ar_non_auto := false;
Breaker_X49_X50.commanded_ar_auto := false;
Breaker_X49_X50.commanded_closed := false;
Breaker_X49_X50.commanded_open := false;
Breaker_X49_X50.lockout := false;
Breaker_X47_X48.auto_reopen_wait := false;
Breaker_X47_X48.auto_reclose_wait := false;
Breaker_X47_X48.commanded_ar_non_auto := false;
Breaker_X47_X48.commanded_ar_auto := false;
Breaker_X47_X48.commanded_closed := false;
Breaker_X47_X48.commanded_open := false;
Breaker_X47_X48.lockout := false;
Breaker_X45_X46.auto_reopen_wait := false;
Breaker_X45_X46.auto_reclose_wait := false;
Breaker_X45_X46.commanded_ar_non_auto := false;
Breaker_X45_X46.commanded_ar_auto := false;
Breaker_X45_X46.commanded_closed := false;
Breaker_X45_X46.commanded_open := false;
Breaker_X45_X46.lockout := false;
Breaker_X43_X44.auto_reopen_wait := false;
Breaker_X43_X44.auto_reclose_wait := false;
Breaker_X43_X44.commanded_ar_non_auto := false;
Breaker_X43_X44.commanded_ar_auto := false;
Breaker_X43_X44.commanded_closed := false;
Breaker_X43_X44.commanded_open := false;
Breaker_X43_X44.lockout := false;
Breaker_X41_X42.auto_reopen_wait := false;
Breaker_X41_X42.auto_reclose_wait := false;
Breaker_X41_X42.commanded_ar_non_auto := false;
Breaker_X41_X42.commanded_ar_auto := false;
Breaker_X41_X42.commanded_closed := false;
Breaker_X41_X42.commanded_open := false;
Breaker_X41_X42.lockout := false;
Breaker_X39_X40.auto_reopen_wait := false;
Breaker_X39_X40.auto_reclose_wait := false;
Breaker_X39_X40.commanded_ar_non_auto := false;
Breaker_X39_X40.commanded_ar_auto := false;
Breaker_X39_X40.commanded_closed := false;
Breaker_X39_X40.commanded_open := false;
Breaker_X39_X40.lockout := false;
Breaker_X37_X38.auto_reopen_wait := false;
Breaker_X37_X38.auto_reclose_wait := false;
Breaker_X37_X38.commanded_ar_non_auto := false;
Breaker_X37_X38.commanded_ar_auto := false;
Breaker_X37_X38.commanded_closed := false;
Breaker_X37_X38.commanded_open := false;
Breaker_X37_X38.lockout := false;
Breaker_X35_X36.auto_reopen_wait := false;
Breaker_X35_X36.auto_reclose_wait := false;
Breaker_X35_X36.commanded_ar_non_auto := false;
Breaker_X35_X36.commanded_ar_auto := false;
Breaker_X35_X36.commanded_closed := false;
Breaker_X35_X36.commanded_open := false;
Breaker_X35_X36.lockout := false;
Breaker_X33_X34.auto_reopen_wait := false;
Breaker_X33_X34.auto_reclose_wait := false;
Breaker_X33_X34.commanded_ar_non_auto := false;
Breaker_X33_X34.commanded_ar_auto := false;
Breaker_X33_X34.commanded_closed := false;
Breaker_X33_X34.commanded_open := false;
Breaker_X33_X34.lockout := false;
Breaker_X31_X32.auto_reopen_wait := false;
Breaker_X31_X32.auto_reclose_wait := false;
Breaker_X31_X32.commanded_ar_non_auto := false;
Breaker_X31_X32.commanded_ar_auto := false;
Breaker_X31_X32.commanded_closed := false;
Breaker_X31_X32.commanded_open := false;
Breaker_X31_X32.lockout := false;
Breaker_X29_X30.auto_reopen_wait := false;
Breaker_X29_X30.auto_reclose_wait := false;
Breaker_X29_X30.commanded_ar_non_auto := false;
Breaker_X29_X30.commanded_ar_auto := false;
Breaker_X29_X30.commanded_closed := false;
Breaker_X29_X30.commanded_open := false;
Breaker_X29_X30.lockout := false;
Breaker_X27_X28.auto_reopen_wait := false;
Breaker_X27_X28.auto_reclose_wait := false;
Breaker_X27_X28.commanded_ar_non_auto := false;
Breaker_X27_X28.commanded_ar_auto := false;
Breaker_X27_X28.commanded_closed := false;
Breaker_X27_X28.commanded_open := false;
Breaker_X27_X28.lockout := false;
Breaker_X25_X26.auto_reopen_wait := false;
Breaker_X25_X26.auto_reclose_wait := false;
Breaker_X25_X26.commanded_ar_non_auto := false;
Breaker_X25_X26.commanded_ar_auto := false;
Breaker_X25_X26.commanded_closed := false;
Breaker_X25_X26.commanded_open := false;
Breaker_X25_X26.lockout := false;
Breaker_X23_X24.auto_reopen_wait := false;
Breaker_X23_X24.auto_reclose_wait := false;
Breaker_X23_X24.commanded_ar_non_auto := false;
Breaker_X23_X24.commanded_ar_auto := false;
Breaker_X23_X24.commanded_closed := false;
Breaker_X23_X24.commanded_open := false;
Breaker_X23_X24.lockout := false;
Breaker_X21_X22.auto_reopen_wait := false;
Breaker_X21_X22.auto_reclose_wait := false;
Breaker_X21_X22.commanded_ar_non_auto := false;
Breaker_X21_X22.commanded_ar_auto := false;
Breaker_X21_X22.commanded_closed := false;
Breaker_X21_X22.commanded_open := false;
Breaker_X21_X22.lockout := false;
Breaker_X19_X20.auto_reopen_wait := false;
Breaker_X19_X20.auto_reclose_wait := false;
Breaker_X19_X20.commanded_ar_non_auto := false;
Breaker_X19_X20.commanded_ar_auto := false;
Breaker_X19_X20.commanded_closed := false;
Breaker_X19_X20.commanded_open := false;
Breaker_X19_X20.lockout := false;
Breaker_X17_X18.auto_reopen_wait := false;
Breaker_X17_X18.auto_reclose_wait := false;
Breaker_X17_X18.commanded_ar_non_auto := false;
Breaker_X17_X18.commanded_ar_auto := false;
Breaker_X17_X18.commanded_closed := false;
Breaker_X17_X18.commanded_open := false;
Breaker_X17_X18.lockout := false;
Breaker_X15_X16.auto_reopen_wait := false;
Breaker_X15_X16.auto_reclose_wait := false;
Breaker_X15_X16.commanded_ar_non_auto := false;
Breaker_X15_X16.commanded_ar_auto := false;
Breaker_X15_X16.commanded_closed := false;
Breaker_X15_X16.commanded_open := false;
Breaker_X15_X16.lockout := false;
Breaker_X13_X14.auto_reopen_wait := false;
Breaker_X13_X14.auto_reclose_wait := false;
Breaker_X13_X14.commanded_ar_non_auto := false;
Breaker_X13_X14.commanded_ar_auto := false;
Breaker_X13_X14.commanded_closed := false;
Breaker_X13_X14.commanded_open := false;
Breaker_X13_X14.lockout := false;
Breaker_X11_X12.auto_reopen_wait := false;
Breaker_X11_X12.auto_reclose_wait := false;
Breaker_X11_X12.commanded_ar_non_auto := false;
Breaker_X11_X12.commanded_ar_auto := false;
Breaker_X11_X12.commanded_closed := false;
Breaker_X11_X12.commanded_open := false;
Breaker_X11_X12.lockout := false;
Breaker_X9_X10.auto_reopen_wait := false;
Breaker_X9_X10.auto_reclose_wait := false;
Breaker_X9_X10.commanded_ar_non_auto := false;
Breaker_X9_X10.commanded_ar_auto := false;
Breaker_X9_X10.commanded_closed := false;
Breaker_X9_X10.commanded_open := false;
Breaker_X9_X10.lockout := false;
Breaker_X7_X8.auto_reopen_wait := false;
Breaker_X7_X8.auto_reclose_wait := false;
Breaker_X7_X8.commanded_ar_non_auto := false;
Breaker_X7_X8.commanded_ar_auto := false;
Breaker_X7_X8.commanded_closed := false;
Breaker_X7_X8.commanded_open := false;
Breaker_X7_X8.lockout := false;
Breaker_X5_X6.auto_reopen_wait := false;
Breaker_X5_X6.auto_reclose_wait := false;
Breaker_X5_X6.commanded_ar_non_auto := false;
Breaker_X5_X6.commanded_ar_auto := false;
Breaker_X5_X6.commanded_closed := false;
Breaker_X5_X6.commanded_open := false;
Breaker_X5_X6.lockout := false;
Breaker_X3_X4.auto_reopen_wait := false;
Breaker_X3_X4.auto_reclose_wait := false;
Breaker_X3_X4.commanded_ar_non_auto := false;
Breaker_X3_X4.commanded_ar_auto := false;
Breaker_X3_X4.commanded_closed := false;
Breaker_X3_X4.commanded_open := false;
Breaker_X3_X4.lockout := false;
Breaker_X1_X2.auto_reopen_wait := false;
Breaker_X1_X2.auto_reclose_wait := false;
Breaker_X1_X2.commanded_ar_non_auto := false;
Breaker_X1_X2.commanded_ar_auto := false;
Breaker_X1_X2.commanded_closed := false;
Breaker_X1_X2.commanded_open := false;
Breaker_X1_X2.lockout := false;
network.reactor_switched_in_ff := false;
network.reactor_switched_out_ff := false;
network.capacitor_switched_in_ff := false;
network.capacitor_switched_out_ff := false;
network.reactor_switched_in := false;
network.reactor_switched_out := false;
network.capacitor_switched_in := false;
network.capacitor_switched_out := false;
observable Breaker_X1_X2.IMPOSSIBLE;
observable Breaker_X1_X2.command_cb_ar_status_NON_AUTO;
observable Breaker_X1_X2.command_cb_ar_status_AUTO;
observable Breaker_X1_X2.command_ar_supy_control_status_NON_AUTO;
observable Breaker_X1_X2.command_ar_supy_control_status_AUTO;
observable Breaker_X1_X2.command_cb_state_closed;
observable Breaker_X1_X2.command_cb_state_open;
observable Breaker_X1_X2.cb_ar_status_NON_AUTO;
observable Breaker_X1_X2.cb_ar_status_AUTO;
observable Breaker_X1_X2.ar_supy_control_status_NON_AUTO;
observable Breaker_X1_X2.ar_supy_control_status_AUTO;
observable Breaker_X1_X2.cb_command_fail;
observable Breaker_X1_X2.cb_state_not_responding;
observable Breaker_X1_X2.cb_state_abnormal;
observable Breaker_X1_X2.cb_state_closed;
observable Breaker_X1_X2.cb_state_open;
observable Breaker_X3_X4.IMPOSSIBLE;
observable Breaker_X3_X4.command_cb_ar_status_NON_AUTO;
observable Breaker_X3_X4.command_cb_ar_status_AUTO;
observable Breaker_X3_X4.command_ar_supy_control_status_NON_AUTO;
observable Breaker_X3_X4.command_ar_supy_control_status_AUTO;
observable Breaker_X3_X4.command_cb_state_closed;
observable Breaker_X3_X4.command_cb_state_open;
observable Breaker_X3_X4.cb_ar_status_NON_AUTO;
observable Breaker_X3_X4.cb_ar_status_AUTO;
observable Breaker_X3_X4.ar_supy_control_status_NON_AUTO;
observable Breaker_X3_X4.ar_supy_control_status_AUTO;
observable Breaker_X3_X4.cb_command_fail;
observable Breaker_X3_X4.cb_state_not_responding;
observable Breaker_X3_X4.cb_state_abnormal;
observable Breaker_X3_X4.cb_state_closed;
observable Breaker_X3_X4.cb_state_open;
observable Breaker_X5_X6.IMPOSSIBLE;
observable Breaker_X5_X6.command_cb_ar_status_NON_AUTO;
observable Breaker_X5_X6.command_cb_ar_status_AUTO;
observable Breaker_X5_X6.command_ar_supy_control_status_NON_AUTO;
observable Breaker_X5_X6.command_ar_supy_control_status_AUTO;
observable Breaker_X5_X6.command_cb_state_closed;
observable Breaker_X5_X6.command_cb_state_open;
observable Breaker_X5_X6.cb_ar_status_NON_AUTO;
observable Breaker_X5_X6.cb_ar_status_AUTO;
observable Breaker_X5_X6.ar_supy_control_status_NON_AUTO;
observable Breaker_X5_X6.ar_supy_control_status_AUTO;
observable Breaker_X5_X6.cb_command_fail;
observable Breaker_X5_X6.cb_state_not_responding;
observable Breaker_X5_X6.cb_state_abnormal;
observable Breaker_X5_X6.cb_state_closed;
observable Breaker_X5_X6.cb_state_open;
observable Breaker_X77_X78.IMPOSSIBLE;
observable Breaker_X77_X78.command_cb_ar_status_NON_AUTO;
observable Breaker_X77_X78.command_cb_ar_status_AUTO;
observable Breaker_X77_X78.command_ar_supy_control_status_NON_AUTO;
observable Breaker_X77_X78.command_ar_supy_control_status_AUTO;
observable Breaker_X77_X78.command_cb_state_closed;
observable Breaker_X77_X78.command_cb_state_open;
observable Breaker_X77_X78.cb_ar_status_NON_AUTO;
observable Breaker_X77_X78.cb_ar_status_AUTO;
observable Breaker_X77_X78.ar_supy_control_status_NON_AUTO;
observable Breaker_X77_X78.ar_supy_control_status_AUTO;
observable Breaker_X77_X78.cb_command_fail;
observable Breaker_X77_X78.cb_state_not_responding;
observable Breaker_X77_X78.cb_state_abnormal;
observable Breaker_X77_X78.cb_state_closed;
observable Breaker_X77_X78.cb_state_open;
observable Breaker_X79_X80.IMPOSSIBLE;
observable Breaker_X79_X80.command_cb_ar_status_NON_AUTO;
observable Breaker_X79_X80.command_cb_ar_status_AUTO;
observable Breaker_X79_X80.command_ar_supy_control_status_NON_AUTO;
observable Breaker_X79_X80.command_ar_supy_control_status_AUTO;
observable Breaker_X79_X80.command_cb_state_closed;
observable Breaker_X79_X80.command_cb_state_open;
observable Breaker_X79_X80.cb_ar_status_NON_AUTO;
observable Breaker_X79_X80.cb_ar_status_AUTO;
observable Breaker_X79_X80.ar_supy_control_status_NON_AUTO;
observable Breaker_X79_X80.ar_supy_control_status_AUTO;
observable Breaker_X79_X80.cb_command_fail;
observable Breaker_X79_X80.cb_state_not_responding;
observable Breaker_X79_X80.cb_state_abnormal;
observable Breaker_X79_X80.cb_state_closed;
observable Breaker_X79_X80.cb_state_open;
observable Breaker_X7_X8.IMPOSSIBLE;
observable Breaker_X7_X8.command_cb_ar_status_NON_AUTO;
observable Breaker_X7_X8.command_cb_ar_status_AUTO;
observable Breaker_X7_X8.command_ar_supy_control_status_NON_AUTO;
observable Breaker_X7_X8.command_ar_supy_control_status_AUTO;
observable Breaker_X7_X8.command_cb_state_closed;
observable Breaker_X7_X8.command_cb_state_open;
observable Breaker_X7_X8.cb_ar_status_NON_AUTO;
observable Breaker_X7_X8.cb_ar_status_AUTO;
observable Breaker_X7_X8.ar_supy_control_status_NON_AUTO;
observable Breaker_X7_X8.ar_supy_control_status_AUTO;
observable Breaker_X7_X8.cb_command_fail;
observable Breaker_X7_X8.cb_state_not_responding;
observable Breaker_X7_X8.cb_state_abnormal;
observable Breaker_X7_X8.cb_state_closed;
observable Breaker_X7_X8.cb_state_open;
observable Breaker_X9_X10.IMPOSSIBLE;
observable Breaker_X9_X10.command_cb_ar_status_NON_AUTO;
observable Breaker_X9_X10.command_cb_ar_status_AUTO;
observable Breaker_X9_X10.command_ar_supy_control_status_NON_AUTO;
observable Breaker_X9_X10.command_ar_supy_control_status_AUTO;
observable Breaker_X9_X10.command_cb_state_closed;
observable Breaker_X9_X10.command_cb_state_open;
observable Breaker_X9_X10.cb_ar_status_NON_AUTO;
observable Breaker_X9_X10.cb_ar_status_AUTO;
observable Breaker_X9_X10.ar_supy_control_status_NON_AUTO;
observable Breaker_X9_X10.ar_supy_control_status_AUTO;
observable Breaker_X9_X10.cb_command_fail;
observable Breaker_X9_X10.cb_state_not_responding;
observable Breaker_X9_X10.cb_state_abnormal;
observable Breaker_X9_X10.cb_state_closed;
observable Breaker_X9_X10.cb_state_open;
observable Breaker_X11_X12.IMPOSSIBLE;
observable Breaker_X11_X12.command_cb_ar_status_NON_AUTO;
observable Breaker_X11_X12.command_cb_ar_status_AUTO;
observable Breaker_X11_X12.command_ar_supy_control_status_NON_AUTO;
observable Breaker_X11_X12.command_ar_supy_control_status_AUTO;
observable Breaker_X11_X12.command_cb_state_closed;
observable Breaker_X11_X12.command_cb_state_open;
observable Breaker_X11_X12.cb_ar_status_NON_AUTO;
observable Breaker_X11_X12.cb_ar_status_AUTO;
observable Breaker_X11_X12.ar_supy_control_status_NON_AUTO;
observable Breaker_X11_X12.ar_supy_control_status_AUTO;
observable Breaker_X11_X12.cb_command_fail;
observable Breaker_X11_X12.cb_state_not_responding;
observable Breaker_X11_X12.cb_state_abnormal;
observable Breaker_X11_X12.cb_state_closed;
observable Breaker_X11_X12.cb_state_open;
observable Breaker_X13_X14.IMPOSSIBLE;
observable Breaker_X13_X14.command_cb_ar_status_NON_AUTO;
observable Breaker_X13_X14.command_cb_ar_status_AUTO;
observable Breaker_X13_X14.command_ar_supy_control_status_NON_AUTO;
observable Breaker_X13_X14.command_ar_supy_control_status_AUTO;
observable Breaker_X13_X14.command_cb_state_closed;
observable Breaker_X13_X14.command_cb_state_open;
observable Breaker_X13_X14.cb_ar_status_NON_AUTO;
observable Breaker_X13_X14.cb_ar_status_AUTO;
observable Breaker_X13_X14.ar_supy_control_status_NON_AUTO;
observable Breaker_X13_X14.ar_supy_control_status_AUTO;
observable Breaker_X13_X14.cb_command_fail;
observable Breaker_X13_X14.cb_state_not_responding;
observable Breaker_X13_X14.cb_state_abnormal;
observable Breaker_X13_X14.cb_state_closed;
observable Breaker_X13_X14.cb_state_open;
observable Breaker_X15_X16.IMPOSSIBLE;
observable Breaker_X15_X16.command_cb_ar_status_NON_AUTO;
observable Breaker_X15_X16.command_cb_ar_status_AUTO;
observable Breaker_X15_X16.command_ar_supy_control_status_NON_AUTO;
observable Breaker_X15_X16.command_ar_supy_control_status_AUTO;
observable Breaker_X15_X16.command_cb_state_closed;
observable Breaker_X15_X16.command_cb_state_open;
observable Breaker_X15_X16.cb_ar_status_NON_AUTO;
observable Breaker_X15_X16.cb_ar_status_AUTO;
observable Breaker_X15_X16.ar_supy_control_status_NON_AUTO;
observable Breaker_X15_X16.ar_supy_control_status_AUTO;
observable Breaker_X15_X16.cb_command_fail;
observable Breaker_X15_X16.cb_state_not_responding;
observable Breaker_X15_X16.cb_state_abnormal;
observable Breaker_X15_X16.cb_state_closed;
observable Breaker_X15_X16.cb_state_open;
observable Breaker_X17_X18.IMPOSSIBLE;
observable Breaker_X17_X18.command_cb_ar_status_NON_AUTO;
observable Breaker_X17_X18.command_cb_ar_status_AUTO;
observable Breaker_X17_X18.command_ar_supy_control_status_NON_AUTO;
observable Breaker_X17_X18.command_ar_supy_control_status_AUTO;
observable Breaker_X17_X18.command_cb_state_closed;
observable Breaker_X17_X18.command_cb_state_open;
observable Breaker_X17_X18.cb_ar_status_NON_AUTO;
observable Breaker_X17_X18.cb_ar_status_AUTO;
observable Breaker_X17_X18.ar_supy_control_status_NON_AUTO;
observable Breaker_X17_X18.ar_supy_control_status_AUTO;
observable Breaker_X17_X18.cb_command_fail;
observable Breaker_X17_X18.cb_state_not_responding;
observable Breaker_X17_X18.cb_state_abnormal;
observable Breaker_X17_X18.cb_state_closed;
observable Breaker_X17_X18.cb_state_open;
observable Breaker_X19_X20.IMPOSSIBLE;
observable Breaker_X19_X20.command_cb_ar_status_NON_AUTO;
observable Breaker_X19_X20.command_cb_ar_status_AUTO;
observable Breaker_X19_X20.command_ar_supy_control_status_NON_AUTO;
observable Breaker_X19_X20.command_ar_supy_control_status_AUTO;
observable Breaker_X19_X20.command_cb_state_closed;
observable Breaker_X19_X20.command_cb_state_open;
observable Breaker_X19_X20.cb_ar_status_NON_AUTO;
observable Breaker_X19_X20.cb_ar_status_AUTO;
observable Breaker_X19_X20.ar_supy_control_status_NON_AUTO;
observable Breaker_X19_X20.ar_supy_control_status_AUTO;
observable Breaker_X19_X20.cb_command_fail;
observable Breaker_X19_X20.cb_state_not_responding;
observable Breaker_X19_X20.cb_state_abnormal;
observable Breaker_X19_X20.cb_state_closed;
observable Breaker_X19_X20.cb_state_open;
observable Breaker_X21_X22.IMPOSSIBLE;
observable Breaker_X21_X22.command_cb_ar_status_NON_AUTO;
observable Breaker_X21_X22.command_cb_ar_status_AUTO;
observable Breaker_X21_X22.command_ar_supy_control_status_NON_AUTO;
observable Breaker_X21_X22.command_ar_supy_control_status_AUTO;
observable Breaker_X21_X22.command_cb_state_closed;
observable Breaker_X21_X22.command_cb_state_open;
observable Breaker_X21_X22.cb_ar_status_NON_AUTO;
observable Breaker_X21_X22.cb_ar_status_AUTO;
observable Breaker_X21_X22.ar_supy_control_status_NON_AUTO;
observable Breaker_X21_X22.ar_supy_control_status_AUTO;
observable Breaker_X21_X22.cb_command_fail;
observable Breaker_X21_X22.cb_state_not_responding;
observable Breaker_X21_X22.cb_state_abnormal;
observable Breaker_X21_X22.cb_state_closed;
observable Breaker_X21_X22.cb_state_open;
observable Breaker_X23_X24.IMPOSSIBLE;
observable Breaker_X23_X24.command_cb_ar_status_NON_AUTO;
observable Breaker_X23_X24.command_cb_ar_status_AUTO;
observable Breaker_X23_X24.command_ar_supy_control_status_NON_AUTO;
observable Breaker_X23_X24.command_ar_supy_control_status_AUTO;
observable Breaker_X23_X24.command_cb_state_closed;
observable Breaker_X23_X24.command_cb_state_open;
observable Breaker_X23_X24.cb_ar_status_NON_AUTO;
observable Breaker_X23_X24.cb_ar_status_AUTO;
observable Breaker_X23_X24.ar_supy_control_status_NON_AUTO;
observable Breaker_X23_X24.ar_supy_control_status_AUTO;
observable Breaker_X23_X24.cb_command_fail;
observable Breaker_X23_X24.cb_state_not_responding;
observable Breaker_X23_X24.cb_state_abnormal;
observable Breaker_X23_X24.cb_state_closed;
observable Breaker_X23_X24.cb_state_open;
observable Breaker_X25_X26.IMPOSSIBLE;
observable Breaker_X25_X26.command_cb_ar_status_NON_AUTO;
observable Breaker_X25_X26.command_cb_ar_status_AUTO;
observable Breaker_X25_X26.command_ar_supy_control_status_NON_AUTO;
observable Breaker_X25_X26.command_ar_supy_control_status_AUTO;
observable Breaker_X25_X26.command_cb_state_closed;
observable Breaker_X25_X26.command_cb_state_open;
observable Breaker_X25_X26.cb_ar_status_NON_AUTO;
observable Breaker_X25_X26.cb_ar_status_AUTO;
observable Breaker_X25_X26.ar_supy_control_status_NON_AUTO;
observable Breaker_X25_X26.ar_supy_control_status_AUTO;
observable Breaker_X25_X26.cb_command_fail;
observable Breaker_X25_X26.cb_state_not_responding;
observable Breaker_X25_X26.cb_state_abnormal;
observable Breaker_X25_X26.cb_state_closed;
observable Breaker_X25_X26.cb_state_open;
observable Breaker_X27_X28.IMPOSSIBLE;
observable Breaker_X27_X28.command_cb_ar_status_NON_AUTO;
observable Breaker_X27_X28.command_cb_ar_status_AUTO;
observable Breaker_X27_X28.command_ar_supy_control_status_NON_AUTO;
observable Breaker_X27_X28.command_ar_supy_control_status_AUTO;
observable Breaker_X27_X28.command_cb_state_closed;
observable Breaker_X27_X28.command_cb_state_open;
observable Breaker_X27_X28.cb_ar_status_NON_AUTO;
observable Breaker_X27_X28.cb_ar_status_AUTO;
observable Breaker_X27_X28.ar_supy_control_status_NON_AUTO;
observable Breaker_X27_X28.ar_supy_control_status_AUTO;
observable Breaker_X27_X28.cb_command_fail;
observable Breaker_X27_X28.cb_state_not_responding;
observable Breaker_X27_X28.cb_state_abnormal;
observable Breaker_X27_X28.cb_state_closed;
observable Breaker_X27_X28.cb_state_open;
observable Breaker_X29_X30.IMPOSSIBLE;
observable Breaker_X29_X30.command_cb_ar_status_NON_AUTO;
observable Breaker_X29_X30.command_cb_ar_status_AUTO;
observable Breaker_X29_X30.command_ar_supy_control_status_NON_AUTO;
observable Breaker_X29_X30.command_ar_supy_control_status_AUTO;
observable Breaker_X29_X30.command_cb_state_closed;
observable Breaker_X29_X30.command_cb_state_open;
observable Breaker_X29_X30.cb_ar_status_NON_AUTO;
observable Breaker_X29_X30.cb_ar_status_AUTO;
observable Breaker_X29_X30.ar_supy_control_status_NON_AUTO;
observable Breaker_X29_X30.ar_supy_control_status_AUTO;
observable Breaker_X29_X30.cb_command_fail;
observable Breaker_X29_X30.cb_state_not_responding;
observable Breaker_X29_X30.cb_state_abnormal;
observable Breaker_X29_X30.cb_state_closed;
observable Breaker_X29_X30.cb_state_open;
observable Breaker_X31_X32.IMPOSSIBLE;
observable Breaker_X31_X32.command_cb_ar_status_NON_AUTO;
observable Breaker_X31_X32.command_cb_ar_status_AUTO;
observable Breaker_X31_X32.command_ar_supy_control_status_NON_AUTO;
observable Breaker_X31_X32.command_ar_supy_control_status_AUTO;
observable Breaker_X31_X32.command_cb_state_closed;
observable Breaker_X31_X32.command_cb_state_open;
observable Breaker_X31_X32.cb_ar_status_NON_AUTO;
observable Breaker_X31_X32.cb_ar_status_AUTO;
observable Breaker_X31_X32.ar_supy_control_status_NON_AUTO;
observable Breaker_X31_X32.ar_supy_control_status_AUTO;
observable Breaker_X31_X32.cb_command_fail;
observable Breaker_X31_X32.cb_state_not_responding;
observable Breaker_X31_X32.cb_state_abnormal;
observable Breaker_X31_X32.cb_state_closed;
observable Breaker_X31_X32.cb_state_open;
observable Breaker_X33_X34.IMPOSSIBLE;
observable Breaker_X33_X34.command_cb_ar_status_NON_AUTO;
observable Breaker_X33_X34.command_cb_ar_status_AUTO;
observable Breaker_X33_X34.command_ar_supy_control_status_NON_AUTO;
observable Breaker_X33_X34.command_ar_supy_control_status_AUTO;
observable Breaker_X33_X34.command_cb_state_closed;
observable Breaker_X33_X34.command_cb_state_open;
observable Breaker_X33_X34.cb_ar_status_NON_AUTO;
observable Breaker_X33_X34.cb_ar_status_AUTO;
observable Breaker_X33_X34.ar_supy_control_status_NON_AUTO;
observable Breaker_X33_X34.ar_supy_control_status_AUTO;
observable Breaker_X33_X34.cb_command_fail;
observable Breaker_X33_X34.cb_state_not_responding;
observable Breaker_X33_X34.cb_state_abnormal;
observable Breaker_X33_X34.cb_state_closed;
observable Breaker_X33_X34.cb_state_open;
observable Breaker_X35_X36.IMPOSSIBLE;
observable Breaker_X35_X36.command_cb_ar_status_NON_AUTO;
observable Breaker_X35_X36.command_cb_ar_status_AUTO;
observable Breaker_X35_X36.command_ar_supy_control_status_NON_AUTO;
observable Breaker_X35_X36.command_ar_supy_control_status_AUTO;
observable Breaker_X35_X36.command_cb_state_closed;
observable Breaker_X35_X36.command_cb_state_open;
observable Breaker_X35_X36.cb_ar_status_NON_AUTO;
observable Breaker_X35_X36.cb_ar_status_AUTO;
observable Breaker_X35_X36.ar_supy_control_status_NON_AUTO;
observable Breaker_X35_X36.ar_supy_control_status_AUTO;
observable Breaker_X35_X36.cb_command_fail;
observable Breaker_X35_X36.cb_state_not_responding;
observable Breaker_X35_X36.cb_state_abnormal;
observable Breaker_X35_X36.cb_state_closed;
observable Breaker_X35_X36.cb_state_open;
observable Breaker_X37_X38.IMPOSSIBLE;
observable Breaker_X37_X38.command_cb_ar_status_NON_AUTO;
observable Breaker_X37_X38.command_cb_ar_status_AUTO;
observable Breaker_X37_X38.command_ar_supy_control_status_NON_AUTO;
observable Breaker_X37_X38.command_ar_supy_control_status_AUTO;
observable Breaker_X37_X38.command_cb_state_closed;
observable Breaker_X37_X38.command_cb_state_open;
observable Breaker_X37_X38.cb_ar_status_NON_AUTO;
observable Breaker_X37_X38.cb_ar_status_AUTO;
observable Breaker_X37_X38.ar_supy_control_status_NON_AUTO;
observable Breaker_X37_X38.ar_supy_control_status_AUTO;
observable Breaker_X37_X38.cb_command_fail;
observable Breaker_X37_X38.cb_state_not_responding;
observable Breaker_X37_X38.cb_state_abnormal;
observable Breaker_X37_X38.cb_state_closed;
observable Breaker_X37_X38.cb_state_open;
observable Breaker_X39_X40.IMPOSSIBLE;
observable Breaker_X39_X40.command_cb_ar_status_NON_AUTO;
observable Breaker_X39_X40.command_cb_ar_status_AUTO;
observable Breaker_X39_X40.command_ar_supy_control_status_NON_AUTO;
observable Breaker_X39_X40.command_ar_supy_control_status_AUTO;
observable Breaker_X39_X40.command_cb_state_closed;
observable Breaker_X39_X40.command_cb_state_open;
observable Breaker_X39_X40.cb_ar_status_NON_AUTO;
observable Breaker_X39_X40.cb_ar_status_AUTO;
observable Breaker_X39_X40.ar_supy_control_status_NON_AUTO;
observable Breaker_X39_X40.ar_supy_control_status_AUTO;
observable Breaker_X39_X40.cb_command_fail;
observable Breaker_X39_X40.cb_state_not_responding;
observable Breaker_X39_X40.cb_state_abnormal;
observable Breaker_X39_X40.cb_state_closed;
observable Breaker_X39_X40.cb_state_open;
observable Breaker_X41_X42.IMPOSSIBLE;
observable Breaker_X41_X42.command_cb_ar_status_NON_AUTO;
observable Breaker_X41_X42.command_cb_ar_status_AUTO;
observable Breaker_X41_X42.command_ar_supy_control_status_NON_AUTO;
observable Breaker_X41_X42.command_ar_supy_control_status_AUTO;
observable Breaker_X41_X42.command_cb_state_closed;
observable Breaker_X41_X42.command_cb_state_open;
observable Breaker_X41_X42.cb_ar_status_NON_AUTO;
observable Breaker_X41_X42.cb_ar_status_AUTO;
observable Breaker_X41_X42.ar_supy_control_status_NON_AUTO;
observable Breaker_X41_X42.ar_supy_control_status_AUTO;
observable Breaker_X41_X42.cb_command_fail;
observable Breaker_X41_X42.cb_state_not_responding;
observable Breaker_X41_X42.cb_state_abnormal;
observable Breaker_X41_X42.cb_state_closed;
observable Breaker_X41_X42.cb_state_open;
observable Breaker_X43_X44.IMPOSSIBLE;
observable Breaker_X43_X44.command_cb_ar_status_NON_AUTO;
observable Breaker_X43_X44.command_cb_ar_status_AUTO;
observable Breaker_X43_X44.command_ar_supy_control_status_NON_AUTO;
observable Breaker_X43_X44.command_ar_supy_control_status_AUTO;
observable Breaker_X43_X44.command_cb_state_closed;
observable Breaker_X43_X44.command_cb_state_open;
observable Breaker_X43_X44.cb_ar_status_NON_AUTO;
observable Breaker_X43_X44.cb_ar_status_AUTO;
observable Breaker_X43_X44.ar_supy_control_status_NON_AUTO;
observable Breaker_X43_X44.ar_supy_control_status_AUTO;
observable Breaker_X43_X44.cb_command_fail;
observable Breaker_X43_X44.cb_state_not_responding;
observable Breaker_X43_X44.cb_state_abnormal;
observable Breaker_X43_X44.cb_state_closed;
observable Breaker_X43_X44.cb_state_open;
observable Breaker_X83_X84.IMPOSSIBLE;
observable Breaker_X83_X84.command_cb_ar_status_NON_AUTO;
observable Breaker_X83_X84.command_cb_ar_status_AUTO;
observable Breaker_X83_X84.command_ar_supy_control_status_NON_AUTO;
observable Breaker_X83_X84.command_ar_supy_control_status_AUTO;
observable Breaker_X83_X84.command_cb_state_closed;
observable Breaker_X83_X84.command_cb_state_open;
observable Breaker_X83_X84.cb_ar_status_NON_AUTO;
observable Breaker_X83_X84.cb_ar_status_AUTO;
observable Breaker_X83_X84.ar_supy_control_status_NON_AUTO;
observable Breaker_X83_X84.ar_supy_control_status_AUTO;
observable Breaker_X83_X84.cb_command_fail;
observable Breaker_X83_X84.cb_state_not_responding;
observable Breaker_X83_X84.cb_state_abnormal;
observable Breaker_X83_X84.cb_state_closed;
observable Breaker_X83_X84.cb_state_open;
observable Breaker_X81_X82.IMPOSSIBLE;
observable Breaker_X81_X82.command_cb_ar_status_NON_AUTO;
observable Breaker_X81_X82.command_cb_ar_status_AUTO;
observable Breaker_X81_X82.command_ar_supy_control_status_NON_AUTO;
observable Breaker_X81_X82.command_ar_supy_control_status_AUTO;
observable Breaker_X81_X82.command_cb_state_closed;
observable Breaker_X81_X82.command_cb_state_open;
observable Breaker_X81_X82.cb_ar_status_NON_AUTO;
observable Breaker_X81_X82.cb_ar_status_AUTO;
observable Breaker_X81_X82.ar_supy_control_status_NON_AUTO;
observable Breaker_X81_X82.ar_supy_control_status_AUTO;
observable Breaker_X81_X82.cb_command_fail;
observable Breaker_X81_X82.cb_state_not_responding;
observable Breaker_X81_X82.cb_state_abnormal;
observable Breaker_X81_X82.cb_state_closed;
observable Breaker_X81_X82.cb_state_open;
observable Breaker_X45_X46.IMPOSSIBLE;
observable Breaker_X45_X46.command_cb_ar_status_NON_AUTO;
observable Breaker_X45_X46.command_cb_ar_status_AUTO;
observable Breaker_X45_X46.command_ar_supy_control_status_NON_AUTO;
observable Breaker_X45_X46.command_ar_supy_control_status_AUTO;
observable Breaker_X45_X46.command_cb_state_closed;
observable Breaker_X45_X46.command_cb_state_open;
observable Breaker_X45_X46.cb_ar_status_NON_AUTO;
observable Breaker_X45_X46.cb_ar_status_AUTO;
observable Breaker_X45_X46.ar_supy_control_status_NON_AUTO;
observable Breaker_X45_X46.ar_supy_control_status_AUTO;
observable Breaker_X45_X46.cb_command_fail;
observable Breaker_X45_X46.cb_state_not_responding;
observable Breaker_X45_X46.cb_state_abnormal;
observable Breaker_X45_X46.cb_state_closed;
observable Breaker_X45_X46.cb_state_open;
observable Breaker_X47_X48.IMPOSSIBLE;
observable Breaker_X47_X48.command_cb_ar_status_NON_AUTO;
observable Breaker_X47_X48.command_cb_ar_status_AUTO;
observable Breaker_X47_X48.command_ar_supy_control_status_NON_AUTO;
observable Breaker_X47_X48.command_ar_supy_control_status_AUTO;
observable Breaker_X47_X48.command_cb_state_closed;
observable Breaker_X47_X48.command_cb_state_open;
observable Breaker_X47_X48.cb_ar_status_NON_AUTO;
observable Breaker_X47_X48.cb_ar_status_AUTO;
observable Breaker_X47_X48.ar_supy_control_status_NON_AUTO;
observable Breaker_X47_X48.ar_supy_control_status_AUTO;
observable Breaker_X47_X48.cb_command_fail;
observable Breaker_X47_X48.cb_state_not_responding;
observable Breaker_X47_X48.cb_state_abnormal;
observable Breaker_X47_X48.cb_state_closed;
observable Breaker_X47_X48.cb_state_open;
observable Breaker_X49_X50.IMPOSSIBLE;
observable Breaker_X49_X50.command_cb_ar_status_NON_AUTO;
observable Breaker_X49_X50.command_cb_ar_status_AUTO;
observable Breaker_X49_X50.command_ar_supy_control_status_NON_AUTO;
observable Breaker_X49_X50.command_ar_supy_control_status_AUTO;
observable Breaker_X49_X50.command_cb_state_closed;
observable Breaker_X49_X50.command_cb_state_open;
observable Breaker_X49_X50.cb_ar_status_NON_AUTO;
observable Breaker_X49_X50.cb_ar_status_AUTO;
observable Breaker_X49_X50.ar_supy_control_status_NON_AUTO;
observable Breaker_X49_X50.ar_supy_control_status_AUTO;
observable Breaker_X49_X50.cb_command_fail;
observable Breaker_X49_X50.cb_state_not_responding;
observable Breaker_X49_X50.cb_state_abnormal;
observable Breaker_X49_X50.cb_state_closed;
observable Breaker_X49_X50.cb_state_open;
observable Breaker_X51_X52.IMPOSSIBLE;
observable Breaker_X51_X52.command_cb_ar_status_NON_AUTO;
observable Breaker_X51_X52.command_cb_ar_status_AUTO;
observable Breaker_X51_X52.command_ar_supy_control_status_NON_AUTO;
observable Breaker_X51_X52.command_ar_supy_control_status_AUTO;
observable Breaker_X51_X52.command_cb_state_closed;
observable Breaker_X51_X52.command_cb_state_open;
observable Breaker_X51_X52.cb_ar_status_NON_AUTO;
observable Breaker_X51_X52.cb_ar_status_AUTO;
observable Breaker_X51_X52.ar_supy_control_status_NON_AUTO;
observable Breaker_X51_X52.ar_supy_control_status_AUTO;
observable Breaker_X51_X52.cb_command_fail;
observable Breaker_X51_X52.cb_state_not_responding;
observable Breaker_X51_X52.cb_state_abnormal;
observable Breaker_X51_X52.cb_state_closed;
observable Breaker_X51_X52.cb_state_open;
observable Breaker_X53_X54.IMPOSSIBLE;
observable Breaker_X53_X54.command_cb_ar_status_NON_AUTO;
observable Breaker_X53_X54.command_cb_ar_status_AUTO;
observable Breaker_X53_X54.command_ar_supy_control_status_NON_AUTO;
observable Breaker_X53_X54.command_ar_supy_control_status_AUTO;
observable Breaker_X53_X54.command_cb_state_closed;
observable Breaker_X53_X54.command_cb_state_open;
observable Breaker_X53_X54.cb_ar_status_NON_AUTO;
observable Breaker_X53_X54.cb_ar_status_AUTO;
observable Breaker_X53_X54.ar_supy_control_status_NON_AUTO;
observable Breaker_X53_X54.ar_supy_control_status_AUTO;
observable Breaker_X53_X54.cb_command_fail;
observable Breaker_X53_X54.cb_state_not_responding;
observable Breaker_X53_X54.cb_state_abnormal;
observable Breaker_X53_X54.cb_state_closed;
observable Breaker_X53_X54.cb_state_open;
observable Breaker_X55_X56.IMPOSSIBLE;
observable Breaker_X55_X56.command_cb_ar_status_NON_AUTO;
observable Breaker_X55_X56.command_cb_ar_status_AUTO;
observable Breaker_X55_X56.command_ar_supy_control_status_NON_AUTO;
observable Breaker_X55_X56.command_ar_supy_control_status_AUTO;
observable Breaker_X55_X56.command_cb_state_closed;
observable Breaker_X55_X56.command_cb_state_open;
observable Breaker_X55_X56.cb_ar_status_NON_AUTO;
observable Breaker_X55_X56.cb_ar_status_AUTO;
observable Breaker_X55_X56.ar_supy_control_status_NON_AUTO;
observable Breaker_X55_X56.ar_supy_control_status_AUTO;
observable Breaker_X55_X56.cb_command_fail;
observable Breaker_X55_X56.cb_state_not_responding;
observable Breaker_X55_X56.cb_state_abnormal;
observable Breaker_X55_X56.cb_state_closed;
observable Breaker_X55_X56.cb_state_open;
observable Breaker_X57_X58.IMPOSSIBLE;
observable Breaker_X57_X58.command_cb_ar_status_NON_AUTO;
observable Breaker_X57_X58.command_cb_ar_status_AUTO;
observable Breaker_X57_X58.command_ar_supy_control_status_NON_AUTO;
observable Breaker_X57_X58.command_ar_supy_control_status_AUTO;
observable Breaker_X57_X58.command_cb_state_closed;
observable Breaker_X57_X58.command_cb_state_open;
observable Breaker_X57_X58.cb_ar_status_NON_AUTO;
observable Breaker_X57_X58.cb_ar_status_AUTO;
observable Breaker_X57_X58.ar_supy_control_status_NON_AUTO;
observable Breaker_X57_X58.ar_supy_control_status_AUTO;
observable Breaker_X57_X58.cb_command_fail;
observable Breaker_X57_X58.cb_state_not_responding;
observable Breaker_X57_X58.cb_state_abnormal;
observable Breaker_X57_X58.cb_state_closed;
observable Breaker_X57_X58.cb_state_open;
observable Breaker_X59_X60.IMPOSSIBLE;
observable Breaker_X59_X60.command_cb_ar_status_NON_AUTO;
observable Breaker_X59_X60.command_cb_ar_status_AUTO;
observable Breaker_X59_X60.command_ar_supy_control_status_NON_AUTO;
observable Breaker_X59_X60.command_ar_supy_control_status_AUTO;
observable Breaker_X59_X60.command_cb_state_closed;
observable Breaker_X59_X60.command_cb_state_open;
observable Breaker_X59_X60.cb_ar_status_NON_AUTO;
observable Breaker_X59_X60.cb_ar_status_AUTO;
observable Breaker_X59_X60.ar_supy_control_status_NON_AUTO;
observable Breaker_X59_X60.ar_supy_control_status_AUTO;
observable Breaker_X59_X60.cb_command_fail;
observable Breaker_X59_X60.cb_state_not_responding;
observable Breaker_X59_X60.cb_state_abnormal;
observable Breaker_X59_X60.cb_state_closed;
observable Breaker_X59_X60.cb_state_open;
observable Breaker_X61_X62.IMPOSSIBLE;
observable Breaker_X61_X62.command_cb_ar_status_NON_AUTO;
observable Breaker_X61_X62.command_cb_ar_status_AUTO;
observable Breaker_X61_X62.command_ar_supy_control_status_NON_AUTO;
observable Breaker_X61_X62.command_ar_supy_control_status_AUTO;
observable Breaker_X61_X62.command_cb_state_closed;
observable Breaker_X61_X62.command_cb_state_open;
observable Breaker_X61_X62.cb_ar_status_NON_AUTO;
observable Breaker_X61_X62.cb_ar_status_AUTO;
observable Breaker_X61_X62.ar_supy_control_status_NON_AUTO;
observable Breaker_X61_X62.ar_supy_control_status_AUTO;
observable Breaker_X61_X62.cb_command_fail;
observable Breaker_X61_X62.cb_state_not_responding;
observable Breaker_X61_X62.cb_state_abnormal;
observable Breaker_X61_X62.cb_state_closed;
observable Breaker_X61_X62.cb_state_open;
observable Breaker_X63_X64.IMPOSSIBLE;
observable Breaker_X63_X64.command_cb_ar_status_NON_AUTO;
observable Breaker_X63_X64.command_cb_ar_status_AUTO;
observable Breaker_X63_X64.command_ar_supy_control_status_NON_AUTO;
observable Breaker_X63_X64.command_ar_supy_control_status_AUTO;
observable Breaker_X63_X64.command_cb_state_closed;
observable Breaker_X63_X64.command_cb_state_open;
observable Breaker_X63_X64.cb_ar_status_NON_AUTO;
observable Breaker_X63_X64.cb_ar_status_AUTO;
observable Breaker_X63_X64.ar_supy_control_status_NON_AUTO;
observable Breaker_X63_X64.ar_supy_control_status_AUTO;
observable Breaker_X63_X64.cb_command_fail;
observable Breaker_X63_X64.cb_state_not_responding;
observable Breaker_X63_X64.cb_state_abnormal;
observable Breaker_X63_X64.cb_state_closed;
observable Breaker_X63_X64.cb_state_open;
observable Breaker_X65_X66.IMPOSSIBLE;
observable Breaker_X65_X66.command_cb_ar_status_NON_AUTO;
observable Breaker_X65_X66.command_cb_ar_status_AUTO;
observable Breaker_X65_X66.command_ar_supy_control_status_NON_AUTO;
observable Breaker_X65_X66.command_ar_supy_control_status_AUTO;
observable Breaker_X65_X66.command_cb_state_closed;
observable Breaker_X65_X66.command_cb_state_open;
observable Breaker_X65_X66.cb_ar_status_NON_AUTO;
observable Breaker_X65_X66.cb_ar_status_AUTO;
observable Breaker_X65_X66.ar_supy_control_status_NON_AUTO;
observable Breaker_X65_X66.ar_supy_control_status_AUTO;
observable Breaker_X65_X66.cb_command_fail;
observable Breaker_X65_X66.cb_state_not_responding;
observable Breaker_X65_X66.cb_state_abnormal;
observable Breaker_X65_X66.cb_state_closed;
observable Breaker_X65_X66.cb_state_open;
observable Breaker_X67_X68.IMPOSSIBLE;
observable Breaker_X67_X68.command_cb_ar_status_NON_AUTO;
observable Breaker_X67_X68.command_cb_ar_status_AUTO;
observable Breaker_X67_X68.command_ar_supy_control_status_NON_AUTO;
observable Breaker_X67_X68.command_ar_supy_control_status_AUTO;
observable Breaker_X67_X68.command_cb_state_closed;
observable Breaker_X67_X68.command_cb_state_open;
observable Breaker_X67_X68.cb_ar_status_NON_AUTO;
observable Breaker_X67_X68.cb_ar_status_AUTO;
observable Breaker_X67_X68.ar_supy_control_status_NON_AUTO;
observable Breaker_X67_X68.ar_supy_control_status_AUTO;
observable Breaker_X67_X68.cb_command_fail;
observable Breaker_X67_X68.cb_state_not_responding;
observable Breaker_X67_X68.cb_state_abnormal;
observable Breaker_X67_X68.cb_state_closed;
observable Breaker_X67_X68.cb_state_open;
observable Breaker_X69_X70.IMPOSSIBLE;
observable Breaker_X69_X70.command_cb_ar_status_NON_AUTO;
observable Breaker_X69_X70.command_cb_ar_status_AUTO;
observable Breaker_X69_X70.command_ar_supy_control_status_NON_AUTO;
observable Breaker_X69_X70.command_ar_supy_control_status_AUTO;
observable Breaker_X69_X70.command_cb_state_closed;
observable Breaker_X69_X70.command_cb_state_open;
observable Breaker_X69_X70.cb_ar_status_NON_AUTO;
observable Breaker_X69_X70.cb_ar_status_AUTO;
observable Breaker_X69_X70.ar_supy_control_status_NON_AUTO;
observable Breaker_X69_X70.ar_supy_control_status_AUTO;
observable Breaker_X69_X70.cb_command_fail;
observable Breaker_X69_X70.cb_state_not_responding;
observable Breaker_X69_X70.cb_state_abnormal;
observable Breaker_X69_X70.cb_state_closed;
observable Breaker_X69_X70.cb_state_open;
observable Breaker_X71_X72.IMPOSSIBLE;
observable Breaker_X71_X72.command_cb_ar_status_NON_AUTO;
observable Breaker_X71_X72.command_cb_ar_status_AUTO;
observable Breaker_X71_X72.command_ar_supy_control_status_NON_AUTO;
observable Breaker_X71_X72.command_ar_supy_control_status_AUTO;
observable Breaker_X71_X72.command_cb_state_closed;
observable Breaker_X71_X72.command_cb_state_open;
observable Breaker_X71_X72.cb_ar_status_NON_AUTO;
observable Breaker_X71_X72.cb_ar_status_AUTO;
observable Breaker_X71_X72.ar_supy_control_status_NON_AUTO;
observable Breaker_X71_X72.ar_supy_control_status_AUTO;
observable Breaker_X71_X72.cb_command_fail;
observable Breaker_X71_X72.cb_state_not_responding;
observable Breaker_X71_X72.cb_state_abnormal;
observable Breaker_X71_X72.cb_state_closed;
observable Breaker_X71_X72.cb_state_open;
observable Breaker_X73_X74.IMPOSSIBLE;
observable Breaker_X73_X74.command_cb_ar_status_NON_AUTO;
observable Breaker_X73_X74.command_cb_ar_status_AUTO;
observable Breaker_X73_X74.command_ar_supy_control_status_NON_AUTO;
observable Breaker_X73_X74.command_ar_supy_control_status_AUTO;
observable Breaker_X73_X74.command_cb_state_closed;
observable Breaker_X73_X74.command_cb_state_open;
observable Breaker_X73_X74.cb_ar_status_NON_AUTO;
observable Breaker_X73_X74.cb_ar_status_AUTO;
observable Breaker_X73_X74.ar_supy_control_status_NON_AUTO;
observable Breaker_X73_X74.ar_supy_control_status_AUTO;
observable Breaker_X73_X74.cb_command_fail;
observable Breaker_X73_X74.cb_state_not_responding;
observable Breaker_X73_X74.cb_state_abnormal;
observable Breaker_X73_X74.cb_state_closed;
observable Breaker_X73_X74.cb_state_open;
observable Breaker_X75_X76.IMPOSSIBLE;
observable Breaker_X75_X76.command_cb_ar_status_NON_AUTO;
observable Breaker_X75_X76.command_cb_ar_status_AUTO;
observable Breaker_X75_X76.command_ar_supy_control_status_NON_AUTO;
observable Breaker_X75_X76.command_ar_supy_control_status_AUTO;
observable Breaker_X75_X76.command_cb_state_closed;
observable Breaker_X75_X76.command_cb_state_open;
observable Breaker_X75_X76.cb_ar_status_NON_AUTO;
observable Breaker_X75_X76.cb_ar_status_AUTO;
observable Breaker_X75_X76.ar_supy_control_status_NON_AUTO;
observable Breaker_X75_X76.ar_supy_control_status_AUTO;
observable Breaker_X75_X76.cb_command_fail;
observable Breaker_X75_X76.cb_state_not_responding;
observable Breaker_X75_X76.cb_state_abnormal;
observable Breaker_X75_X76.cb_state_closed;
observable Breaker_X75_X76.cb_state_open;
observable Bus_X119.entered_zero_zone_MVAR;
observable Bus_X119.limit_MVAR_High;
observable Bus_X119.limit_MVAR_High_5;
observable Bus_X119.limit_MVAR_High_4;
observable Bus_X119.limit_MVAR_High_3;
observable Bus_X119.limit_MVAR_High_2;
observable Bus_X119.limit_MVAR_High_1;
observable Bus_X119.limit_MVAR_Low;
observable Bus_X119.limit_MVAR_Low_5;
observable Bus_X119.limit_MVAR_Low_4;
observable Bus_X119.limit_MVAR_Low_3;
observable Bus_X119.limit_MVAR_Low_2;
observable Bus_X119.limit_MVAR_Low_1;
observable Bus_X119.limit_MVAR_Normal;
observable Bus_X119.entered_zero_zone_MW;
observable Bus_X119.limit_MW_High;
observable Bus_X119.limit_MW_High_5;
observable Bus_X119.limit_MW_High_4;
observable Bus_X119.limit_MW_High_3;
observable Bus_X119.limit_MW_High_2;
observable Bus_X119.limit_MW_High_1;
observable Bus_X119.limit_MW_Low;
observable Bus_X119.limit_MW_Low_5;
observable Bus_X119.limit_MW_Low_4;
observable Bus_X119.limit_MW_Low_3;
observable Bus_X119.limit_MW_Low_2;
observable Bus_X119.limit_MW_Low_1;
observable Bus_X119.limit_MW_Normal;
observable Bus_X119.entered_zero_zone_KV;
observable Bus_X119.limit_KV_High;
observable Bus_X119.limit_KV_High_5;
observable Bus_X119.limit_KV_High_4;
observable Bus_X119.limit_KV_High_3;
observable Bus_X119.limit_KV_High_2;
observable Bus_X119.limit_KV_High_1;
observable Bus_X119.limit_KV_Low;
observable Bus_X119.limit_KV_Low_5;
observable Bus_X119.limit_KV_Low_4;
observable Bus_X119.limit_KV_Low_3;
observable Bus_X119.limit_KV_Low_2;
observable Bus_X119.limit_KV_Low_1;
observable Bus_X119.limit_KV_Normal;
observable Bus_X101.entered_zero_zone_MVAR;
observable Bus_X101.limit_MVAR_High;
observable Bus_X101.limit_MVAR_High_5;
observable Bus_X101.limit_MVAR_High_4;
observable Bus_X101.limit_MVAR_High_3;
observable Bus_X101.limit_MVAR_High_2;
observable Bus_X101.limit_MVAR_High_1;
observable Bus_X101.limit_MVAR_Low;
observable Bus_X101.limit_MVAR_Low_5;
observable Bus_X101.limit_MVAR_Low_4;
observable Bus_X101.limit_MVAR_Low_3;
observable Bus_X101.limit_MVAR_Low_2;
observable Bus_X101.limit_MVAR_Low_1;
observable Bus_X101.limit_MVAR_Normal;
observable Bus_X101.entered_zero_zone_MW;
observable Bus_X101.limit_MW_High;
observable Bus_X101.limit_MW_High_5;
observable Bus_X101.limit_MW_High_4;
observable Bus_X101.limit_MW_High_3;
observable Bus_X101.limit_MW_High_2;
observable Bus_X101.limit_MW_High_1;
observable Bus_X101.limit_MW_Low;
observable Bus_X101.limit_MW_Low_5;
observable Bus_X101.limit_MW_Low_4;
observable Bus_X101.limit_MW_Low_3;
observable Bus_X101.limit_MW_Low_2;
observable Bus_X101.limit_MW_Low_1;
observable Bus_X101.limit_MW_Normal;
observable Bus_X101.entered_zero_zone_KV;
observable Bus_X101.limit_KV_High;
observable Bus_X101.limit_KV_High_5;
observable Bus_X101.limit_KV_High_4;
observable Bus_X101.limit_KV_High_3;
observable Bus_X101.limit_KV_High_2;
observable Bus_X101.limit_KV_High_1;
observable Bus_X101.limit_KV_Low;
observable Bus_X101.limit_KV_Low_5;
observable Bus_X101.limit_KV_Low_4;
observable Bus_X101.limit_KV_Low_3;
observable Bus_X101.limit_KV_Low_2;
observable Bus_X101.limit_KV_Low_1;
observable Bus_X101.limit_KV_Normal;
observable Bus_X108.entered_zero_zone_MVAR;
observable Bus_X108.limit_MVAR_High;
observable Bus_X108.limit_MVAR_High_5;
observable Bus_X108.limit_MVAR_High_4;
observable Bus_X108.limit_MVAR_High_3;
observable Bus_X108.limit_MVAR_High_2;
observable Bus_X108.limit_MVAR_High_1;
observable Bus_X108.limit_MVAR_Low;
observable Bus_X108.limit_MVAR_Low_5;
observable Bus_X108.limit_MVAR_Low_4;
observable Bus_X108.limit_MVAR_Low_3;
observable Bus_X108.limit_MVAR_Low_2;
observable Bus_X108.limit_MVAR_Low_1;
observable Bus_X108.limit_MVAR_Normal;
observable Bus_X108.entered_zero_zone_MW;
observable Bus_X108.limit_MW_High;
observable Bus_X108.limit_MW_High_5;
observable Bus_X108.limit_MW_High_4;
observable Bus_X108.limit_MW_High_3;
observable Bus_X108.limit_MW_High_2;
observable Bus_X108.limit_MW_High_1;
observable Bus_X108.limit_MW_Low;
observable Bus_X108.limit_MW_Low_5;
observable Bus_X108.limit_MW_Low_4;
observable Bus_X108.limit_MW_Low_3;
observable Bus_X108.limit_MW_Low_2;
observable Bus_X108.limit_MW_Low_1;
observable Bus_X108.limit_MW_Normal;
observable Bus_X108.entered_zero_zone_KV;
observable Bus_X108.limit_KV_High;
observable Bus_X108.limit_KV_High_5;
observable Bus_X108.limit_KV_High_4;
observable Bus_X108.limit_KV_High_3;
observable Bus_X108.limit_KV_High_2;
observable Bus_X108.limit_KV_High_1;
observable Bus_X108.limit_KV_Low;
observable Bus_X108.limit_KV_Low_5;
observable Bus_X108.limit_KV_Low_4;
observable Bus_X108.limit_KV_Low_3;
observable Bus_X108.limit_KV_Low_2;
observable Bus_X108.limit_KV_Low_1;
observable Bus_X108.limit_KV_Normal;
observable Bus_X118.entered_zero_zone_MVAR;
observable Bus_X118.limit_MVAR_High;
observable Bus_X118.limit_MVAR_High_5;
observable Bus_X118.limit_MVAR_High_4;
observable Bus_X118.limit_MVAR_High_3;
observable Bus_X118.limit_MVAR_High_2;
observable Bus_X118.limit_MVAR_High_1;
observable Bus_X118.limit_MVAR_Low;
observable Bus_X118.limit_MVAR_Low_5;
observable Bus_X118.limit_MVAR_Low_4;
observable Bus_X118.limit_MVAR_Low_3;
observable Bus_X118.limit_MVAR_Low_2;
observable Bus_X118.limit_MVAR_Low_1;
observable Bus_X118.limit_MVAR_Normal;
observable Bus_X118.entered_zero_zone_MW;
observable Bus_X118.limit_MW_High;
observable Bus_X118.limit_MW_High_5;
observable Bus_X118.limit_MW_High_4;
observable Bus_X118.limit_MW_High_3;
observable Bus_X118.limit_MW_High_2;
observable Bus_X118.limit_MW_High_1;
observable Bus_X118.limit_MW_Low;
observable Bus_X118.limit_MW_Low_5;
observable Bus_X118.limit_MW_Low_4;
observable Bus_X118.limit_MW_Low_3;
observable Bus_X118.limit_MW_Low_2;
observable Bus_X118.limit_MW_Low_1;
observable Bus_X118.limit_MW_Normal;
observable Bus_X118.entered_zero_zone_KV;
observable Bus_X118.limit_KV_High;
observable Bus_X118.limit_KV_High_5;
observable Bus_X118.limit_KV_High_4;
observable Bus_X118.limit_KV_High_3;
observable Bus_X118.limit_KV_High_2;
observable Bus_X118.limit_KV_High_1;
observable Bus_X118.limit_KV_Low;
observable Bus_X118.limit_KV_Low_5;
observable Bus_X118.limit_KV_Low_4;
observable Bus_X118.limit_KV_Low_3;
observable Bus_X118.limit_KV_Low_2;
observable Bus_X118.limit_KV_Low_1;
observable Bus_X118.limit_KV_Normal;
observable Bus_X115.entered_zero_zone_MVAR;
observable Bus_X115.limit_MVAR_High;
observable Bus_X115.limit_MVAR_High_5;
observable Bus_X115.limit_MVAR_High_4;
observable Bus_X115.limit_MVAR_High_3;
observable Bus_X115.limit_MVAR_High_2;
observable Bus_X115.limit_MVAR_High_1;
observable Bus_X115.limit_MVAR_Low;
observable Bus_X115.limit_MVAR_Low_5;
observable Bus_X115.limit_MVAR_Low_4;
observable Bus_X115.limit_MVAR_Low_3;
observable Bus_X115.limit_MVAR_Low_2;
observable Bus_X115.limit_MVAR_Low_1;
observable Bus_X115.limit_MVAR_Normal;
observable Bus_X115.entered_zero_zone_MW;
observable Bus_X115.limit_MW_High;
observable Bus_X115.limit_MW_High_5;
observable Bus_X115.limit_MW_High_4;
observable Bus_X115.limit_MW_High_3;
observable Bus_X115.limit_MW_High_2;
observable Bus_X115.limit_MW_High_1;
observable Bus_X115.limit_MW_Low;
observable Bus_X115.limit_MW_Low_5;
observable Bus_X115.limit_MW_Low_4;
observable Bus_X115.limit_MW_Low_3;
observable Bus_X115.limit_MW_Low_2;
observable Bus_X115.limit_MW_Low_1;
observable Bus_X115.limit_MW_Normal;
observable Bus_X115.entered_zero_zone_KV;
observable Bus_X115.limit_KV_High;
observable Bus_X115.limit_KV_High_5;
observable Bus_X115.limit_KV_High_4;
observable Bus_X115.limit_KV_High_3;
observable Bus_X115.limit_KV_High_2;
observable Bus_X115.limit_KV_High_1;
observable Bus_X115.limit_KV_Low;
observable Bus_X115.limit_KV_Low_5;
observable Bus_X115.limit_KV_Low_4;
observable Bus_X115.limit_KV_Low_3;
observable Bus_X115.limit_KV_Low_2;
observable Bus_X115.limit_KV_Low_1;
observable Bus_X115.limit_KV_Normal;
observable Bus_X113.entered_zero_zone_MVAR;
observable Bus_X113.limit_MVAR_High;
observable Bus_X113.limit_MVAR_High_5;
observable Bus_X113.limit_MVAR_High_4;
observable Bus_X113.limit_MVAR_High_3;
observable Bus_X113.limit_MVAR_High_2;
observable Bus_X113.limit_MVAR_High_1;
observable Bus_X113.limit_MVAR_Low;
observable Bus_X113.limit_MVAR_Low_5;
observable Bus_X113.limit_MVAR_Low_4;
observable Bus_X113.limit_MVAR_Low_3;
observable Bus_X113.limit_MVAR_Low_2;
observable Bus_X113.limit_MVAR_Low_1;
observable Bus_X113.limit_MVAR_Normal;
observable Bus_X113.entered_zero_zone_MW;
observable Bus_X113.limit_MW_High;
observable Bus_X113.limit_MW_High_5;
observable Bus_X113.limit_MW_High_4;
observable Bus_X113.limit_MW_High_3;
observable Bus_X113.limit_MW_High_2;
observable Bus_X113.limit_MW_High_1;
observable Bus_X113.limit_MW_Low;
observable Bus_X113.limit_MW_Low_5;
observable Bus_X113.limit_MW_Low_4;
observable Bus_X113.limit_MW_Low_3;
observable Bus_X113.limit_MW_Low_2;
observable Bus_X113.limit_MW_Low_1;
observable Bus_X113.limit_MW_Normal;
observable Bus_X113.entered_zero_zone_KV;
observable Bus_X113.limit_KV_High;
observable Bus_X113.limit_KV_High_5;
observable Bus_X113.limit_KV_High_4;
observable Bus_X113.limit_KV_High_3;
observable Bus_X113.limit_KV_High_2;
observable Bus_X113.limit_KV_High_1;
observable Bus_X113.limit_KV_Low;
observable Bus_X113.limit_KV_Low_5;
observable Bus_X113.limit_KV_Low_4;
observable Bus_X113.limit_KV_Low_3;
observable Bus_X113.limit_KV_Low_2;
observable Bus_X113.limit_KV_Low_1;
observable Bus_X113.limit_KV_Normal;
observable Bus_X120.entered_zero_zone_MVAR;
observable Bus_X120.limit_MVAR_High;
observable Bus_X120.limit_MVAR_High_5;
observable Bus_X120.limit_MVAR_High_4;
observable Bus_X120.limit_MVAR_High_3;
observable Bus_X120.limit_MVAR_High_2;
observable Bus_X120.limit_MVAR_High_1;
observable Bus_X120.limit_MVAR_Low;
observable Bus_X120.limit_MVAR_Low_5;
observable Bus_X120.limit_MVAR_Low_4;
observable Bus_X120.limit_MVAR_Low_3;
observable Bus_X120.limit_MVAR_Low_2;
observable Bus_X120.limit_MVAR_Low_1;
observable Bus_X120.limit_MVAR_Normal;
observable Bus_X120.entered_zero_zone_MW;
observable Bus_X120.limit_MW_High;
observable Bus_X120.limit_MW_High_5;
observable Bus_X120.limit_MW_High_4;
observable Bus_X120.limit_MW_High_3;
observable Bus_X120.limit_MW_High_2;
observable Bus_X120.limit_MW_High_1;
observable Bus_X120.limit_MW_Low;
observable Bus_X120.limit_MW_Low_5;
observable Bus_X120.limit_MW_Low_4;
observable Bus_X120.limit_MW_Low_3;
observable Bus_X120.limit_MW_Low_2;
observable Bus_X120.limit_MW_Low_1;
observable Bus_X120.limit_MW_Normal;
observable Bus_X120.entered_zero_zone_KV;
observable Bus_X120.limit_KV_High;
observable Bus_X120.limit_KV_High_5;
observable Bus_X120.limit_KV_High_4;
observable Bus_X120.limit_KV_High_3;
observable Bus_X120.limit_KV_High_2;
observable Bus_X120.limit_KV_High_1;
observable Bus_X120.limit_KV_Low;
observable Bus_X120.limit_KV_Low_5;
observable Bus_X120.limit_KV_Low_4;
observable Bus_X120.limit_KV_Low_3;
observable Bus_X120.limit_KV_Low_2;
observable Bus_X120.limit_KV_Low_1;
observable Bus_X120.limit_KV_Normal;
observable Bus_X85.entered_zero_zone_MVAR;
observable Bus_X85.limit_MVAR_High;
observable Bus_X85.limit_MVAR_High_5;
observable Bus_X85.limit_MVAR_High_4;
observable Bus_X85.limit_MVAR_High_3;
observable Bus_X85.limit_MVAR_High_2;
observable Bus_X85.limit_MVAR_High_1;
observable Bus_X85.limit_MVAR_Low;
observable Bus_X85.limit_MVAR_Low_5;
observable Bus_X85.limit_MVAR_Low_4;
observable Bus_X85.limit_MVAR_Low_3;
observable Bus_X85.limit_MVAR_Low_2;
observable Bus_X85.limit_MVAR_Low_1;
observable Bus_X85.limit_MVAR_Normal;
observable Bus_X85.entered_zero_zone_MW;
observable Bus_X85.limit_MW_High;
observable Bus_X85.limit_MW_High_5;
observable Bus_X85.limit_MW_High_4;
observable Bus_X85.limit_MW_High_3;
observable Bus_X85.limit_MW_High_2;
observable Bus_X85.limit_MW_High_1;
observable Bus_X85.limit_MW_Low;
observable Bus_X85.limit_MW_Low_5;
observable Bus_X85.limit_MW_Low_4;
observable Bus_X85.limit_MW_Low_3;
observable Bus_X85.limit_MW_Low_2;
observable Bus_X85.limit_MW_Low_1;
observable Bus_X85.limit_MW_Normal;
observable Bus_X85.entered_zero_zone_KV;
observable Bus_X85.limit_KV_High;
observable Bus_X85.limit_KV_High_5;
observable Bus_X85.limit_KV_High_4;
observable Bus_X85.limit_KV_High_3;
observable Bus_X85.limit_KV_High_2;
observable Bus_X85.limit_KV_High_1;
observable Bus_X85.limit_KV_Low;
observable Bus_X85.limit_KV_Low_5;
observable Bus_X85.limit_KV_Low_4;
observable Bus_X85.limit_KV_Low_3;
observable Bus_X85.limit_KV_Low_2;
observable Bus_X85.limit_KV_Low_1;
observable Bus_X85.limit_KV_Normal;
observable Bus_X121.entered_zero_zone_MVAR;
observable Bus_X121.limit_MVAR_High;
observable Bus_X121.limit_MVAR_High_5;
observable Bus_X121.limit_MVAR_High_4;
observable Bus_X121.limit_MVAR_High_3;
observable Bus_X121.limit_MVAR_High_2;
observable Bus_X121.limit_MVAR_High_1;
observable Bus_X121.limit_MVAR_Low;
observable Bus_X121.limit_MVAR_Low_5;
observable Bus_X121.limit_MVAR_Low_4;
observable Bus_X121.limit_MVAR_Low_3;
observable Bus_X121.limit_MVAR_Low_2;
observable Bus_X121.limit_MVAR_Low_1;
observable Bus_X121.limit_MVAR_Normal;
observable Bus_X121.entered_zero_zone_MW;
observable Bus_X121.limit_MW_High;
observable Bus_X121.limit_MW_High_5;
observable Bus_X121.limit_MW_High_4;
observable Bus_X121.limit_MW_High_3;
observable Bus_X121.limit_MW_High_2;
observable Bus_X121.limit_MW_High_1;
observable Bus_X121.limit_MW_Low;
observable Bus_X121.limit_MW_Low_5;
observable Bus_X121.limit_MW_Low_4;
observable Bus_X121.limit_MW_Low_3;
observable Bus_X121.limit_MW_Low_2;
observable Bus_X121.limit_MW_Low_1;
observable Bus_X121.limit_MW_Normal;
observable Bus_X121.entered_zero_zone_KV;
observable Bus_X121.limit_KV_High;
observable Bus_X121.limit_KV_High_5;
observable Bus_X121.limit_KV_High_4;
observable Bus_X121.limit_KV_High_3;
observable Bus_X121.limit_KV_High_2;
observable Bus_X121.limit_KV_High_1;
observable Bus_X121.limit_KV_Low;
observable Bus_X121.limit_KV_Low_5;
observable Bus_X121.limit_KV_Low_4;
observable Bus_X121.limit_KV_Low_3;
observable Bus_X121.limit_KV_Low_2;
observable Bus_X121.limit_KV_Low_1;
observable Bus_X121.limit_KV_Normal;
observable Bus_X122.entered_zero_zone_MVAR;
observable Bus_X122.limit_MVAR_High;
observable Bus_X122.limit_MVAR_High_5;
observable Bus_X122.limit_MVAR_High_4;
observable Bus_X122.limit_MVAR_High_3;
observable Bus_X122.limit_MVAR_High_2;
observable Bus_X122.limit_MVAR_High_1;
observable Bus_X122.limit_MVAR_Low;
observable Bus_X122.limit_MVAR_Low_5;
observable Bus_X122.limit_MVAR_Low_4;
observable Bus_X122.limit_MVAR_Low_3;
observable Bus_X122.limit_MVAR_Low_2;
observable Bus_X122.limit_MVAR_Low_1;
observable Bus_X122.limit_MVAR_Normal;
observable Bus_X122.entered_zero_zone_MW;
observable Bus_X122.limit_MW_High;
observable Bus_X122.limit_MW_High_5;
observable Bus_X122.limit_MW_High_4;
observable Bus_X122.limit_MW_High_3;
observable Bus_X122.limit_MW_High_2;
observable Bus_X122.limit_MW_High_1;
observable Bus_X122.limit_MW_Low;
observable Bus_X122.limit_MW_Low_5;
observable Bus_X122.limit_MW_Low_4;
observable Bus_X122.limit_MW_Low_3;
observable Bus_X122.limit_MW_Low_2;
observable Bus_X122.limit_MW_Low_1;
observable Bus_X122.limit_MW_Normal;
observable Bus_X122.entered_zero_zone_KV;
observable Bus_X122.limit_KV_High;
observable Bus_X122.limit_KV_High_5;
observable Bus_X122.limit_KV_High_4;
observable Bus_X122.limit_KV_High_3;
observable Bus_X122.limit_KV_High_2;
observable Bus_X122.limit_KV_High_1;
observable Bus_X122.limit_KV_Low;
observable Bus_X122.limit_KV_Low_5;
observable Bus_X122.limit_KV_Low_4;
observable Bus_X122.limit_KV_Low_3;
observable Bus_X122.limit_KV_Low_2;
observable Bus_X122.limit_KV_Low_1;
observable Bus_X122.limit_KV_Normal;
observable Bus_X110.entered_zero_zone_MVAR;
observable Bus_X110.limit_MVAR_High;
observable Bus_X110.limit_MVAR_High_5;
observable Bus_X110.limit_MVAR_High_4;
observable Bus_X110.limit_MVAR_High_3;
observable Bus_X110.limit_MVAR_High_2;
observable Bus_X110.limit_MVAR_High_1;
observable Bus_X110.limit_MVAR_Low;
observable Bus_X110.limit_MVAR_Low_5;
observable Bus_X110.limit_MVAR_Low_4;
observable Bus_X110.limit_MVAR_Low_3;
observable Bus_X110.limit_MVAR_Low_2;
observable Bus_X110.limit_MVAR_Low_1;
observable Bus_X110.limit_MVAR_Normal;
observable Bus_X110.entered_zero_zone_MW;
observable Bus_X110.limit_MW_High;
observable Bus_X110.limit_MW_High_5;
observable Bus_X110.limit_MW_High_4;
observable Bus_X110.limit_MW_High_3;
observable Bus_X110.limit_MW_High_2;
observable Bus_X110.limit_MW_High_1;
observable Bus_X110.limit_MW_Low;
observable Bus_X110.limit_MW_Low_5;
observable Bus_X110.limit_MW_Low_4;
observable Bus_X110.limit_MW_Low_3;
observable Bus_X110.limit_MW_Low_2;
observable Bus_X110.limit_MW_Low_1;
observable Bus_X110.limit_MW_Normal;
observable Bus_X110.entered_zero_zone_KV;
observable Bus_X110.limit_KV_High;
observable Bus_X110.limit_KV_High_5;
observable Bus_X110.limit_KV_High_4;
observable Bus_X110.limit_KV_High_3;
observable Bus_X110.limit_KV_High_2;
observable Bus_X110.limit_KV_High_1;
observable Bus_X110.limit_KV_Low;
observable Bus_X110.limit_KV_Low_5;
observable Bus_X110.limit_KV_Low_4;
observable Bus_X110.limit_KV_Low_3;
observable Bus_X110.limit_KV_Low_2;
observable Bus_X110.limit_KV_Low_1;
observable Bus_X110.limit_KV_Normal;
observable Bus_X34.entered_zero_zone_MVAR;
observable Bus_X34.limit_MVAR_High;
observable Bus_X34.limit_MVAR_High_5;
observable Bus_X34.limit_MVAR_High_4;
observable Bus_X34.limit_MVAR_High_3;
observable Bus_X34.limit_MVAR_High_2;
observable Bus_X34.limit_MVAR_High_1;
observable Bus_X34.limit_MVAR_Low;
observable Bus_X34.limit_MVAR_Low_5;
observable Bus_X34.limit_MVAR_Low_4;
observable Bus_X34.limit_MVAR_Low_3;
observable Bus_X34.limit_MVAR_Low_2;
observable Bus_X34.limit_MVAR_Low_1;
observable Bus_X34.limit_MVAR_Normal;
observable Bus_X34.entered_zero_zone_MW;
observable Bus_X34.limit_MW_High;
observable Bus_X34.limit_MW_High_5;
observable Bus_X34.limit_MW_High_4;
observable Bus_X34.limit_MW_High_3;
observable Bus_X34.limit_MW_High_2;
observable Bus_X34.limit_MW_High_1;
observable Bus_X34.limit_MW_Low;
observable Bus_X34.limit_MW_Low_5;
observable Bus_X34.limit_MW_Low_4;
observable Bus_X34.limit_MW_Low_3;
observable Bus_X34.limit_MW_Low_2;
observable Bus_X34.limit_MW_Low_1;
observable Bus_X34.limit_MW_Normal;
observable Bus_X34.entered_zero_zone_KV;
observable Bus_X34.limit_KV_High;
observable Bus_X34.limit_KV_High_5;
observable Bus_X34.limit_KV_High_4;
observable Bus_X34.limit_KV_High_3;
observable Bus_X34.limit_KV_High_2;
observable Bus_X34.limit_KV_High_1;
observable Bus_X34.limit_KV_Low;
observable Bus_X34.limit_KV_Low_5;
observable Bus_X34.limit_KV_Low_4;
observable Bus_X34.limit_KV_Low_3;
observable Bus_X34.limit_KV_Low_2;
observable Bus_X34.limit_KV_Low_1;
observable Bus_X34.limit_KV_Normal;
observable Bus_X36.entered_zero_zone_MVAR;
observable Bus_X36.limit_MVAR_High;
observable Bus_X36.limit_MVAR_High_5;
observable Bus_X36.limit_MVAR_High_4;
observable Bus_X36.limit_MVAR_High_3;
observable Bus_X36.limit_MVAR_High_2;
observable Bus_X36.limit_MVAR_High_1;
observable Bus_X36.limit_MVAR_Low;
observable Bus_X36.limit_MVAR_Low_5;
observable Bus_X36.limit_MVAR_Low_4;
observable Bus_X36.limit_MVAR_Low_3;
observable Bus_X36.limit_MVAR_Low_2;
observable Bus_X36.limit_MVAR_Low_1;
observable Bus_X36.limit_MVAR_Normal;
observable Bus_X36.entered_zero_zone_MW;
observable Bus_X36.limit_MW_High;
observable Bus_X36.limit_MW_High_5;
observable Bus_X36.limit_MW_High_4;
observable Bus_X36.limit_MW_High_3;
observable Bus_X36.limit_MW_High_2;
observable Bus_X36.limit_MW_High_1;
observable Bus_X36.limit_MW_Low;
observable Bus_X36.limit_MW_Low_5;
observable Bus_X36.limit_MW_Low_4;
observable Bus_X36.limit_MW_Low_3;
observable Bus_X36.limit_MW_Low_2;
observable Bus_X36.limit_MW_Low_1;
observable Bus_X36.limit_MW_Normal;
observable Bus_X36.entered_zero_zone_KV;
observable Bus_X36.limit_KV_High;
observable Bus_X36.limit_KV_High_5;
observable Bus_X36.limit_KV_High_4;
observable Bus_X36.limit_KV_High_3;
observable Bus_X36.limit_KV_High_2;
observable Bus_X36.limit_KV_High_1;
observable Bus_X36.limit_KV_Low;
observable Bus_X36.limit_KV_Low_5;
observable Bus_X36.limit_KV_Low_4;
observable Bus_X36.limit_KV_Low_3;
observable Bus_X36.limit_KV_Low_2;
observable Bus_X36.limit_KV_Low_1;
observable Bus_X36.limit_KV_Normal;
observable Bus_X38.entered_zero_zone_MVAR;
observable Bus_X38.limit_MVAR_High;
observable Bus_X38.limit_MVAR_High_5;
observable Bus_X38.limit_MVAR_High_4;
observable Bus_X38.limit_MVAR_High_3;
observable Bus_X38.limit_MVAR_High_2;
observable Bus_X38.limit_MVAR_High_1;
observable Bus_X38.limit_MVAR_Low;
observable Bus_X38.limit_MVAR_Low_5;
observable Bus_X38.limit_MVAR_Low_4;
observable Bus_X38.limit_MVAR_Low_3;
observable Bus_X38.limit_MVAR_Low_2;
observable Bus_X38.limit_MVAR_Low_1;
observable Bus_X38.limit_MVAR_Normal;
observable Bus_X38.entered_zero_zone_MW;
observable Bus_X38.limit_MW_High;
observable Bus_X38.limit_MW_High_5;
observable Bus_X38.limit_MW_High_4;
observable Bus_X38.limit_MW_High_3;
observable Bus_X38.limit_MW_High_2;
observable Bus_X38.limit_MW_High_1;
observable Bus_X38.limit_MW_Low;
observable Bus_X38.limit_MW_Low_5;
observable Bus_X38.limit_MW_Low_4;
observable Bus_X38.limit_MW_Low_3;
observable Bus_X38.limit_MW_Low_2;
observable Bus_X38.limit_MW_Low_1;
observable Bus_X38.limit_MW_Normal;
observable Bus_X38.entered_zero_zone_KV;
observable Bus_X38.limit_KV_High;
observable Bus_X38.limit_KV_High_5;
observable Bus_X38.limit_KV_High_4;
observable Bus_X38.limit_KV_High_3;
observable Bus_X38.limit_KV_High_2;
observable Bus_X38.limit_KV_High_1;
observable Bus_X38.limit_KV_Low;
observable Bus_X38.limit_KV_Low_5;
observable Bus_X38.limit_KV_Low_4;
observable Bus_X38.limit_KV_Low_3;
observable Bus_X38.limit_KV_Low_2;
observable Bus_X38.limit_KV_Low_1;
observable Bus_X38.limit_KV_Normal;
observable Bus_X40.entered_zero_zone_MVAR;
observable Bus_X40.limit_MVAR_High;
observable Bus_X40.limit_MVAR_High_5;
observable Bus_X40.limit_MVAR_High_4;
observable Bus_X40.limit_MVAR_High_3;
observable Bus_X40.limit_MVAR_High_2;
observable Bus_X40.limit_MVAR_High_1;
observable Bus_X40.limit_MVAR_Low;
observable Bus_X40.limit_MVAR_Low_5;
observable Bus_X40.limit_MVAR_Low_4;
observable Bus_X40.limit_MVAR_Low_3;
observable Bus_X40.limit_MVAR_Low_2;
observable Bus_X40.limit_MVAR_Low_1;
observable Bus_X40.limit_MVAR_Normal;
observable Bus_X40.entered_zero_zone_MW;
observable Bus_X40.limit_MW_High;
observable Bus_X40.limit_MW_High_5;
observable Bus_X40.limit_MW_High_4;
observable Bus_X40.limit_MW_High_3;
observable Bus_X40.limit_MW_High_2;
observable Bus_X40.limit_MW_High_1;
observable Bus_X40.limit_MW_Low;
observable Bus_X40.limit_MW_Low_5;
observable Bus_X40.limit_MW_Low_4;
observable Bus_X40.limit_MW_Low_3;
observable Bus_X40.limit_MW_Low_2;
observable Bus_X40.limit_MW_Low_1;
observable Bus_X40.limit_MW_Normal;
observable Bus_X40.entered_zero_zone_KV;
observable Bus_X40.limit_KV_High;
observable Bus_X40.limit_KV_High_5;
observable Bus_X40.limit_KV_High_4;
observable Bus_X40.limit_KV_High_3;
observable Bus_X40.limit_KV_High_2;
observable Bus_X40.limit_KV_High_1;
observable Bus_X40.limit_KV_Low;
observable Bus_X40.limit_KV_Low_5;
observable Bus_X40.limit_KV_Low_4;
observable Bus_X40.limit_KV_Low_3;
observable Bus_X40.limit_KV_Low_2;
observable Bus_X40.limit_KV_Low_1;
observable Bus_X40.limit_KV_Normal;
observable Bus_X103.entered_zero_zone_MVAR;
observable Bus_X103.limit_MVAR_High;
observable Bus_X103.limit_MVAR_High_5;
observable Bus_X103.limit_MVAR_High_4;
observable Bus_X103.limit_MVAR_High_3;
observable Bus_X103.limit_MVAR_High_2;
observable Bus_X103.limit_MVAR_High_1;
observable Bus_X103.limit_MVAR_Low;
observable Bus_X103.limit_MVAR_Low_5;
observable Bus_X103.limit_MVAR_Low_4;
observable Bus_X103.limit_MVAR_Low_3;
observable Bus_X103.limit_MVAR_Low_2;
observable Bus_X103.limit_MVAR_Low_1;
observable Bus_X103.limit_MVAR_Normal;
observable Bus_X103.entered_zero_zone_MW;
observable Bus_X103.limit_MW_High;
observable Bus_X103.limit_MW_High_5;
observable Bus_X103.limit_MW_High_4;
observable Bus_X103.limit_MW_High_3;
observable Bus_X103.limit_MW_High_2;
observable Bus_X103.limit_MW_High_1;
observable Bus_X103.limit_MW_Low;
observable Bus_X103.limit_MW_Low_5;
observable Bus_X103.limit_MW_Low_4;
observable Bus_X103.limit_MW_Low_3;
observable Bus_X103.limit_MW_Low_2;
observable Bus_X103.limit_MW_Low_1;
observable Bus_X103.limit_MW_Normal;
observable Bus_X103.entered_zero_zone_KV;
observable Bus_X103.limit_KV_High;
observable Bus_X103.limit_KV_High_5;
observable Bus_X103.limit_KV_High_4;
observable Bus_X103.limit_KV_High_3;
observable Bus_X103.limit_KV_High_2;
observable Bus_X103.limit_KV_High_1;
observable Bus_X103.limit_KV_Low;
observable Bus_X103.limit_KV_Low_5;
observable Bus_X103.limit_KV_Low_4;
observable Bus_X103.limit_KV_Low_3;
observable Bus_X103.limit_KV_Low_2;
observable Bus_X103.limit_KV_Low_1;
observable Bus_X103.limit_KV_Normal;
observable Bus_X102.entered_zero_zone_MVAR;
observable Bus_X102.limit_MVAR_High;
observable Bus_X102.limit_MVAR_High_5;
observable Bus_X102.limit_MVAR_High_4;
observable Bus_X102.limit_MVAR_High_3;
observable Bus_X102.limit_MVAR_High_2;
observable Bus_X102.limit_MVAR_High_1;
observable Bus_X102.limit_MVAR_Low;
observable Bus_X102.limit_MVAR_Low_5;
observable Bus_X102.limit_MVAR_Low_4;
observable Bus_X102.limit_MVAR_Low_3;
observable Bus_X102.limit_MVAR_Low_2;
observable Bus_X102.limit_MVAR_Low_1;
observable Bus_X102.limit_MVAR_Normal;
observable Bus_X102.entered_zero_zone_MW;
observable Bus_X102.limit_MW_High;
observable Bus_X102.limit_MW_High_5;
observable Bus_X102.limit_MW_High_4;
observable Bus_X102.limit_MW_High_3;
observable Bus_X102.limit_MW_High_2;
observable Bus_X102.limit_MW_High_1;
observable Bus_X102.limit_MW_Low;
observable Bus_X102.limit_MW_Low_5;
observable Bus_X102.limit_MW_Low_4;
observable Bus_X102.limit_MW_Low_3;
observable Bus_X102.limit_MW_Low_2;
observable Bus_X102.limit_MW_Low_1;
observable Bus_X102.limit_MW_Normal;
observable Bus_X102.entered_zero_zone_KV;
observable Bus_X102.limit_KV_High;
observable Bus_X102.limit_KV_High_5;
observable Bus_X102.limit_KV_High_4;
observable Bus_X102.limit_KV_High_3;
observable Bus_X102.limit_KV_High_2;
observable Bus_X102.limit_KV_High_1;
observable Bus_X102.limit_KV_Low;
observable Bus_X102.limit_KV_Low_5;
observable Bus_X102.limit_KV_Low_4;
observable Bus_X102.limit_KV_Low_3;
observable Bus_X102.limit_KV_Low_2;
observable Bus_X102.limit_KV_Low_1;
observable Bus_X102.limit_KV_Normal;
observable Bus_X123.entered_zero_zone_MVAR;
observable Bus_X123.limit_MVAR_High;
observable Bus_X123.limit_MVAR_High_5;
observable Bus_X123.limit_MVAR_High_4;
observable Bus_X123.limit_MVAR_High_3;
observable Bus_X123.limit_MVAR_High_2;
observable Bus_X123.limit_MVAR_High_1;
observable Bus_X123.limit_MVAR_Low;
observable Bus_X123.limit_MVAR_Low_5;
observable Bus_X123.limit_MVAR_Low_4;
observable Bus_X123.limit_MVAR_Low_3;
observable Bus_X123.limit_MVAR_Low_2;
observable Bus_X123.limit_MVAR_Low_1;
observable Bus_X123.limit_MVAR_Normal;
observable Bus_X123.entered_zero_zone_MW;
observable Bus_X123.limit_MW_High;
observable Bus_X123.limit_MW_High_5;
observable Bus_X123.limit_MW_High_4;
observable Bus_X123.limit_MW_High_3;
observable Bus_X123.limit_MW_High_2;
observable Bus_X123.limit_MW_High_1;
observable Bus_X123.limit_MW_Low;
observable Bus_X123.limit_MW_Low_5;
observable Bus_X123.limit_MW_Low_4;
observable Bus_X123.limit_MW_Low_3;
observable Bus_X123.limit_MW_Low_2;
observable Bus_X123.limit_MW_Low_1;
observable Bus_X123.limit_MW_Normal;
observable Bus_X123.entered_zero_zone_KV;
observable Bus_X123.limit_KV_High;
observable Bus_X123.limit_KV_High_5;
observable Bus_X123.limit_KV_High_4;
observable Bus_X123.limit_KV_High_3;
observable Bus_X123.limit_KV_High_2;
observable Bus_X123.limit_KV_High_1;
observable Bus_X123.limit_KV_Low;
observable Bus_X123.limit_KV_Low_5;
observable Bus_X123.limit_KV_Low_4;
observable Bus_X123.limit_KV_Low_3;
observable Bus_X123.limit_KV_Low_2;
observable Bus_X123.limit_KV_Low_1;
observable Bus_X123.limit_KV_Normal;
observable Bus_X124.entered_zero_zone_MVAR;
observable Bus_X124.limit_MVAR_High;
observable Bus_X124.limit_MVAR_High_5;
observable Bus_X124.limit_MVAR_High_4;
observable Bus_X124.limit_MVAR_High_3;
observable Bus_X124.limit_MVAR_High_2;
observable Bus_X124.limit_MVAR_High_1;
observable Bus_X124.limit_MVAR_Low;
observable Bus_X124.limit_MVAR_Low_5;
observable Bus_X124.limit_MVAR_Low_4;
observable Bus_X124.limit_MVAR_Low_3;
observable Bus_X124.limit_MVAR_Low_2;
observable Bus_X124.limit_MVAR_Low_1;
observable Bus_X124.limit_MVAR_Normal;
observable Bus_X124.entered_zero_zone_MW;
observable Bus_X124.limit_MW_High;
observable Bus_X124.limit_MW_High_5;
observable Bus_X124.limit_MW_High_4;
observable Bus_X124.limit_MW_High_3;
observable Bus_X124.limit_MW_High_2;
observable Bus_X124.limit_MW_High_1;
observable Bus_X124.limit_MW_Low;
observable Bus_X124.limit_MW_Low_5;
observable Bus_X124.limit_MW_Low_4;
observable Bus_X124.limit_MW_Low_3;
observable Bus_X124.limit_MW_Low_2;
observable Bus_X124.limit_MW_Low_1;
observable Bus_X124.limit_MW_Normal;
observable Bus_X124.entered_zero_zone_KV;
observable Bus_X124.limit_KV_High;
observable Bus_X124.limit_KV_High_5;
observable Bus_X124.limit_KV_High_4;
observable Bus_X124.limit_KV_High_3;
observable Bus_X124.limit_KV_High_2;
observable Bus_X124.limit_KV_High_1;
observable Bus_X124.limit_KV_Low;
observable Bus_X124.limit_KV_Low_5;
observable Bus_X124.limit_KV_Low_4;
observable Bus_X124.limit_KV_Low_3;
observable Bus_X124.limit_KV_Low_2;
observable Bus_X124.limit_KV_Low_1;
observable Bus_X124.limit_KV_Normal;
observable Bus_X116.entered_zero_zone_MVAR;
observable Bus_X116.limit_MVAR_High;
observable Bus_X116.limit_MVAR_High_5;
observable Bus_X116.limit_MVAR_High_4;
observable Bus_X116.limit_MVAR_High_3;
observable Bus_X116.limit_MVAR_High_2;
observable Bus_X116.limit_MVAR_High_1;
observable Bus_X116.limit_MVAR_Low;
observable Bus_X116.limit_MVAR_Low_5;
observable Bus_X116.limit_MVAR_Low_4;
observable Bus_X116.limit_MVAR_Low_3;
observable Bus_X116.limit_MVAR_Low_2;
observable Bus_X116.limit_MVAR_Low_1;
observable Bus_X116.limit_MVAR_Normal;
observable Bus_X116.entered_zero_zone_MW;
observable Bus_X116.limit_MW_High;
observable Bus_X116.limit_MW_High_5;
observable Bus_X116.limit_MW_High_4;
observable Bus_X116.limit_MW_High_3;
observable Bus_X116.limit_MW_High_2;
observable Bus_X116.limit_MW_High_1;
observable Bus_X116.limit_MW_Low;
observable Bus_X116.limit_MW_Low_5;
observable Bus_X116.limit_MW_Low_4;
observable Bus_X116.limit_MW_Low_3;
observable Bus_X116.limit_MW_Low_2;
observable Bus_X116.limit_MW_Low_1;
observable Bus_X116.limit_MW_Normal;
observable Bus_X116.entered_zero_zone_KV;
observable Bus_X116.limit_KV_High;
observable Bus_X116.limit_KV_High_5;
observable Bus_X116.limit_KV_High_4;
observable Bus_X116.limit_KV_High_3;
observable Bus_X116.limit_KV_High_2;
observable Bus_X116.limit_KV_High_1;
observable Bus_X116.limit_KV_Low;
observable Bus_X116.limit_KV_Low_5;
observable Bus_X116.limit_KV_Low_4;
observable Bus_X116.limit_KV_Low_3;
observable Bus_X116.limit_KV_Low_2;
observable Bus_X116.limit_KV_Low_1;
observable Bus_X116.limit_KV_Normal;
observable Bus_X114.entered_zero_zone_MVAR;
observable Bus_X114.limit_MVAR_High;
observable Bus_X114.limit_MVAR_High_5;
observable Bus_X114.limit_MVAR_High_4;
observable Bus_X114.limit_MVAR_High_3;
observable Bus_X114.limit_MVAR_High_2;
observable Bus_X114.limit_MVAR_High_1;
observable Bus_X114.limit_MVAR_Low;
observable Bus_X114.limit_MVAR_Low_5;
observable Bus_X114.limit_MVAR_Low_4;
observable Bus_X114.limit_MVAR_Low_3;
observable Bus_X114.limit_MVAR_Low_2;
observable Bus_X114.limit_MVAR_Low_1;
observable Bus_X114.limit_MVAR_Normal;
observable Bus_X114.entered_zero_zone_MW;
observable Bus_X114.limit_MW_High;
observable Bus_X114.limit_MW_High_5;
observable Bus_X114.limit_MW_High_4;
observable Bus_X114.limit_MW_High_3;
observable Bus_X114.limit_MW_High_2;
observable Bus_X114.limit_MW_High_1;
observable Bus_X114.limit_MW_Low;
observable Bus_X114.limit_MW_Low_5;
observable Bus_X114.limit_MW_Low_4;
observable Bus_X114.limit_MW_Low_3;
observable Bus_X114.limit_MW_Low_2;
observable Bus_X114.limit_MW_Low_1;
observable Bus_X114.limit_MW_Normal;
observable Bus_X114.entered_zero_zone_KV;
observable Bus_X114.limit_KV_High;
observable Bus_X114.limit_KV_High_5;
observable Bus_X114.limit_KV_High_4;
observable Bus_X114.limit_KV_High_3;
observable Bus_X114.limit_KV_High_2;
observable Bus_X114.limit_KV_High_1;
observable Bus_X114.limit_KV_Low;
observable Bus_X114.limit_KV_Low_5;
observable Bus_X114.limit_KV_Low_4;
observable Bus_X114.limit_KV_Low_3;
observable Bus_X114.limit_KV_Low_2;
observable Bus_X114.limit_KV_Low_1;
observable Bus_X114.limit_KV_Normal;
observable Bus_X105.entered_zero_zone_MVAR;
observable Bus_X105.limit_MVAR_High;
observable Bus_X105.limit_MVAR_High_5;
observable Bus_X105.limit_MVAR_High_4;
observable Bus_X105.limit_MVAR_High_3;
observable Bus_X105.limit_MVAR_High_2;
observable Bus_X105.limit_MVAR_High_1;
observable Bus_X105.limit_MVAR_Low;
observable Bus_X105.limit_MVAR_Low_5;
observable Bus_X105.limit_MVAR_Low_4;
observable Bus_X105.limit_MVAR_Low_3;
observable Bus_X105.limit_MVAR_Low_2;
observable Bus_X105.limit_MVAR_Low_1;
observable Bus_X105.limit_MVAR_Normal;
observable Bus_X105.entered_zero_zone_MW;
observable Bus_X105.limit_MW_High;
observable Bus_X105.limit_MW_High_5;
observable Bus_X105.limit_MW_High_4;
observable Bus_X105.limit_MW_High_3;
observable Bus_X105.limit_MW_High_2;
observable Bus_X105.limit_MW_High_1;
observable Bus_X105.limit_MW_Low;
observable Bus_X105.limit_MW_Low_5;
observable Bus_X105.limit_MW_Low_4;
observable Bus_X105.limit_MW_Low_3;
observable Bus_X105.limit_MW_Low_2;
observable Bus_X105.limit_MW_Low_1;
observable Bus_X105.limit_MW_Normal;
observable Bus_X105.entered_zero_zone_KV;
observable Bus_X105.limit_KV_High;
observable Bus_X105.limit_KV_High_5;
observable Bus_X105.limit_KV_High_4;
observable Bus_X105.limit_KV_High_3;
observable Bus_X105.limit_KV_High_2;
observable Bus_X105.limit_KV_High_1;
observable Bus_X105.limit_KV_Low;
observable Bus_X105.limit_KV_Low_5;
observable Bus_X105.limit_KV_Low_4;
observable Bus_X105.limit_KV_Low_3;
observable Bus_X105.limit_KV_Low_2;
observable Bus_X105.limit_KV_Low_1;
observable Bus_X105.limit_KV_Normal;
observable Bus_X52.entered_zero_zone_MVAR;
observable Bus_X52.limit_MVAR_High;
observable Bus_X52.limit_MVAR_High_5;
observable Bus_X52.limit_MVAR_High_4;
observable Bus_X52.limit_MVAR_High_3;
observable Bus_X52.limit_MVAR_High_2;
observable Bus_X52.limit_MVAR_High_1;
observable Bus_X52.limit_MVAR_Low;
observable Bus_X52.limit_MVAR_Low_5;
observable Bus_X52.limit_MVAR_Low_4;
observable Bus_X52.limit_MVAR_Low_3;
observable Bus_X52.limit_MVAR_Low_2;
observable Bus_X52.limit_MVAR_Low_1;
observable Bus_X52.limit_MVAR_Normal;
observable Bus_X52.entered_zero_zone_MW;
observable Bus_X52.limit_MW_High;
observable Bus_X52.limit_MW_High_5;
observable Bus_X52.limit_MW_High_4;
observable Bus_X52.limit_MW_High_3;
observable Bus_X52.limit_MW_High_2;
observable Bus_X52.limit_MW_High_1;
observable Bus_X52.limit_MW_Low;
observable Bus_X52.limit_MW_Low_5;
observable Bus_X52.limit_MW_Low_4;
observable Bus_X52.limit_MW_Low_3;
observable Bus_X52.limit_MW_Low_2;
observable Bus_X52.limit_MW_Low_1;
observable Bus_X52.limit_MW_Normal;
observable Bus_X52.entered_zero_zone_KV;
observable Bus_X52.limit_KV_High;
observable Bus_X52.limit_KV_High_5;
observable Bus_X52.limit_KV_High_4;
observable Bus_X52.limit_KV_High_3;
observable Bus_X52.limit_KV_High_2;
observable Bus_X52.limit_KV_High_1;
observable Bus_X52.limit_KV_Low;
observable Bus_X52.limit_KV_Low_5;
observable Bus_X52.limit_KV_Low_4;
observable Bus_X52.limit_KV_Low_3;
observable Bus_X52.limit_KV_Low_2;
observable Bus_X52.limit_KV_Low_1;
observable Bus_X52.limit_KV_Normal;
observable Bus_X54.entered_zero_zone_MVAR;
observable Bus_X54.limit_MVAR_High;
observable Bus_X54.limit_MVAR_High_5;
observable Bus_X54.limit_MVAR_High_4;
observable Bus_X54.limit_MVAR_High_3;
observable Bus_X54.limit_MVAR_High_2;
observable Bus_X54.limit_MVAR_High_1;
observable Bus_X54.limit_MVAR_Low;
observable Bus_X54.limit_MVAR_Low_5;
observable Bus_X54.limit_MVAR_Low_4;
observable Bus_X54.limit_MVAR_Low_3;
observable Bus_X54.limit_MVAR_Low_2;
observable Bus_X54.limit_MVAR_Low_1;
observable Bus_X54.limit_MVAR_Normal;
observable Bus_X54.entered_zero_zone_MW;
observable Bus_X54.limit_MW_High;
observable Bus_X54.limit_MW_High_5;
observable Bus_X54.limit_MW_High_4;
observable Bus_X54.limit_MW_High_3;
observable Bus_X54.limit_MW_High_2;
observable Bus_X54.limit_MW_High_1;
observable Bus_X54.limit_MW_Low;
observable Bus_X54.limit_MW_Low_5;
observable Bus_X54.limit_MW_Low_4;
observable Bus_X54.limit_MW_Low_3;
observable Bus_X54.limit_MW_Low_2;
observable Bus_X54.limit_MW_Low_1;
observable Bus_X54.limit_MW_Normal;
observable Bus_X54.entered_zero_zone_KV;
observable Bus_X54.limit_KV_High;
observable Bus_X54.limit_KV_High_5;
observable Bus_X54.limit_KV_High_4;
observable Bus_X54.limit_KV_High_3;
observable Bus_X54.limit_KV_High_2;
observable Bus_X54.limit_KV_High_1;
observable Bus_X54.limit_KV_Low;
observable Bus_X54.limit_KV_Low_5;
observable Bus_X54.limit_KV_Low_4;
observable Bus_X54.limit_KV_Low_3;
observable Bus_X54.limit_KV_Low_2;
observable Bus_X54.limit_KV_Low_1;
observable Bus_X54.limit_KV_Normal;
observable Bus_X56.entered_zero_zone_MVAR;
observable Bus_X56.limit_MVAR_High;
observable Bus_X56.limit_MVAR_High_5;
observable Bus_X56.limit_MVAR_High_4;
observable Bus_X56.limit_MVAR_High_3;
observable Bus_X56.limit_MVAR_High_2;
observable Bus_X56.limit_MVAR_High_1;
observable Bus_X56.limit_MVAR_Low;
observable Bus_X56.limit_MVAR_Low_5;
observable Bus_X56.limit_MVAR_Low_4;
observable Bus_X56.limit_MVAR_Low_3;
observable Bus_X56.limit_MVAR_Low_2;
observable Bus_X56.limit_MVAR_Low_1;
observable Bus_X56.limit_MVAR_Normal;
observable Bus_X56.entered_zero_zone_MW;
observable Bus_X56.limit_MW_High;
observable Bus_X56.limit_MW_High_5;
observable Bus_X56.limit_MW_High_4;
observable Bus_X56.limit_MW_High_3;
observable Bus_X56.limit_MW_High_2;
observable Bus_X56.limit_MW_High_1;
observable Bus_X56.limit_MW_Low;
observable Bus_X56.limit_MW_Low_5;
observable Bus_X56.limit_MW_Low_4;
observable Bus_X56.limit_MW_Low_3;
observable Bus_X56.limit_MW_Low_2;
observable Bus_X56.limit_MW_Low_1;
observable Bus_X56.limit_MW_Normal;
observable Bus_X56.entered_zero_zone_KV;
observable Bus_X56.limit_KV_High;
observable Bus_X56.limit_KV_High_5;
observable Bus_X56.limit_KV_High_4;
observable Bus_X56.limit_KV_High_3;
observable Bus_X56.limit_KV_High_2;
observable Bus_X56.limit_KV_High_1;
observable Bus_X56.limit_KV_Low;
observable Bus_X56.limit_KV_Low_5;
observable Bus_X56.limit_KV_Low_4;
observable Bus_X56.limit_KV_Low_3;
observable Bus_X56.limit_KV_Low_2;
observable Bus_X56.limit_KV_Low_1;
observable Bus_X56.limit_KV_Normal;
observable Bus_X58.entered_zero_zone_MVAR;
observable Bus_X58.limit_MVAR_High;
observable Bus_X58.limit_MVAR_High_5;
observable Bus_X58.limit_MVAR_High_4;
observable Bus_X58.limit_MVAR_High_3;
observable Bus_X58.limit_MVAR_High_2;
observable Bus_X58.limit_MVAR_High_1;
observable Bus_X58.limit_MVAR_Low;
observable Bus_X58.limit_MVAR_Low_5;
observable Bus_X58.limit_MVAR_Low_4;
observable Bus_X58.limit_MVAR_Low_3;
observable Bus_X58.limit_MVAR_Low_2;
observable Bus_X58.limit_MVAR_Low_1;
observable Bus_X58.limit_MVAR_Normal;
observable Bus_X58.entered_zero_zone_MW;
observable Bus_X58.limit_MW_High;
observable Bus_X58.limit_MW_High_5;
observable Bus_X58.limit_MW_High_4;
observable Bus_X58.limit_MW_High_3;
observable Bus_X58.limit_MW_High_2;
observable Bus_X58.limit_MW_High_1;
observable Bus_X58.limit_MW_Low;
observable Bus_X58.limit_MW_Low_5;
observable Bus_X58.limit_MW_Low_4;
observable Bus_X58.limit_MW_Low_3;
observable Bus_X58.limit_MW_Low_2;
observable Bus_X58.limit_MW_Low_1;
observable Bus_X58.limit_MW_Normal;
observable Bus_X58.entered_zero_zone_KV;
observable Bus_X58.limit_KV_High;
observable Bus_X58.limit_KV_High_5;
observable Bus_X58.limit_KV_High_4;
observable Bus_X58.limit_KV_High_3;
observable Bus_X58.limit_KV_High_2;
observable Bus_X58.limit_KV_High_1;
observable Bus_X58.limit_KV_Low;
observable Bus_X58.limit_KV_Low_5;
observable Bus_X58.limit_KV_Low_4;
observable Bus_X58.limit_KV_Low_3;
observable Bus_X58.limit_KV_Low_2;
observable Bus_X58.limit_KV_Low_1;
observable Bus_X58.limit_KV_Normal;
observable Bus_X60.entered_zero_zone_MVAR;
observable Bus_X60.limit_MVAR_High;
observable Bus_X60.limit_MVAR_High_5;
observable Bus_X60.limit_MVAR_High_4;
observable Bus_X60.limit_MVAR_High_3;
observable Bus_X60.limit_MVAR_High_2;
observable Bus_X60.limit_MVAR_High_1;
observable Bus_X60.limit_MVAR_Low;
observable Bus_X60.limit_MVAR_Low_5;
observable Bus_X60.limit_MVAR_Low_4;
observable Bus_X60.limit_MVAR_Low_3;
observable Bus_X60.limit_MVAR_Low_2;
observable Bus_X60.limit_MVAR_Low_1;
observable Bus_X60.limit_MVAR_Normal;
observable Bus_X60.entered_zero_zone_MW;
observable Bus_X60.limit_MW_High;
observable Bus_X60.limit_MW_High_5;
observable Bus_X60.limit_MW_High_4;
observable Bus_X60.limit_MW_High_3;
observable Bus_X60.limit_MW_High_2;
observable Bus_X60.limit_MW_High_1;
observable Bus_X60.limit_MW_Low;
observable Bus_X60.limit_MW_Low_5;
observable Bus_X60.limit_MW_Low_4;
observable Bus_X60.limit_MW_Low_3;
observable Bus_X60.limit_MW_Low_2;
observable Bus_X60.limit_MW_Low_1;
observable Bus_X60.limit_MW_Normal;
observable Bus_X60.entered_zero_zone_KV;
observable Bus_X60.limit_KV_High;
observable Bus_X60.limit_KV_High_5;
observable Bus_X60.limit_KV_High_4;
observable Bus_X60.limit_KV_High_3;
observable Bus_X60.limit_KV_High_2;
observable Bus_X60.limit_KV_High_1;
observable Bus_X60.limit_KV_Low;
observable Bus_X60.limit_KV_Low_5;
observable Bus_X60.limit_KV_Low_4;
observable Bus_X60.limit_KV_Low_3;
observable Bus_X60.limit_KV_Low_2;
observable Bus_X60.limit_KV_Low_1;
observable Bus_X60.limit_KV_Normal;
observable Bus_X125.entered_zero_zone_MVAR;
observable Bus_X125.limit_MVAR_High;
observable Bus_X125.limit_MVAR_High_5;
observable Bus_X125.limit_MVAR_High_4;
observable Bus_X125.limit_MVAR_High_3;
observable Bus_X125.limit_MVAR_High_2;
observable Bus_X125.limit_MVAR_High_1;
observable Bus_X125.limit_MVAR_Low;
observable Bus_X125.limit_MVAR_Low_5;
observable Bus_X125.limit_MVAR_Low_4;
observable Bus_X125.limit_MVAR_Low_3;
observable Bus_X125.limit_MVAR_Low_2;
observable Bus_X125.limit_MVAR_Low_1;
observable Bus_X125.limit_MVAR_Normal;
observable Bus_X125.entered_zero_zone_MW;
observable Bus_X125.limit_MW_High;
observable Bus_X125.limit_MW_High_5;
observable Bus_X125.limit_MW_High_4;
observable Bus_X125.limit_MW_High_3;
observable Bus_X125.limit_MW_High_2;
observable Bus_X125.limit_MW_High_1;
observable Bus_X125.limit_MW_Low;
observable Bus_X125.limit_MW_Low_5;
observable Bus_X125.limit_MW_Low_4;
observable Bus_X125.limit_MW_Low_3;
observable Bus_X125.limit_MW_Low_2;
observable Bus_X125.limit_MW_Low_1;
observable Bus_X125.limit_MW_Normal;
observable Bus_X125.entered_zero_zone_KV;
observable Bus_X125.limit_KV_High;
observable Bus_X125.limit_KV_High_5;
observable Bus_X125.limit_KV_High_4;
observable Bus_X125.limit_KV_High_3;
observable Bus_X125.limit_KV_High_2;
observable Bus_X125.limit_KV_High_1;
observable Bus_X125.limit_KV_Low;
observable Bus_X125.limit_KV_Low_5;
observable Bus_X125.limit_KV_Low_4;
observable Bus_X125.limit_KV_Low_3;
observable Bus_X125.limit_KV_Low_2;
observable Bus_X125.limit_KV_Low_1;
observable Bus_X125.limit_KV_Normal;
observable Bus_X112.entered_zero_zone_MVAR;
observable Bus_X112.limit_MVAR_High;
observable Bus_X112.limit_MVAR_High_5;
observable Bus_X112.limit_MVAR_High_4;
observable Bus_X112.limit_MVAR_High_3;
observable Bus_X112.limit_MVAR_High_2;
observable Bus_X112.limit_MVAR_High_1;
observable Bus_X112.limit_MVAR_Low;
observable Bus_X112.limit_MVAR_Low_5;
observable Bus_X112.limit_MVAR_Low_4;
observable Bus_X112.limit_MVAR_Low_3;
observable Bus_X112.limit_MVAR_Low_2;
observable Bus_X112.limit_MVAR_Low_1;
observable Bus_X112.limit_MVAR_Normal;
observable Bus_X112.entered_zero_zone_MW;
observable Bus_X112.limit_MW_High;
observable Bus_X112.limit_MW_High_5;
observable Bus_X112.limit_MW_High_4;
observable Bus_X112.limit_MW_High_3;
observable Bus_X112.limit_MW_High_2;
observable Bus_X112.limit_MW_High_1;
observable Bus_X112.limit_MW_Low;
observable Bus_X112.limit_MW_Low_5;
observable Bus_X112.limit_MW_Low_4;
observable Bus_X112.limit_MW_Low_3;
observable Bus_X112.limit_MW_Low_2;
observable Bus_X112.limit_MW_Low_1;
observable Bus_X112.limit_MW_Normal;
observable Bus_X112.entered_zero_zone_KV;
observable Bus_X112.limit_KV_High;
observable Bus_X112.limit_KV_High_5;
observable Bus_X112.limit_KV_High_4;
observable Bus_X112.limit_KV_High_3;
observable Bus_X112.limit_KV_High_2;
observable Bus_X112.limit_KV_High_1;
observable Bus_X112.limit_KV_Low;
observable Bus_X112.limit_KV_Low_5;
observable Bus_X112.limit_KV_Low_4;
observable Bus_X112.limit_KV_Low_3;
observable Bus_X112.limit_KV_Low_2;
observable Bus_X112.limit_KV_Low_1;
observable Bus_X112.limit_KV_Normal;
observable Bus_X106.entered_zero_zone_MVAR;
observable Bus_X106.limit_MVAR_High;
observable Bus_X106.limit_MVAR_High_5;
observable Bus_X106.limit_MVAR_High_4;
observable Bus_X106.limit_MVAR_High_3;
observable Bus_X106.limit_MVAR_High_2;
observable Bus_X106.limit_MVAR_High_1;
observable Bus_X106.limit_MVAR_Low;
observable Bus_X106.limit_MVAR_Low_5;
observable Bus_X106.limit_MVAR_Low_4;
observable Bus_X106.limit_MVAR_Low_3;
observable Bus_X106.limit_MVAR_Low_2;
observable Bus_X106.limit_MVAR_Low_1;
observable Bus_X106.limit_MVAR_Normal;
observable Bus_X106.entered_zero_zone_MW;
observable Bus_X106.limit_MW_High;
observable Bus_X106.limit_MW_High_5;
observable Bus_X106.limit_MW_High_4;
observable Bus_X106.limit_MW_High_3;
observable Bus_X106.limit_MW_High_2;
observable Bus_X106.limit_MW_High_1;
observable Bus_X106.limit_MW_Low;
observable Bus_X106.limit_MW_Low_5;
observable Bus_X106.limit_MW_Low_4;
observable Bus_X106.limit_MW_Low_3;
observable Bus_X106.limit_MW_Low_2;
observable Bus_X106.limit_MW_Low_1;
observable Bus_X106.limit_MW_Normal;
observable Bus_X106.entered_zero_zone_KV;
observable Bus_X106.limit_KV_High;
observable Bus_X106.limit_KV_High_5;
observable Bus_X106.limit_KV_High_4;
observable Bus_X106.limit_KV_High_3;
observable Bus_X106.limit_KV_High_2;
observable Bus_X106.limit_KV_High_1;
observable Bus_X106.limit_KV_Low;
observable Bus_X106.limit_KV_Low_5;
observable Bus_X106.limit_KV_Low_4;
observable Bus_X106.limit_KV_Low_3;
observable Bus_X106.limit_KV_Low_2;
observable Bus_X106.limit_KV_Low_1;
observable Bus_X106.limit_KV_Normal;
observable Bus_X104.entered_zero_zone_MVAR;
observable Bus_X104.limit_MVAR_High;
observable Bus_X104.limit_MVAR_High_5;
observable Bus_X104.limit_MVAR_High_4;
observable Bus_X104.limit_MVAR_High_3;
observable Bus_X104.limit_MVAR_High_2;
observable Bus_X104.limit_MVAR_High_1;
observable Bus_X104.limit_MVAR_Low;
observable Bus_X104.limit_MVAR_Low_5;
observable Bus_X104.limit_MVAR_Low_4;
observable Bus_X104.limit_MVAR_Low_3;
observable Bus_X104.limit_MVAR_Low_2;
observable Bus_X104.limit_MVAR_Low_1;
observable Bus_X104.limit_MVAR_Normal;
observable Bus_X104.entered_zero_zone_MW;
observable Bus_X104.limit_MW_High;
observable Bus_X104.limit_MW_High_5;
observable Bus_X104.limit_MW_High_4;
observable Bus_X104.limit_MW_High_3;
observable Bus_X104.limit_MW_High_2;
observable Bus_X104.limit_MW_High_1;
observable Bus_X104.limit_MW_Low;
observable Bus_X104.limit_MW_Low_5;
observable Bus_X104.limit_MW_Low_4;
observable Bus_X104.limit_MW_Low_3;
observable Bus_X104.limit_MW_Low_2;
observable Bus_X104.limit_MW_Low_1;
observable Bus_X104.limit_MW_Normal;
observable Bus_X104.entered_zero_zone_KV;
observable Bus_X104.limit_KV_High;
observable Bus_X104.limit_KV_High_5;
observable Bus_X104.limit_KV_High_4;
observable Bus_X104.limit_KV_High_3;
observable Bus_X104.limit_KV_High_2;
observable Bus_X104.limit_KV_High_1;
observable Bus_X104.limit_KV_Low;
observable Bus_X104.limit_KV_Low_5;
observable Bus_X104.limit_KV_Low_4;
observable Bus_X104.limit_KV_Low_3;
observable Bus_X104.limit_KV_Low_2;
observable Bus_X104.limit_KV_Low_1;
observable Bus_X104.limit_KV_Normal;
observable Bus_X107.entered_zero_zone_MVAR;
observable Bus_X107.limit_MVAR_High;
observable Bus_X107.limit_MVAR_High_5;
observable Bus_X107.limit_MVAR_High_4;
observable Bus_X107.limit_MVAR_High_3;
observable Bus_X107.limit_MVAR_High_2;
observable Bus_X107.limit_MVAR_High_1;
observable Bus_X107.limit_MVAR_Low;
observable Bus_X107.limit_MVAR_Low_5;
observable Bus_X107.limit_MVAR_Low_4;
observable Bus_X107.limit_MVAR_Low_3;
observable Bus_X107.limit_MVAR_Low_2;
observable Bus_X107.limit_MVAR_Low_1;
observable Bus_X107.limit_MVAR_Normal;
observable Bus_X107.entered_zero_zone_MW;
observable Bus_X107.limit_MW_High;
observable Bus_X107.limit_MW_High_5;
observable Bus_X107.limit_MW_High_4;
observable Bus_X107.limit_MW_High_3;
observable Bus_X107.limit_MW_High_2;
observable Bus_X107.limit_MW_High_1;
observable Bus_X107.limit_MW_Low;
observable Bus_X107.limit_MW_Low_5;
observable Bus_X107.limit_MW_Low_4;
observable Bus_X107.limit_MW_Low_3;
observable Bus_X107.limit_MW_Low_2;
observable Bus_X107.limit_MW_Low_1;
observable Bus_X107.limit_MW_Normal;
observable Bus_X107.entered_zero_zone_KV;
observable Bus_X107.limit_KV_High;
observable Bus_X107.limit_KV_High_5;
observable Bus_X107.limit_KV_High_4;
observable Bus_X107.limit_KV_High_3;
observable Bus_X107.limit_KV_High_2;
observable Bus_X107.limit_KV_High_1;
observable Bus_X107.limit_KV_Low;
observable Bus_X107.limit_KV_Low_5;
observable Bus_X107.limit_KV_Low_4;
observable Bus_X107.limit_KV_Low_3;
observable Bus_X107.limit_KV_Low_2;
observable Bus_X107.limit_KV_Low_1;
observable Bus_X107.limit_KV_Normal;
observable Bus_X109.entered_zero_zone_MVAR;
observable Bus_X109.limit_MVAR_High;
observable Bus_X109.limit_MVAR_High_5;
observable Bus_X109.limit_MVAR_High_4;
observable Bus_X109.limit_MVAR_High_3;
observable Bus_X109.limit_MVAR_High_2;
observable Bus_X109.limit_MVAR_High_1;
observable Bus_X109.limit_MVAR_Low;
observable Bus_X109.limit_MVAR_Low_5;
observable Bus_X109.limit_MVAR_Low_4;
observable Bus_X109.limit_MVAR_Low_3;
observable Bus_X109.limit_MVAR_Low_2;
observable Bus_X109.limit_MVAR_Low_1;
observable Bus_X109.limit_MVAR_Normal;
observable Bus_X109.entered_zero_zone_MW;
observable Bus_X109.limit_MW_High;
observable Bus_X109.limit_MW_High_5;
observable Bus_X109.limit_MW_High_4;
observable Bus_X109.limit_MW_High_3;
observable Bus_X109.limit_MW_High_2;
observable Bus_X109.limit_MW_High_1;
observable Bus_X109.limit_MW_Low;
observable Bus_X109.limit_MW_Low_5;
observable Bus_X109.limit_MW_Low_4;
observable Bus_X109.limit_MW_Low_3;
observable Bus_X109.limit_MW_Low_2;
observable Bus_X109.limit_MW_Low_1;
observable Bus_X109.limit_MW_Normal;
observable Bus_X109.entered_zero_zone_KV;
observable Bus_X109.limit_KV_High;
observable Bus_X109.limit_KV_High_5;
observable Bus_X109.limit_KV_High_4;
observable Bus_X109.limit_KV_High_3;
observable Bus_X109.limit_KV_High_2;
observable Bus_X109.limit_KV_High_1;
observable Bus_X109.limit_KV_Low;
observable Bus_X109.limit_KV_Low_5;
observable Bus_X109.limit_KV_Low_4;
observable Bus_X109.limit_KV_Low_3;
observable Bus_X109.limit_KV_Low_2;
observable Bus_X109.limit_KV_Low_1;
observable Bus_X109.limit_KV_Normal;
observable Bus_X117.entered_zero_zone_MVAR;
observable Bus_X117.limit_MVAR_High;
observable Bus_X117.limit_MVAR_High_5;
observable Bus_X117.limit_MVAR_High_4;
observable Bus_X117.limit_MVAR_High_3;
observable Bus_X117.limit_MVAR_High_2;
observable Bus_X117.limit_MVAR_High_1;
observable Bus_X117.limit_MVAR_Low;
observable Bus_X117.limit_MVAR_Low_5;
observable Bus_X117.limit_MVAR_Low_4;
observable Bus_X117.limit_MVAR_Low_3;
observable Bus_X117.limit_MVAR_Low_2;
observable Bus_X117.limit_MVAR_Low_1;
observable Bus_X117.limit_MVAR_Normal;
observable Bus_X117.entered_zero_zone_MW;
observable Bus_X117.limit_MW_High;
observable Bus_X117.limit_MW_High_5;
observable Bus_X117.limit_MW_High_4;
observable Bus_X117.limit_MW_High_3;
observable Bus_X117.limit_MW_High_2;
observable Bus_X117.limit_MW_High_1;
observable Bus_X117.limit_MW_Low;
observable Bus_X117.limit_MW_Low_5;
observable Bus_X117.limit_MW_Low_4;
observable Bus_X117.limit_MW_Low_3;
observable Bus_X117.limit_MW_Low_2;
observable Bus_X117.limit_MW_Low_1;
observable Bus_X117.limit_MW_Normal;
observable Bus_X117.entered_zero_zone_KV;
observable Bus_X117.limit_KV_High;
observable Bus_X117.limit_KV_High_5;
observable Bus_X117.limit_KV_High_4;
observable Bus_X117.limit_KV_High_3;
observable Bus_X117.limit_KV_High_2;
observable Bus_X117.limit_KV_High_1;
observable Bus_X117.limit_KV_Low;
observable Bus_X117.limit_KV_Low_5;
observable Bus_X117.limit_KV_Low_4;
observable Bus_X117.limit_KV_Low_3;
observable Bus_X117.limit_KV_Low_2;
observable Bus_X117.limit_KV_Low_1;
observable Bus_X117.limit_KV_Normal;
observable Bus_X126.entered_zero_zone_MVAR;
observable Bus_X126.limit_MVAR_High;
observable Bus_X126.limit_MVAR_High_5;
observable Bus_X126.limit_MVAR_High_4;
observable Bus_X126.limit_MVAR_High_3;
observable Bus_X126.limit_MVAR_High_2;
observable Bus_X126.limit_MVAR_High_1;
observable Bus_X126.limit_MVAR_Low;
observable Bus_X126.limit_MVAR_Low_5;
observable Bus_X126.limit_MVAR_Low_4;
observable Bus_X126.limit_MVAR_Low_3;
observable Bus_X126.limit_MVAR_Low_2;
observable Bus_X126.limit_MVAR_Low_1;
observable Bus_X126.limit_MVAR_Normal;
observable Bus_X126.entered_zero_zone_MW;
observable Bus_X126.limit_MW_High;
observable Bus_X126.limit_MW_High_5;
observable Bus_X126.limit_MW_High_4;
observable Bus_X126.limit_MW_High_3;
observable Bus_X126.limit_MW_High_2;
observable Bus_X126.limit_MW_High_1;
observable Bus_X126.limit_MW_Low;
observable Bus_X126.limit_MW_Low_5;
observable Bus_X126.limit_MW_Low_4;
observable Bus_X126.limit_MW_Low_3;
observable Bus_X126.limit_MW_Low_2;
observable Bus_X126.limit_MW_Low_1;
observable Bus_X126.limit_MW_Normal;
observable Bus_X126.entered_zero_zone_KV;
observable Bus_X126.limit_KV_High;
observable Bus_X126.limit_KV_High_5;
observable Bus_X126.limit_KV_High_4;
observable Bus_X126.limit_KV_High_3;
observable Bus_X126.limit_KV_High_2;
observable Bus_X126.limit_KV_High_1;
observable Bus_X126.limit_KV_Low;
observable Bus_X126.limit_KV_Low_5;
observable Bus_X126.limit_KV_Low_4;
observable Bus_X126.limit_KV_Low_3;
observable Bus_X126.limit_KV_Low_2;
observable Bus_X126.limit_KV_Low_1;
observable Bus_X126.limit_KV_Normal;
observable Bus_X76.entered_zero_zone_MVAR;
observable Bus_X76.limit_MVAR_High;
observable Bus_X76.limit_MVAR_High_5;
observable Bus_X76.limit_MVAR_High_4;
observable Bus_X76.limit_MVAR_High_3;
observable Bus_X76.limit_MVAR_High_2;
observable Bus_X76.limit_MVAR_High_1;
observable Bus_X76.limit_MVAR_Low;
observable Bus_X76.limit_MVAR_Low_5;
observable Bus_X76.limit_MVAR_Low_4;
observable Bus_X76.limit_MVAR_Low_3;
observable Bus_X76.limit_MVAR_Low_2;
observable Bus_X76.limit_MVAR_Low_1;
observable Bus_X76.limit_MVAR_Normal;
observable Bus_X76.entered_zero_zone_MW;
observable Bus_X76.limit_MW_High;
observable Bus_X76.limit_MW_High_5;
observable Bus_X76.limit_MW_High_4;
observable Bus_X76.limit_MW_High_3;
observable Bus_X76.limit_MW_High_2;
observable Bus_X76.limit_MW_High_1;
observable Bus_X76.limit_MW_Low;
observable Bus_X76.limit_MW_Low_5;
observable Bus_X76.limit_MW_Low_4;
observable Bus_X76.limit_MW_Low_3;
observable Bus_X76.limit_MW_Low_2;
observable Bus_X76.limit_MW_Low_1;
observable Bus_X76.limit_MW_Normal;
observable Bus_X76.entered_zero_zone_KV;
observable Bus_X76.limit_KV_High;
observable Bus_X76.limit_KV_High_5;
observable Bus_X76.limit_KV_High_4;
observable Bus_X76.limit_KV_High_3;
observable Bus_X76.limit_KV_High_2;
observable Bus_X76.limit_KV_High_1;
observable Bus_X76.limit_KV_Low;
observable Bus_X76.limit_KV_Low_5;
observable Bus_X76.limit_KV_Low_4;
observable Bus_X76.limit_KV_Low_3;
observable Bus_X76.limit_KV_Low_2;
observable Bus_X76.limit_KV_Low_1;
observable Bus_X76.limit_KV_Normal;
observable Bus_X127.entered_zero_zone_MVAR;
observable Bus_X127.limit_MVAR_High;
observable Bus_X127.limit_MVAR_High_5;
observable Bus_X127.limit_MVAR_High_4;
observable Bus_X127.limit_MVAR_High_3;
observable Bus_X127.limit_MVAR_High_2;
observable Bus_X127.limit_MVAR_High_1;
observable Bus_X127.limit_MVAR_Low;
observable Bus_X127.limit_MVAR_Low_5;
observable Bus_X127.limit_MVAR_Low_4;
observable Bus_X127.limit_MVAR_Low_3;
observable Bus_X127.limit_MVAR_Low_2;
observable Bus_X127.limit_MVAR_Low_1;
observable Bus_X127.limit_MVAR_Normal;
observable Bus_X127.entered_zero_zone_MW;
observable Bus_X127.limit_MW_High;
observable Bus_X127.limit_MW_High_5;
observable Bus_X127.limit_MW_High_4;
observable Bus_X127.limit_MW_High_3;
observable Bus_X127.limit_MW_High_2;
observable Bus_X127.limit_MW_High_1;
observable Bus_X127.limit_MW_Low;
observable Bus_X127.limit_MW_Low_5;
observable Bus_X127.limit_MW_Low_4;
observable Bus_X127.limit_MW_Low_3;
observable Bus_X127.limit_MW_Low_2;
observable Bus_X127.limit_MW_Low_1;
observable Bus_X127.limit_MW_Normal;
observable Bus_X127.entered_zero_zone_KV;
observable Bus_X127.limit_KV_High;
observable Bus_X127.limit_KV_High_5;
observable Bus_X127.limit_KV_High_4;
observable Bus_X127.limit_KV_High_3;
observable Bus_X127.limit_KV_High_2;
observable Bus_X127.limit_KV_High_1;
observable Bus_X127.limit_KV_Low;
observable Bus_X127.limit_KV_Low_5;
observable Bus_X127.limit_KV_Low_4;
observable Bus_X127.limit_KV_Low_3;
observable Bus_X127.limit_KV_Low_2;
observable Bus_X127.limit_KV_Low_1;
observable Bus_X127.limit_KV_Normal;
observable Bus_X111.entered_zero_zone_MVAR;
observable Bus_X111.limit_MVAR_High;
observable Bus_X111.limit_MVAR_High_5;
observable Bus_X111.limit_MVAR_High_4;
observable Bus_X111.limit_MVAR_High_3;
observable Bus_X111.limit_MVAR_High_2;
observable Bus_X111.limit_MVAR_High_1;
observable Bus_X111.limit_MVAR_Low;
observable Bus_X111.limit_MVAR_Low_5;
observable Bus_X111.limit_MVAR_Low_4;
observable Bus_X111.limit_MVAR_Low_3;
observable Bus_X111.limit_MVAR_Low_2;
observable Bus_X111.limit_MVAR_Low_1;
observable Bus_X111.limit_MVAR_Normal;
observable Bus_X111.entered_zero_zone_MW;
observable Bus_X111.limit_MW_High;
observable Bus_X111.limit_MW_High_5;
observable Bus_X111.limit_MW_High_4;
observable Bus_X111.limit_MW_High_3;
observable Bus_X111.limit_MW_High_2;
observable Bus_X111.limit_MW_High_1;
observable Bus_X111.limit_MW_Low;
observable Bus_X111.limit_MW_Low_5;
observable Bus_X111.limit_MW_Low_4;
observable Bus_X111.limit_MW_Low_3;
observable Bus_X111.limit_MW_Low_2;
observable Bus_X111.limit_MW_Low_1;
observable Bus_X111.limit_MW_Normal;
observable Bus_X111.entered_zero_zone_KV;
observable Bus_X111.limit_KV_High;
observable Bus_X111.limit_KV_High_5;
observable Bus_X111.limit_KV_High_4;
observable Bus_X111.limit_KV_High_3;
observable Bus_X111.limit_KV_High_2;
observable Bus_X111.limit_KV_High_1;
observable Bus_X111.limit_KV_Low;
observable Bus_X111.limit_KV_Low_5;
observable Bus_X111.limit_KV_Low_4;
observable Bus_X111.limit_KV_Low_3;
observable Bus_X111.limit_KV_Low_2;
observable Bus_X111.limit_KV_Low_1;
observable Bus_X111.limit_KV_Normal;
observable Bus_X128.entered_zero_zone_MVAR;
observable Bus_X128.limit_MVAR_High;
observable Bus_X128.limit_MVAR_High_5;
observable Bus_X128.limit_MVAR_High_4;
observable Bus_X128.limit_MVAR_High_3;
observable Bus_X128.limit_MVAR_High_2;
observable Bus_X128.limit_MVAR_High_1;
observable Bus_X128.limit_MVAR_Low;
observable Bus_X128.limit_MVAR_Low_5;
observable Bus_X128.limit_MVAR_Low_4;
observable Bus_X128.limit_MVAR_Low_3;
observable Bus_X128.limit_MVAR_Low_2;
observable Bus_X128.limit_MVAR_Low_1;
observable Bus_X128.limit_MVAR_Normal;
observable Bus_X128.entered_zero_zone_MW;
observable Bus_X128.limit_MW_High;
observable Bus_X128.limit_MW_High_5;
observable Bus_X128.limit_MW_High_4;
observable Bus_X128.limit_MW_High_3;
observable Bus_X128.limit_MW_High_2;
observable Bus_X128.limit_MW_High_1;
observable Bus_X128.limit_MW_Low;
observable Bus_X128.limit_MW_Low_5;
observable Bus_X128.limit_MW_Low_4;
observable Bus_X128.limit_MW_Low_3;
observable Bus_X128.limit_MW_Low_2;
observable Bus_X128.limit_MW_Low_1;
observable Bus_X128.limit_MW_Normal;
observable Bus_X128.entered_zero_zone_KV;
observable Bus_X128.limit_KV_High;
observable Bus_X128.limit_KV_High_5;
observable Bus_X128.limit_KV_High_4;
observable Bus_X128.limit_KV_High_3;
observable Bus_X128.limit_KV_High_2;
observable Bus_X128.limit_KV_High_1;
observable Bus_X128.limit_KV_Low;
observable Bus_X128.limit_KV_Low_5;
observable Bus_X128.limit_KV_Low_4;
observable Bus_X128.limit_KV_Low_3;
observable Bus_X128.limit_KV_Low_2;
observable Bus_X128.limit_KV_Low_1;
observable Bus_X128.limit_KV_Normal;
observable Disconnector_X85_X19.command_sw_state_closed;
observable Disconnector_X85_X19.command_sw_state_open;
observable Disconnector_X85_X19.sw_command_fail;
observable Disconnector_X85_X19.sw_state_not_responding;
observable Disconnector_X85_X19.sw_state_abnormal;
observable Disconnector_X85_X19.sw_state_closed;
observable Disconnector_X85_X19.sw_state_open;
observable Disconnector_X86_X87.command_sw_state_closed;
observable Disconnector_X86_X87.command_sw_state_open;
observable Disconnector_X86_X87.sw_command_fail;
observable Disconnector_X86_X87.sw_state_not_responding;
observable Disconnector_X86_X87.sw_state_abnormal;
observable Disconnector_X86_X87.sw_state_closed;
observable Disconnector_X86_X87.sw_state_open;
observable Disconnector_X86_X88.command_sw_state_closed;
observable Disconnector_X86_X88.command_sw_state_open;
observable Disconnector_X86_X88.sw_command_fail;
observable Disconnector_X86_X88.sw_state_not_responding;
observable Disconnector_X86_X88.sw_state_abnormal;
observable Disconnector_X86_X88.sw_state_closed;
observable Disconnector_X86_X88.sw_state_open;
observable Disconnector_X89_X90.command_sw_state_closed;
observable Disconnector_X89_X90.command_sw_state_open;
observable Disconnector_X89_X90.sw_command_fail;
observable Disconnector_X89_X90.sw_state_not_responding;
observable Disconnector_X89_X90.sw_state_abnormal;
observable Disconnector_X89_X90.sw_state_closed;
observable Disconnector_X89_X90.sw_state_open;
observable Generator_X91.IMPOSSIBLE;
observable Generator_X91.unit_status_OFF;
observable Generator_X91.unit_status_ON;
observable Generator_X91.runback_reset;
observable Generator_X91.runback_alarm;
observable Generator_X92.IMPOSSIBLE;
observable Generator_X92.unit_status_OFF;
observable Generator_X92.unit_status_ON;
observable Generator_X92.runback_reset;
observable Generator_X92.runback_alarm;
observable Generator_X93.IMPOSSIBLE;
observable Generator_X93.unit_status_OFF;
observable Generator_X93.unit_status_ON;
observable Generator_X93.runback_reset;
observable Generator_X93.runback_alarm;
observable Generator_X94.IMPOSSIBLE;
observable Generator_X94.unit_status_OFF;
observable Generator_X94.unit_status_ON;
observable Generator_X94.runback_reset;
observable Generator_X94.runback_alarm;
observable Generator_X95.IMPOSSIBLE;
observable Generator_X95.unit_status_OFF;
observable Generator_X95.unit_status_ON;
observable Generator_X95.runback_reset;
observable Generator_X95.runback_alarm;
observable Generator_X96.IMPOSSIBLE;
observable Generator_X96.unit_status_OFF;
observable Generator_X96.unit_status_ON;
observable Generator_X96.runback_reset;
observable Generator_X96.runback_alarm;
observable Generator_X97.IMPOSSIBLE;
observable Generator_X97.unit_status_OFF;
observable Generator_X97.unit_status_ON;
observable Generator_X97.runback_reset;
observable Generator_X97.runback_alarm;
observable Generator_X98.IMPOSSIBLE;
observable Generator_X98.unit_status_OFF;
observable Generator_X98.unit_status_ON;
observable Generator_X98.runback_reset;
observable Generator_X98.runback_alarm;
observable Generator_X99.IMPOSSIBLE;
observable Generator_X99.unit_status_OFF;
observable Generator_X99.unit_status_ON;
observable Generator_X99.runback_reset;
observable Generator_X99.runback_alarm;
observable Generator_X100.IMPOSSIBLE;
observable Generator_X100.unit_status_OFF;
observable Generator_X100.unit_status_ON;
observable Generator_X100.runback_reset;
observable Generator_X100.runback_alarm;
observable Line_X101_X102.no_way;
observable Line_X101_X102.entered_zero_zone_MVAR;
observable Line_X101_X102.limit_MVAR_High;
observable Line_X101_X102.limit_MVAR_High_5;
observable Line_X101_X102.limit_MVAR_High_4;
observable Line_X101_X102.limit_MVAR_High_3;
observable Line_X101_X102.limit_MVAR_High_2;
observable Line_X101_X102.limit_MVAR_High_1;
observable Line_X101_X102.limit_MVAR_Low;
observable Line_X101_X102.limit_MVAR_Low_5;
observable Line_X101_X102.limit_MVAR_Low_4;
observable Line_X101_X102.limit_MVAR_Low_3;
observable Line_X101_X102.limit_MVAR_Low_2;
observable Line_X101_X102.limit_MVAR_Low_1;
observable Line_X101_X102.limit_MVAR_Normal;
observable Line_X101_X102.entered_zero_zone_MW;
observable Line_X101_X102.limit_MW_High;
observable Line_X101_X102.limit_MW_High_5;
observable Line_X101_X102.limit_MW_High_4;
observable Line_X101_X102.limit_MW_High_3;
observable Line_X101_X102.limit_MW_High_2;
observable Line_X101_X102.limit_MW_High_1;
observable Line_X101_X102.limit_MW_Low;
observable Line_X101_X102.limit_MW_Low_5;
observable Line_X101_X102.limit_MW_Low_4;
observable Line_X101_X102.limit_MW_Low_3;
observable Line_X101_X102.limit_MW_Low_2;
observable Line_X101_X102.limit_MW_Low_1;
observable Line_X101_X102.limit_MW_Normal;
observable Line_X101_X102.entered_zero_zone_KV;
observable Line_X101_X102.limit_KV_High;
observable Line_X101_X102.limit_KV_High_5;
observable Line_X101_X102.limit_KV_High_4;
observable Line_X101_X102.limit_KV_High_3;
observable Line_X101_X102.limit_KV_High_2;
observable Line_X101_X102.limit_KV_High_1;
observable Line_X101_X102.limit_KV_Low;
observable Line_X101_X102.limit_KV_Low_5;
observable Line_X101_X102.limit_KV_Low_4;
observable Line_X101_X102.limit_KV_Low_3;
observable Line_X101_X102.limit_KV_Low_2;
observable Line_X101_X102.limit_KV_Low_1;
observable Line_X101_X102.limit_KV_Normal;
observable Line_X115_X116.no_way;
observable Line_X115_X116.entered_zero_zone_MVAR;
observable Line_X115_X116.limit_MVAR_High;
observable Line_X115_X116.limit_MVAR_High_5;
observable Line_X115_X116.limit_MVAR_High_4;
observable Line_X115_X116.limit_MVAR_High_3;
observable Line_X115_X116.limit_MVAR_High_2;
observable Line_X115_X116.limit_MVAR_High_1;
observable Line_X115_X116.limit_MVAR_Low;
observable Line_X115_X116.limit_MVAR_Low_5;
observable Line_X115_X116.limit_MVAR_Low_4;
observable Line_X115_X116.limit_MVAR_Low_3;
observable Line_X115_X116.limit_MVAR_Low_2;
observable Line_X115_X116.limit_MVAR_Low_1;
observable Line_X115_X116.limit_MVAR_Normal;
observable Line_X115_X116.entered_zero_zone_MW;
observable Line_X115_X116.limit_MW_High;
observable Line_X115_X116.limit_MW_High_5;
observable Line_X115_X116.limit_MW_High_4;
observable Line_X115_X116.limit_MW_High_3;
observable Line_X115_X116.limit_MW_High_2;
observable Line_X115_X116.limit_MW_High_1;
observable Line_X115_X116.limit_MW_Low;
observable Line_X115_X116.limit_MW_Low_5;
observable Line_X115_X116.limit_MW_Low_4;
observable Line_X115_X116.limit_MW_Low_3;
observable Line_X115_X116.limit_MW_Low_2;
observable Line_X115_X116.limit_MW_Low_1;
observable Line_X115_X116.limit_MW_Normal;
observable Line_X115_X116.entered_zero_zone_KV;
observable Line_X115_X116.limit_KV_High;
observable Line_X115_X116.limit_KV_High_5;
observable Line_X115_X116.limit_KV_High_4;
observable Line_X115_X116.limit_KV_High_3;
observable Line_X115_X116.limit_KV_High_2;
observable Line_X115_X116.limit_KV_High_1;
observable Line_X115_X116.limit_KV_Low;
observable Line_X115_X116.limit_KV_Low_5;
observable Line_X115_X116.limit_KV_Low_4;
observable Line_X115_X116.limit_KV_Low_3;
observable Line_X115_X116.limit_KV_Low_2;
observable Line_X115_X116.limit_KV_Low_1;
observable Line_X115_X116.limit_KV_Normal;
observable Line_X113_X114.no_way;
observable Line_X113_X114.entered_zero_zone_MVAR;
observable Line_X113_X114.limit_MVAR_High;
observable Line_X113_X114.limit_MVAR_High_5;
observable Line_X113_X114.limit_MVAR_High_4;
observable Line_X113_X114.limit_MVAR_High_3;
observable Line_X113_X114.limit_MVAR_High_2;
observable Line_X113_X114.limit_MVAR_High_1;
observable Line_X113_X114.limit_MVAR_Low;
observable Line_X113_X114.limit_MVAR_Low_5;
observable Line_X113_X114.limit_MVAR_Low_4;
observable Line_X113_X114.limit_MVAR_Low_3;
observable Line_X113_X114.limit_MVAR_Low_2;
observable Line_X113_X114.limit_MVAR_Low_1;
observable Line_X113_X114.limit_MVAR_Normal;
observable Line_X113_X114.entered_zero_zone_MW;
observable Line_X113_X114.limit_MW_High;
observable Line_X113_X114.limit_MW_High_5;
observable Line_X113_X114.limit_MW_High_4;
observable Line_X113_X114.limit_MW_High_3;
observable Line_X113_X114.limit_MW_High_2;
observable Line_X113_X114.limit_MW_High_1;
observable Line_X113_X114.limit_MW_Low;
observable Line_X113_X114.limit_MW_Low_5;
observable Line_X113_X114.limit_MW_Low_4;
observable Line_X113_X114.limit_MW_Low_3;
observable Line_X113_X114.limit_MW_Low_2;
observable Line_X113_X114.limit_MW_Low_1;
observable Line_X113_X114.limit_MW_Normal;
observable Line_X113_X114.entered_zero_zone_KV;
observable Line_X113_X114.limit_KV_High;
observable Line_X113_X114.limit_KV_High_5;
observable Line_X113_X114.limit_KV_High_4;
observable Line_X113_X114.limit_KV_High_3;
observable Line_X113_X114.limit_KV_High_2;
observable Line_X113_X114.limit_KV_High_1;
observable Line_X113_X114.limit_KV_Low;
observable Line_X113_X114.limit_KV_Low_5;
observable Line_X113_X114.limit_KV_Low_4;
observable Line_X113_X114.limit_KV_Low_3;
observable Line_X113_X114.limit_KV_Low_2;
observable Line_X113_X114.limit_KV_Low_1;
observable Line_X113_X114.limit_KV_Normal;
observable Line_X103_X104.no_way;
observable Line_X103_X104.entered_zero_zone_MVAR;
observable Line_X103_X104.limit_MVAR_High;
observable Line_X103_X104.limit_MVAR_High_5;
observable Line_X103_X104.limit_MVAR_High_4;
observable Line_X103_X104.limit_MVAR_High_3;
observable Line_X103_X104.limit_MVAR_High_2;
observable Line_X103_X104.limit_MVAR_High_1;
observable Line_X103_X104.limit_MVAR_Low;
observable Line_X103_X104.limit_MVAR_Low_5;
observable Line_X103_X104.limit_MVAR_Low_4;
observable Line_X103_X104.limit_MVAR_Low_3;
observable Line_X103_X104.limit_MVAR_Low_2;
observable Line_X103_X104.limit_MVAR_Low_1;
observable Line_X103_X104.limit_MVAR_Normal;
observable Line_X103_X104.entered_zero_zone_MW;
observable Line_X103_X104.limit_MW_High;
observable Line_X103_X104.limit_MW_High_5;
observable Line_X103_X104.limit_MW_High_4;
observable Line_X103_X104.limit_MW_High_3;
observable Line_X103_X104.limit_MW_High_2;
observable Line_X103_X104.limit_MW_High_1;
observable Line_X103_X104.limit_MW_Low;
observable Line_X103_X104.limit_MW_Low_5;
observable Line_X103_X104.limit_MW_Low_4;
observable Line_X103_X104.limit_MW_Low_3;
observable Line_X103_X104.limit_MW_Low_2;
observable Line_X103_X104.limit_MW_Low_1;
observable Line_X103_X104.limit_MW_Normal;
observable Line_X103_X104.entered_zero_zone_KV;
observable Line_X103_X104.limit_KV_High;
observable Line_X103_X104.limit_KV_High_5;
observable Line_X103_X104.limit_KV_High_4;
observable Line_X103_X104.limit_KV_High_3;
observable Line_X103_X104.limit_KV_High_2;
observable Line_X103_X104.limit_KV_High_1;
observable Line_X103_X104.limit_KV_Low;
observable Line_X103_X104.limit_KV_Low_5;
observable Line_X103_X104.limit_KV_Low_4;
observable Line_X103_X104.limit_KV_Low_3;
observable Line_X103_X104.limit_KV_Low_2;
observable Line_X103_X104.limit_KV_Low_1;
observable Line_X103_X104.limit_KV_Normal;
observable Line_X105_X106.no_way;
observable Line_X105_X106.entered_zero_zone_MVAR;
observable Line_X105_X106.limit_MVAR_High;
observable Line_X105_X106.limit_MVAR_High_5;
observable Line_X105_X106.limit_MVAR_High_4;
observable Line_X105_X106.limit_MVAR_High_3;
observable Line_X105_X106.limit_MVAR_High_2;
observable Line_X105_X106.limit_MVAR_High_1;
observable Line_X105_X106.limit_MVAR_Low;
observable Line_X105_X106.limit_MVAR_Low_5;
observable Line_X105_X106.limit_MVAR_Low_4;
observable Line_X105_X106.limit_MVAR_Low_3;
observable Line_X105_X106.limit_MVAR_Low_2;
observable Line_X105_X106.limit_MVAR_Low_1;
observable Line_X105_X106.limit_MVAR_Normal;
observable Line_X105_X106.entered_zero_zone_MW;
observable Line_X105_X106.limit_MW_High;
observable Line_X105_X106.limit_MW_High_5;
observable Line_X105_X106.limit_MW_High_4;
observable Line_X105_X106.limit_MW_High_3;
observable Line_X105_X106.limit_MW_High_2;
observable Line_X105_X106.limit_MW_High_1;
observable Line_X105_X106.limit_MW_Low;
observable Line_X105_X106.limit_MW_Low_5;
observable Line_X105_X106.limit_MW_Low_4;
observable Line_X105_X106.limit_MW_Low_3;
observable Line_X105_X106.limit_MW_Low_2;
observable Line_X105_X106.limit_MW_Low_1;
observable Line_X105_X106.limit_MW_Normal;
observable Line_X105_X106.entered_zero_zone_KV;
observable Line_X105_X106.limit_KV_High;
observable Line_X105_X106.limit_KV_High_5;
observable Line_X105_X106.limit_KV_High_4;
observable Line_X105_X106.limit_KV_High_3;
observable Line_X105_X106.limit_KV_High_2;
observable Line_X105_X106.limit_KV_High_1;
observable Line_X105_X106.limit_KV_Low;
observable Line_X105_X106.limit_KV_Low_5;
observable Line_X105_X106.limit_KV_Low_4;
observable Line_X105_X106.limit_KV_Low_3;
observable Line_X105_X106.limit_KV_Low_2;
observable Line_X105_X106.limit_KV_Low_1;
observable Line_X105_X106.limit_KV_Normal;
observable Line_X107_X108.no_way;
observable Line_X107_X108.entered_zero_zone_MVAR;
observable Line_X107_X108.limit_MVAR_High;
observable Line_X107_X108.limit_MVAR_High_5;
observable Line_X107_X108.limit_MVAR_High_4;
observable Line_X107_X108.limit_MVAR_High_3;
observable Line_X107_X108.limit_MVAR_High_2;
observable Line_X107_X108.limit_MVAR_High_1;
observable Line_X107_X108.limit_MVAR_Low;
observable Line_X107_X108.limit_MVAR_Low_5;
observable Line_X107_X108.limit_MVAR_Low_4;
observable Line_X107_X108.limit_MVAR_Low_3;
observable Line_X107_X108.limit_MVAR_Low_2;
observable Line_X107_X108.limit_MVAR_Low_1;
observable Line_X107_X108.limit_MVAR_Normal;
observable Line_X107_X108.entered_zero_zone_MW;
observable Line_X107_X108.limit_MW_High;
observable Line_X107_X108.limit_MW_High_5;
observable Line_X107_X108.limit_MW_High_4;
observable Line_X107_X108.limit_MW_High_3;
observable Line_X107_X108.limit_MW_High_2;
observable Line_X107_X108.limit_MW_High_1;
observable Line_X107_X108.limit_MW_Low;
observable Line_X107_X108.limit_MW_Low_5;
observable Line_X107_X108.limit_MW_Low_4;
observable Line_X107_X108.limit_MW_Low_3;
observable Line_X107_X108.limit_MW_Low_2;
observable Line_X107_X108.limit_MW_Low_1;
observable Line_X107_X108.limit_MW_Normal;
observable Line_X107_X108.entered_zero_zone_KV;
observable Line_X107_X108.limit_KV_High;
observable Line_X107_X108.limit_KV_High_5;
observable Line_X107_X108.limit_KV_High_4;
observable Line_X107_X108.limit_KV_High_3;
observable Line_X107_X108.limit_KV_High_2;
observable Line_X107_X108.limit_KV_High_1;
observable Line_X107_X108.limit_KV_Low;
observable Line_X107_X108.limit_KV_Low_5;
observable Line_X107_X108.limit_KV_Low_4;
observable Line_X107_X108.limit_KV_Low_3;
observable Line_X107_X108.limit_KV_Low_2;
observable Line_X107_X108.limit_KV_Low_1;
observable Line_X107_X108.limit_KV_Normal;
observable Line_X109_X110.no_way;
observable Line_X109_X110.entered_zero_zone_MVAR;
observable Line_X109_X110.limit_MVAR_High;
observable Line_X109_X110.limit_MVAR_High_5;
observable Line_X109_X110.limit_MVAR_High_4;
observable Line_X109_X110.limit_MVAR_High_3;
observable Line_X109_X110.limit_MVAR_High_2;
observable Line_X109_X110.limit_MVAR_High_1;
observable Line_X109_X110.limit_MVAR_Low;
observable Line_X109_X110.limit_MVAR_Low_5;
observable Line_X109_X110.limit_MVAR_Low_4;
observable Line_X109_X110.limit_MVAR_Low_3;
observable Line_X109_X110.limit_MVAR_Low_2;
observable Line_X109_X110.limit_MVAR_Low_1;
observable Line_X109_X110.limit_MVAR_Normal;
observable Line_X109_X110.entered_zero_zone_MW;
observable Line_X109_X110.limit_MW_High;
observable Line_X109_X110.limit_MW_High_5;
observable Line_X109_X110.limit_MW_High_4;
observable Line_X109_X110.limit_MW_High_3;
observable Line_X109_X110.limit_MW_High_2;
observable Line_X109_X110.limit_MW_High_1;
observable Line_X109_X110.limit_MW_Low;
observable Line_X109_X110.limit_MW_Low_5;
observable Line_X109_X110.limit_MW_Low_4;
observable Line_X109_X110.limit_MW_Low_3;
observable Line_X109_X110.limit_MW_Low_2;
observable Line_X109_X110.limit_MW_Low_1;
observable Line_X109_X110.limit_MW_Normal;
observable Line_X109_X110.entered_zero_zone_KV;
observable Line_X109_X110.limit_KV_High;
observable Line_X109_X110.limit_KV_High_5;
observable Line_X109_X110.limit_KV_High_4;
observable Line_X109_X110.limit_KV_High_3;
observable Line_X109_X110.limit_KV_High_2;
observable Line_X109_X110.limit_KV_High_1;
observable Line_X109_X110.limit_KV_Low;
observable Line_X109_X110.limit_KV_Low_5;
observable Line_X109_X110.limit_KV_Low_4;
observable Line_X109_X110.limit_KV_Low_3;
observable Line_X109_X110.limit_KV_Low_2;
observable Line_X109_X110.limit_KV_Low_1;
observable Line_X109_X110.limit_KV_Normal;
observable Line_X117_X118.no_way;
observable Line_X117_X118.entered_zero_zone_MVAR;
observable Line_X117_X118.limit_MVAR_High;
observable Line_X117_X118.limit_MVAR_High_5;
observable Line_X117_X118.limit_MVAR_High_4;
observable Line_X117_X118.limit_MVAR_High_3;
observable Line_X117_X118.limit_MVAR_High_2;
observable Line_X117_X118.limit_MVAR_High_1;
observable Line_X117_X118.limit_MVAR_Low;
observable Line_X117_X118.limit_MVAR_Low_5;
observable Line_X117_X118.limit_MVAR_Low_4;
observable Line_X117_X118.limit_MVAR_Low_3;
observable Line_X117_X118.limit_MVAR_Low_2;
observable Line_X117_X118.limit_MVAR_Low_1;
observable Line_X117_X118.limit_MVAR_Normal;
observable Line_X117_X118.entered_zero_zone_MW;
observable Line_X117_X118.limit_MW_High;
observable Line_X117_X118.limit_MW_High_5;
observable Line_X117_X118.limit_MW_High_4;
observable Line_X117_X118.limit_MW_High_3;
observable Line_X117_X118.limit_MW_High_2;
observable Line_X117_X118.limit_MW_High_1;
observable Line_X117_X118.limit_MW_Low;
observable Line_X117_X118.limit_MW_Low_5;
observable Line_X117_X118.limit_MW_Low_4;
observable Line_X117_X118.limit_MW_Low_3;
observable Line_X117_X118.limit_MW_Low_2;
observable Line_X117_X118.limit_MW_Low_1;
observable Line_X117_X118.limit_MW_Normal;
observable Line_X117_X118.entered_zero_zone_KV;
observable Line_X117_X118.limit_KV_High;
observable Line_X117_X118.limit_KV_High_5;
observable Line_X117_X118.limit_KV_High_4;
observable Line_X117_X118.limit_KV_High_3;
observable Line_X117_X118.limit_KV_High_2;
observable Line_X117_X118.limit_KV_High_1;
observable Line_X117_X118.limit_KV_Low;
observable Line_X117_X118.limit_KV_Low_5;
observable Line_X117_X118.limit_KV_Low_4;
observable Line_X117_X118.limit_KV_Low_3;
observable Line_X117_X118.limit_KV_Low_2;
observable Line_X117_X118.limit_KV_Low_1;
observable Line_X117_X118.limit_KV_Normal;
observable Line_X111_X112.no_way;
observable Line_X111_X112.entered_zero_zone_MVAR;
observable Line_X111_X112.limit_MVAR_High;
observable Line_X111_X112.limit_MVAR_High_5;
observable Line_X111_X112.limit_MVAR_High_4;
observable Line_X111_X112.limit_MVAR_High_3;
observable Line_X111_X112.limit_MVAR_High_2;
observable Line_X111_X112.limit_MVAR_High_1;
observable Line_X111_X112.limit_MVAR_Low;
observable Line_X111_X112.limit_MVAR_Low_5;
observable Line_X111_X112.limit_MVAR_Low_4;
observable Line_X111_X112.limit_MVAR_Low_3;
observable Line_X111_X112.limit_MVAR_Low_2;
observable Line_X111_X112.limit_MVAR_Low_1;
observable Line_X111_X112.limit_MVAR_Normal;
observable Line_X111_X112.entered_zero_zone_MW;
observable Line_X111_X112.limit_MW_High;
observable Line_X111_X112.limit_MW_High_5;
observable Line_X111_X112.limit_MW_High_4;
observable Line_X111_X112.limit_MW_High_3;
observable Line_X111_X112.limit_MW_High_2;
observable Line_X111_X112.limit_MW_High_1;
observable Line_X111_X112.limit_MW_Low;
observable Line_X111_X112.limit_MW_Low_5;
observable Line_X111_X112.limit_MW_Low_4;
observable Line_X111_X112.limit_MW_Low_3;
observable Line_X111_X112.limit_MW_Low_2;
observable Line_X111_X112.limit_MW_Low_1;
observable Line_X111_X112.limit_MW_Normal;
observable Line_X111_X112.entered_zero_zone_KV;
observable Line_X111_X112.limit_KV_High;
observable Line_X111_X112.limit_KV_High_5;
observable Line_X111_X112.limit_KV_High_4;
observable Line_X111_X112.limit_KV_High_3;
observable Line_X111_X112.limit_KV_High_2;
observable Line_X111_X112.limit_KV_High_1;
observable Line_X111_X112.limit_KV_Low;
observable Line_X111_X112.limit_KV_Low_5;
observable Line_X111_X112.limit_KV_Low_4;
observable Line_X111_X112.limit_KV_Low_3;
observable Line_X111_X112.limit_KV_Low_2;
observable Line_X111_X112.limit_KV_Low_1;
observable Line_X111_X112.limit_KV_Normal;
observable network.IMPOSSIBLE;
