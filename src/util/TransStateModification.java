package util;

import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;

import edu.supercom.util.Pair;
import lang.MMLDRule;
import lang.Network;
import lang.State;
import lang.StateModification;
import lang.YAMLDAssignment;
import lang.YAMLDComponent;
import lang.YAMLDExpr;
import lang.YAMLDGenericVar;
import lang.YAMLDValue;
import lang.YAMLDVar;

/**
 * Implementation of a state modification based on a {@link MMLDGlobalTransition}.  
 * 
 * @author Alban Grastien
 * */
public class TransStateModification implements StateModification {

	/**
	 * The global transition.  
	 * */
	private final MMLDGlobalTransition _trans;
	
	/**
	 * The state in which the transition is applied.  
	 * */
	private final State _state;
	
	/**
	 * Creates a StateModification defined as the modification of the specified state 
	 * generated by the specified transition.
	 * 
	 * @param t the transition.  
	 * @param s the state.  
	 * */
	public TransStateModification(MMLDGlobalTransition t, State s) {
		_trans = t;
		_state = s;
	}
	
	
	@Override
	public YAMLDValue getModifiedValue(YAMLDVar var) {
		final YAMLDComponent c = var.getComponent();
		final MMLDRule r = _trans.getRule(c);
		if (r == null) {
			return null;
		}
		final YAMLDAssignment ass = r.getAssignment(var);
		if (ass == null) {
			return null;
		}
		final YAMLDExpr e = ass.expression();
		final YAMLDValue v = e.value(_state, c);
		return v;
	}

	@Override
	public Collection<YAMLDVar> modifiedVariables() {
		final Collection<YAMLDVar> result = new ArrayList<YAMLDVar>();
		final Network net = _state.getNetwork();
		for (final YAMLDComponent c: net.getComponents()) {
			final MMLDRule r = _trans.getRule(c);
			if (r == null) {
				continue;
			}
			for (final YAMLDAssignment ass: r.getAssignments()) {
				final YAMLDGenericVar var = ass.variable();
				if (var instanceof YAMLDVar) {
					result.add((YAMLDVar)var);					
				}
			}
		}
		
		return result;
	}

	@Override
	public Iterator<Pair<YAMLDVar, YAMLDValue>> iterator() {
		return new Iterator<Pair<YAMLDVar,YAMLDValue>>() {

			final Iterator<YAMLDVar> it = modifiedVariables().iterator();
			
			@Override
			public boolean hasNext() {
				return it.hasNext();
			}

			@Override
			public Pair<YAMLDVar, YAMLDValue> next() {
				final YAMLDVar v = it.next();
				return new Pair<YAMLDVar, YAMLDValue>(v, getModifiedValue(v));				
			}

			@Override
			public void remove() {
				throw new UnsupportedOperationException();
			}
		};
	}

}
