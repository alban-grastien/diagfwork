package util;

import java.util.Collection;
import java.util.List;

import lang.State;
import lang.YAMLDEvent;

/**
 * A scenario is a sequence of states and transitions.  
 * Each transition is applied after a certain delay.  
 * 
 * @author Alban Grastien 
 * @version 1.0
 * */
public interface Scenario {

	/**
	 * Indicates the number of transitions in this scenario.  By extension, 
	 * the number of states is <code>nbTrans() + 1</code>.  
	 * 
	 * @return the number of transitions in this scenario.  
	 * */
	public int nbTrans();
	
	/**
	 * Returns the state in this scenario before the <i>i</i>th transition.  
	 * If <code>i = 0</code>, returns the initial state.  The parameter 
	 * <code>i</code> should therefore lie between <code>0</code> 
	 * and <code>nbTrans()</code>.    
	 * 
	 * @param i the number of the state.  
	 * @return the state of the system before <i>i</i> transitions took place.  
	 * @see #getTrans()
	 * */
	public State getState(int i);

	/**
	 * Returns the <i>i</i>th transition of this scenario with the first transition 
	 * being <code>0</code>.  The parameter <code>i</code> should therefore lie 
	 * between <code>0</code> and <code>nbTrans() -1</code>.  
	 * 
	 * @param i the number of the transition.  
	 * @return the <i>i</i>th transition of the system.  
	 * @deprecated Use {@link #getMMLDTrans(int)} instead.  
	 * */
	@Deprecated
	public GlobalTransition getTrans(int i);

	/**
	 * Returns the <i>i</i>th transition of this scenario with the first transition 
	 * being <code>0</code>.  The parameter <code>i</code> should therefore lie 
	 * between <code>0</code> and <code>nbTrans() -1</code>.  
	 * 
	 * @param i the number of the transition.  
	 * @return the <i>i</i>th transition of the system.  
	 * */
	public MMLDGlobalTransition getMMLDTrans(int i);
	
	/**
	 * Returns the time the <i>i</i>th state was reached.  In other words, 
	 * the system is in state <code>getState(i)</code> between 
	 * <code>t1 = getTime(i)</code> and <code>t2 = getTime(i+1)</code> 
	 * (provided <code>i != nbTrans()</code>).  For <code>i = 0</code>, this 
	 * corresponds to the initial state (note that it means any precondition 
	 * of a forced transition was <i>false</i> before <code>getTime(i)</code>).  
	 * 
	 * @param i the number of the transition.  
	 * @return the <i>i</i>th transition of the system.  
	 * @deprecated This will move from {@link Scenario} to {@link TimedScenario}.  
	 * */
	public Time getTime(int i);
	
	/**
	 * Returns a string representation of this scenario.  
	 * 
	 * @return a string representation of this scenario.  
	 * */
	public String toFormattedString();
	
	/**
	 * Returns the sequence of observations generated by this scenario.
	 * 
	 * @param obs the set of observable events.  
	 * @return the list of observable events generated by this scenario.  
	 * @deprecated Use {@link #alarmLog(Collection)} instead.  
	 * */
	public List<YAMLDEvent> observations(Collection<YAMLDEvent> obs);
	
	/**
	 * Returns the alarm log associated with this scenario 
	 * provided the specified set of observable events.  
	 * 
	 * @param obs the set of events that should be recorded in the alarm log.  
	 * @return the alarm log of this scenario.  
	 * @deprecated Might move to TimedScenario 
	 * as there is no notion of time in scenario 
	 * (or could be downgraded to return a TimedlessAlarmLog, 
	 * or time notions could be removed from AlarmLog to generate 
	 * a TimedAlarmLog).  
	 * */
	public AlarmLog alarmLog(Collection<YAMLDEvent> obs);
	
}
