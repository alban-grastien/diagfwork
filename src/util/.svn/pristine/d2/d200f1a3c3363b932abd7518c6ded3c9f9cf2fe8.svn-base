package util;

import java.util.Collection;

import lang.MMLDRule;
import lang.State;
import lang.StateModification;
import lang.YAMLDComponent;

/**
 * An MMLD global transition is a set of synchronous transitions 
 * (actually {@link MMLDRule}) 
 * taking place at the same time on the system.  
 * 
 * @author Alban Grastien 
 * @version 1.0  
 * */
public interface MMLDGlobalTransition {

	/**
	 * Returns the transition rule that takes place 
	 * on the specified component in this global transition.  
	 * If the specified component is not directly affected by the global transition, 
	 * the method returns <code>null</code>.  
	 * 
	 * @param c the component for which the transition is required.  
	 * @return the {@link MMLDRule} that takes place on component <code>c</code> 
	 * if any, <code>null</code> otherwise.  
	 * @see #isAffected(YAMLDComponent)
	 * */
	public MMLDRule getRule(YAMLDComponent c);
	
	/**
	 * Indicates whether the specified component 
	 * is directly affected by this global transition.  
	 * A component is directly affected if a transition takes place on the component.  
	 * It is indirectly affected if the state change on another component
	 * affects the dependent variables or the transition preconditions 
	 * of the component.  
	 * 
	 * @param c the component for which we check the effect.  
	 * @return <code>true</code> if <code>c</code> is affected by this component.  
	 * */
	public boolean isAffected(YAMLDComponent c);
	
	/**
	 * Returns the list of components on which a transition takes place.  
	 * This method should return exactly those components <code>c</code> 
	 * of type {@link YAMLDComponent} with the property that 
	 * <code>isAffected(c) == true</code>.
	 * 
	 * @return the components affected by this MMLD global transition.  
	 * */
	public Collection<YAMLDComponent> affectedComponents();
		
	public String toFormattedString();
	
	/**
	 * Returns the list of affected components 
	 * whose transition trigger is due to a spontaneous or a forced event.  
	 * In order words these are the components 
	 * for which the transitions is not triggered by the occurrence of a synchronous event.  
	 * 
	 * @return the list of affected components 
	 * that triggered the transitions on the other components.
	 * */
	public Collection<YAMLDComponent> triggeringComponents();
	
	/**
	 * Returns a global transition defined as the set of rules 
	 * generated from the specified component, 
	 * i.e.,  a global transition containing the transition on this component, 
	 * plus all transitions generated by the events emitted by the first transition, 
	 * plus the transitions generated by the events emitted by the second transitions, etc.  
	 * Notice that there is no guarantee the result will be a consistent transition, 
	 * except if this transition is consistent 
	 * and the specified component is a {@link #triggeringComponents()}.  
	 * 
	 * @param comp the component generating the transition.  
	 * @return a global transition corresponding to the cascading effects 
	 * of triggering the transition on <code>comp</code>.  
	 * */
	public MMLDGlobalTransition cascade(YAMLDComponent comp);
	
	/**
	 * Generates a global transition that corresponds to the simultaneous occurrence 
	 * of this transition and the specified one.  
	 * 
	 * @param trans a transition that is synchronised with this transition.  
	 * @return a transition that corresponds to the occurrence of <code>this</code> 
	 * and <code>trans</code>.  
	 * */
	public MMLDGlobalTransition merge(MMLDGlobalTransition trans);
	
	/**
	 * Returns a state modification corresponding to the occurrence 
	 * of this global transition in the specified state.  
	 * 
	 * @param s the state where the transition takes place.  
	 * @return the effect of this transition on the state of the system.  
	 * */
	public StateModification getModification(State s);
	
	// TODO: boolean isConsistent()
}
